/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"encoding/json"
)

// checks if the Relocate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Relocate{}

// Relocate struct for Relocate
type Relocate struct {
	Completions []RelocateCompletion `json:"completions,omitempty"`
	// The user UUID of the relocate initiator
	Initiator *string `json:"initiator,omitempty"`
	// Call ID of the relocate initiator
	InitiatorCall *string `json:"initiator_call,omitempty"`
	// Call ID of the recipient of the relocate.
	RecipientCall *string `json:"recipient_call,omitempty"`
	// Call ID of the call being relocated to someone else
	RelocatedCall *string `json:"relocated_call,omitempty"`
	// Unique identifier of the relocate
	Uuid *string `json:"uuid,omitempty"`
}

// NewRelocate instantiates a new Relocate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelocate() *Relocate {
	this := Relocate{}
	return &this
}

// NewRelocateWithDefaults instantiates a new Relocate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelocateWithDefaults() *Relocate {
	this := Relocate{}
	return &this
}

// GetCompletions returns the Completions field value if set, zero value otherwise.
func (o *Relocate) GetCompletions() []RelocateCompletion {
	if o == nil || IsNil(o.Completions) {
		var ret []RelocateCompletion
		return ret
	}
	return o.Completions
}

// GetCompletionsOk returns a tuple with the Completions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relocate) GetCompletionsOk() ([]RelocateCompletion, bool) {
	if o == nil || IsNil(o.Completions) {
		return nil, false
	}
	return o.Completions, true
}

// HasCompletions returns a boolean if a field has been set.
func (o *Relocate) HasCompletions() bool {
	if o != nil && !IsNil(o.Completions) {
		return true
	}

	return false
}

// SetCompletions gets a reference to the given []RelocateCompletion and assigns it to the Completions field.
func (o *Relocate) SetCompletions(v []RelocateCompletion) {
	o.Completions = v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *Relocate) GetInitiator() string {
	if o == nil || IsNil(o.Initiator) {
		var ret string
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relocate) GetInitiatorOk() (*string, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *Relocate) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given string and assigns it to the Initiator field.
func (o *Relocate) SetInitiator(v string) {
	o.Initiator = &v
}

// GetInitiatorCall returns the InitiatorCall field value if set, zero value otherwise.
func (o *Relocate) GetInitiatorCall() string {
	if o == nil || IsNil(o.InitiatorCall) {
		var ret string
		return ret
	}
	return *o.InitiatorCall
}

// GetInitiatorCallOk returns a tuple with the InitiatorCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relocate) GetInitiatorCallOk() (*string, bool) {
	if o == nil || IsNil(o.InitiatorCall) {
		return nil, false
	}
	return o.InitiatorCall, true
}

// HasInitiatorCall returns a boolean if a field has been set.
func (o *Relocate) HasInitiatorCall() bool {
	if o != nil && !IsNil(o.InitiatorCall) {
		return true
	}

	return false
}

// SetInitiatorCall gets a reference to the given string and assigns it to the InitiatorCall field.
func (o *Relocate) SetInitiatorCall(v string) {
	o.InitiatorCall = &v
}

// GetRecipientCall returns the RecipientCall field value if set, zero value otherwise.
func (o *Relocate) GetRecipientCall() string {
	if o == nil || IsNil(o.RecipientCall) {
		var ret string
		return ret
	}
	return *o.RecipientCall
}

// GetRecipientCallOk returns a tuple with the RecipientCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relocate) GetRecipientCallOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientCall) {
		return nil, false
	}
	return o.RecipientCall, true
}

// HasRecipientCall returns a boolean if a field has been set.
func (o *Relocate) HasRecipientCall() bool {
	if o != nil && !IsNil(o.RecipientCall) {
		return true
	}

	return false
}

// SetRecipientCall gets a reference to the given string and assigns it to the RecipientCall field.
func (o *Relocate) SetRecipientCall(v string) {
	o.RecipientCall = &v
}

// GetRelocatedCall returns the RelocatedCall field value if set, zero value otherwise.
func (o *Relocate) GetRelocatedCall() string {
	if o == nil || IsNil(o.RelocatedCall) {
		var ret string
		return ret
	}
	return *o.RelocatedCall
}

// GetRelocatedCallOk returns a tuple with the RelocatedCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relocate) GetRelocatedCallOk() (*string, bool) {
	if o == nil || IsNil(o.RelocatedCall) {
		return nil, false
	}
	return o.RelocatedCall, true
}

// HasRelocatedCall returns a boolean if a field has been set.
func (o *Relocate) HasRelocatedCall() bool {
	if o != nil && !IsNil(o.RelocatedCall) {
		return true
	}

	return false
}

// SetRelocatedCall gets a reference to the given string and assigns it to the RelocatedCall field.
func (o *Relocate) SetRelocatedCall(v string) {
	o.RelocatedCall = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Relocate) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relocate) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Relocate) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Relocate) SetUuid(v string) {
	o.Uuid = &v
}

func (o Relocate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Relocate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Completions) {
		toSerialize["completions"] = o.Completions
	}
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	if !IsNil(o.InitiatorCall) {
		toSerialize["initiator_call"] = o.InitiatorCall
	}
	if !IsNil(o.RecipientCall) {
		toSerialize["recipient_call"] = o.RecipientCall
	}
	if !IsNil(o.RelocatedCall) {
		toSerialize["relocated_call"] = o.RelocatedCall
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableRelocate struct {
	value *Relocate
	isSet bool
}

func (v NullableRelocate) Get() *Relocate {
	return v.value
}

func (v *NullableRelocate) Set(val *Relocate) {
	v.value = val
	v.isSet = true
}

func (v NullableRelocate) IsSet() bool {
	return v.isSet
}

func (v *NullableRelocate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelocate(val *Relocate) *NullableRelocate {
	return &NullableRelocate{value: val, isSet: true}
}

func (v NullableRelocate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelocate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
