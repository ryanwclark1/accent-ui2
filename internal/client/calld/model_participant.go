/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"encoding/json"
)

// checks if the Participant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Participant{}

// Participant struct for Participant
type Participant struct {
	// Is the participant an admin of the conference?
	Admin *bool `json:"admin,omitempty"`
	// The ID of the participant's call
	CallId *string `json:"call_id,omitempty"`
	// The participant's name
	CallerIdName *string `json:"caller_id_name,omitempty"`
	// The participant's number
	CallerIdNum *string `json:"caller_id_num,omitempty"`
	// The participant's ID
	Id *string `json:"id,omitempty"`
	// Elapsed seconds since the participant joined the conference
	JoinTime *int32 `json:"join_time,omitempty"`
	// The participant's language
	Language *string `json:"language,omitempty"`
	// Is the participant muted?
	Muted *bool `json:"muted,omitempty"`
	// The UUID of the participant's user. `null` when there is no user.
	UserUuid *string `json:"user_uuid,omitempty"`
}

// NewParticipant instantiates a new Participant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParticipant() *Participant {
	this := Participant{}
	return &this
}

// NewParticipantWithDefaults instantiates a new Participant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParticipantWithDefaults() *Participant {
	this := Participant{}
	return &this
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *Participant) GetAdmin() bool {
	if o == nil || IsNil(o.Admin) {
		var ret bool
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *Participant) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given bool and assigns it to the Admin field.
func (o *Participant) SetAdmin(v bool) {
	o.Admin = &v
}

// GetCallId returns the CallId field value if set, zero value otherwise.
func (o *Participant) GetCallId() string {
	if o == nil || IsNil(o.CallId) {
		var ret string
		return ret
	}
	return *o.CallId
}

// GetCallIdOk returns a tuple with the CallId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetCallIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallId) {
		return nil, false
	}
	return o.CallId, true
}

// HasCallId returns a boolean if a field has been set.
func (o *Participant) HasCallId() bool {
	if o != nil && !IsNil(o.CallId) {
		return true
	}

	return false
}

// SetCallId gets a reference to the given string and assigns it to the CallId field.
func (o *Participant) SetCallId(v string) {
	o.CallId = &v
}

// GetCallerIdName returns the CallerIdName field value if set, zero value otherwise.
func (o *Participant) GetCallerIdName() string {
	if o == nil || IsNil(o.CallerIdName) {
		var ret string
		return ret
	}
	return *o.CallerIdName
}

// GetCallerIdNameOk returns a tuple with the CallerIdName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetCallerIdNameOk() (*string, bool) {
	if o == nil || IsNil(o.CallerIdName) {
		return nil, false
	}
	return o.CallerIdName, true
}

// HasCallerIdName returns a boolean if a field has been set.
func (o *Participant) HasCallerIdName() bool {
	if o != nil && !IsNil(o.CallerIdName) {
		return true
	}

	return false
}

// SetCallerIdName gets a reference to the given string and assigns it to the CallerIdName field.
func (o *Participant) SetCallerIdName(v string) {
	o.CallerIdName = &v
}

// GetCallerIdNum returns the CallerIdNum field value if set, zero value otherwise.
func (o *Participant) GetCallerIdNum() string {
	if o == nil || IsNil(o.CallerIdNum) {
		var ret string
		return ret
	}
	return *o.CallerIdNum
}

// GetCallerIdNumOk returns a tuple with the CallerIdNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetCallerIdNumOk() (*string, bool) {
	if o == nil || IsNil(o.CallerIdNum) {
		return nil, false
	}
	return o.CallerIdNum, true
}

// HasCallerIdNum returns a boolean if a field has been set.
func (o *Participant) HasCallerIdNum() bool {
	if o != nil && !IsNil(o.CallerIdNum) {
		return true
	}

	return false
}

// SetCallerIdNum gets a reference to the given string and assigns it to the CallerIdNum field.
func (o *Participant) SetCallerIdNum(v string) {
	o.CallerIdNum = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Participant) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Participant) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Participant) SetId(v string) {
	o.Id = &v
}

// GetJoinTime returns the JoinTime field value if set, zero value otherwise.
func (o *Participant) GetJoinTime() int32 {
	if o == nil || IsNil(o.JoinTime) {
		var ret int32
		return ret
	}
	return *o.JoinTime
}

// GetJoinTimeOk returns a tuple with the JoinTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetJoinTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.JoinTime) {
		return nil, false
	}
	return o.JoinTime, true
}

// HasJoinTime returns a boolean if a field has been set.
func (o *Participant) HasJoinTime() bool {
	if o != nil && !IsNil(o.JoinTime) {
		return true
	}

	return false
}

// SetJoinTime gets a reference to the given int32 and assigns it to the JoinTime field.
func (o *Participant) SetJoinTime(v int32) {
	o.JoinTime = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Participant) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Participant) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Participant) SetLanguage(v string) {
	o.Language = &v
}

// GetMuted returns the Muted field value if set, zero value otherwise.
func (o *Participant) GetMuted() bool {
	if o == nil || IsNil(o.Muted) {
		var ret bool
		return ret
	}
	return *o.Muted
}

// GetMutedOk returns a tuple with the Muted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetMutedOk() (*bool, bool) {
	if o == nil || IsNil(o.Muted) {
		return nil, false
	}
	return o.Muted, true
}

// HasMuted returns a boolean if a field has been set.
func (o *Participant) HasMuted() bool {
	if o != nil && !IsNil(o.Muted) {
		return true
	}

	return false
}

// SetMuted gets a reference to the given bool and assigns it to the Muted field.
func (o *Participant) SetMuted(v bool) {
	o.Muted = &v
}

// GetUserUuid returns the UserUuid field value if set, zero value otherwise.
func (o *Participant) GetUserUuid() string {
	if o == nil || IsNil(o.UserUuid) {
		var ret string
		return ret
	}
	return *o.UserUuid
}

// GetUserUuidOk returns a tuple with the UserUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetUserUuidOk() (*string, bool) {
	if o == nil || IsNil(o.UserUuid) {
		return nil, false
	}
	return o.UserUuid, true
}

// HasUserUuid returns a boolean if a field has been set.
func (o *Participant) HasUserUuid() bool {
	if o != nil && !IsNil(o.UserUuid) {
		return true
	}

	return false
}

// SetUserUuid gets a reference to the given string and assigns it to the UserUuid field.
func (o *Participant) SetUserUuid(v string) {
	o.UserUuid = &v
}

func (o Participant) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Participant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	if !IsNil(o.CallId) {
		toSerialize["call_id"] = o.CallId
	}
	if !IsNil(o.CallerIdName) {
		toSerialize["caller_id_name"] = o.CallerIdName
	}
	if !IsNil(o.CallerIdNum) {
		toSerialize["caller_id_num"] = o.CallerIdNum
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.JoinTime) {
		toSerialize["join_time"] = o.JoinTime
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Muted) {
		toSerialize["muted"] = o.Muted
	}
	if !IsNil(o.UserUuid) {
		toSerialize["user_uuid"] = o.UserUuid
	}
	return toSerialize, nil
}

type NullableParticipant struct {
	value *Participant
	isSet bool
}

func (v NullableParticipant) Get() *Participant {
	return v.value
}

func (v *NullableParticipant) Set(val *Participant) {
	v.value = val
	v.isSet = true
}

func (v NullableParticipant) IsSet() bool {
	return v.isSet
}

func (v *NullableParticipant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticipant(val *Participant) *NullableParticipant {
	return &NullableParticipant{value: val, isSet: true}
}

func (v NullableParticipant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticipant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
