/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserTransferRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserTransferRequest{}

// UserTransferRequest struct for UserTransferRequest
type UserTransferRequest struct {
	// Extension of the recipient of the transfer
	Exten string        `json:"exten"`
	Flow  *TransferFlow `json:"flow,omitempty"`
	// Call ID of the transfer initiator. This call must be owned by the authenticated user.
	InitiatorCall string `json:"initiator_call"`
	// Maximum ringing time before cancelling the transfer (in seconds). Default (or null) is an unlimited ring time.
	Timeout *int32 `json:"timeout,omitempty"`
}

type _UserTransferRequest UserTransferRequest

// NewUserTransferRequest instantiates a new UserTransferRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserTransferRequest(exten string, initiatorCall string) *UserTransferRequest {
	this := UserTransferRequest{}
	this.Exten = exten
	var flow TransferFlow = TRANSFERFLOW_ATTENDED
	this.Flow = &flow
	this.InitiatorCall = initiatorCall
	return &this
}

// NewUserTransferRequestWithDefaults instantiates a new UserTransferRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserTransferRequestWithDefaults() *UserTransferRequest {
	this := UserTransferRequest{}
	var flow TransferFlow = TRANSFERFLOW_ATTENDED
	this.Flow = &flow
	return &this
}

// GetExten returns the Exten field value
func (o *UserTransferRequest) GetExten() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Exten
}

// GetExtenOk returns a tuple with the Exten field value
// and a boolean to check if the value has been set.
func (o *UserTransferRequest) GetExtenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exten, true
}

// SetExten sets field value
func (o *UserTransferRequest) SetExten(v string) {
	o.Exten = v
}

// GetFlow returns the Flow field value if set, zero value otherwise.
func (o *UserTransferRequest) GetFlow() TransferFlow {
	if o == nil || IsNil(o.Flow) {
		var ret TransferFlow
		return ret
	}
	return *o.Flow
}

// GetFlowOk returns a tuple with the Flow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTransferRequest) GetFlowOk() (*TransferFlow, bool) {
	if o == nil || IsNil(o.Flow) {
		return nil, false
	}
	return o.Flow, true
}

// HasFlow returns a boolean if a field has been set.
func (o *UserTransferRequest) HasFlow() bool {
	if o != nil && !IsNil(o.Flow) {
		return true
	}

	return false
}

// SetFlow gets a reference to the given TransferFlow and assigns it to the Flow field.
func (o *UserTransferRequest) SetFlow(v TransferFlow) {
	o.Flow = &v
}

// GetInitiatorCall returns the InitiatorCall field value
func (o *UserTransferRequest) GetInitiatorCall() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InitiatorCall
}

// GetInitiatorCallOk returns a tuple with the InitiatorCall field value
// and a boolean to check if the value has been set.
func (o *UserTransferRequest) GetInitiatorCallOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitiatorCall, true
}

// SetInitiatorCall sets field value
func (o *UserTransferRequest) SetInitiatorCall(v string) {
	o.InitiatorCall = v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *UserTransferRequest) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTransferRequest) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *UserTransferRequest) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *UserTransferRequest) SetTimeout(v int32) {
	o.Timeout = &v
}

func (o UserTransferRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserTransferRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["exten"] = o.Exten
	if !IsNil(o.Flow) {
		toSerialize["flow"] = o.Flow
	}
	toSerialize["initiator_call"] = o.InitiatorCall
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	return toSerialize, nil
}

func (o *UserTransferRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"exten",
		"initiator_call",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserTransferRequest := _UserTransferRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserTransferRequest)

	if err != nil {
		return err
	}

	*o = UserTransferRequest(varUserTransferRequest)

	return err
}

type NullableUserTransferRequest struct {
	value *UserTransferRequest
	isSet bool
}

func (v NullableUserTransferRequest) Get() *UserTransferRequest {
	return v.value
}

func (v *NullableUserTransferRequest) Set(val *UserTransferRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserTransferRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserTransferRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserTransferRequest(val *UserTransferRequest) *NullableUserTransferRequest {
	return &NullableUserTransferRequest{value: val, isSet: true}
}

func (v NullableUserTransferRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserTransferRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
