/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"encoding/json"
)

// checks if the TalkingTo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TalkingTo{}

// TalkingTo struct for TalkingTo
type TalkingTo struct {
	ChannelId *string `json:"{channel_id},omitempty"`
}

// NewTalkingTo instantiates a new TalkingTo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTalkingTo() *TalkingTo {
	this := TalkingTo{}
	return &this
}

// NewTalkingToWithDefaults instantiates a new TalkingTo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTalkingToWithDefaults() *TalkingTo {
	this := TalkingTo{}
	return &this
}

// GetChannelId returns the ChannelId field value if set, zero value otherwise.
func (o *TalkingTo) GetChannelId() string {
	if o == nil || IsNil(o.ChannelId) {
		var ret string
		return ret
	}
	return *o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TalkingTo) GetChannelIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChannelId) {
		return nil, false
	}
	return o.ChannelId, true
}

// HasChannelId returns a boolean if a field has been set.
func (o *TalkingTo) HasChannelId() bool {
	if o != nil && !IsNil(o.ChannelId) {
		return true
	}

	return false
}

// SetChannelId gets a reference to the given string and assigns it to the ChannelId field.
func (o *TalkingTo) SetChannelId(v string) {
	o.ChannelId = &v
}

func (o TalkingTo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TalkingTo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChannelId) {
		toSerialize["{channel_id}"] = o.ChannelId
	}
	return toSerialize, nil
}

type NullableTalkingTo struct {
	value *TalkingTo
	isSet bool
}

func (v NullableTalkingTo) Get() *TalkingTo {
	return v.value
}

func (v *NullableTalkingTo) Set(val *TalkingTo) {
	v.value = val
	v.isSet = true
}

func (v NullableTalkingTo) IsSet() bool {
	return v.isSet
}

func (v *NullableTalkingTo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTalkingTo(val *TalkingTo) *NullableTalkingTo {
	return &NullableTalkingTo{value: val, isSet: true}
}

func (v NullableTalkingTo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTalkingTo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
