/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"encoding/json"
)

// checks if the ApplicationNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationNode{}

// ApplicationNode struct for ApplicationNode
type ApplicationNode struct {
	Calls []ApplicationCall `json:"calls,omitempty"`
	Uuid  *string           `json:"uuid,omitempty"`
}

// NewApplicationNode instantiates a new ApplicationNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationNode() *ApplicationNode {
	this := ApplicationNode{}
	return &this
}

// NewApplicationNodeWithDefaults instantiates a new ApplicationNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationNodeWithDefaults() *ApplicationNode {
	this := ApplicationNode{}
	return &this
}

// GetCalls returns the Calls field value if set, zero value otherwise.
func (o *ApplicationNode) GetCalls() []ApplicationCall {
	if o == nil || IsNil(o.Calls) {
		var ret []ApplicationCall
		return ret
	}
	return o.Calls
}

// GetCallsOk returns a tuple with the Calls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationNode) GetCallsOk() ([]ApplicationCall, bool) {
	if o == nil || IsNil(o.Calls) {
		return nil, false
	}
	return o.Calls, true
}

// HasCalls returns a boolean if a field has been set.
func (o *ApplicationNode) HasCalls() bool {
	if o != nil && !IsNil(o.Calls) {
		return true
	}

	return false
}

// SetCalls gets a reference to the given []ApplicationCall and assigns it to the Calls field.
func (o *ApplicationNode) SetCalls(v []ApplicationCall) {
	o.Calls = v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ApplicationNode) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationNode) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ApplicationNode) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ApplicationNode) SetUuid(v string) {
	o.Uuid = &v
}

func (o ApplicationNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Calls) {
		toSerialize["calls"] = o.Calls
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableApplicationNode struct {
	value *ApplicationNode
	isSet bool
}

func (v NullableApplicationNode) Get() *ApplicationNode {
	return v.value
}

func (v *NullableApplicationNode) Set(val *ApplicationNode) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationNode) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationNode(val *ApplicationNode) *NullableApplicationNode {
	return &NullableApplicationNode{value: val, isSet: true}
}

func (v NullableApplicationNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
