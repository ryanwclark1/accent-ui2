/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
)

type FaxesAPI interface {

	/*
		SendFax Send a fax

		**Required ACL:** `calld.faxes.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return FaxesAPISendFaxRequest
	*/
	SendFax(ctx context.Context) FaxesAPISendFaxRequest

	// SendFaxExecute executes the request
	//  @return Fax
	SendFaxExecute(r FaxesAPISendFaxRequest) (*Fax, *http.Response, error)

	/*
		SendUserFax Send a fax as the user detected from the token

		**Required ACL:** `calld.users.me.faxes.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return FaxesAPISendUserFaxRequest
	*/
	SendUserFax(ctx context.Context) FaxesAPISendUserFaxRequest

	// SendUserFaxExecute executes the request
	//  @return Fax
	SendUserFaxExecute(r FaxesAPISendUserFaxRequest) (*Fax, *http.Response, error)
}

// FaxesAPIService FaxesAPI service
type FaxesAPIService service

type FaxesAPISendFaxRequest struct {
	ctx          context.Context
	ApiService   FaxesAPI
	faxContent   *os.File
	context      *string
	extension    *string
	callerId     *string
	ivrExtension *string
	waitTime     *int32
}

// The fax file content, in PDF format
func (r FaxesAPISendFaxRequest) FaxContent(faxContent *os.File) FaxesAPISendFaxRequest {
	r.faxContent = faxContent
	return r
}

// Context of the recipient of the fax
func (r FaxesAPISendFaxRequest) Context(context string) FaxesAPISendFaxRequest {
	r.context = &context
	return r
}

// Extension of the recipient of the fax
func (r FaxesAPISendFaxRequest) Extension(extension string) FaxesAPISendFaxRequest {
	r.extension = &extension
	return r
}

// Caller ID that will be presented to the recipient of the fax. Example: \&quot;my-name &lt;+15551112222&gt;\&quot;
func (r FaxesAPISendFaxRequest) CallerId(callerId string) FaxesAPISendFaxRequest {
	r.callerId = &callerId
	return r
}

// Extension to compose before sending fax. Useful for fax in IVR
func (r FaxesAPISendFaxRequest) IvrExtension(ivrExtension string) FaxesAPISendFaxRequest {
	r.ivrExtension = &ivrExtension
	return r
}

// Time waiting before sending fax when destination has answered (in seconds)
func (r FaxesAPISendFaxRequest) WaitTime(waitTime int32) FaxesAPISendFaxRequest {
	r.waitTime = &waitTime
	return r
}

func (r FaxesAPISendFaxRequest) Execute() (*Fax, *http.Response, error) {
	return r.ApiService.SendFaxExecute(r)
}

/*
SendFax Send a fax

**Required ACL:** `calld.faxes.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FaxesAPISendFaxRequest
*/
func (a *FaxesAPIService) SendFax(ctx context.Context) FaxesAPISendFaxRequest {
	return FaxesAPISendFaxRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Fax
func (a *FaxesAPIService) SendFaxExecute(r FaxesAPISendFaxRequest) (*Fax, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Fax
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FaxesAPIService.SendFax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/faxes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.faxContent == nil {
		return localVarReturnValue, nil, reportError("faxContent is required and must be specified")
	}
	if r.context == nil {
		return localVarReturnValue, nil, reportError("context is required and must be specified")
	}
	if r.extension == nil {
		return localVarReturnValue, nil, reportError("extension is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "context", r.context, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "extension", r.extension, "")
	if r.callerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caller_id", r.callerId, "")
	} else {
		var defaultValue string = "Accent Fax"
		r.callerId = &defaultValue
	}
	if r.ivrExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ivr_extension", r.ivrExtension, "")
	}
	if r.waitTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_time", r.waitTime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/pdf"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.faxContent
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FaxesAPISendUserFaxRequest struct {
	ctx          context.Context
	ApiService   FaxesAPI
	faxContent   *os.File
	extension    *string
	callerId     *string
	ivrExtension *string
	waitTime     *int32
}

// The fax file content, in PDF format
func (r FaxesAPISendUserFaxRequest) FaxContent(faxContent *os.File) FaxesAPISendUserFaxRequest {
	r.faxContent = faxContent
	return r
}

// Extension of the recipient of the fax
func (r FaxesAPISendUserFaxRequest) Extension(extension string) FaxesAPISendUserFaxRequest {
	r.extension = &extension
	return r
}

// Caller ID that will be presented to the recipient of the fax. Example: \&quot;my-name &lt;+15551112222&gt;\&quot;
func (r FaxesAPISendUserFaxRequest) CallerId(callerId string) FaxesAPISendUserFaxRequest {
	r.callerId = &callerId
	return r
}

// Extension to compose before sending fax. Useful for fax in IVR
func (r FaxesAPISendUserFaxRequest) IvrExtension(ivrExtension string) FaxesAPISendUserFaxRequest {
	r.ivrExtension = &ivrExtension
	return r
}

// Time waiting before sending fax when destination has answered (in seconds)
func (r FaxesAPISendUserFaxRequest) WaitTime(waitTime int32) FaxesAPISendUserFaxRequest {
	r.waitTime = &waitTime
	return r
}

func (r FaxesAPISendUserFaxRequest) Execute() (*Fax, *http.Response, error) {
	return r.ApiService.SendUserFaxExecute(r)
}

/*
SendUserFax Send a fax as the user detected from the token

**Required ACL:** `calld.users.me.faxes.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FaxesAPISendUserFaxRequest
*/
func (a *FaxesAPIService) SendUserFax(ctx context.Context) FaxesAPISendUserFaxRequest {
	return FaxesAPISendUserFaxRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Fax
func (a *FaxesAPIService) SendUserFaxExecute(r FaxesAPISendUserFaxRequest) (*Fax, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Fax
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FaxesAPIService.SendUserFax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/me/faxes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.faxContent == nil {
		return localVarReturnValue, nil, reportError("faxContent is required and must be specified")
	}
	if r.extension == nil {
		return localVarReturnValue, nil, reportError("extension is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "extension", r.extension, "")
	if r.callerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caller_id", r.callerId, "")
	} else {
		var defaultValue string = "Accent Fax"
		r.callerId = &defaultValue
	}
	if r.ivrExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ivr_extension", r.ivrExtension, "")
	}
	if r.waitTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_time", r.waitTime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/pdf"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.faxContent
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
