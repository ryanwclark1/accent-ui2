/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"encoding/json"
	"fmt"
)

// RelocateCompletion the model 'RelocateCompletion'
type RelocateCompletion string

// List of RelocateCompletion
const (
	RELOCATECOMPLETION_ANSWER RelocateCompletion = "answer"
	RELOCATECOMPLETION_API    RelocateCompletion = "api"
)

// All allowed values of RelocateCompletion enum
var AllowedRelocateCompletionEnumValues = []RelocateCompletion{
	"answer",
	"api",
}

func (v *RelocateCompletion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RelocateCompletion(value)
	for _, existing := range AllowedRelocateCompletionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RelocateCompletion", value)
}

// NewRelocateCompletionFromValue returns a pointer to a valid RelocateCompletion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRelocateCompletionFromValue(v string) (*RelocateCompletion, error) {
	ev := RelocateCompletion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RelocateCompletion: valid values are %v", v, AllowedRelocateCompletionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RelocateCompletion) IsValid() bool {
	for _, existing := range AllowedRelocateCompletionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RelocateCompletion value
func (v RelocateCompletion) Ptr() *RelocateCompletion {
	return &v
}

type NullableRelocateCompletion struct {
	value *RelocateCompletion
	isSet bool
}

func (v NullableRelocateCompletion) Get() *RelocateCompletion {
	return v.value
}

func (v *NullableRelocateCompletion) Set(val *RelocateCompletion) {
	v.value = val
	v.isSet = true
}

func (v NullableRelocateCompletion) IsSet() bool {
	return v.isSet
}

func (v *NullableRelocateCompletion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelocateCompletion(val *RelocateCompletion) *NullableRelocateCompletion {
	return &NullableRelocateCompletion{value: val, isSet: true}
}

func (v NullableRelocateCompletion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelocateCompletion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
