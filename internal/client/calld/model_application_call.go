/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"encoding/json"
)

// checks if the ApplicationCall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationCall{}

// ApplicationCall struct for ApplicationCall
type ApplicationCall struct {
	CallerIdName    *string                `json:"caller_id_name,omitempty"`
	CallerIdNumber  *string                `json:"caller_id_number,omitempty"`
	CreationTime    *string                `json:"creation_time,omitempty"`
	DialedExtension *string                `json:"dialed_extension,omitempty"`
	Id              *string                `json:"id,omitempty"`
	IsCaller        *bool                  `json:"is_caller,omitempty"`
	NodeUuid        *string                `json:"node_uuid,omitempty"`
	OnHold          *bool                  `json:"on_hold,omitempty"`
	Snoops          map[string]interface{} `json:"snoops,omitempty"`
	// * Down: the call is not connected to anything yet * Ring: the call just came in the application * Progress: the call is playing a progress ringing tone * Up: the call is answered and media can be sent/received * Ringing: the call is ringing the phone
	Status    *string                `json:"status,omitempty"`
	Variables map[string]interface{} `json:"variables,omitempty"`
}

// NewApplicationCall instantiates a new ApplicationCall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationCall() *ApplicationCall {
	this := ApplicationCall{}
	return &this
}

// NewApplicationCallWithDefaults instantiates a new ApplicationCall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationCallWithDefaults() *ApplicationCall {
	this := ApplicationCall{}
	return &this
}

// GetCallerIdName returns the CallerIdName field value if set, zero value otherwise.
func (o *ApplicationCall) GetCallerIdName() string {
	if o == nil || IsNil(o.CallerIdName) {
		var ret string
		return ret
	}
	return *o.CallerIdName
}

// GetCallerIdNameOk returns a tuple with the CallerIdName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationCall) GetCallerIdNameOk() (*string, bool) {
	if o == nil || IsNil(o.CallerIdName) {
		return nil, false
	}
	return o.CallerIdName, true
}

// HasCallerIdName returns a boolean if a field has been set.
func (o *ApplicationCall) HasCallerIdName() bool {
	if o != nil && !IsNil(o.CallerIdName) {
		return true
	}

	return false
}

// SetCallerIdName gets a reference to the given string and assigns it to the CallerIdName field.
func (o *ApplicationCall) SetCallerIdName(v string) {
	o.CallerIdName = &v
}

// GetCallerIdNumber returns the CallerIdNumber field value if set, zero value otherwise.
func (o *ApplicationCall) GetCallerIdNumber() string {
	if o == nil || IsNil(o.CallerIdNumber) {
		var ret string
		return ret
	}
	return *o.CallerIdNumber
}

// GetCallerIdNumberOk returns a tuple with the CallerIdNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationCall) GetCallerIdNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CallerIdNumber) {
		return nil, false
	}
	return o.CallerIdNumber, true
}

// HasCallerIdNumber returns a boolean if a field has been set.
func (o *ApplicationCall) HasCallerIdNumber() bool {
	if o != nil && !IsNil(o.CallerIdNumber) {
		return true
	}

	return false
}

// SetCallerIdNumber gets a reference to the given string and assigns it to the CallerIdNumber field.
func (o *ApplicationCall) SetCallerIdNumber(v string) {
	o.CallerIdNumber = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *ApplicationCall) GetCreationTime() string {
	if o == nil || IsNil(o.CreationTime) {
		var ret string
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationCall) GetCreationTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *ApplicationCall) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given string and assigns it to the CreationTime field.
func (o *ApplicationCall) SetCreationTime(v string) {
	o.CreationTime = &v
}

// GetDialedExtension returns the DialedExtension field value if set, zero value otherwise.
func (o *ApplicationCall) GetDialedExtension() string {
	if o == nil || IsNil(o.DialedExtension) {
		var ret string
		return ret
	}
	return *o.DialedExtension
}

// GetDialedExtensionOk returns a tuple with the DialedExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationCall) GetDialedExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.DialedExtension) {
		return nil, false
	}
	return o.DialedExtension, true
}

// HasDialedExtension returns a boolean if a field has been set.
func (o *ApplicationCall) HasDialedExtension() bool {
	if o != nil && !IsNil(o.DialedExtension) {
		return true
	}

	return false
}

// SetDialedExtension gets a reference to the given string and assigns it to the DialedExtension field.
func (o *ApplicationCall) SetDialedExtension(v string) {
	o.DialedExtension = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApplicationCall) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationCall) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApplicationCall) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApplicationCall) SetId(v string) {
	o.Id = &v
}

// GetIsCaller returns the IsCaller field value if set, zero value otherwise.
func (o *ApplicationCall) GetIsCaller() bool {
	if o == nil || IsNil(o.IsCaller) {
		var ret bool
		return ret
	}
	return *o.IsCaller
}

// GetIsCallerOk returns a tuple with the IsCaller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationCall) GetIsCallerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCaller) {
		return nil, false
	}
	return o.IsCaller, true
}

// HasIsCaller returns a boolean if a field has been set.
func (o *ApplicationCall) HasIsCaller() bool {
	if o != nil && !IsNil(o.IsCaller) {
		return true
	}

	return false
}

// SetIsCaller gets a reference to the given bool and assigns it to the IsCaller field.
func (o *ApplicationCall) SetIsCaller(v bool) {
	o.IsCaller = &v
}

// GetNodeUuid returns the NodeUuid field value if set, zero value otherwise.
func (o *ApplicationCall) GetNodeUuid() string {
	if o == nil || IsNil(o.NodeUuid) {
		var ret string
		return ret
	}
	return *o.NodeUuid
}

// GetNodeUuidOk returns a tuple with the NodeUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationCall) GetNodeUuidOk() (*string, bool) {
	if o == nil || IsNil(o.NodeUuid) {
		return nil, false
	}
	return o.NodeUuid, true
}

// HasNodeUuid returns a boolean if a field has been set.
func (o *ApplicationCall) HasNodeUuid() bool {
	if o != nil && !IsNil(o.NodeUuid) {
		return true
	}

	return false
}

// SetNodeUuid gets a reference to the given string and assigns it to the NodeUuid field.
func (o *ApplicationCall) SetNodeUuid(v string) {
	o.NodeUuid = &v
}

// GetOnHold returns the OnHold field value if set, zero value otherwise.
func (o *ApplicationCall) GetOnHold() bool {
	if o == nil || IsNil(o.OnHold) {
		var ret bool
		return ret
	}
	return *o.OnHold
}

// GetOnHoldOk returns a tuple with the OnHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationCall) GetOnHoldOk() (*bool, bool) {
	if o == nil || IsNil(o.OnHold) {
		return nil, false
	}
	return o.OnHold, true
}

// HasOnHold returns a boolean if a field has been set.
func (o *ApplicationCall) HasOnHold() bool {
	if o != nil && !IsNil(o.OnHold) {
		return true
	}

	return false
}

// SetOnHold gets a reference to the given bool and assigns it to the OnHold field.
func (o *ApplicationCall) SetOnHold(v bool) {
	o.OnHold = &v
}

// GetSnoops returns the Snoops field value if set, zero value otherwise.
func (o *ApplicationCall) GetSnoops() map[string]interface{} {
	if o == nil || IsNil(o.Snoops) {
		var ret map[string]interface{}
		return ret
	}
	return o.Snoops
}

// GetSnoopsOk returns a tuple with the Snoops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationCall) GetSnoopsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Snoops) {
		return map[string]interface{}{}, false
	}
	return o.Snoops, true
}

// HasSnoops returns a boolean if a field has been set.
func (o *ApplicationCall) HasSnoops() bool {
	if o != nil && !IsNil(o.Snoops) {
		return true
	}

	return false
}

// SetSnoops gets a reference to the given map[string]interface{} and assigns it to the Snoops field.
func (o *ApplicationCall) SetSnoops(v map[string]interface{}) {
	o.Snoops = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApplicationCall) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationCall) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApplicationCall) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ApplicationCall) SetStatus(v string) {
	o.Status = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *ApplicationCall) GetVariables() map[string]interface{} {
	if o == nil || IsNil(o.Variables) {
		var ret map[string]interface{}
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationCall) GetVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Variables) {
		return map[string]interface{}{}, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *ApplicationCall) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]interface{} and assigns it to the Variables field.
func (o *ApplicationCall) SetVariables(v map[string]interface{}) {
	o.Variables = v
}

func (o ApplicationCall) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationCall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallerIdName) {
		toSerialize["caller_id_name"] = o.CallerIdName
	}
	if !IsNil(o.CallerIdNumber) {
		toSerialize["caller_id_number"] = o.CallerIdNumber
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creation_time"] = o.CreationTime
	}
	if !IsNil(o.DialedExtension) {
		toSerialize["dialed_extension"] = o.DialedExtension
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsCaller) {
		toSerialize["is_caller"] = o.IsCaller
	}
	if !IsNil(o.NodeUuid) {
		toSerialize["node_uuid"] = o.NodeUuid
	}
	if !IsNil(o.OnHold) {
		toSerialize["on_hold"] = o.OnHold
	}
	if !IsNil(o.Snoops) {
		toSerialize["snoops"] = o.Snoops
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	return toSerialize, nil
}

type NullableApplicationCall struct {
	value *ApplicationCall
	isSet bool
}

func (v NullableApplicationCall) Get() *ApplicationCall {
	return v.value
}

func (v *NullableApplicationCall) Set(val *ApplicationCall) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationCall) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationCall(val *ApplicationCall) *NullableApplicationCall {
	return &NullableApplicationCall{value: val, isSet: true}
}

func (v NullableApplicationCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
