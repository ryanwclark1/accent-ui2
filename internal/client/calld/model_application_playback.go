/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"encoding/json"
)

// checks if the ApplicationPlayback type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationPlayback{}

// ApplicationPlayback struct for ApplicationPlayback
type ApplicationPlayback struct {
	Language *string `json:"language,omitempty"`
	Uri      *string `json:"uri,omitempty"`
	Uuid     *string `json:"uuid,omitempty"`
}

// NewApplicationPlayback instantiates a new ApplicationPlayback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationPlayback() *ApplicationPlayback {
	this := ApplicationPlayback{}
	return &this
}

// NewApplicationPlaybackWithDefaults instantiates a new ApplicationPlayback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationPlaybackWithDefaults() *ApplicationPlayback {
	this := ApplicationPlayback{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ApplicationPlayback) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPlayback) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ApplicationPlayback) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ApplicationPlayback) SetLanguage(v string) {
	o.Language = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ApplicationPlayback) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPlayback) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ApplicationPlayback) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *ApplicationPlayback) SetUri(v string) {
	o.Uri = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ApplicationPlayback) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPlayback) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ApplicationPlayback) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ApplicationPlayback) SetUuid(v string) {
	o.Uuid = &v
}

func (o ApplicationPlayback) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationPlayback) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableApplicationPlayback struct {
	value *ApplicationPlayback
	isSet bool
}

func (v NullableApplicationPlayback) Get() *ApplicationPlayback {
	return v.value
}

func (v *NullableApplicationPlayback) Set(val *ApplicationPlayback) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationPlayback) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationPlayback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationPlayback(val *ApplicationPlayback) *NullableApplicationPlayback {
	return &NullableApplicationPlayback{value: val, isSet: true}
}

func (v NullableApplicationPlayback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationPlayback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
