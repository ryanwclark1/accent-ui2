/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"encoding/json"
)

// checks if the VoicemailFolderBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VoicemailFolderBase{}

// VoicemailFolderBase struct for VoicemailFolderBase
type VoicemailFolderBase struct {
	// The folder's ID
	Id *int32 `json:"id,omitempty"`
	// The folder's name
	Name *string `json:"name,omitempty"`
	// The folder's type. When a message if left on a voicemail, it is stored in the folder of type \"new\", unless if it is an urgent message, in which case it is left in the folder of type \"urgent\". When that messages is read, it is moved into the folder of type \"old\". All other folders used the type \"other\".
	Type *string `json:"type,omitempty"`
}

// NewVoicemailFolderBase instantiates a new VoicemailFolderBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVoicemailFolderBase() *VoicemailFolderBase {
	this := VoicemailFolderBase{}
	return &this
}

// NewVoicemailFolderBaseWithDefaults instantiates a new VoicemailFolderBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoicemailFolderBaseWithDefaults() *VoicemailFolderBase {
	this := VoicemailFolderBase{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VoicemailFolderBase) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoicemailFolderBase) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VoicemailFolderBase) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *VoicemailFolderBase) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VoicemailFolderBase) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoicemailFolderBase) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VoicemailFolderBase) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VoicemailFolderBase) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VoicemailFolderBase) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoicemailFolderBase) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VoicemailFolderBase) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VoicemailFolderBase) SetType(v string) {
	o.Type = &v
}

func (o VoicemailFolderBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VoicemailFolderBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableVoicemailFolderBase struct {
	value *VoicemailFolderBase
	isSet bool
}

func (v NullableVoicemailFolderBase) Get() *VoicemailFolderBase {
	return v.value
}

func (v *NullableVoicemailFolderBase) Set(val *VoicemailFolderBase) {
	v.value = val
	v.isSet = true
}

func (v NullableVoicemailFolderBase) IsSet() bool {
	return v.isSet
}

func (v *NullableVoicemailFolderBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoicemailFolderBase(val *VoicemailFolderBase) *NullableVoicemailFolderBase {
	return &NullableVoicemailFolderBase{value: val, isSet: true}
}

func (v NullableVoicemailFolderBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoicemailFolderBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
