/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"encoding/json"
	"fmt"
)

// TransferFlow Behavior of the transfer. `attended` allows the initiator to talk to the recipient. `blind` does not.
type TransferFlow string

// List of TransferFlow
const (
	TRANSFERFLOW_ATTENDED TransferFlow = "attended"
	TRANSFERFLOW_BLIND    TransferFlow = "blind"
)

// All allowed values of TransferFlow enum
var AllowedTransferFlowEnumValues = []TransferFlow{
	"attended",
	"blind",
}

func (v *TransferFlow) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransferFlow(value)
	for _, existing := range AllowedTransferFlowEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransferFlow", value)
}

// NewTransferFlowFromValue returns a pointer to a valid TransferFlow
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransferFlowFromValue(v string) (*TransferFlow, error) {
	ev := TransferFlow(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransferFlow: valid values are %v", v, AllowedTransferFlowEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransferFlow) IsValid() bool {
	for _, existing := range AllowedTransferFlowEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransferFlow value
func (v TransferFlow) Ptr() *TransferFlow {
	return &v
}

type NullableTransferFlow struct {
	value *TransferFlow
	isSet bool
}

func (v NullableTransferFlow) Get() *TransferFlow {
	return v.value
}

func (v *NullableTransferFlow) Set(val *TransferFlow) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferFlow) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferFlow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferFlow(val *TransferFlow) *NullableTransferFlow {
	return &NullableTransferFlow{value: val, isSet: true}
}

func (v NullableTransferFlow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferFlow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
