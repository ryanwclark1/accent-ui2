/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"encoding/json"
)

// checks if the CallID type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallID{}

// CallID struct for CallID
type CallID struct {
	CallId *string `json:"call_id,omitempty"`
}

// NewCallID instantiates a new CallID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallID() *CallID {
	this := CallID{}
	return &this
}

// NewCallIDWithDefaults instantiates a new CallID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallIDWithDefaults() *CallID {
	this := CallID{}
	return &this
}

// GetCallId returns the CallId field value if set, zero value otherwise.
func (o *CallID) GetCallId() string {
	if o == nil || IsNil(o.CallId) {
		var ret string
		return ret
	}
	return *o.CallId
}

// GetCallIdOk returns a tuple with the CallId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallID) GetCallIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallId) {
		return nil, false
	}
	return o.CallId, true
}

// HasCallId returns a boolean if a field has been set.
func (o *CallID) HasCallId() bool {
	if o != nil && !IsNil(o.CallId) {
		return true
	}

	return false
}

// SetCallId gets a reference to the given string and assigns it to the CallId field.
func (o *CallID) SetCallId(v string) {
	o.CallId = &v
}

func (o CallID) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallID) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallId) {
		toSerialize["call_id"] = o.CallId
	}
	return toSerialize, nil
}

type NullableCallID struct {
	value *CallID
	isSet bool
}

func (v NullableCallID) Get() *CallID {
	return v.value
}

func (v *NullableCallID) Set(val *CallID) {
	v.value = val
	v.isSet = true
}

func (v NullableCallID) IsSet() bool {
	return v.isSet
}

func (v *NullableCallID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallID(val *CallID) *NullableCallID {
	return &NullableCallID{value: val, isSet: true}
}

func (v NullableCallID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
