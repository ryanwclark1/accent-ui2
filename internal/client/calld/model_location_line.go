/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LocationLine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationLine{}

// LocationLine struct for LocationLine
type LocationLine struct {
	// the SIP contact to use when multiple registers are used
	Contact *string `json:"contact,omitempty"`
	// the ID of the line where the relocated call should be connected
	LineId int32 `json:"line_id"`
}

type _LocationLine LocationLine

// NewLocationLine instantiates a new LocationLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationLine(lineId int32) *LocationLine {
	this := LocationLine{}
	this.LineId = lineId
	return &this
}

// NewLocationLineWithDefaults instantiates a new LocationLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationLineWithDefaults() *LocationLine {
	this := LocationLine{}
	return &this
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *LocationLine) GetContact() string {
	if o == nil || IsNil(o.Contact) {
		var ret string
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationLine) GetContactOk() (*string, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *LocationLine) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given string and assigns it to the Contact field.
func (o *LocationLine) SetContact(v string) {
	o.Contact = &v
}

// GetLineId returns the LineId field value
func (o *LocationLine) GetLineId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LineId
}

// GetLineIdOk returns a tuple with the LineId field value
// and a boolean to check if the value has been set.
func (o *LocationLine) GetLineIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LineId, true
}

// SetLineId sets field value
func (o *LocationLine) SetLineId(v int32) {
	o.LineId = v
}

func (o LocationLine) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationLine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	toSerialize["line_id"] = o.LineId
	return toSerialize, nil
}

func (o *LocationLine) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"line_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocationLine := _LocationLine{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLocationLine)

	if err != nil {
		return err
	}

	*o = LocationLine(varLocationLine)

	return err
}

type NullableLocationLine struct {
	value *LocationLine
	isSet bool
}

func (v NullableLocationLine) Get() *LocationLine {
	return v.value
}

func (v *NullableLocationLine) Set(val *LocationLine) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationLine) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationLine(val *LocationLine) *NullableLocationLine {
	return &NullableLocationLine{value: val, isSet: true}
}

func (v NullableLocationLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
