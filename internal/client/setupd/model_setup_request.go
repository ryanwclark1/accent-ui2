/*
accent-setupd

Initialize Accent Engine from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package setupd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SetupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetupRequest{}

// SetupRequest struct for SetupRequest
type SetupRequest struct {
	// The UUID identifying this instance on Nestbox. The engine_instance_uuid should only be specified if the instance has already been registered on the specified Nestbox. Omitting this field for an instance that is already registered will create a duplicate entry on the Nestbox.
	EngineInstanceUuid *string `json:"engine_instance_uuid,omitempty"`
	// IP address of the engine
	EngineInternalAddress *string `json:"engine_internal_address,omitempty"`
	// The interface language for the Accent Engine (either `en_US` or `fr_FR`)
	EngineLanguage string `json:"engine_language"`
	// Whether the GNU GPLv3 license is accepted
	EngineLicense bool `json:"engine_license"`
	// Password of the first administrator ``root`` on the engine
	EnginePassword string `json:"engine_password"`
	// Enable ICE support. This is required for WebRTC. A STUN server must be defined in the `engine_rtp_stunaddr` field when using `engine_rtp_icesupport=true`.
	EngineRtpIcesupport *bool `json:"engine_rtp_icesupport,omitempty"`
	// The address of the STUN server to use for WebRTC
	EngineRtpStunaddr *string `json:"engine_rtp_stunaddr,omitempty"`
	// Host used by Nestbox to contact the engine
	NestboxEngineHost *string `json:"nestbox_engine_host,omitempty"`
	// Port used by Nestbox to contact the engine
	NestboxEnginePort *int32 `json:"nestbox_engine_port,omitempty"`
	// Host of the Nestbox where the engine will register. Specifying this key will make nestbox and `engine_internal_address` keys mandatory. Accent will be connected to the specified Nestbox instance.
	NestboxHost *string `json:"nestbox_host,omitempty"`
	// Name of the engine in Nestbox
	NestboxInstanceName *string `json:"nestbox_instance_name,omitempty"`
	// Port of the Nestbox where the engine will register
	NestboxPort *int32 `json:"nestbox_port,omitempty"`
	// Nestbox username used to register the engine
	NestboxServiceId *string `json:"nestbox_service_id,omitempty"`
	// Nestbox password used to register the engine
	NestboxServiceKey *string `json:"nestbox_service_key,omitempty"`
	// Should the certificate used for HTTPS be verified? The setup will abort if the certificate fails the verification.
	NestboxVerifyCertificate *bool `json:"nestbox_verify_certificate,omitempty"`
}

type _SetupRequest SetupRequest

// NewSetupRequest instantiates a new SetupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetupRequest(engineLanguage string, engineLicense bool, enginePassword string) *SetupRequest {
	this := SetupRequest{}
	this.EngineLanguage = engineLanguage
	this.EngineLicense = engineLicense
	this.EnginePassword = enginePassword
	var engineRtpIcesupport bool = false
	this.EngineRtpIcesupport = &engineRtpIcesupport
	var engineRtpStunaddr string = "null"
	this.EngineRtpStunaddr = &engineRtpStunaddr
	var nestboxVerifyCertificate bool = true
	this.NestboxVerifyCertificate = &nestboxVerifyCertificate
	return &this
}

// NewSetupRequestWithDefaults instantiates a new SetupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetupRequestWithDefaults() *SetupRequest {
	this := SetupRequest{}
	var engineRtpIcesupport bool = false
	this.EngineRtpIcesupport = &engineRtpIcesupport
	var engineRtpStunaddr string = "null"
	this.EngineRtpStunaddr = &engineRtpStunaddr
	var nestboxVerifyCertificate bool = true
	this.NestboxVerifyCertificate = &nestboxVerifyCertificate
	return &this
}

// GetEngineInstanceUuid returns the EngineInstanceUuid field value if set, zero value otherwise.
func (o *SetupRequest) GetEngineInstanceUuid() string {
	if o == nil || IsNil(o.EngineInstanceUuid) {
		var ret string
		return ret
	}
	return *o.EngineInstanceUuid
}

// GetEngineInstanceUuidOk returns a tuple with the EngineInstanceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetEngineInstanceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.EngineInstanceUuid) {
		return nil, false
	}
	return o.EngineInstanceUuid, true
}

// HasEngineInstanceUuid returns a boolean if a field has been set.
func (o *SetupRequest) HasEngineInstanceUuid() bool {
	if o != nil && !IsNil(o.EngineInstanceUuid) {
		return true
	}

	return false
}

// SetEngineInstanceUuid gets a reference to the given string and assigns it to the EngineInstanceUuid field.
func (o *SetupRequest) SetEngineInstanceUuid(v string) {
	o.EngineInstanceUuid = &v
}

// GetEngineInternalAddress returns the EngineInternalAddress field value if set, zero value otherwise.
func (o *SetupRequest) GetEngineInternalAddress() string {
	if o == nil || IsNil(o.EngineInternalAddress) {
		var ret string
		return ret
	}
	return *o.EngineInternalAddress
}

// GetEngineInternalAddressOk returns a tuple with the EngineInternalAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetEngineInternalAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EngineInternalAddress) {
		return nil, false
	}
	return o.EngineInternalAddress, true
}

// HasEngineInternalAddress returns a boolean if a field has been set.
func (o *SetupRequest) HasEngineInternalAddress() bool {
	if o != nil && !IsNil(o.EngineInternalAddress) {
		return true
	}

	return false
}

// SetEngineInternalAddress gets a reference to the given string and assigns it to the EngineInternalAddress field.
func (o *SetupRequest) SetEngineInternalAddress(v string) {
	o.EngineInternalAddress = &v
}

// GetEngineLanguage returns the EngineLanguage field value
func (o *SetupRequest) GetEngineLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EngineLanguage
}

// GetEngineLanguageOk returns a tuple with the EngineLanguage field value
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetEngineLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngineLanguage, true
}

// SetEngineLanguage sets field value
func (o *SetupRequest) SetEngineLanguage(v string) {
	o.EngineLanguage = v
}

// GetEngineLicense returns the EngineLicense field value
func (o *SetupRequest) GetEngineLicense() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EngineLicense
}

// GetEngineLicenseOk returns a tuple with the EngineLicense field value
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetEngineLicenseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngineLicense, true
}

// SetEngineLicense sets field value
func (o *SetupRequest) SetEngineLicense(v bool) {
	o.EngineLicense = v
}

// GetEnginePassword returns the EnginePassword field value
func (o *SetupRequest) GetEnginePassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnginePassword
}

// GetEnginePasswordOk returns a tuple with the EnginePassword field value
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetEnginePasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnginePassword, true
}

// SetEnginePassword sets field value
func (o *SetupRequest) SetEnginePassword(v string) {
	o.EnginePassword = v
}

// GetEngineRtpIcesupport returns the EngineRtpIcesupport field value if set, zero value otherwise.
func (o *SetupRequest) GetEngineRtpIcesupport() bool {
	if o == nil || IsNil(o.EngineRtpIcesupport) {
		var ret bool
		return ret
	}
	return *o.EngineRtpIcesupport
}

// GetEngineRtpIcesupportOk returns a tuple with the EngineRtpIcesupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetEngineRtpIcesupportOk() (*bool, bool) {
	if o == nil || IsNil(o.EngineRtpIcesupport) {
		return nil, false
	}
	return o.EngineRtpIcesupport, true
}

// HasEngineRtpIcesupport returns a boolean if a field has been set.
func (o *SetupRequest) HasEngineRtpIcesupport() bool {
	if o != nil && !IsNil(o.EngineRtpIcesupport) {
		return true
	}

	return false
}

// SetEngineRtpIcesupport gets a reference to the given bool and assigns it to the EngineRtpIcesupport field.
func (o *SetupRequest) SetEngineRtpIcesupport(v bool) {
	o.EngineRtpIcesupport = &v
}

// GetEngineRtpStunaddr returns the EngineRtpStunaddr field value if set, zero value otherwise.
func (o *SetupRequest) GetEngineRtpStunaddr() string {
	if o == nil || IsNil(o.EngineRtpStunaddr) {
		var ret string
		return ret
	}
	return *o.EngineRtpStunaddr
}

// GetEngineRtpStunaddrOk returns a tuple with the EngineRtpStunaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetEngineRtpStunaddrOk() (*string, bool) {
	if o == nil || IsNil(o.EngineRtpStunaddr) {
		return nil, false
	}
	return o.EngineRtpStunaddr, true
}

// HasEngineRtpStunaddr returns a boolean if a field has been set.
func (o *SetupRequest) HasEngineRtpStunaddr() bool {
	if o != nil && !IsNil(o.EngineRtpStunaddr) {
		return true
	}

	return false
}

// SetEngineRtpStunaddr gets a reference to the given string and assigns it to the EngineRtpStunaddr field.
func (o *SetupRequest) SetEngineRtpStunaddr(v string) {
	o.EngineRtpStunaddr = &v
}

// GetNestboxEngineHost returns the NestboxEngineHost field value if set, zero value otherwise.
func (o *SetupRequest) GetNestboxEngineHost() string {
	if o == nil || IsNil(o.NestboxEngineHost) {
		var ret string
		return ret
	}
	return *o.NestboxEngineHost
}

// GetNestboxEngineHostOk returns a tuple with the NestboxEngineHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetNestboxEngineHostOk() (*string, bool) {
	if o == nil || IsNil(o.NestboxEngineHost) {
		return nil, false
	}
	return o.NestboxEngineHost, true
}

// HasNestboxEngineHost returns a boolean if a field has been set.
func (o *SetupRequest) HasNestboxEngineHost() bool {
	if o != nil && !IsNil(o.NestboxEngineHost) {
		return true
	}

	return false
}

// SetNestboxEngineHost gets a reference to the given string and assigns it to the NestboxEngineHost field.
func (o *SetupRequest) SetNestboxEngineHost(v string) {
	o.NestboxEngineHost = &v
}

// GetNestboxEnginePort returns the NestboxEnginePort field value if set, zero value otherwise.
func (o *SetupRequest) GetNestboxEnginePort() int32 {
	if o == nil || IsNil(o.NestboxEnginePort) {
		var ret int32
		return ret
	}
	return *o.NestboxEnginePort
}

// GetNestboxEnginePortOk returns a tuple with the NestboxEnginePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetNestboxEnginePortOk() (*int32, bool) {
	if o == nil || IsNil(o.NestboxEnginePort) {
		return nil, false
	}
	return o.NestboxEnginePort, true
}

// HasNestboxEnginePort returns a boolean if a field has been set.
func (o *SetupRequest) HasNestboxEnginePort() bool {
	if o != nil && !IsNil(o.NestboxEnginePort) {
		return true
	}

	return false
}

// SetNestboxEnginePort gets a reference to the given int32 and assigns it to the NestboxEnginePort field.
func (o *SetupRequest) SetNestboxEnginePort(v int32) {
	o.NestboxEnginePort = &v
}

// GetNestboxHost returns the NestboxHost field value if set, zero value otherwise.
func (o *SetupRequest) GetNestboxHost() string {
	if o == nil || IsNil(o.NestboxHost) {
		var ret string
		return ret
	}
	return *o.NestboxHost
}

// GetNestboxHostOk returns a tuple with the NestboxHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetNestboxHostOk() (*string, bool) {
	if o == nil || IsNil(o.NestboxHost) {
		return nil, false
	}
	return o.NestboxHost, true
}

// HasNestboxHost returns a boolean if a field has been set.
func (o *SetupRequest) HasNestboxHost() bool {
	if o != nil && !IsNil(o.NestboxHost) {
		return true
	}

	return false
}

// SetNestboxHost gets a reference to the given string and assigns it to the NestboxHost field.
func (o *SetupRequest) SetNestboxHost(v string) {
	o.NestboxHost = &v
}

// GetNestboxInstanceName returns the NestboxInstanceName field value if set, zero value otherwise.
func (o *SetupRequest) GetNestboxInstanceName() string {
	if o == nil || IsNil(o.NestboxInstanceName) {
		var ret string
		return ret
	}
	return *o.NestboxInstanceName
}

// GetNestboxInstanceNameOk returns a tuple with the NestboxInstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetNestboxInstanceNameOk() (*string, bool) {
	if o == nil || IsNil(o.NestboxInstanceName) {
		return nil, false
	}
	return o.NestboxInstanceName, true
}

// HasNestboxInstanceName returns a boolean if a field has been set.
func (o *SetupRequest) HasNestboxInstanceName() bool {
	if o != nil && !IsNil(o.NestboxInstanceName) {
		return true
	}

	return false
}

// SetNestboxInstanceName gets a reference to the given string and assigns it to the NestboxInstanceName field.
func (o *SetupRequest) SetNestboxInstanceName(v string) {
	o.NestboxInstanceName = &v
}

// GetNestboxPort returns the NestboxPort field value if set, zero value otherwise.
func (o *SetupRequest) GetNestboxPort() int32 {
	if o == nil || IsNil(o.NestboxPort) {
		var ret int32
		return ret
	}
	return *o.NestboxPort
}

// GetNestboxPortOk returns a tuple with the NestboxPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetNestboxPortOk() (*int32, bool) {
	if o == nil || IsNil(o.NestboxPort) {
		return nil, false
	}
	return o.NestboxPort, true
}

// HasNestboxPort returns a boolean if a field has been set.
func (o *SetupRequest) HasNestboxPort() bool {
	if o != nil && !IsNil(o.NestboxPort) {
		return true
	}

	return false
}

// SetNestboxPort gets a reference to the given int32 and assigns it to the NestboxPort field.
func (o *SetupRequest) SetNestboxPort(v int32) {
	o.NestboxPort = &v
}

// GetNestboxServiceId returns the NestboxServiceId field value if set, zero value otherwise.
func (o *SetupRequest) GetNestboxServiceId() string {
	if o == nil || IsNil(o.NestboxServiceId) {
		var ret string
		return ret
	}
	return *o.NestboxServiceId
}

// GetNestboxServiceIdOk returns a tuple with the NestboxServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetNestboxServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.NestboxServiceId) {
		return nil, false
	}
	return o.NestboxServiceId, true
}

// HasNestboxServiceId returns a boolean if a field has been set.
func (o *SetupRequest) HasNestboxServiceId() bool {
	if o != nil && !IsNil(o.NestboxServiceId) {
		return true
	}

	return false
}

// SetNestboxServiceId gets a reference to the given string and assigns it to the NestboxServiceId field.
func (o *SetupRequest) SetNestboxServiceId(v string) {
	o.NestboxServiceId = &v
}

// GetNestboxServiceKey returns the NestboxServiceKey field value if set, zero value otherwise.
func (o *SetupRequest) GetNestboxServiceKey() string {
	if o == nil || IsNil(o.NestboxServiceKey) {
		var ret string
		return ret
	}
	return *o.NestboxServiceKey
}

// GetNestboxServiceKeyOk returns a tuple with the NestboxServiceKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetNestboxServiceKeyOk() (*string, bool) {
	if o == nil || IsNil(o.NestboxServiceKey) {
		return nil, false
	}
	return o.NestboxServiceKey, true
}

// HasNestboxServiceKey returns a boolean if a field has been set.
func (o *SetupRequest) HasNestboxServiceKey() bool {
	if o != nil && !IsNil(o.NestboxServiceKey) {
		return true
	}

	return false
}

// SetNestboxServiceKey gets a reference to the given string and assigns it to the NestboxServiceKey field.
func (o *SetupRequest) SetNestboxServiceKey(v string) {
	o.NestboxServiceKey = &v
}

// GetNestboxVerifyCertificate returns the NestboxVerifyCertificate field value if set, zero value otherwise.
func (o *SetupRequest) GetNestboxVerifyCertificate() bool {
	if o == nil || IsNil(o.NestboxVerifyCertificate) {
		var ret bool
		return ret
	}
	return *o.NestboxVerifyCertificate
}

// GetNestboxVerifyCertificateOk returns a tuple with the NestboxVerifyCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetupRequest) GetNestboxVerifyCertificateOk() (*bool, bool) {
	if o == nil || IsNil(o.NestboxVerifyCertificate) {
		return nil, false
	}
	return o.NestboxVerifyCertificate, true
}

// HasNestboxVerifyCertificate returns a boolean if a field has been set.
func (o *SetupRequest) HasNestboxVerifyCertificate() bool {
	if o != nil && !IsNil(o.NestboxVerifyCertificate) {
		return true
	}

	return false
}

// SetNestboxVerifyCertificate gets a reference to the given bool and assigns it to the NestboxVerifyCertificate field.
func (o *SetupRequest) SetNestboxVerifyCertificate(v bool) {
	o.NestboxVerifyCertificate = &v
}

func (o SetupRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EngineInstanceUuid) {
		toSerialize["engine_instance_uuid"] = o.EngineInstanceUuid
	}
	if !IsNil(o.EngineInternalAddress) {
		toSerialize["engine_internal_address"] = o.EngineInternalAddress
	}
	toSerialize["engine_language"] = o.EngineLanguage
	toSerialize["engine_license"] = o.EngineLicense
	toSerialize["engine_password"] = o.EnginePassword
	if !IsNil(o.EngineRtpIcesupport) {
		toSerialize["engine_rtp_icesupport"] = o.EngineRtpIcesupport
	}
	if !IsNil(o.EngineRtpStunaddr) {
		toSerialize["engine_rtp_stunaddr"] = o.EngineRtpStunaddr
	}
	if !IsNil(o.NestboxEngineHost) {
		toSerialize["nestbox_engine_host"] = o.NestboxEngineHost
	}
	if !IsNil(o.NestboxEnginePort) {
		toSerialize["nestbox_engine_port"] = o.NestboxEnginePort
	}
	if !IsNil(o.NestboxHost) {
		toSerialize["nestbox_host"] = o.NestboxHost
	}
	if !IsNil(o.NestboxInstanceName) {
		toSerialize["nestbox_instance_name"] = o.NestboxInstanceName
	}
	if !IsNil(o.NestboxPort) {
		toSerialize["nestbox_port"] = o.NestboxPort
	}
	if !IsNil(o.NestboxServiceId) {
		toSerialize["nestbox_service_id"] = o.NestboxServiceId
	}
	if !IsNil(o.NestboxServiceKey) {
		toSerialize["nestbox_service_key"] = o.NestboxServiceKey
	}
	if !IsNil(o.NestboxVerifyCertificate) {
		toSerialize["nestbox_verify_certificate"] = o.NestboxVerifyCertificate
	}
	return toSerialize, nil
}

func (o *SetupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"engine_language",
		"engine_license",
		"engine_password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetupRequest := _SetupRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetupRequest)

	if err != nil {
		return err
	}

	*o = SetupRequest(varSetupRequest)

	return err
}

type NullableSetupRequest struct {
	value *SetupRequest
	isSet bool
}

func (v NullableSetupRequest) Get() *SetupRequest {
	return v.value
}

func (v *NullableSetupRequest) Set(val *SetupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetupRequest(val *SetupRequest) *NullableSetupRequest {
	return &NullableSetupRequest{value: val, isSet: true}
}

func (v NullableSetupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
