/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the Group type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Group{}

// Group struct for Group
type Group struct {
	// The id of the group
	Id *int32 `json:"id,omitempty"`
	// The name of the group
	Name *string `json:"name,omitempty"`
	// Group UUID. This ID is globally unique across multiple Accent instances
	Uuid            *string                      `json:"uuid,omitempty"`
	Extensions      []ExtensionRelationBase      `json:"extensions,omitempty"`
	Fallbacks       *GroupFallbacks              `json:"fallbacks,omitempty"`
	Incalls         []GroupRelationIncall        `json:"incalls,omitempty"`
	Members         *GroupRelationMemberUsers    `json:"members,omitempty"`
	Schedules       []ScheduleRelationBase       `json:"schedules,omitempty"`
	CallPermissions []CallPermissionRelationBase `json:"call_permissions,omitempty"`
	// How the caller_id_name will be treated
	CallerIdMode *string `json:"caller_id_mode,omitempty"`
	// Name to display
	CallerIdName *string `json:"caller_id_name,omitempty"`
	// Enable/Disable the group
	Enabled *bool `json:"enabled,omitempty"`
	// Mark all calls as \"answered elsewhere\" when cancelled
	MarkAnsweredElsewhere *bool `json:"mark_answered_elsewhere,omitempty"`
	// Name of the MOH category to use for music on hold
	MusicOnHold          *string `json:"music_on_hold,omitempty"`
	PreprocessSubroutine *string `json:"preprocess_subroutine,omitempty"`
	// Number of seconds before the member of group will ring again
	RetryDelay *int32 `json:"retry_delay,omitempty"`
	// Notify the member even if it already in communication
	RingInUse    *bool   `json:"ring_in_use,omitempty"`
	RingStrategy *string `json:"ring_strategy,omitempty"`
	// The UUID of the tenant
	TenantUuid *string `json:"tenant_uuid,omitempty"`
	// Number of seconds the group will ring before falling back
	Timeout *int32 `json:"timeout,omitempty"`
	// Number of seconds the member of group will ring
	UserTimeout *int32 `json:"user_timeout,omitempty"`
}

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup() *Group {
	this := Group{}
	var enabled bool = true
	this.Enabled = &enabled
	var markAnsweredElsewhere bool = false
	this.MarkAnsweredElsewhere = &markAnsweredElsewhere
	var ringInUse bool = true
	this.RingInUse = &ringInUse
	var ringStrategy string = "all"
	this.RingStrategy = &ringStrategy
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	var enabled bool = true
	this.Enabled = &enabled
	var markAnsweredElsewhere bool = false
	this.MarkAnsweredElsewhere = &markAnsweredElsewhere
	var ringInUse bool = true
	this.RingInUse = &ringInUse
	var ringStrategy string = "all"
	this.RingStrategy = &ringStrategy
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Group) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Group) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Group) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Group) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Group) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Group) SetName(v string) {
	o.Name = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Group) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Group) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Group) SetUuid(v string) {
	o.Uuid = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *Group) GetExtensions() []ExtensionRelationBase {
	if o == nil || IsNil(o.Extensions) {
		var ret []ExtensionRelationBase
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetExtensionsOk() ([]ExtensionRelationBase, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *Group) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []ExtensionRelationBase and assigns it to the Extensions field.
func (o *Group) SetExtensions(v []ExtensionRelationBase) {
	o.Extensions = v
}

// GetFallbacks returns the Fallbacks field value if set, zero value otherwise.
func (o *Group) GetFallbacks() GroupFallbacks {
	if o == nil || IsNil(o.Fallbacks) {
		var ret GroupFallbacks
		return ret
	}
	return *o.Fallbacks
}

// GetFallbacksOk returns a tuple with the Fallbacks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetFallbacksOk() (*GroupFallbacks, bool) {
	if o == nil || IsNil(o.Fallbacks) {
		return nil, false
	}
	return o.Fallbacks, true
}

// HasFallbacks returns a boolean if a field has been set.
func (o *Group) HasFallbacks() bool {
	if o != nil && !IsNil(o.Fallbacks) {
		return true
	}

	return false
}

// SetFallbacks gets a reference to the given GroupFallbacks and assigns it to the Fallbacks field.
func (o *Group) SetFallbacks(v GroupFallbacks) {
	o.Fallbacks = &v
}

// GetIncalls returns the Incalls field value if set, zero value otherwise.
func (o *Group) GetIncalls() []GroupRelationIncall {
	if o == nil || IsNil(o.Incalls) {
		var ret []GroupRelationIncall
		return ret
	}
	return o.Incalls
}

// GetIncallsOk returns a tuple with the Incalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetIncallsOk() ([]GroupRelationIncall, bool) {
	if o == nil || IsNil(o.Incalls) {
		return nil, false
	}
	return o.Incalls, true
}

// HasIncalls returns a boolean if a field has been set.
func (o *Group) HasIncalls() bool {
	if o != nil && !IsNil(o.Incalls) {
		return true
	}

	return false
}

// SetIncalls gets a reference to the given []GroupRelationIncall and assigns it to the Incalls field.
func (o *Group) SetIncalls(v []GroupRelationIncall) {
	o.Incalls = v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *Group) GetMembers() GroupRelationMemberUsers {
	if o == nil || IsNil(o.Members) {
		var ret GroupRelationMemberUsers
		return ret
	}
	return *o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetMembersOk() (*GroupRelationMemberUsers, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Group) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given GroupRelationMemberUsers and assigns it to the Members field.
func (o *Group) SetMembers(v GroupRelationMemberUsers) {
	o.Members = &v
}

// GetSchedules returns the Schedules field value if set, zero value otherwise.
func (o *Group) GetSchedules() []ScheduleRelationBase {
	if o == nil || IsNil(o.Schedules) {
		var ret []ScheduleRelationBase
		return ret
	}
	return o.Schedules
}

// GetSchedulesOk returns a tuple with the Schedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetSchedulesOk() ([]ScheduleRelationBase, bool) {
	if o == nil || IsNil(o.Schedules) {
		return nil, false
	}
	return o.Schedules, true
}

// HasSchedules returns a boolean if a field has been set.
func (o *Group) HasSchedules() bool {
	if o != nil && !IsNil(o.Schedules) {
		return true
	}

	return false
}

// SetSchedules gets a reference to the given []ScheduleRelationBase and assigns it to the Schedules field.
func (o *Group) SetSchedules(v []ScheduleRelationBase) {
	o.Schedules = v
}

// GetCallPermissions returns the CallPermissions field value if set, zero value otherwise.
func (o *Group) GetCallPermissions() []CallPermissionRelationBase {
	if o == nil || IsNil(o.CallPermissions) {
		var ret []CallPermissionRelationBase
		return ret
	}
	return o.CallPermissions
}

// GetCallPermissionsOk returns a tuple with the CallPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetCallPermissionsOk() ([]CallPermissionRelationBase, bool) {
	if o == nil || IsNil(o.CallPermissions) {
		return nil, false
	}
	return o.CallPermissions, true
}

// HasCallPermissions returns a boolean if a field has been set.
func (o *Group) HasCallPermissions() bool {
	if o != nil && !IsNil(o.CallPermissions) {
		return true
	}

	return false
}

// SetCallPermissions gets a reference to the given []CallPermissionRelationBase and assigns it to the CallPermissions field.
func (o *Group) SetCallPermissions(v []CallPermissionRelationBase) {
	o.CallPermissions = v
}

// GetCallerIdMode returns the CallerIdMode field value if set, zero value otherwise.
func (o *Group) GetCallerIdMode() string {
	if o == nil || IsNil(o.CallerIdMode) {
		var ret string
		return ret
	}
	return *o.CallerIdMode
}

// GetCallerIdModeOk returns a tuple with the CallerIdMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetCallerIdModeOk() (*string, bool) {
	if o == nil || IsNil(o.CallerIdMode) {
		return nil, false
	}
	return o.CallerIdMode, true
}

// HasCallerIdMode returns a boolean if a field has been set.
func (o *Group) HasCallerIdMode() bool {
	if o != nil && !IsNil(o.CallerIdMode) {
		return true
	}

	return false
}

// SetCallerIdMode gets a reference to the given string and assigns it to the CallerIdMode field.
func (o *Group) SetCallerIdMode(v string) {
	o.CallerIdMode = &v
}

// GetCallerIdName returns the CallerIdName field value if set, zero value otherwise.
func (o *Group) GetCallerIdName() string {
	if o == nil || IsNil(o.CallerIdName) {
		var ret string
		return ret
	}
	return *o.CallerIdName
}

// GetCallerIdNameOk returns a tuple with the CallerIdName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetCallerIdNameOk() (*string, bool) {
	if o == nil || IsNil(o.CallerIdName) {
		return nil, false
	}
	return o.CallerIdName, true
}

// HasCallerIdName returns a boolean if a field has been set.
func (o *Group) HasCallerIdName() bool {
	if o != nil && !IsNil(o.CallerIdName) {
		return true
	}

	return false
}

// SetCallerIdName gets a reference to the given string and assigns it to the CallerIdName field.
func (o *Group) SetCallerIdName(v string) {
	o.CallerIdName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Group) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Group) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Group) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMarkAnsweredElsewhere returns the MarkAnsweredElsewhere field value if set, zero value otherwise.
func (o *Group) GetMarkAnsweredElsewhere() bool {
	if o == nil || IsNil(o.MarkAnsweredElsewhere) {
		var ret bool
		return ret
	}
	return *o.MarkAnsweredElsewhere
}

// GetMarkAnsweredElsewhereOk returns a tuple with the MarkAnsweredElsewhere field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetMarkAnsweredElsewhereOk() (*bool, bool) {
	if o == nil || IsNil(o.MarkAnsweredElsewhere) {
		return nil, false
	}
	return o.MarkAnsweredElsewhere, true
}

// HasMarkAnsweredElsewhere returns a boolean if a field has been set.
func (o *Group) HasMarkAnsweredElsewhere() bool {
	if o != nil && !IsNil(o.MarkAnsweredElsewhere) {
		return true
	}

	return false
}

// SetMarkAnsweredElsewhere gets a reference to the given bool and assigns it to the MarkAnsweredElsewhere field.
func (o *Group) SetMarkAnsweredElsewhere(v bool) {
	o.MarkAnsweredElsewhere = &v
}

// GetMusicOnHold returns the MusicOnHold field value if set, zero value otherwise.
func (o *Group) GetMusicOnHold() string {
	if o == nil || IsNil(o.MusicOnHold) {
		var ret string
		return ret
	}
	return *o.MusicOnHold
}

// GetMusicOnHoldOk returns a tuple with the MusicOnHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetMusicOnHoldOk() (*string, bool) {
	if o == nil || IsNil(o.MusicOnHold) {
		return nil, false
	}
	return o.MusicOnHold, true
}

// HasMusicOnHold returns a boolean if a field has been set.
func (o *Group) HasMusicOnHold() bool {
	if o != nil && !IsNil(o.MusicOnHold) {
		return true
	}

	return false
}

// SetMusicOnHold gets a reference to the given string and assigns it to the MusicOnHold field.
func (o *Group) SetMusicOnHold(v string) {
	o.MusicOnHold = &v
}

// GetPreprocessSubroutine returns the PreprocessSubroutine field value if set, zero value otherwise.
func (o *Group) GetPreprocessSubroutine() string {
	if o == nil || IsNil(o.PreprocessSubroutine) {
		var ret string
		return ret
	}
	return *o.PreprocessSubroutine
}

// GetPreprocessSubroutineOk returns a tuple with the PreprocessSubroutine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetPreprocessSubroutineOk() (*string, bool) {
	if o == nil || IsNil(o.PreprocessSubroutine) {
		return nil, false
	}
	return o.PreprocessSubroutine, true
}

// HasPreprocessSubroutine returns a boolean if a field has been set.
func (o *Group) HasPreprocessSubroutine() bool {
	if o != nil && !IsNil(o.PreprocessSubroutine) {
		return true
	}

	return false
}

// SetPreprocessSubroutine gets a reference to the given string and assigns it to the PreprocessSubroutine field.
func (o *Group) SetPreprocessSubroutine(v string) {
	o.PreprocessSubroutine = &v
}

// GetRetryDelay returns the RetryDelay field value if set, zero value otherwise.
func (o *Group) GetRetryDelay() int32 {
	if o == nil || IsNil(o.RetryDelay) {
		var ret int32
		return ret
	}
	return *o.RetryDelay
}

// GetRetryDelayOk returns a tuple with the RetryDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetRetryDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.RetryDelay) {
		return nil, false
	}
	return o.RetryDelay, true
}

// HasRetryDelay returns a boolean if a field has been set.
func (o *Group) HasRetryDelay() bool {
	if o != nil && !IsNil(o.RetryDelay) {
		return true
	}

	return false
}

// SetRetryDelay gets a reference to the given int32 and assigns it to the RetryDelay field.
func (o *Group) SetRetryDelay(v int32) {
	o.RetryDelay = &v
}

// GetRingInUse returns the RingInUse field value if set, zero value otherwise.
func (o *Group) GetRingInUse() bool {
	if o == nil || IsNil(o.RingInUse) {
		var ret bool
		return ret
	}
	return *o.RingInUse
}

// GetRingInUseOk returns a tuple with the RingInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetRingInUseOk() (*bool, bool) {
	if o == nil || IsNil(o.RingInUse) {
		return nil, false
	}
	return o.RingInUse, true
}

// HasRingInUse returns a boolean if a field has been set.
func (o *Group) HasRingInUse() bool {
	if o != nil && !IsNil(o.RingInUse) {
		return true
	}

	return false
}

// SetRingInUse gets a reference to the given bool and assigns it to the RingInUse field.
func (o *Group) SetRingInUse(v bool) {
	o.RingInUse = &v
}

// GetRingStrategy returns the RingStrategy field value if set, zero value otherwise.
func (o *Group) GetRingStrategy() string {
	if o == nil || IsNil(o.RingStrategy) {
		var ret string
		return ret
	}
	return *o.RingStrategy
}

// GetRingStrategyOk returns a tuple with the RingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetRingStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.RingStrategy) {
		return nil, false
	}
	return o.RingStrategy, true
}

// HasRingStrategy returns a boolean if a field has been set.
func (o *Group) HasRingStrategy() bool {
	if o != nil && !IsNil(o.RingStrategy) {
		return true
	}

	return false
}

// SetRingStrategy gets a reference to the given string and assigns it to the RingStrategy field.
func (o *Group) SetRingStrategy(v string) {
	o.RingStrategy = &v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *Group) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *Group) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *Group) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *Group) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *Group) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *Group) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetUserTimeout returns the UserTimeout field value if set, zero value otherwise.
func (o *Group) GetUserTimeout() int32 {
	if o == nil || IsNil(o.UserTimeout) {
		var ret int32
		return ret
	}
	return *o.UserTimeout
}

// GetUserTimeoutOk returns a tuple with the UserTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetUserTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.UserTimeout) {
		return nil, false
	}
	return o.UserTimeout, true
}

// HasUserTimeout returns a boolean if a field has been set.
func (o *Group) HasUserTimeout() bool {
	if o != nil && !IsNil(o.UserTimeout) {
		return true
	}

	return false
}

// SetUserTimeout gets a reference to the given int32 and assigns it to the UserTimeout field.
func (o *Group) SetUserTimeout(v int32) {
	o.UserTimeout = &v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Group) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	if !IsNil(o.Fallbacks) {
		toSerialize["fallbacks"] = o.Fallbacks
	}
	if !IsNil(o.Incalls) {
		toSerialize["incalls"] = o.Incalls
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Schedules) {
		toSerialize["schedules"] = o.Schedules
	}
	if !IsNil(o.CallPermissions) {
		toSerialize["call_permissions"] = o.CallPermissions
	}
	if !IsNil(o.CallerIdMode) {
		toSerialize["caller_id_mode"] = o.CallerIdMode
	}
	if !IsNil(o.CallerIdName) {
		toSerialize["caller_id_name"] = o.CallerIdName
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.MarkAnsweredElsewhere) {
		toSerialize["mark_answered_elsewhere"] = o.MarkAnsweredElsewhere
	}
	if !IsNil(o.MusicOnHold) {
		toSerialize["music_on_hold"] = o.MusicOnHold
	}
	if !IsNil(o.PreprocessSubroutine) {
		toSerialize["preprocess_subroutine"] = o.PreprocessSubroutine
	}
	if !IsNil(o.RetryDelay) {
		toSerialize["retry_delay"] = o.RetryDelay
	}
	if !IsNil(o.RingInUse) {
		toSerialize["ring_in_use"] = o.RingInUse
	}
	if !IsNil(o.RingStrategy) {
		toSerialize["ring_strategy"] = o.RingStrategy
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.UserTimeout) {
		toSerialize["user_timeout"] = o.UserTimeout
	}
	return toSerialize, nil
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
