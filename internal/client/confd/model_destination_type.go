/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the DestinationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DestinationType{}

// DestinationType struct for DestinationType
type DestinationType struct {
	Application *DestinationApplicationApplication `json:"application,omitempty"`
	Conference  *DestinationConference             `json:"conference,omitempty"`
	Custom      *DestinationCustom                 `json:"custom,omitempty"`
	Extension   *DestinationExtension              `json:"extension,omitempty"`
	Group       *DestinationGroup                  `json:"group,omitempty"`
	Hangup      *DestinationHangupCause            `json:"hangup,omitempty"`
	Ivr         *DestinationIVR                    `json:"ivr,omitempty"`
	None        *DestinationNone                   `json:"none,omitempty"`
	Outcall     *DestinationOutcall                `json:"outcall,omitempty"`
	Queue       *DestinationQueue                  `json:"queue,omitempty"`
	Sound       *DestinationSound                  `json:"sound,omitempty"`
	Switchboard *DestinationSwitchboard            `json:"switchboard,omitempty"`
	User        *DestinationUser                   `json:"user,omitempty"`
	Voicemail   *DestinationVoicemail              `json:"voicemail,omitempty"`
}

// NewDestinationType instantiates a new DestinationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationType() *DestinationType {
	this := DestinationType{}
	return &this
}

// NewDestinationTypeWithDefaults instantiates a new DestinationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationTypeWithDefaults() *DestinationType {
	this := DestinationType{}
	return &this
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *DestinationType) GetApplication() DestinationApplicationApplication {
	if o == nil || IsNil(o.Application) {
		var ret DestinationApplicationApplication
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationType) GetApplicationOk() (*DestinationApplicationApplication, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *DestinationType) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given DestinationApplicationApplication and assigns it to the Application field.
func (o *DestinationType) SetApplication(v DestinationApplicationApplication) {
	o.Application = &v
}

// GetConference returns the Conference field value if set, zero value otherwise.
func (o *DestinationType) GetConference() DestinationConference {
	if o == nil || IsNil(o.Conference) {
		var ret DestinationConference
		return ret
	}
	return *o.Conference
}

// GetConferenceOk returns a tuple with the Conference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationType) GetConferenceOk() (*DestinationConference, bool) {
	if o == nil || IsNil(o.Conference) {
		return nil, false
	}
	return o.Conference, true
}

// HasConference returns a boolean if a field has been set.
func (o *DestinationType) HasConference() bool {
	if o != nil && !IsNil(o.Conference) {
		return true
	}

	return false
}

// SetConference gets a reference to the given DestinationConference and assigns it to the Conference field.
func (o *DestinationType) SetConference(v DestinationConference) {
	o.Conference = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *DestinationType) GetCustom() DestinationCustom {
	if o == nil || IsNil(o.Custom) {
		var ret DestinationCustom
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationType) GetCustomOk() (*DestinationCustom, bool) {
	if o == nil || IsNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *DestinationType) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given DestinationCustom and assigns it to the Custom field.
func (o *DestinationType) SetCustom(v DestinationCustom) {
	o.Custom = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *DestinationType) GetExtension() DestinationExtension {
	if o == nil || IsNil(o.Extension) {
		var ret DestinationExtension
		return ret
	}
	return *o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationType) GetExtensionOk() (*DestinationExtension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *DestinationType) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given DestinationExtension and assigns it to the Extension field.
func (o *DestinationType) SetExtension(v DestinationExtension) {
	o.Extension = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *DestinationType) GetGroup() DestinationGroup {
	if o == nil || IsNil(o.Group) {
		var ret DestinationGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationType) GetGroupOk() (*DestinationGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *DestinationType) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given DestinationGroup and assigns it to the Group field.
func (o *DestinationType) SetGroup(v DestinationGroup) {
	o.Group = &v
}

// GetHangup returns the Hangup field value if set, zero value otherwise.
func (o *DestinationType) GetHangup() DestinationHangupCause {
	if o == nil || IsNil(o.Hangup) {
		var ret DestinationHangupCause
		return ret
	}
	return *o.Hangup
}

// GetHangupOk returns a tuple with the Hangup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationType) GetHangupOk() (*DestinationHangupCause, bool) {
	if o == nil || IsNil(o.Hangup) {
		return nil, false
	}
	return o.Hangup, true
}

// HasHangup returns a boolean if a field has been set.
func (o *DestinationType) HasHangup() bool {
	if o != nil && !IsNil(o.Hangup) {
		return true
	}

	return false
}

// SetHangup gets a reference to the given DestinationHangupCause and assigns it to the Hangup field.
func (o *DestinationType) SetHangup(v DestinationHangupCause) {
	o.Hangup = &v
}

// GetIvr returns the Ivr field value if set, zero value otherwise.
func (o *DestinationType) GetIvr() DestinationIVR {
	if o == nil || IsNil(o.Ivr) {
		var ret DestinationIVR
		return ret
	}
	return *o.Ivr
}

// GetIvrOk returns a tuple with the Ivr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationType) GetIvrOk() (*DestinationIVR, bool) {
	if o == nil || IsNil(o.Ivr) {
		return nil, false
	}
	return o.Ivr, true
}

// HasIvr returns a boolean if a field has been set.
func (o *DestinationType) HasIvr() bool {
	if o != nil && !IsNil(o.Ivr) {
		return true
	}

	return false
}

// SetIvr gets a reference to the given DestinationIVR and assigns it to the Ivr field.
func (o *DestinationType) SetIvr(v DestinationIVR) {
	o.Ivr = &v
}

// GetNone returns the None field value if set, zero value otherwise.
func (o *DestinationType) GetNone() DestinationNone {
	if o == nil || IsNil(o.None) {
		var ret DestinationNone
		return ret
	}
	return *o.None
}

// GetNoneOk returns a tuple with the None field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationType) GetNoneOk() (*DestinationNone, bool) {
	if o == nil || IsNil(o.None) {
		return nil, false
	}
	return o.None, true
}

// HasNone returns a boolean if a field has been set.
func (o *DestinationType) HasNone() bool {
	if o != nil && !IsNil(o.None) {
		return true
	}

	return false
}

// SetNone gets a reference to the given DestinationNone and assigns it to the None field.
func (o *DestinationType) SetNone(v DestinationNone) {
	o.None = &v
}

// GetOutcall returns the Outcall field value if set, zero value otherwise.
func (o *DestinationType) GetOutcall() DestinationOutcall {
	if o == nil || IsNil(o.Outcall) {
		var ret DestinationOutcall
		return ret
	}
	return *o.Outcall
}

// GetOutcallOk returns a tuple with the Outcall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationType) GetOutcallOk() (*DestinationOutcall, bool) {
	if o == nil || IsNil(o.Outcall) {
		return nil, false
	}
	return o.Outcall, true
}

// HasOutcall returns a boolean if a field has been set.
func (o *DestinationType) HasOutcall() bool {
	if o != nil && !IsNil(o.Outcall) {
		return true
	}

	return false
}

// SetOutcall gets a reference to the given DestinationOutcall and assigns it to the Outcall field.
func (o *DestinationType) SetOutcall(v DestinationOutcall) {
	o.Outcall = &v
}

// GetQueue returns the Queue field value if set, zero value otherwise.
func (o *DestinationType) GetQueue() DestinationQueue {
	if o == nil || IsNil(o.Queue) {
		var ret DestinationQueue
		return ret
	}
	return *o.Queue
}

// GetQueueOk returns a tuple with the Queue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationType) GetQueueOk() (*DestinationQueue, bool) {
	if o == nil || IsNil(o.Queue) {
		return nil, false
	}
	return o.Queue, true
}

// HasQueue returns a boolean if a field has been set.
func (o *DestinationType) HasQueue() bool {
	if o != nil && !IsNil(o.Queue) {
		return true
	}

	return false
}

// SetQueue gets a reference to the given DestinationQueue and assigns it to the Queue field.
func (o *DestinationType) SetQueue(v DestinationQueue) {
	o.Queue = &v
}

// GetSound returns the Sound field value if set, zero value otherwise.
func (o *DestinationType) GetSound() DestinationSound {
	if o == nil || IsNil(o.Sound) {
		var ret DestinationSound
		return ret
	}
	return *o.Sound
}

// GetSoundOk returns a tuple with the Sound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationType) GetSoundOk() (*DestinationSound, bool) {
	if o == nil || IsNil(o.Sound) {
		return nil, false
	}
	return o.Sound, true
}

// HasSound returns a boolean if a field has been set.
func (o *DestinationType) HasSound() bool {
	if o != nil && !IsNil(o.Sound) {
		return true
	}

	return false
}

// SetSound gets a reference to the given DestinationSound and assigns it to the Sound field.
func (o *DestinationType) SetSound(v DestinationSound) {
	o.Sound = &v
}

// GetSwitchboard returns the Switchboard field value if set, zero value otherwise.
func (o *DestinationType) GetSwitchboard() DestinationSwitchboard {
	if o == nil || IsNil(o.Switchboard) {
		var ret DestinationSwitchboard
		return ret
	}
	return *o.Switchboard
}

// GetSwitchboardOk returns a tuple with the Switchboard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationType) GetSwitchboardOk() (*DestinationSwitchboard, bool) {
	if o == nil || IsNil(o.Switchboard) {
		return nil, false
	}
	return o.Switchboard, true
}

// HasSwitchboard returns a boolean if a field has been set.
func (o *DestinationType) HasSwitchboard() bool {
	if o != nil && !IsNil(o.Switchboard) {
		return true
	}

	return false
}

// SetSwitchboard gets a reference to the given DestinationSwitchboard and assigns it to the Switchboard field.
func (o *DestinationType) SetSwitchboard(v DestinationSwitchboard) {
	o.Switchboard = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *DestinationType) GetUser() DestinationUser {
	if o == nil || IsNil(o.User) {
		var ret DestinationUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationType) GetUserOk() (*DestinationUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *DestinationType) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given DestinationUser and assigns it to the User field.
func (o *DestinationType) SetUser(v DestinationUser) {
	o.User = &v
}

// GetVoicemail returns the Voicemail field value if set, zero value otherwise.
func (o *DestinationType) GetVoicemail() DestinationVoicemail {
	if o == nil || IsNil(o.Voicemail) {
		var ret DestinationVoicemail
		return ret
	}
	return *o.Voicemail
}

// GetVoicemailOk returns a tuple with the Voicemail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationType) GetVoicemailOk() (*DestinationVoicemail, bool) {
	if o == nil || IsNil(o.Voicemail) {
		return nil, false
	}
	return o.Voicemail, true
}

// HasVoicemail returns a boolean if a field has been set.
func (o *DestinationType) HasVoicemail() bool {
	if o != nil && !IsNil(o.Voicemail) {
		return true
	}

	return false
}

// SetVoicemail gets a reference to the given DestinationVoicemail and assigns it to the Voicemail field.
func (o *DestinationType) SetVoicemail(v DestinationVoicemail) {
	o.Voicemail = &v
}

func (o DestinationType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DestinationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.Conference) {
		toSerialize["conference"] = o.Conference
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Hangup) {
		toSerialize["hangup"] = o.Hangup
	}
	if !IsNil(o.Ivr) {
		toSerialize["ivr"] = o.Ivr
	}
	if !IsNil(o.None) {
		toSerialize["none"] = o.None
	}
	if !IsNil(o.Outcall) {
		toSerialize["outcall"] = o.Outcall
	}
	if !IsNil(o.Queue) {
		toSerialize["queue"] = o.Queue
	}
	if !IsNil(o.Sound) {
		toSerialize["sound"] = o.Sound
	}
	if !IsNil(o.Switchboard) {
		toSerialize["switchboard"] = o.Switchboard
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Voicemail) {
		toSerialize["voicemail"] = o.Voicemail
	}
	return toSerialize, nil
}

type NullableDestinationType struct {
	value *DestinationType
	isSet bool
}

func (v NullableDestinationType) Get() *DestinationType {
	return v.value
}

func (v *NullableDestinationType) Set(val *DestinationType) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationType) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationType(val *DestinationType) *NullableDestinationType {
	return &NullableDestinationType{value: val, isSet: true}
}

func (v NullableDestinationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
