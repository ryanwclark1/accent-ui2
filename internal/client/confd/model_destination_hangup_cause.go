/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the DestinationHangupCause type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DestinationHangupCause{}

// DestinationHangupCause struct for DestinationHangupCause
type DestinationHangupCause struct {
	Busy       *DestinationHangupBusy       `json:"busy,omitempty"`
	Congestion *DestinationHangupCongestion `json:"congestion,omitempty"`
	Normal     *DestinationHangupNormal     `json:"normal,omitempty"`
}

// NewDestinationHangupCause instantiates a new DestinationHangupCause object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationHangupCause() *DestinationHangupCause {
	this := DestinationHangupCause{}
	return &this
}

// NewDestinationHangupCauseWithDefaults instantiates a new DestinationHangupCause object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationHangupCauseWithDefaults() *DestinationHangupCause {
	this := DestinationHangupCause{}
	return &this
}

// GetBusy returns the Busy field value if set, zero value otherwise.
func (o *DestinationHangupCause) GetBusy() DestinationHangupBusy {
	if o == nil || IsNil(o.Busy) {
		var ret DestinationHangupBusy
		return ret
	}
	return *o.Busy
}

// GetBusyOk returns a tuple with the Busy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationHangupCause) GetBusyOk() (*DestinationHangupBusy, bool) {
	if o == nil || IsNil(o.Busy) {
		return nil, false
	}
	return o.Busy, true
}

// HasBusy returns a boolean if a field has been set.
func (o *DestinationHangupCause) HasBusy() bool {
	if o != nil && !IsNil(o.Busy) {
		return true
	}

	return false
}

// SetBusy gets a reference to the given DestinationHangupBusy and assigns it to the Busy field.
func (o *DestinationHangupCause) SetBusy(v DestinationHangupBusy) {
	o.Busy = &v
}

// GetCongestion returns the Congestion field value if set, zero value otherwise.
func (o *DestinationHangupCause) GetCongestion() DestinationHangupCongestion {
	if o == nil || IsNil(o.Congestion) {
		var ret DestinationHangupCongestion
		return ret
	}
	return *o.Congestion
}

// GetCongestionOk returns a tuple with the Congestion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationHangupCause) GetCongestionOk() (*DestinationHangupCongestion, bool) {
	if o == nil || IsNil(o.Congestion) {
		return nil, false
	}
	return o.Congestion, true
}

// HasCongestion returns a boolean if a field has been set.
func (o *DestinationHangupCause) HasCongestion() bool {
	if o != nil && !IsNil(o.Congestion) {
		return true
	}

	return false
}

// SetCongestion gets a reference to the given DestinationHangupCongestion and assigns it to the Congestion field.
func (o *DestinationHangupCause) SetCongestion(v DestinationHangupCongestion) {
	o.Congestion = &v
}

// GetNormal returns the Normal field value if set, zero value otherwise.
func (o *DestinationHangupCause) GetNormal() DestinationHangupNormal {
	if o == nil || IsNil(o.Normal) {
		var ret DestinationHangupNormal
		return ret
	}
	return *o.Normal
}

// GetNormalOk returns a tuple with the Normal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationHangupCause) GetNormalOk() (*DestinationHangupNormal, bool) {
	if o == nil || IsNil(o.Normal) {
		return nil, false
	}
	return o.Normal, true
}

// HasNormal returns a boolean if a field has been set.
func (o *DestinationHangupCause) HasNormal() bool {
	if o != nil && !IsNil(o.Normal) {
		return true
	}

	return false
}

// SetNormal gets a reference to the given DestinationHangupNormal and assigns it to the Normal field.
func (o *DestinationHangupCause) SetNormal(v DestinationHangupNormal) {
	o.Normal = &v
}

func (o DestinationHangupCause) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DestinationHangupCause) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Busy) {
		toSerialize["busy"] = o.Busy
	}
	if !IsNil(o.Congestion) {
		toSerialize["congestion"] = o.Congestion
	}
	if !IsNil(o.Normal) {
		toSerialize["normal"] = o.Normal
	}
	return toSerialize, nil
}

type NullableDestinationHangupCause struct {
	value *DestinationHangupCause
	isSet bool
}

func (v NullableDestinationHangupCause) Get() *DestinationHangupCause {
	return v.value
}

func (v *NullableDestinationHangupCause) Set(val *DestinationHangupCause) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationHangupCause) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationHangupCause) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationHangupCause(val *DestinationHangupCause) *NullableDestinationHangupCause {
	return &NullableDestinationHangupCause{value: val, isSet: true}
}

func (v NullableDestinationHangupCause) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationHangupCause) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
