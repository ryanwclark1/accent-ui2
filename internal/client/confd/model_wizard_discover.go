/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the WizardDiscover type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WizardDiscover{}

// WizardDiscover struct for WizardDiscover
type WizardDiscover struct {
	// System domain name
	Domain   *string                 `json:"domain,omitempty"`
	Gateways []WizardDiscoverGateway `json:"gateways,omitempty"`
	// System hostname
	Hostname   *string                   `json:"hostname,omitempty"`
	Interfaces []WizardDiscoverInterface `json:"interfaces,omitempty"`
	// Nameservers from file ``/etc/resolv.conf``
	Nameservers []string `json:"nameservers,omitempty"`
	// System timezone from file ``/etc/timezone``
	Timezone *string `json:"timezone,omitempty"`
}

// NewWizardDiscover instantiates a new WizardDiscover object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWizardDiscover() *WizardDiscover {
	this := WizardDiscover{}
	return &this
}

// NewWizardDiscoverWithDefaults instantiates a new WizardDiscover object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWizardDiscoverWithDefaults() *WizardDiscover {
	this := WizardDiscover{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *WizardDiscover) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WizardDiscover) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *WizardDiscover) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *WizardDiscover) SetDomain(v string) {
	o.Domain = &v
}

// GetGateways returns the Gateways field value if set, zero value otherwise.
func (o *WizardDiscover) GetGateways() []WizardDiscoverGateway {
	if o == nil || IsNil(o.Gateways) {
		var ret []WizardDiscoverGateway
		return ret
	}
	return o.Gateways
}

// GetGatewaysOk returns a tuple with the Gateways field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WizardDiscover) GetGatewaysOk() ([]WizardDiscoverGateway, bool) {
	if o == nil || IsNil(o.Gateways) {
		return nil, false
	}
	return o.Gateways, true
}

// HasGateways returns a boolean if a field has been set.
func (o *WizardDiscover) HasGateways() bool {
	if o != nil && !IsNil(o.Gateways) {
		return true
	}

	return false
}

// SetGateways gets a reference to the given []WizardDiscoverGateway and assigns it to the Gateways field.
func (o *WizardDiscover) SetGateways(v []WizardDiscoverGateway) {
	o.Gateways = v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *WizardDiscover) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WizardDiscover) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *WizardDiscover) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *WizardDiscover) SetHostname(v string) {
	o.Hostname = &v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *WizardDiscover) GetInterfaces() []WizardDiscoverInterface {
	if o == nil || IsNil(o.Interfaces) {
		var ret []WizardDiscoverInterface
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WizardDiscover) GetInterfacesOk() ([]WizardDiscoverInterface, bool) {
	if o == nil || IsNil(o.Interfaces) {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *WizardDiscover) HasInterfaces() bool {
	if o != nil && !IsNil(o.Interfaces) {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []WizardDiscoverInterface and assigns it to the Interfaces field.
func (o *WizardDiscover) SetInterfaces(v []WizardDiscoverInterface) {
	o.Interfaces = v
}

// GetNameservers returns the Nameservers field value if set, zero value otherwise.
func (o *WizardDiscover) GetNameservers() []string {
	if o == nil || IsNil(o.Nameservers) {
		var ret []string
		return ret
	}
	return o.Nameservers
}

// GetNameserversOk returns a tuple with the Nameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WizardDiscover) GetNameserversOk() ([]string, bool) {
	if o == nil || IsNil(o.Nameservers) {
		return nil, false
	}
	return o.Nameservers, true
}

// HasNameservers returns a boolean if a field has been set.
func (o *WizardDiscover) HasNameservers() bool {
	if o != nil && !IsNil(o.Nameservers) {
		return true
	}

	return false
}

// SetNameservers gets a reference to the given []string and assigns it to the Nameservers field.
func (o *WizardDiscover) SetNameservers(v []string) {
	o.Nameservers = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *WizardDiscover) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WizardDiscover) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *WizardDiscover) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *WizardDiscover) SetTimezone(v string) {
	o.Timezone = &v
}

func (o WizardDiscover) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WizardDiscover) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Gateways) {
		toSerialize["gateways"] = o.Gateways
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.Interfaces) {
		toSerialize["interfaces"] = o.Interfaces
	}
	if !IsNil(o.Nameservers) {
		toSerialize["nameservers"] = o.Nameservers
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	return toSerialize, nil
}

type NullableWizardDiscover struct {
	value *WizardDiscover
	isSet bool
}

func (v NullableWizardDiscover) Get() *WizardDiscover {
	return v.value
}

func (v *NullableWizardDiscover) Set(val *WizardDiscover) {
	v.value = val
	v.isSet = true
}

func (v NullableWizardDiscover) IsSet() bool {
	return v.isSet
}

func (v *NullableWizardDiscover) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWizardDiscover(val *WizardDiscover) *NullableWizardDiscover {
	return &NullableWizardDiscover{value: val, isSet: true}
}

func (v NullableWizardDiscover) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWizardDiscover) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
