/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type IaxAPI interface {

	/*
		AssociateTrunkEndpointIax Associate trunk and IAX endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.iax.{iax_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param iaxId
		@return IaxAPIAssociateTrunkEndpointIaxRequest
	*/
	AssociateTrunkEndpointIax(ctx context.Context, trunkId int32, iaxId int32) IaxAPIAssociateTrunkEndpointIaxRequest

	// AssociateTrunkEndpointIaxExecute executes the request
	AssociateTrunkEndpointIaxExecute(r IaxAPIAssociateTrunkEndpointIaxRequest) (*http.Response, error)

	/*
		AssociateTrunkRegisterIax Associate trunk and IAX register

		**Required ACL:** `confd.trunks.{trunk_id}.registers.iax.{iax_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param iaxId
		@return IaxAPIAssociateTrunkRegisterIaxRequest
	*/
	AssociateTrunkRegisterIax(ctx context.Context, trunkId int32, iaxId int32) IaxAPIAssociateTrunkRegisterIaxRequest

	// AssociateTrunkRegisterIaxExecute executes the request
	AssociateTrunkRegisterIaxExecute(r IaxAPIAssociateTrunkRegisterIaxRequest) (*http.Response, error)

	/*
		CreateEndpointIax Create IAX endpoint

		**Required ACL:** `confd.endpoints.iax.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return IaxAPICreateEndpointIaxRequest
	*/
	CreateEndpointIax(ctx context.Context) IaxAPICreateEndpointIaxRequest

	// CreateEndpointIaxExecute executes the request
	//  @return EndpointIAX
	CreateEndpointIaxExecute(r IaxAPICreateEndpointIaxRequest) (*EndpointIAX, *http.Response, error)

	/*
		CreateRegisterIax Create register_iax

		**Required ACL:** `confd.registers.iax.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return IaxAPICreateRegisterIaxRequest
	*/
	CreateRegisterIax(ctx context.Context) IaxAPICreateRegisterIaxRequest

	// CreateRegisterIaxExecute executes the request
	//  @return RegisterIAX
	CreateRegisterIaxExecute(r IaxAPICreateRegisterIaxRequest) (*RegisterIAX, *http.Response, error)

	/*
		DeleteEndpointIax Delete IAX Endpoint

		**Required ACL:** `confd.endpoints.iax.{iax_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param iaxId
		@return IaxAPIDeleteEndpointIaxRequest
	*/
	DeleteEndpointIax(ctx context.Context, iaxId int32) IaxAPIDeleteEndpointIaxRequest

	// DeleteEndpointIaxExecute executes the request
	DeleteEndpointIaxExecute(r IaxAPIDeleteEndpointIaxRequest) (*http.Response, error)

	/*
		DeleteRegisterIax Delete register IAX

		**Required ACL:** `confd.registers.iax.{register_iax_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param registerIaxId Register IAX's ID
		@return IaxAPIDeleteRegisterIaxRequest
	*/
	DeleteRegisterIax(ctx context.Context, registerIaxId int32) IaxAPIDeleteRegisterIaxRequest

	// DeleteRegisterIaxExecute executes the request
	DeleteRegisterIaxExecute(r IaxAPIDeleteRegisterIaxRequest) (*http.Response, error)

	/*
		DissociateTrunkEndpointIax Dissociate trunk and IAX endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.iax.{iax_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param iaxId
		@return IaxAPIDissociateTrunkEndpointIaxRequest
	*/
	DissociateTrunkEndpointIax(ctx context.Context, trunkId int32, iaxId int32) IaxAPIDissociateTrunkEndpointIaxRequest

	// DissociateTrunkEndpointIaxExecute executes the request
	DissociateTrunkEndpointIaxExecute(r IaxAPIDissociateTrunkEndpointIaxRequest) (*http.Response, error)

	/*
		DissociateTrunkRegisterIax Dissociate trunk and IAX register

		**Required ACL:** `confd.trunks.{trunk_id}.registers.iax.{iax_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param iaxId
		@return IaxAPIDissociateTrunkRegisterIaxRequest
	*/
	DissociateTrunkRegisterIax(ctx context.Context, trunkId int32, iaxId int32) IaxAPIDissociateTrunkRegisterIaxRequest

	// DissociateTrunkRegisterIaxExecute executes the request
	DissociateTrunkRegisterIaxExecute(r IaxAPIDissociateTrunkRegisterIaxRequest) (*http.Response, error)

	/*
		GetEndpointIax Get IAX Endpoint

		**Required ACL:** `confd.endpoints.iax.{iax_id}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param iaxId
		@return IaxAPIGetEndpointIaxRequest
	*/
	GetEndpointIax(ctx context.Context, iaxId int32) IaxAPIGetEndpointIaxRequest

	// GetEndpointIaxExecute executes the request
	//  @return EndpointIAX
	GetEndpointIaxExecute(r IaxAPIGetEndpointIaxRequest) (*EndpointIAX, *http.Response, error)

	/*
		GetRegisterIax Get register IAX

		**Required ACL:** `confd.registers.iax.{register_iax_id}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param registerIaxId Register IAX's ID
		@return IaxAPIGetRegisterIaxRequest
	*/
	GetRegisterIax(ctx context.Context, registerIaxId int32) IaxAPIGetRegisterIaxRequest

	// GetRegisterIaxExecute executes the request
	//  @return RegisterIAX
	GetRegisterIaxExecute(r IaxAPIGetRegisterIaxRequest) (*RegisterIAX, *http.Response, error)

	/*
		ListAsteriskIaxCallnumberlimits List IAX callnumberlimits options

		**Required ACL:** `confd.asterisk.iax.callnumberlimits.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return IaxAPIListAsteriskIaxCallnumberlimitsRequest
	*/
	ListAsteriskIaxCallnumberlimits(ctx context.Context) IaxAPIListAsteriskIaxCallnumberlimitsRequest

	// ListAsteriskIaxCallnumberlimitsExecute executes the request
	//  @return IAXCallNumberLimitss
	ListAsteriskIaxCallnumberlimitsExecute(r IaxAPIListAsteriskIaxCallnumberlimitsRequest) (*IAXCallNumberLimitss, *http.Response, error)

	/*
		ListEndpointsIax List IAX endpoints

		**Required ACL:** `confd.endpoints.iax.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return IaxAPIListEndpointsIaxRequest
	*/
	ListEndpointsIax(ctx context.Context) IaxAPIListEndpointsIaxRequest

	// ListEndpointsIaxExecute executes the request
	//  @return EndpointIAXItems
	ListEndpointsIaxExecute(r IaxAPIListEndpointsIaxRequest) (*EndpointIAXItems, *http.Response, error)

	/*
		ListRegistersIax List registers iax

		**Required ACL:** `confd.registers.iax.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return IaxAPIListRegistersIaxRequest
	*/
	ListRegistersIax(ctx context.Context) IaxAPIListRegistersIaxRequest

	// ListRegistersIaxExecute executes the request
	//  @return RegisterIAXItems
	ListRegistersIaxExecute(r IaxAPIListRegistersIaxRequest) (*RegisterIAXItems, *http.Response, error)

	/*
		UpdateAsteriskIaxCallnumberlimits Update IAX callnumberlimits option

		**Required ACL:** `confd.asterisk.iax.callnumberlimits.update` **WARNING** This endpoint restore to default value or delete all fields that are not defined.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return IaxAPIUpdateAsteriskIaxCallnumberlimitsRequest
	*/
	UpdateAsteriskIaxCallnumberlimits(ctx context.Context) IaxAPIUpdateAsteriskIaxCallnumberlimitsRequest

	// UpdateAsteriskIaxCallnumberlimitsExecute executes the request
	UpdateAsteriskIaxCallnumberlimitsExecute(r IaxAPIUpdateAsteriskIaxCallnumberlimitsRequest) (*http.Response, error)

	/*
		UpdateEndpointIax Update IAX Endpoint

		**Required ACL:** `confd.endpoints.iax.{iax_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param iaxId
		@return IaxAPIUpdateEndpointIaxRequest
	*/
	UpdateEndpointIax(ctx context.Context, iaxId int32) IaxAPIUpdateEndpointIaxRequest

	// UpdateEndpointIaxExecute executes the request
	UpdateEndpointIaxExecute(r IaxAPIUpdateEndpointIaxRequest) (*http.Response, error)

	/*
		UpdateRegisterIax Update register IAX

		**Required ACL:** `confd.registers.iax.{register_iax_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param registerIaxId Register IAX's ID
		@return IaxAPIUpdateRegisterIaxRequest
	*/
	UpdateRegisterIax(ctx context.Context, registerIaxId int32) IaxAPIUpdateRegisterIaxRequest

	// UpdateRegisterIaxExecute executes the request
	UpdateRegisterIaxExecute(r IaxAPIUpdateRegisterIaxRequest) (*http.Response, error)
}

// IaxAPIService IaxAPI service
type IaxAPIService service

type IaxAPIAssociateTrunkEndpointIaxRequest struct {
	ctx        context.Context
	ApiService IaxAPI
	trunkId    int32
	iaxId      int32
}

func (r IaxAPIAssociateTrunkEndpointIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateTrunkEndpointIaxExecute(r)
}

/*
AssociateTrunkEndpointIax Associate trunk and IAX endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.iax.{iax_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param iaxId
	@return IaxAPIAssociateTrunkEndpointIaxRequest
*/
func (a *IaxAPIService) AssociateTrunkEndpointIax(ctx context.Context, trunkId int32, iaxId int32) IaxAPIAssociateTrunkEndpointIaxRequest {
	return IaxAPIAssociateTrunkEndpointIaxRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		iaxId:      iaxId,
	}
}

// Execute executes the request
func (a *IaxAPIService) AssociateTrunkEndpointIaxExecute(r IaxAPIAssociateTrunkEndpointIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.AssociateTrunkEndpointIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IaxAPIAssociateTrunkRegisterIaxRequest struct {
	ctx        context.Context
	ApiService IaxAPI
	trunkId    int32
	iaxId      int32
}

func (r IaxAPIAssociateTrunkRegisterIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateTrunkRegisterIaxExecute(r)
}

/*
AssociateTrunkRegisterIax Associate trunk and IAX register

**Required ACL:** `confd.trunks.{trunk_id}.registers.iax.{iax_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param iaxId
	@return IaxAPIAssociateTrunkRegisterIaxRequest
*/
func (a *IaxAPIService) AssociateTrunkRegisterIax(ctx context.Context, trunkId int32, iaxId int32) IaxAPIAssociateTrunkRegisterIaxRequest {
	return IaxAPIAssociateTrunkRegisterIaxRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		iaxId:      iaxId,
	}
}

// Execute executes the request
func (a *IaxAPIService) AssociateTrunkRegisterIaxExecute(r IaxAPIAssociateTrunkRegisterIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.AssociateTrunkRegisterIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/registers/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IaxAPICreateEndpointIaxRequest struct {
	ctx          context.Context
	ApiService   IaxAPI
	body         *EndpointIAX
	accentTenant *string
}

// IAX Endpoint to create
func (r IaxAPICreateEndpointIaxRequest) Body(body EndpointIAX) IaxAPICreateEndpointIaxRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r IaxAPICreateEndpointIaxRequest) AccentTenant(accentTenant string) IaxAPICreateEndpointIaxRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r IaxAPICreateEndpointIaxRequest) Execute() (*EndpointIAX, *http.Response, error) {
	return r.ApiService.CreateEndpointIaxExecute(r)
}

/*
CreateEndpointIax Create IAX endpoint

**Required ACL:** `confd.endpoints.iax.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IaxAPICreateEndpointIaxRequest
*/
func (a *IaxAPIService) CreateEndpointIax(ctx context.Context) IaxAPICreateEndpointIaxRequest {
	return IaxAPICreateEndpointIaxRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EndpointIAX
func (a *IaxAPIService) CreateEndpointIaxExecute(r IaxAPICreateEndpointIaxRequest) (*EndpointIAX, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointIAX
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.CreateEndpointIax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/iax"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IaxAPICreateRegisterIaxRequest struct {
	ctx        context.Context
	ApiService IaxAPI
	body       *RegisterIAX
}

// Register iax to create
func (r IaxAPICreateRegisterIaxRequest) Body(body RegisterIAX) IaxAPICreateRegisterIaxRequest {
	r.body = &body
	return r
}

func (r IaxAPICreateRegisterIaxRequest) Execute() (*RegisterIAX, *http.Response, error) {
	return r.ApiService.CreateRegisterIaxExecute(r)
}

/*
CreateRegisterIax Create register_iax

**Required ACL:** `confd.registers.iax.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IaxAPICreateRegisterIaxRequest
*/
func (a *IaxAPIService) CreateRegisterIax(ctx context.Context) IaxAPICreateRegisterIaxRequest {
	return IaxAPICreateRegisterIaxRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RegisterIAX
func (a *IaxAPIService) CreateRegisterIaxExecute(r IaxAPICreateRegisterIaxRequest) (*RegisterIAX, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RegisterIAX
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.CreateRegisterIax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/registers/iax"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IaxAPIDeleteEndpointIaxRequest struct {
	ctx          context.Context
	ApiService   IaxAPI
	iaxId        int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r IaxAPIDeleteEndpointIaxRequest) AccentTenant(accentTenant string) IaxAPIDeleteEndpointIaxRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r IaxAPIDeleteEndpointIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEndpointIaxExecute(r)
}

/*
DeleteEndpointIax Delete IAX Endpoint

**Required ACL:** `confd.endpoints.iax.{iax_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param iaxId
	@return IaxAPIDeleteEndpointIaxRequest
*/
func (a *IaxAPIService) DeleteEndpointIax(ctx context.Context, iaxId int32) IaxAPIDeleteEndpointIaxRequest {
	return IaxAPIDeleteEndpointIaxRequest{
		ApiService: a,
		ctx:        ctx,
		iaxId:      iaxId,
	}
}

// Execute executes the request
func (a *IaxAPIService) DeleteEndpointIaxExecute(r IaxAPIDeleteEndpointIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.DeleteEndpointIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IaxAPIDeleteRegisterIaxRequest struct {
	ctx           context.Context
	ApiService    IaxAPI
	registerIaxId int32
}

func (r IaxAPIDeleteRegisterIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRegisterIaxExecute(r)
}

/*
DeleteRegisterIax Delete register IAX

**Required ACL:** `confd.registers.iax.{register_iax_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param registerIaxId Register IAX's ID
	@return IaxAPIDeleteRegisterIaxRequest
*/
func (a *IaxAPIService) DeleteRegisterIax(ctx context.Context, registerIaxId int32) IaxAPIDeleteRegisterIaxRequest {
	return IaxAPIDeleteRegisterIaxRequest{
		ApiService:    a,
		ctx:           ctx,
		registerIaxId: registerIaxId,
	}
}

// Execute executes the request
func (a *IaxAPIService) DeleteRegisterIaxExecute(r IaxAPIDeleteRegisterIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.DeleteRegisterIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/registers/iax/{register_iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"register_iax_id"+"}", url.PathEscape(parameterValueToString(r.registerIaxId, "registerIaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IaxAPIDissociateTrunkEndpointIaxRequest struct {
	ctx        context.Context
	ApiService IaxAPI
	trunkId    int32
	iaxId      int32
}

func (r IaxAPIDissociateTrunkEndpointIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateTrunkEndpointIaxExecute(r)
}

/*
DissociateTrunkEndpointIax Dissociate trunk and IAX endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.iax.{iax_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param iaxId
	@return IaxAPIDissociateTrunkEndpointIaxRequest
*/
func (a *IaxAPIService) DissociateTrunkEndpointIax(ctx context.Context, trunkId int32, iaxId int32) IaxAPIDissociateTrunkEndpointIaxRequest {
	return IaxAPIDissociateTrunkEndpointIaxRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		iaxId:      iaxId,
	}
}

// Execute executes the request
func (a *IaxAPIService) DissociateTrunkEndpointIaxExecute(r IaxAPIDissociateTrunkEndpointIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.DissociateTrunkEndpointIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IaxAPIDissociateTrunkRegisterIaxRequest struct {
	ctx        context.Context
	ApiService IaxAPI
	trunkId    int32
	iaxId      int32
}

func (r IaxAPIDissociateTrunkRegisterIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateTrunkRegisterIaxExecute(r)
}

/*
DissociateTrunkRegisterIax Dissociate trunk and IAX register

**Required ACL:** `confd.trunks.{trunk_id}.registers.iax.{iax_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param iaxId
	@return IaxAPIDissociateTrunkRegisterIaxRequest
*/
func (a *IaxAPIService) DissociateTrunkRegisterIax(ctx context.Context, trunkId int32, iaxId int32) IaxAPIDissociateTrunkRegisterIaxRequest {
	return IaxAPIDissociateTrunkRegisterIaxRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		iaxId:      iaxId,
	}
}

// Execute executes the request
func (a *IaxAPIService) DissociateTrunkRegisterIaxExecute(r IaxAPIDissociateTrunkRegisterIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.DissociateTrunkRegisterIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/registers/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IaxAPIGetEndpointIaxRequest struct {
	ctx          context.Context
	ApiService   IaxAPI
	iaxId        int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r IaxAPIGetEndpointIaxRequest) AccentTenant(accentTenant string) IaxAPIGetEndpointIaxRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r IaxAPIGetEndpointIaxRequest) Execute() (*EndpointIAX, *http.Response, error) {
	return r.ApiService.GetEndpointIaxExecute(r)
}

/*
GetEndpointIax Get IAX Endpoint

**Required ACL:** `confd.endpoints.iax.{iax_id}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param iaxId
	@return IaxAPIGetEndpointIaxRequest
*/
func (a *IaxAPIService) GetEndpointIax(ctx context.Context, iaxId int32) IaxAPIGetEndpointIaxRequest {
	return IaxAPIGetEndpointIaxRequest{
		ApiService: a,
		ctx:        ctx,
		iaxId:      iaxId,
	}
}

// Execute executes the request
//
//	@return EndpointIAX
func (a *IaxAPIService) GetEndpointIaxExecute(r IaxAPIGetEndpointIaxRequest) (*EndpointIAX, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointIAX
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.GetEndpointIax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IaxAPIGetRegisterIaxRequest struct {
	ctx           context.Context
	ApiService    IaxAPI
	registerIaxId int32
}

func (r IaxAPIGetRegisterIaxRequest) Execute() (*RegisterIAX, *http.Response, error) {
	return r.ApiService.GetRegisterIaxExecute(r)
}

/*
GetRegisterIax Get register IAX

**Required ACL:** `confd.registers.iax.{register_iax_id}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param registerIaxId Register IAX's ID
	@return IaxAPIGetRegisterIaxRequest
*/
func (a *IaxAPIService) GetRegisterIax(ctx context.Context, registerIaxId int32) IaxAPIGetRegisterIaxRequest {
	return IaxAPIGetRegisterIaxRequest{
		ApiService:    a,
		ctx:           ctx,
		registerIaxId: registerIaxId,
	}
}

// Execute executes the request
//
//	@return RegisterIAX
func (a *IaxAPIService) GetRegisterIaxExecute(r IaxAPIGetRegisterIaxRequest) (*RegisterIAX, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RegisterIAX
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.GetRegisterIax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/registers/iax/{register_iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"register_iax_id"+"}", url.PathEscape(parameterValueToString(r.registerIaxId, "registerIaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IaxAPIListAsteriskIaxCallnumberlimitsRequest struct {
	ctx        context.Context
	ApiService IaxAPI
}

func (r IaxAPIListAsteriskIaxCallnumberlimitsRequest) Execute() (*IAXCallNumberLimitss, *http.Response, error) {
	return r.ApiService.ListAsteriskIaxCallnumberlimitsExecute(r)
}

/*
ListAsteriskIaxCallnumberlimits List IAX callnumberlimits options

**Required ACL:** `confd.asterisk.iax.callnumberlimits.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IaxAPIListAsteriskIaxCallnumberlimitsRequest
*/
func (a *IaxAPIService) ListAsteriskIaxCallnumberlimits(ctx context.Context) IaxAPIListAsteriskIaxCallnumberlimitsRequest {
	return IaxAPIListAsteriskIaxCallnumberlimitsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return IAXCallNumberLimitss
func (a *IaxAPIService) ListAsteriskIaxCallnumberlimitsExecute(r IaxAPIListAsteriskIaxCallnumberlimitsRequest) (*IAXCallNumberLimitss, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IAXCallNumberLimitss
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.ListAsteriskIaxCallnumberlimits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/asterisk/iax/callnumberlimits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IaxAPIListEndpointsIaxRequest struct {
	ctx          context.Context
	ApiService   IaxAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r IaxAPIListEndpointsIaxRequest) AccentTenant(accentTenant string) IaxAPIListEndpointsIaxRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r IaxAPIListEndpointsIaxRequest) Recurse(recurse bool) IaxAPIListEndpointsIaxRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r IaxAPIListEndpointsIaxRequest) Order(order string) IaxAPIListEndpointsIaxRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r IaxAPIListEndpointsIaxRequest) Direction(direction string) IaxAPIListEndpointsIaxRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r IaxAPIListEndpointsIaxRequest) Limit(limit int32) IaxAPIListEndpointsIaxRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r IaxAPIListEndpointsIaxRequest) Offset(offset int32) IaxAPIListEndpointsIaxRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r IaxAPIListEndpointsIaxRequest) Search(search string) IaxAPIListEndpointsIaxRequest {
	r.search = &search
	return r
}

func (r IaxAPIListEndpointsIaxRequest) Execute() (*EndpointIAXItems, *http.Response, error) {
	return r.ApiService.ListEndpointsIaxExecute(r)
}

/*
ListEndpointsIax List IAX endpoints

**Required ACL:** `confd.endpoints.iax.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IaxAPIListEndpointsIaxRequest
*/
func (a *IaxAPIService) ListEndpointsIax(ctx context.Context) IaxAPIListEndpointsIaxRequest {
	return IaxAPIListEndpointsIaxRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EndpointIAXItems
func (a *IaxAPIService) ListEndpointsIaxExecute(r IaxAPIListEndpointsIaxRequest) (*EndpointIAXItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointIAXItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.ListEndpointsIax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/iax"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IaxAPIListRegistersIaxRequest struct {
	ctx        context.Context
	ApiService IaxAPI
	order      *string
	direction  *string
	limit      *int32
	offset     *int32
	search     *string
}

// Name of the field to use for sorting the list of items returned.
func (r IaxAPIListRegistersIaxRequest) Order(order string) IaxAPIListRegistersIaxRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r IaxAPIListRegistersIaxRequest) Direction(direction string) IaxAPIListRegistersIaxRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r IaxAPIListRegistersIaxRequest) Limit(limit int32) IaxAPIListRegistersIaxRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r IaxAPIListRegistersIaxRequest) Offset(offset int32) IaxAPIListRegistersIaxRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r IaxAPIListRegistersIaxRequest) Search(search string) IaxAPIListRegistersIaxRequest {
	r.search = &search
	return r
}

func (r IaxAPIListRegistersIaxRequest) Execute() (*RegisterIAXItems, *http.Response, error) {
	return r.ApiService.ListRegistersIaxExecute(r)
}

/*
ListRegistersIax List registers iax

**Required ACL:** `confd.registers.iax.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IaxAPIListRegistersIaxRequest
*/
func (a *IaxAPIService) ListRegistersIax(ctx context.Context) IaxAPIListRegistersIaxRequest {
	return IaxAPIListRegistersIaxRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RegisterIAXItems
func (a *IaxAPIService) ListRegistersIaxExecute(r IaxAPIListRegistersIaxRequest) (*RegisterIAXItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RegisterIAXItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.ListRegistersIax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/registers/iax"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IaxAPIUpdateAsteriskIaxCallnumberlimitsRequest struct {
	ctx        context.Context
	ApiService IaxAPI
	body       *IAXCallNumberLimitss
}

func (r IaxAPIUpdateAsteriskIaxCallnumberlimitsRequest) Body(body IAXCallNumberLimitss) IaxAPIUpdateAsteriskIaxCallnumberlimitsRequest {
	r.body = &body
	return r
}

func (r IaxAPIUpdateAsteriskIaxCallnumberlimitsRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateAsteriskIaxCallnumberlimitsExecute(r)
}

/*
UpdateAsteriskIaxCallnumberlimits Update IAX callnumberlimits option

**Required ACL:** `confd.asterisk.iax.callnumberlimits.update` **WARNING** This endpoint restore to default value or delete all fields that are not defined.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IaxAPIUpdateAsteriskIaxCallnumberlimitsRequest
*/
func (a *IaxAPIService) UpdateAsteriskIaxCallnumberlimits(ctx context.Context) IaxAPIUpdateAsteriskIaxCallnumberlimitsRequest {
	return IaxAPIUpdateAsteriskIaxCallnumberlimitsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *IaxAPIService) UpdateAsteriskIaxCallnumberlimitsExecute(r IaxAPIUpdateAsteriskIaxCallnumberlimitsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.UpdateAsteriskIaxCallnumberlimits")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/asterisk/iax/callnumberlimits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IaxAPIUpdateEndpointIaxRequest struct {
	ctx          context.Context
	ApiService   IaxAPI
	body         *EndpointIAX
	iaxId        int32
	accentTenant *string
}

func (r IaxAPIUpdateEndpointIaxRequest) Body(body EndpointIAX) IaxAPIUpdateEndpointIaxRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r IaxAPIUpdateEndpointIaxRequest) AccentTenant(accentTenant string) IaxAPIUpdateEndpointIaxRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r IaxAPIUpdateEndpointIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateEndpointIaxExecute(r)
}

/*
UpdateEndpointIax Update IAX Endpoint

**Required ACL:** `confd.endpoints.iax.{iax_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param iaxId
	@return IaxAPIUpdateEndpointIaxRequest
*/
func (a *IaxAPIService) UpdateEndpointIax(ctx context.Context, iaxId int32) IaxAPIUpdateEndpointIaxRequest {
	return IaxAPIUpdateEndpointIaxRequest{
		ApiService: a,
		ctx:        ctx,
		iaxId:      iaxId,
	}
}

// Execute executes the request
func (a *IaxAPIService) UpdateEndpointIaxExecute(r IaxAPIUpdateEndpointIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.UpdateEndpointIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IaxAPIUpdateRegisterIaxRequest struct {
	ctx           context.Context
	ApiService    IaxAPI
	body          *RegisterIAX
	registerIaxId int32
}

func (r IaxAPIUpdateRegisterIaxRequest) Body(body RegisterIAX) IaxAPIUpdateRegisterIaxRequest {
	r.body = &body
	return r
}

func (r IaxAPIUpdateRegisterIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateRegisterIaxExecute(r)
}

/*
UpdateRegisterIax Update register IAX

**Required ACL:** `confd.registers.iax.{register_iax_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param registerIaxId Register IAX's ID
	@return IaxAPIUpdateRegisterIaxRequest
*/
func (a *IaxAPIService) UpdateRegisterIax(ctx context.Context, registerIaxId int32) IaxAPIUpdateRegisterIaxRequest {
	return IaxAPIUpdateRegisterIaxRequest{
		ApiService:    a,
		ctx:           ctx,
		registerIaxId: registerIaxId,
	}
}

// Execute executes the request
func (a *IaxAPIService) UpdateRegisterIaxExecute(r IaxAPIUpdateRegisterIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IaxAPIService.UpdateRegisterIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/registers/iax/{register_iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"register_iax_id"+"}", url.PathEscape(parameterValueToString(r.registerIaxId, "registerIaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
