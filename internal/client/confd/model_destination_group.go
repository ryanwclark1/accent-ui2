/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DestinationGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DestinationGroup{}

// DestinationGroup struct for DestinationGroup
type DestinationGroup struct {
	// The id of the group
	GroupId  int32    `json:"group_id"`
	RingTime *float32 `json:"ring_time,omitempty"`
	// MUST be 'group'
	Type string `json:"type"`
}

type _DestinationGroup DestinationGroup

// NewDestinationGroup instantiates a new DestinationGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationGroup(groupId int32, type_ string) *DestinationGroup {
	this := DestinationGroup{}
	this.GroupId = groupId
	this.Type = type_
	return &this
}

// NewDestinationGroupWithDefaults instantiates a new DestinationGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationGroupWithDefaults() *DestinationGroup {
	this := DestinationGroup{}
	return &this
}

// GetGroupId returns the GroupId field value
func (o *DestinationGroup) GetGroupId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *DestinationGroup) GetGroupIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *DestinationGroup) SetGroupId(v int32) {
	o.GroupId = v
}

// GetRingTime returns the RingTime field value if set, zero value otherwise.
func (o *DestinationGroup) GetRingTime() float32 {
	if o == nil || IsNil(o.RingTime) {
		var ret float32
		return ret
	}
	return *o.RingTime
}

// GetRingTimeOk returns a tuple with the RingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationGroup) GetRingTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.RingTime) {
		return nil, false
	}
	return o.RingTime, true
}

// HasRingTime returns a boolean if a field has been set.
func (o *DestinationGroup) HasRingTime() bool {
	if o != nil && !IsNil(o.RingTime) {
		return true
	}

	return false
}

// SetRingTime gets a reference to the given float32 and assigns it to the RingTime field.
func (o *DestinationGroup) SetRingTime(v float32) {
	o.RingTime = &v
}

// GetType returns the Type field value
func (o *DestinationGroup) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DestinationGroup) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DestinationGroup) SetType(v string) {
	o.Type = v
}

func (o DestinationGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DestinationGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group_id"] = o.GroupId
	if !IsNil(o.RingTime) {
		toSerialize["ring_time"] = o.RingTime
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *DestinationGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group_id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDestinationGroup := _DestinationGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDestinationGroup)

	if err != nil {
		return err
	}

	*o = DestinationGroup(varDestinationGroup)

	return err
}

type NullableDestinationGroup struct {
	value *DestinationGroup
	isSet bool
}

func (v NullableDestinationGroup) Get() *DestinationGroup {
	return v.value
}

func (v *NullableDestinationGroup) Set(val *DestinationGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationGroup(val *DestinationGroup) *NullableDestinationGroup {
	return &NullableDestinationGroup{value: val, isSet: true}
}

func (v NullableDestinationGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
