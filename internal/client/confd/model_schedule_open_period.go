/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the ScheduleOpenPeriod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleOpenPeriod{}

// ScheduleOpenPeriod struct for ScheduleOpenPeriod
type ScheduleOpenPeriod struct {
	// The end hour of the period. Format <HH:MM>
	HoursEnd *string `json:"hours_end,omitempty"`
	// The start hour of the period. Format <HH:MM>
	HoursStart *string `json:"hours_start,omitempty"`
	// The month days of the period.
	MonthDays []int32 `json:"month_days,omitempty"`
	// The months of the period. Month start with January(1) and end with December(12)
	Months []int32 `json:"months,omitempty"`
	// The week days of the period. Week day start with Monday(1) and end with Sunday(7)
	WeekDays []int32 `json:"week_days,omitempty"`
}

// NewScheduleOpenPeriod instantiates a new ScheduleOpenPeriod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleOpenPeriod() *ScheduleOpenPeriod {
	this := ScheduleOpenPeriod{}
	return &this
}

// NewScheduleOpenPeriodWithDefaults instantiates a new ScheduleOpenPeriod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleOpenPeriodWithDefaults() *ScheduleOpenPeriod {
	this := ScheduleOpenPeriod{}
	return &this
}

// GetHoursEnd returns the HoursEnd field value if set, zero value otherwise.
func (o *ScheduleOpenPeriod) GetHoursEnd() string {
	if o == nil || IsNil(o.HoursEnd) {
		var ret string
		return ret
	}
	return *o.HoursEnd
}

// GetHoursEndOk returns a tuple with the HoursEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleOpenPeriod) GetHoursEndOk() (*string, bool) {
	if o == nil || IsNil(o.HoursEnd) {
		return nil, false
	}
	return o.HoursEnd, true
}

// HasHoursEnd returns a boolean if a field has been set.
func (o *ScheduleOpenPeriod) HasHoursEnd() bool {
	if o != nil && !IsNil(o.HoursEnd) {
		return true
	}

	return false
}

// SetHoursEnd gets a reference to the given string and assigns it to the HoursEnd field.
func (o *ScheduleOpenPeriod) SetHoursEnd(v string) {
	o.HoursEnd = &v
}

// GetHoursStart returns the HoursStart field value if set, zero value otherwise.
func (o *ScheduleOpenPeriod) GetHoursStart() string {
	if o == nil || IsNil(o.HoursStart) {
		var ret string
		return ret
	}
	return *o.HoursStart
}

// GetHoursStartOk returns a tuple with the HoursStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleOpenPeriod) GetHoursStartOk() (*string, bool) {
	if o == nil || IsNil(o.HoursStart) {
		return nil, false
	}
	return o.HoursStart, true
}

// HasHoursStart returns a boolean if a field has been set.
func (o *ScheduleOpenPeriod) HasHoursStart() bool {
	if o != nil && !IsNil(o.HoursStart) {
		return true
	}

	return false
}

// SetHoursStart gets a reference to the given string and assigns it to the HoursStart field.
func (o *ScheduleOpenPeriod) SetHoursStart(v string) {
	o.HoursStart = &v
}

// GetMonthDays returns the MonthDays field value if set, zero value otherwise.
func (o *ScheduleOpenPeriod) GetMonthDays() []int32 {
	if o == nil || IsNil(o.MonthDays) {
		var ret []int32
		return ret
	}
	return o.MonthDays
}

// GetMonthDaysOk returns a tuple with the MonthDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleOpenPeriod) GetMonthDaysOk() ([]int32, bool) {
	if o == nil || IsNil(o.MonthDays) {
		return nil, false
	}
	return o.MonthDays, true
}

// HasMonthDays returns a boolean if a field has been set.
func (o *ScheduleOpenPeriod) HasMonthDays() bool {
	if o != nil && !IsNil(o.MonthDays) {
		return true
	}

	return false
}

// SetMonthDays gets a reference to the given []int32 and assigns it to the MonthDays field.
func (o *ScheduleOpenPeriod) SetMonthDays(v []int32) {
	o.MonthDays = v
}

// GetMonths returns the Months field value if set, zero value otherwise.
func (o *ScheduleOpenPeriod) GetMonths() []int32 {
	if o == nil || IsNil(o.Months) {
		var ret []int32
		return ret
	}
	return o.Months
}

// GetMonthsOk returns a tuple with the Months field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleOpenPeriod) GetMonthsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Months) {
		return nil, false
	}
	return o.Months, true
}

// HasMonths returns a boolean if a field has been set.
func (o *ScheduleOpenPeriod) HasMonths() bool {
	if o != nil && !IsNil(o.Months) {
		return true
	}

	return false
}

// SetMonths gets a reference to the given []int32 and assigns it to the Months field.
func (o *ScheduleOpenPeriod) SetMonths(v []int32) {
	o.Months = v
}

// GetWeekDays returns the WeekDays field value if set, zero value otherwise.
func (o *ScheduleOpenPeriod) GetWeekDays() []int32 {
	if o == nil || IsNil(o.WeekDays) {
		var ret []int32
		return ret
	}
	return o.WeekDays
}

// GetWeekDaysOk returns a tuple with the WeekDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleOpenPeriod) GetWeekDaysOk() ([]int32, bool) {
	if o == nil || IsNil(o.WeekDays) {
		return nil, false
	}
	return o.WeekDays, true
}

// HasWeekDays returns a boolean if a field has been set.
func (o *ScheduleOpenPeriod) HasWeekDays() bool {
	if o != nil && !IsNil(o.WeekDays) {
		return true
	}

	return false
}

// SetWeekDays gets a reference to the given []int32 and assigns it to the WeekDays field.
func (o *ScheduleOpenPeriod) SetWeekDays(v []int32) {
	o.WeekDays = v
}

func (o ScheduleOpenPeriod) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleOpenPeriod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HoursEnd) {
		toSerialize["hours_end"] = o.HoursEnd
	}
	if !IsNil(o.HoursStart) {
		toSerialize["hours_start"] = o.HoursStart
	}
	if !IsNil(o.MonthDays) {
		toSerialize["month_days"] = o.MonthDays
	}
	if !IsNil(o.Months) {
		toSerialize["months"] = o.Months
	}
	if !IsNil(o.WeekDays) {
		toSerialize["week_days"] = o.WeekDays
	}
	return toSerialize, nil
}

type NullableScheduleOpenPeriod struct {
	value *ScheduleOpenPeriod
	isSet bool
}

func (v NullableScheduleOpenPeriod) Get() *ScheduleOpenPeriod {
	return v.value
}

func (v *NullableScheduleOpenPeriod) Set(val *ScheduleOpenPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleOpenPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleOpenPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleOpenPeriod(val *ScheduleOpenPeriod) *NullableScheduleOpenPeriod {
	return &NullableScheduleOpenPeriod{value: val, isSet: true}
}

func (v NullableScheduleOpenPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleOpenPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
