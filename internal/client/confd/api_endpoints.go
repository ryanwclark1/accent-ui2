/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type EndpointsAPI interface {

	/*
		AssociateLineEndpointCustom Associate line and Custom endpoint

		**Required ACL:** `confd.lines.{line_id}.endpoints.custom.{custom_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param lineId
		@param customId
		@return EndpointsAPIAssociateLineEndpointCustomRequest
	*/
	AssociateLineEndpointCustom(ctx context.Context, lineId int32, customId int32) EndpointsAPIAssociateLineEndpointCustomRequest

	// AssociateLineEndpointCustomExecute executes the request
	AssociateLineEndpointCustomExecute(r EndpointsAPIAssociateLineEndpointCustomRequest) (*http.Response, error)

	/*
		AssociateLineEndpointSccp Associate line and SCCP endpoint

		**Required ACL:** `confd.lines.{line_id}.endpoints.sccp.{sccp_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param lineId
		@param sccpId
		@return EndpointsAPIAssociateLineEndpointSccpRequest
	*/
	AssociateLineEndpointSccp(ctx context.Context, lineId int32, sccpId int32) EndpointsAPIAssociateLineEndpointSccpRequest

	// AssociateLineEndpointSccpExecute executes the request
	AssociateLineEndpointSccpExecute(r EndpointsAPIAssociateLineEndpointSccpRequest) (*http.Response, error)

	/*
		AssociateLineEndpointSip Associate line and SIP endpoint

		**Required ACL:** `confd.lines.{line_id}.endpoints.sip.{sip_uuid}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param lineId
		@param sipUuid
		@return EndpointsAPIAssociateLineEndpointSipRequest
	*/
	AssociateLineEndpointSip(ctx context.Context, lineId int32, sipUuid string) EndpointsAPIAssociateLineEndpointSipRequest

	// AssociateLineEndpointSipExecute executes the request
	AssociateLineEndpointSipExecute(r EndpointsAPIAssociateLineEndpointSipRequest) (*http.Response, error)

	/*
		AssociateTrunkEndpointCustom Associate trunk and Custom endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.custom.{custom_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param customId
		@return EndpointsAPIAssociateTrunkEndpointCustomRequest
	*/
	AssociateTrunkEndpointCustom(ctx context.Context, trunkId int32, customId int32) EndpointsAPIAssociateTrunkEndpointCustomRequest

	// AssociateTrunkEndpointCustomExecute executes the request
	AssociateTrunkEndpointCustomExecute(r EndpointsAPIAssociateTrunkEndpointCustomRequest) (*http.Response, error)

	/*
		AssociateTrunkEndpointIax Associate trunk and IAX endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.iax.{iax_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param iaxId
		@return EndpointsAPIAssociateTrunkEndpointIaxRequest
	*/
	AssociateTrunkEndpointIax(ctx context.Context, trunkId int32, iaxId int32) EndpointsAPIAssociateTrunkEndpointIaxRequest

	// AssociateTrunkEndpointIaxExecute executes the request
	AssociateTrunkEndpointIaxExecute(r EndpointsAPIAssociateTrunkEndpointIaxRequest) (*http.Response, error)

	/*
		AssociateTrunkEndpointSip Associate trunk and SIP endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.sip.{sip_uuid}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param sipUuid
		@return EndpointsAPIAssociateTrunkEndpointSipRequest
	*/
	AssociateTrunkEndpointSip(ctx context.Context, trunkId int32, sipUuid string) EndpointsAPIAssociateTrunkEndpointSipRequest

	// AssociateTrunkEndpointSipExecute executes the request
	AssociateTrunkEndpointSipExecute(r EndpointsAPIAssociateTrunkEndpointSipRequest) (*http.Response, error)

	/*
		CreateEndpointCustom Create Custom endpoint

		**Required ACL:** `confd.endpoints.custom.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return EndpointsAPICreateEndpointCustomRequest
	*/
	CreateEndpointCustom(ctx context.Context) EndpointsAPICreateEndpointCustomRequest

	// CreateEndpointCustomExecute executes the request
	//  @return EndpointCustom
	CreateEndpointCustomExecute(r EndpointsAPICreateEndpointCustomRequest) (*EndpointCustom, *http.Response, error)

	/*
		CreateEndpointIax Create IAX endpoint

		**Required ACL:** `confd.endpoints.iax.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return EndpointsAPICreateEndpointIaxRequest
	*/
	CreateEndpointIax(ctx context.Context) EndpointsAPICreateEndpointIaxRequest

	// CreateEndpointIaxExecute executes the request
	//  @return EndpointIAX
	CreateEndpointIaxExecute(r EndpointsAPICreateEndpointIaxRequest) (*EndpointIAX, *http.Response, error)

	/*
		CreateEndpointSccp Create SCCP endpoint

		**Required ACL:** `confd.endpoints.sccp.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return EndpointsAPICreateEndpointSccpRequest
	*/
	CreateEndpointSccp(ctx context.Context) EndpointsAPICreateEndpointSccpRequest

	// CreateEndpointSccpExecute executes the request
	//  @return EndpointSccp
	CreateEndpointSccpExecute(r EndpointsAPICreateEndpointSccpRequest) (*EndpointSccp, *http.Response, error)

	/*
		CreateEndpointSip Create a SIP endpoint

		**Required ACL:** `confd.endpoints.sip.create` Create a new SIP endpoint. This endpoint can inherit from other endpoints, only modify fields that have to be modified.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return EndpointsAPICreateEndpointSipRequest
	*/
	CreateEndpointSip(ctx context.Context) EndpointsAPICreateEndpointSipRequest

	// CreateEndpointSipExecute executes the request
	//  @return EndpointSIP
	CreateEndpointSipExecute(r EndpointsAPICreateEndpointSipRequest) (*EndpointSIP, *http.Response, error)

	/*
		CreateEndpointSipTemplate Create a SIP endpoint template

		**Required ACL:** `confd.endpoints.sip.templates.create` Create a new SIP endpoint configuration template. This endpoint can inherit from other templates, only modify fields that have to be modified.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return EndpointsAPICreateEndpointSipTemplateRequest
	*/
	CreateEndpointSipTemplate(ctx context.Context) EndpointsAPICreateEndpointSipTemplateRequest

	// CreateEndpointSipTemplateExecute executes the request
	//  @return EndpointSIP
	CreateEndpointSipTemplateExecute(r EndpointsAPICreateEndpointSipTemplateRequest) (*EndpointSIP, *http.Response, error)

	/*
		DeleteEndpointCustom Delete Custom Endpoint

		**Required ACL:** `confd.endpoints.custom.{custom_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customId
		@return EndpointsAPIDeleteEndpointCustomRequest
	*/
	DeleteEndpointCustom(ctx context.Context, customId int32) EndpointsAPIDeleteEndpointCustomRequest

	// DeleteEndpointCustomExecute executes the request
	DeleteEndpointCustomExecute(r EndpointsAPIDeleteEndpointCustomRequest) (*http.Response, error)

	/*
		DeleteEndpointIax Delete IAX Endpoint

		**Required ACL:** `confd.endpoints.iax.{iax_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param iaxId
		@return EndpointsAPIDeleteEndpointIaxRequest
	*/
	DeleteEndpointIax(ctx context.Context, iaxId int32) EndpointsAPIDeleteEndpointIaxRequest

	// DeleteEndpointIaxExecute executes the request
	DeleteEndpointIaxExecute(r EndpointsAPIDeleteEndpointIaxRequest) (*http.Response, error)

	/*
		DeleteEndpointSccp Delete SCCP Endpoint

		**Required ACL:** `confd.endpoints.sccp.{sccp_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param sccpId
		@return EndpointsAPIDeleteEndpointSccpRequest
	*/
	DeleteEndpointSccp(ctx context.Context, sccpId int32) EndpointsAPIDeleteEndpointSccpRequest

	// DeleteEndpointSccpExecute executes the request
	DeleteEndpointSccpExecute(r EndpointsAPIDeleteEndpointSccpRequest) (*http.Response, error)

	/*
		DeleteEndpointSip Delete SIP Endpoint

		**Required ACL:** `confd.endpoints.sip.{sip_uuid}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param sipUuid
		@return EndpointsAPIDeleteEndpointSipRequest
	*/
	DeleteEndpointSip(ctx context.Context, sipUuid string) EndpointsAPIDeleteEndpointSipRequest

	// DeleteEndpointSipExecute executes the request
	DeleteEndpointSipExecute(r EndpointsAPIDeleteEndpointSipRequest) (*http.Response, error)

	/*
		DeleteEndpointSipTemplate Delete SIP Endpoint Template

		**Required ACL:** `confd.endpoints.sip.templates.{template_uuid}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param templateUuid
		@return EndpointsAPIDeleteEndpointSipTemplateRequest
	*/
	DeleteEndpointSipTemplate(ctx context.Context, templateUuid string) EndpointsAPIDeleteEndpointSipTemplateRequest

	// DeleteEndpointSipTemplateExecute executes the request
	DeleteEndpointSipTemplateExecute(r EndpointsAPIDeleteEndpointSipTemplateRequest) (*http.Response, error)

	/*
		DissociateLineEndpointCustom Dissociate line and Custom endpoint

		**Required ACL:** `confd.lines.{line_id}.endpoints.custom.{custom_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param lineId
		@param customId
		@return EndpointsAPIDissociateLineEndpointCustomRequest
	*/
	DissociateLineEndpointCustom(ctx context.Context, lineId int32, customId int32) EndpointsAPIDissociateLineEndpointCustomRequest

	// DissociateLineEndpointCustomExecute executes the request
	DissociateLineEndpointCustomExecute(r EndpointsAPIDissociateLineEndpointCustomRequest) (*http.Response, error)

	/*
		DissociateLineEndpointSccp Dissociate line and SCCP endpoint

		**Required ACL:** `confd.lines.{line_id}.endpoints.sccp.{sccp_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param lineId
		@param sccpId
		@return EndpointsAPIDissociateLineEndpointSccpRequest
	*/
	DissociateLineEndpointSccp(ctx context.Context, lineId int32, sccpId int32) EndpointsAPIDissociateLineEndpointSccpRequest

	// DissociateLineEndpointSccpExecute executes the request
	DissociateLineEndpointSccpExecute(r EndpointsAPIDissociateLineEndpointSccpRequest) (*http.Response, error)

	/*
		DissociateLineEndpointSip Dissociate line and SIP endpoint

		**Required ACL:** `confd.lines.{line_id}.endpoints.sip.{sip_uuid}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param lineId
		@param sipUuid
		@return EndpointsAPIDissociateLineEndpointSipRequest
	*/
	DissociateLineEndpointSip(ctx context.Context, lineId int32, sipUuid string) EndpointsAPIDissociateLineEndpointSipRequest

	// DissociateLineEndpointSipExecute executes the request
	DissociateLineEndpointSipExecute(r EndpointsAPIDissociateLineEndpointSipRequest) (*http.Response, error)

	/*
		DissociateTrunkEndpointCustom Dissociate trunk and Custom endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.custom.{custom_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param customId
		@return EndpointsAPIDissociateTrunkEndpointCustomRequest
	*/
	DissociateTrunkEndpointCustom(ctx context.Context, trunkId int32, customId int32) EndpointsAPIDissociateTrunkEndpointCustomRequest

	// DissociateTrunkEndpointCustomExecute executes the request
	DissociateTrunkEndpointCustomExecute(r EndpointsAPIDissociateTrunkEndpointCustomRequest) (*http.Response, error)

	/*
		DissociateTrunkEndpointIax Dissociate trunk and IAX endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.iax.{iax_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param iaxId
		@return EndpointsAPIDissociateTrunkEndpointIaxRequest
	*/
	DissociateTrunkEndpointIax(ctx context.Context, trunkId int32, iaxId int32) EndpointsAPIDissociateTrunkEndpointIaxRequest

	// DissociateTrunkEndpointIaxExecute executes the request
	DissociateTrunkEndpointIaxExecute(r EndpointsAPIDissociateTrunkEndpointIaxRequest) (*http.Response, error)

	/*
		DissociateTrunkEndpointSip Dissociate trunk and SIP endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.sip.{sip_uuid}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param sipUuid
		@return EndpointsAPIDissociateTrunkEndpointSipRequest
	*/
	DissociateTrunkEndpointSip(ctx context.Context, trunkId int32, sipUuid string) EndpointsAPIDissociateTrunkEndpointSipRequest

	// DissociateTrunkEndpointSipExecute executes the request
	DissociateTrunkEndpointSipExecute(r EndpointsAPIDissociateTrunkEndpointSipRequest) (*http.Response, error)

	/*
		GetEndpointCustom Get Custom Endpoint

		**Required ACL:** `confd.endpoints.custom.{custom_id}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customId
		@return EndpointsAPIGetEndpointCustomRequest
	*/
	GetEndpointCustom(ctx context.Context, customId int32) EndpointsAPIGetEndpointCustomRequest

	// GetEndpointCustomExecute executes the request
	//  @return EndpointCustom
	GetEndpointCustomExecute(r EndpointsAPIGetEndpointCustomRequest) (*EndpointCustom, *http.Response, error)

	/*
		GetEndpointIax Get IAX Endpoint

		**Required ACL:** `confd.endpoints.iax.{iax_id}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param iaxId
		@return EndpointsAPIGetEndpointIaxRequest
	*/
	GetEndpointIax(ctx context.Context, iaxId int32) EndpointsAPIGetEndpointIaxRequest

	// GetEndpointIaxExecute executes the request
	//  @return EndpointIAX
	GetEndpointIaxExecute(r EndpointsAPIGetEndpointIaxRequest) (*EndpointIAX, *http.Response, error)

	/*
		GetEndpointSccp Get SCCP Endpoint

		**Required ACL:** `confd.endpoints.sccp.{sccp_id}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param sccpId
		@return EndpointsAPIGetEndpointSccpRequest
	*/
	GetEndpointSccp(ctx context.Context, sccpId int32) EndpointsAPIGetEndpointSccpRequest

	// GetEndpointSccpExecute executes the request
	//  @return EndpointSccp
	GetEndpointSccpExecute(r EndpointsAPIGetEndpointSccpRequest) (*EndpointSccp, *http.Response, error)

	/*
		GetEndpointSip Get SIP Endpoint

		**Required ACL:** `confd.endpoints.sip.{sip_uuid}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param sipUuid
		@return EndpointsAPIGetEndpointSipRequest
	*/
	GetEndpointSip(ctx context.Context, sipUuid string) EndpointsAPIGetEndpointSipRequest

	// GetEndpointSipExecute executes the request
	//  @return EndpointSIP
	GetEndpointSipExecute(r EndpointsAPIGetEndpointSipRequest) (*EndpointSIP, *http.Response, error)

	/*
		GetEndpointSipTemplate Get SIP Endpoint template

		**Required ACL:** `confd.endpoints.sip.templates.{template_uuid}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param templateUuid
		@return EndpointsAPIGetEndpointSipTemplateRequest
	*/
	GetEndpointSipTemplate(ctx context.Context, templateUuid string) EndpointsAPIGetEndpointSipTemplateRequest

	// GetEndpointSipTemplateExecute executes the request
	//  @return EndpointSIP
	GetEndpointSipTemplateExecute(r EndpointsAPIGetEndpointSipTemplateRequest) (*EndpointSIP, *http.Response, error)

	/*
		GetUserLineAssociatedEndpointsSip Get SIP endpoint of a line for a user

		**Required ACL:** `confd.users.{user_uuid}.lines.{line_id}.associated.endpoints.sip.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userUuid the user's UUID
		@param lineId
		@return EndpointsAPIGetUserLineAssociatedEndpointsSipRequest
	*/
	GetUserLineAssociatedEndpointsSip(ctx context.Context, userUuid string, lineId int32) EndpointsAPIGetUserLineAssociatedEndpointsSipRequest

	// GetUserLineAssociatedEndpointsSipExecute executes the request
	//  @return EndpointSIP
	GetUserLineAssociatedEndpointsSipExecute(r EndpointsAPIGetUserLineAssociatedEndpointsSipRequest) (*EndpointSIP, *http.Response, error)

	/*
		GetUserLineMainAssociatedEndpointsSip Get SIP endpoint of main line for a user

		**Required ACL:** `confd.users.{user_uuid}.lines.main.associated.endpoints.sip.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userUuid the user's UUID
		@return EndpointsAPIGetUserLineMainAssociatedEndpointsSipRequest
	*/
	GetUserLineMainAssociatedEndpointsSip(ctx context.Context, userUuid string) EndpointsAPIGetUserLineMainAssociatedEndpointsSipRequest

	// GetUserLineMainAssociatedEndpointsSipExecute executes the request
	//  @return EndpointSIP
	GetUserLineMainAssociatedEndpointsSipExecute(r EndpointsAPIGetUserLineMainAssociatedEndpointsSipRequest) (*EndpointSIP, *http.Response, error)

	/*
		ListEndpointsCustom List Custom endpoints

		**Required ACL:** `confd.endpoints.custom.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return EndpointsAPIListEndpointsCustomRequest
	*/
	ListEndpointsCustom(ctx context.Context) EndpointsAPIListEndpointsCustomRequest

	// ListEndpointsCustomExecute executes the request
	//  @return EndpointCustomItems
	ListEndpointsCustomExecute(r EndpointsAPIListEndpointsCustomRequest) (*EndpointCustomItems, *http.Response, error)

	/*
		ListEndpointsIax List IAX endpoints

		**Required ACL:** `confd.endpoints.iax.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return EndpointsAPIListEndpointsIaxRequest
	*/
	ListEndpointsIax(ctx context.Context) EndpointsAPIListEndpointsIaxRequest

	// ListEndpointsIaxExecute executes the request
	//  @return EndpointIAXItems
	ListEndpointsIaxExecute(r EndpointsAPIListEndpointsIaxRequest) (*EndpointIAXItems, *http.Response, error)

	/*
		ListEndpointsSccp List SCCP endpoints

		**Required ACL:** `confd.endpoints.sccp.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return EndpointsAPIListEndpointsSccpRequest
	*/
	ListEndpointsSccp(ctx context.Context) EndpointsAPIListEndpointsSccpRequest

	// ListEndpointsSccpExecute executes the request
	//  @return EndpointSccpItems
	ListEndpointsSccpExecute(r EndpointsAPIListEndpointsSccpRequest) (*EndpointSccpItems, *http.Response, error)

	/*
		ListEndpointsSip List SIP endpoints

		**Required ACL:** `confd.endpoints.sip.read`

	List all SIP configurations, each individual configuration includes only fields that it
	defines. Inherited fields from the templates or default values are not returned here.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return EndpointsAPIListEndpointsSipRequest
	*/
	ListEndpointsSip(ctx context.Context) EndpointsAPIListEndpointsSipRequest

	// ListEndpointsSipExecute executes the request
	//  @return EndpointSIPItems
	ListEndpointsSipExecute(r EndpointsAPIListEndpointsSipRequest) (*EndpointSIPItems, *http.Response, error)

	/*
		ListEndpointsSipTemplates List SIP endpoints templates

		**Required ACL:** `confd.endpoints.sip.templates.read` List all SIP configuration templates, each individual configuration includes only fields that it defines. Inherited fields from the templates or default values are not returned here.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return EndpointsAPIListEndpointsSipTemplatesRequest
	*/
	ListEndpointsSipTemplates(ctx context.Context) EndpointsAPIListEndpointsSipTemplatesRequest

	// ListEndpointsSipTemplatesExecute executes the request
	//  @return EndpointSIPItems
	ListEndpointsSipTemplatesExecute(r EndpointsAPIListEndpointsSipTemplatesRequest) (*EndpointSIPItems, *http.Response, error)

	/*
		UpdateEndpointCustom Update Custom Endpoint

		**Required ACL:** `confd.endpoints.custom.{custom_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customId
		@return EndpointsAPIUpdateEndpointCustomRequest
	*/
	UpdateEndpointCustom(ctx context.Context, customId int32) EndpointsAPIUpdateEndpointCustomRequest

	// UpdateEndpointCustomExecute executes the request
	UpdateEndpointCustomExecute(r EndpointsAPIUpdateEndpointCustomRequest) (*http.Response, error)

	/*
		UpdateEndpointIax Update IAX Endpoint

		**Required ACL:** `confd.endpoints.iax.{iax_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param iaxId
		@return EndpointsAPIUpdateEndpointIaxRequest
	*/
	UpdateEndpointIax(ctx context.Context, iaxId int32) EndpointsAPIUpdateEndpointIaxRequest

	// UpdateEndpointIaxExecute executes the request
	UpdateEndpointIaxExecute(r EndpointsAPIUpdateEndpointIaxRequest) (*http.Response, error)

	/*
		UpdateEndpointSccp Update SCCP Endpoint

		**Required ACL:** `confd.endpoints.sccp.{sccp_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param sccpId
		@return EndpointsAPIUpdateEndpointSccpRequest
	*/
	UpdateEndpointSccp(ctx context.Context, sccpId int32) EndpointsAPIUpdateEndpointSccpRequest

	// UpdateEndpointSccpExecute executes the request
	UpdateEndpointSccpExecute(r EndpointsAPIUpdateEndpointSccpRequest) (*http.Response, error)

	/*
		UpdateEndpointSip Update SIP Endpoint

		**Required ACL:** `confd.endpoints.sip.{sip_uuid}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param sipUuid
		@return EndpointsAPIUpdateEndpointSipRequest
	*/
	UpdateEndpointSip(ctx context.Context, sipUuid string) EndpointsAPIUpdateEndpointSipRequest

	// UpdateEndpointSipExecute executes the request
	UpdateEndpointSipExecute(r EndpointsAPIUpdateEndpointSipRequest) (*http.Response, error)

	/*
		UpdateEndpointSipTemplate Update SIP Endpoint Template

		**Required ACL:** `confd.endpoints.sip.templates.{template_uuid}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param templateUuid
		@return EndpointsAPIUpdateEndpointSipTemplateRequest
	*/
	UpdateEndpointSipTemplate(ctx context.Context, templateUuid string) EndpointsAPIUpdateEndpointSipTemplateRequest

	// UpdateEndpointSipTemplateExecute executes the request
	UpdateEndpointSipTemplateExecute(r EndpointsAPIUpdateEndpointSipTemplateRequest) (*http.Response, error)
}

// EndpointsAPIService EndpointsAPI service
type EndpointsAPIService service

type EndpointsAPIAssociateLineEndpointCustomRequest struct {
	ctx        context.Context
	ApiService EndpointsAPI
	lineId     int32
	customId   int32
}

func (r EndpointsAPIAssociateLineEndpointCustomRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateLineEndpointCustomExecute(r)
}

/*
AssociateLineEndpointCustom Associate line and Custom endpoint

**Required ACL:** `confd.lines.{line_id}.endpoints.custom.{custom_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lineId
	@param customId
	@return EndpointsAPIAssociateLineEndpointCustomRequest
*/
func (a *EndpointsAPIService) AssociateLineEndpointCustom(ctx context.Context, lineId int32, customId int32) EndpointsAPIAssociateLineEndpointCustomRequest {
	return EndpointsAPIAssociateLineEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		lineId:     lineId,
		customId:   customId,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) AssociateLineEndpointCustomExecute(r EndpointsAPIAssociateLineEndpointCustomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.AssociateLineEndpointCustom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/lines/{line_id}/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"line_id"+"}", url.PathEscape(parameterValueToString(r.lineId, "lineId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIAssociateLineEndpointSccpRequest struct {
	ctx        context.Context
	ApiService EndpointsAPI
	lineId     int32
	sccpId     int32
}

func (r EndpointsAPIAssociateLineEndpointSccpRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateLineEndpointSccpExecute(r)
}

/*
AssociateLineEndpointSccp Associate line and SCCP endpoint

**Required ACL:** `confd.lines.{line_id}.endpoints.sccp.{sccp_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lineId
	@param sccpId
	@return EndpointsAPIAssociateLineEndpointSccpRequest
*/
func (a *EndpointsAPIService) AssociateLineEndpointSccp(ctx context.Context, lineId int32, sccpId int32) EndpointsAPIAssociateLineEndpointSccpRequest {
	return EndpointsAPIAssociateLineEndpointSccpRequest{
		ApiService: a,
		ctx:        ctx,
		lineId:     lineId,
		sccpId:     sccpId,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) AssociateLineEndpointSccpExecute(r EndpointsAPIAssociateLineEndpointSccpRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.AssociateLineEndpointSccp")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/lines/{line_id}/endpoints/sccp/{sccp_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"line_id"+"}", url.PathEscape(parameterValueToString(r.lineId, "lineId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sccp_id"+"}", url.PathEscape(parameterValueToString(r.sccpId, "sccpId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIAssociateLineEndpointSipRequest struct {
	ctx        context.Context
	ApiService EndpointsAPI
	lineId     int32
	sipUuid    string
}

func (r EndpointsAPIAssociateLineEndpointSipRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateLineEndpointSipExecute(r)
}

/*
AssociateLineEndpointSip Associate line and SIP endpoint

**Required ACL:** `confd.lines.{line_id}.endpoints.sip.{sip_uuid}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lineId
	@param sipUuid
	@return EndpointsAPIAssociateLineEndpointSipRequest
*/
func (a *EndpointsAPIService) AssociateLineEndpointSip(ctx context.Context, lineId int32, sipUuid string) EndpointsAPIAssociateLineEndpointSipRequest {
	return EndpointsAPIAssociateLineEndpointSipRequest{
		ApiService: a,
		ctx:        ctx,
		lineId:     lineId,
		sipUuid:    sipUuid,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) AssociateLineEndpointSipExecute(r EndpointsAPIAssociateLineEndpointSipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.AssociateLineEndpointSip")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/lines/{line_id}/endpoints/sip/{sip_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"line_id"+"}", url.PathEscape(parameterValueToString(r.lineId, "lineId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sip_uuid"+"}", url.PathEscape(parameterValueToString(r.sipUuid, "sipUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIAssociateTrunkEndpointCustomRequest struct {
	ctx        context.Context
	ApiService EndpointsAPI
	trunkId    int32
	customId   int32
}

func (r EndpointsAPIAssociateTrunkEndpointCustomRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateTrunkEndpointCustomExecute(r)
}

/*
AssociateTrunkEndpointCustom Associate trunk and Custom endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.custom.{custom_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param customId
	@return EndpointsAPIAssociateTrunkEndpointCustomRequest
*/
func (a *EndpointsAPIService) AssociateTrunkEndpointCustom(ctx context.Context, trunkId int32, customId int32) EndpointsAPIAssociateTrunkEndpointCustomRequest {
	return EndpointsAPIAssociateTrunkEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		customId:   customId,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) AssociateTrunkEndpointCustomExecute(r EndpointsAPIAssociateTrunkEndpointCustomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.AssociateTrunkEndpointCustom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIAssociateTrunkEndpointIaxRequest struct {
	ctx        context.Context
	ApiService EndpointsAPI
	trunkId    int32
	iaxId      int32
}

func (r EndpointsAPIAssociateTrunkEndpointIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateTrunkEndpointIaxExecute(r)
}

/*
AssociateTrunkEndpointIax Associate trunk and IAX endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.iax.{iax_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param iaxId
	@return EndpointsAPIAssociateTrunkEndpointIaxRequest
*/
func (a *EndpointsAPIService) AssociateTrunkEndpointIax(ctx context.Context, trunkId int32, iaxId int32) EndpointsAPIAssociateTrunkEndpointIaxRequest {
	return EndpointsAPIAssociateTrunkEndpointIaxRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		iaxId:      iaxId,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) AssociateTrunkEndpointIaxExecute(r EndpointsAPIAssociateTrunkEndpointIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.AssociateTrunkEndpointIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIAssociateTrunkEndpointSipRequest struct {
	ctx        context.Context
	ApiService EndpointsAPI
	trunkId    int32
	sipUuid    string
}

func (r EndpointsAPIAssociateTrunkEndpointSipRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateTrunkEndpointSipExecute(r)
}

/*
AssociateTrunkEndpointSip Associate trunk and SIP endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.sip.{sip_uuid}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param sipUuid
	@return EndpointsAPIAssociateTrunkEndpointSipRequest
*/
func (a *EndpointsAPIService) AssociateTrunkEndpointSip(ctx context.Context, trunkId int32, sipUuid string) EndpointsAPIAssociateTrunkEndpointSipRequest {
	return EndpointsAPIAssociateTrunkEndpointSipRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		sipUuid:    sipUuid,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) AssociateTrunkEndpointSipExecute(r EndpointsAPIAssociateTrunkEndpointSipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.AssociateTrunkEndpointSip")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/sip/{sip_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sip_uuid"+"}", url.PathEscape(parameterValueToString(r.sipUuid, "sipUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPICreateEndpointCustomRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	body         *EndpointCustom
	accentTenant *string
}

// Custom Endpoint to create
func (r EndpointsAPICreateEndpointCustomRequest) Body(body EndpointCustom) EndpointsAPICreateEndpointCustomRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPICreateEndpointCustomRequest) AccentTenant(accentTenant string) EndpointsAPICreateEndpointCustomRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPICreateEndpointCustomRequest) Execute() (*EndpointCustom, *http.Response, error) {
	return r.ApiService.CreateEndpointCustomExecute(r)
}

/*
CreateEndpointCustom Create Custom endpoint

**Required ACL:** `confd.endpoints.custom.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EndpointsAPICreateEndpointCustomRequest
*/
func (a *EndpointsAPIService) CreateEndpointCustom(ctx context.Context) EndpointsAPICreateEndpointCustomRequest {
	return EndpointsAPICreateEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EndpointCustom
func (a *EndpointsAPIService) CreateEndpointCustomExecute(r EndpointsAPICreateEndpointCustomRequest) (*EndpointCustom, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointCustom
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.CreateEndpointCustom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/custom"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPICreateEndpointIaxRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	body         *EndpointIAX
	accentTenant *string
}

// IAX Endpoint to create
func (r EndpointsAPICreateEndpointIaxRequest) Body(body EndpointIAX) EndpointsAPICreateEndpointIaxRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPICreateEndpointIaxRequest) AccentTenant(accentTenant string) EndpointsAPICreateEndpointIaxRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPICreateEndpointIaxRequest) Execute() (*EndpointIAX, *http.Response, error) {
	return r.ApiService.CreateEndpointIaxExecute(r)
}

/*
CreateEndpointIax Create IAX endpoint

**Required ACL:** `confd.endpoints.iax.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EndpointsAPICreateEndpointIaxRequest
*/
func (a *EndpointsAPIService) CreateEndpointIax(ctx context.Context) EndpointsAPICreateEndpointIaxRequest {
	return EndpointsAPICreateEndpointIaxRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EndpointIAX
func (a *EndpointsAPIService) CreateEndpointIaxExecute(r EndpointsAPICreateEndpointIaxRequest) (*EndpointIAX, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointIAX
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.CreateEndpointIax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/iax"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPICreateEndpointSccpRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	body         *EndpointSccp
	accentTenant *string
}

// SCCP Endpoint to create
func (r EndpointsAPICreateEndpointSccpRequest) Body(body EndpointSccp) EndpointsAPICreateEndpointSccpRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPICreateEndpointSccpRequest) AccentTenant(accentTenant string) EndpointsAPICreateEndpointSccpRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPICreateEndpointSccpRequest) Execute() (*EndpointSccp, *http.Response, error) {
	return r.ApiService.CreateEndpointSccpExecute(r)
}

/*
CreateEndpointSccp Create SCCP endpoint

**Required ACL:** `confd.endpoints.sccp.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EndpointsAPICreateEndpointSccpRequest
*/
func (a *EndpointsAPIService) CreateEndpointSccp(ctx context.Context) EndpointsAPICreateEndpointSccpRequest {
	return EndpointsAPICreateEndpointSccpRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EndpointSccp
func (a *EndpointsAPIService) CreateEndpointSccpExecute(r EndpointsAPICreateEndpointSccpRequest) (*EndpointSccp, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointSccp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.CreateEndpointSccp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sccp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPICreateEndpointSipRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	body         *EndpointSIP
	accentTenant *string
}

// SIP Endpoint to create
func (r EndpointsAPICreateEndpointSipRequest) Body(body EndpointSIP) EndpointsAPICreateEndpointSipRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPICreateEndpointSipRequest) AccentTenant(accentTenant string) EndpointsAPICreateEndpointSipRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPICreateEndpointSipRequest) Execute() (*EndpointSIP, *http.Response, error) {
	return r.ApiService.CreateEndpointSipExecute(r)
}

/*
CreateEndpointSip Create a SIP endpoint

**Required ACL:** `confd.endpoints.sip.create` Create a new SIP endpoint. This endpoint can inherit from other endpoints, only modify fields that have to be modified.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EndpointsAPICreateEndpointSipRequest
*/
func (a *EndpointsAPIService) CreateEndpointSip(ctx context.Context) EndpointsAPICreateEndpointSipRequest {
	return EndpointsAPICreateEndpointSipRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EndpointSIP
func (a *EndpointsAPIService) CreateEndpointSipExecute(r EndpointsAPICreateEndpointSipRequest) (*EndpointSIP, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointSIP
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.CreateEndpointSip")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sip"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPICreateEndpointSipTemplateRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	body         *EndpointSIP
	accentTenant *string
}

// SIP Endpoint to create
func (r EndpointsAPICreateEndpointSipTemplateRequest) Body(body EndpointSIP) EndpointsAPICreateEndpointSipTemplateRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPICreateEndpointSipTemplateRequest) AccentTenant(accentTenant string) EndpointsAPICreateEndpointSipTemplateRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPICreateEndpointSipTemplateRequest) Execute() (*EndpointSIP, *http.Response, error) {
	return r.ApiService.CreateEndpointSipTemplateExecute(r)
}

/*
CreateEndpointSipTemplate Create a SIP endpoint template

**Required ACL:** `confd.endpoints.sip.templates.create` Create a new SIP endpoint configuration template. This endpoint can inherit from other templates, only modify fields that have to be modified.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EndpointsAPICreateEndpointSipTemplateRequest
*/
func (a *EndpointsAPIService) CreateEndpointSipTemplate(ctx context.Context) EndpointsAPICreateEndpointSipTemplateRequest {
	return EndpointsAPICreateEndpointSipTemplateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EndpointSIP
func (a *EndpointsAPIService) CreateEndpointSipTemplateExecute(r EndpointsAPICreateEndpointSipTemplateRequest) (*EndpointSIP, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointSIP
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.CreateEndpointSipTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sip/templates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPIDeleteEndpointCustomRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	customId     int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIDeleteEndpointCustomRequest) AccentTenant(accentTenant string) EndpointsAPIDeleteEndpointCustomRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPIDeleteEndpointCustomRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEndpointCustomExecute(r)
}

/*
DeleteEndpointCustom Delete Custom Endpoint

**Required ACL:** `confd.endpoints.custom.{custom_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customId
	@return EndpointsAPIDeleteEndpointCustomRequest
*/
func (a *EndpointsAPIService) DeleteEndpointCustom(ctx context.Context, customId int32) EndpointsAPIDeleteEndpointCustomRequest {
	return EndpointsAPIDeleteEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		customId:   customId,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) DeleteEndpointCustomExecute(r EndpointsAPIDeleteEndpointCustomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.DeleteEndpointCustom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIDeleteEndpointIaxRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	iaxId        int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIDeleteEndpointIaxRequest) AccentTenant(accentTenant string) EndpointsAPIDeleteEndpointIaxRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPIDeleteEndpointIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEndpointIaxExecute(r)
}

/*
DeleteEndpointIax Delete IAX Endpoint

**Required ACL:** `confd.endpoints.iax.{iax_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param iaxId
	@return EndpointsAPIDeleteEndpointIaxRequest
*/
func (a *EndpointsAPIService) DeleteEndpointIax(ctx context.Context, iaxId int32) EndpointsAPIDeleteEndpointIaxRequest {
	return EndpointsAPIDeleteEndpointIaxRequest{
		ApiService: a,
		ctx:        ctx,
		iaxId:      iaxId,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) DeleteEndpointIaxExecute(r EndpointsAPIDeleteEndpointIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.DeleteEndpointIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIDeleteEndpointSccpRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	sccpId       int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIDeleteEndpointSccpRequest) AccentTenant(accentTenant string) EndpointsAPIDeleteEndpointSccpRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPIDeleteEndpointSccpRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEndpointSccpExecute(r)
}

/*
DeleteEndpointSccp Delete SCCP Endpoint

**Required ACL:** `confd.endpoints.sccp.{sccp_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param sccpId
	@return EndpointsAPIDeleteEndpointSccpRequest
*/
func (a *EndpointsAPIService) DeleteEndpointSccp(ctx context.Context, sccpId int32) EndpointsAPIDeleteEndpointSccpRequest {
	return EndpointsAPIDeleteEndpointSccpRequest{
		ApiService: a,
		ctx:        ctx,
		sccpId:     sccpId,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) DeleteEndpointSccpExecute(r EndpointsAPIDeleteEndpointSccpRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.DeleteEndpointSccp")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sccp/{sccp_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sccp_id"+"}", url.PathEscape(parameterValueToString(r.sccpId, "sccpId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIDeleteEndpointSipRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	sipUuid      string
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIDeleteEndpointSipRequest) AccentTenant(accentTenant string) EndpointsAPIDeleteEndpointSipRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPIDeleteEndpointSipRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEndpointSipExecute(r)
}

/*
DeleteEndpointSip Delete SIP Endpoint

**Required ACL:** `confd.endpoints.sip.{sip_uuid}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param sipUuid
	@return EndpointsAPIDeleteEndpointSipRequest
*/
func (a *EndpointsAPIService) DeleteEndpointSip(ctx context.Context, sipUuid string) EndpointsAPIDeleteEndpointSipRequest {
	return EndpointsAPIDeleteEndpointSipRequest{
		ApiService: a,
		ctx:        ctx,
		sipUuid:    sipUuid,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) DeleteEndpointSipExecute(r EndpointsAPIDeleteEndpointSipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.DeleteEndpointSip")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sip/{sip_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"sip_uuid"+"}", url.PathEscape(parameterValueToString(r.sipUuid, "sipUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIDeleteEndpointSipTemplateRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	templateUuid string
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIDeleteEndpointSipTemplateRequest) AccentTenant(accentTenant string) EndpointsAPIDeleteEndpointSipTemplateRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPIDeleteEndpointSipTemplateRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEndpointSipTemplateExecute(r)
}

/*
DeleteEndpointSipTemplate Delete SIP Endpoint Template

**Required ACL:** `confd.endpoints.sip.templates.{template_uuid}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param templateUuid
	@return EndpointsAPIDeleteEndpointSipTemplateRequest
*/
func (a *EndpointsAPIService) DeleteEndpointSipTemplate(ctx context.Context, templateUuid string) EndpointsAPIDeleteEndpointSipTemplateRequest {
	return EndpointsAPIDeleteEndpointSipTemplateRequest{
		ApiService:   a,
		ctx:          ctx,
		templateUuid: templateUuid,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) DeleteEndpointSipTemplateExecute(r EndpointsAPIDeleteEndpointSipTemplateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.DeleteEndpointSipTemplate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sip/templates/{template_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"template_uuid"+"}", url.PathEscape(parameterValueToString(r.templateUuid, "templateUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIDissociateLineEndpointCustomRequest struct {
	ctx        context.Context
	ApiService EndpointsAPI
	lineId     int32
	customId   int32
}

func (r EndpointsAPIDissociateLineEndpointCustomRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateLineEndpointCustomExecute(r)
}

/*
DissociateLineEndpointCustom Dissociate line and Custom endpoint

**Required ACL:** `confd.lines.{line_id}.endpoints.custom.{custom_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lineId
	@param customId
	@return EndpointsAPIDissociateLineEndpointCustomRequest
*/
func (a *EndpointsAPIService) DissociateLineEndpointCustom(ctx context.Context, lineId int32, customId int32) EndpointsAPIDissociateLineEndpointCustomRequest {
	return EndpointsAPIDissociateLineEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		lineId:     lineId,
		customId:   customId,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) DissociateLineEndpointCustomExecute(r EndpointsAPIDissociateLineEndpointCustomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.DissociateLineEndpointCustom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/lines/{line_id}/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"line_id"+"}", url.PathEscape(parameterValueToString(r.lineId, "lineId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIDissociateLineEndpointSccpRequest struct {
	ctx        context.Context
	ApiService EndpointsAPI
	lineId     int32
	sccpId     int32
}

func (r EndpointsAPIDissociateLineEndpointSccpRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateLineEndpointSccpExecute(r)
}

/*
DissociateLineEndpointSccp Dissociate line and SCCP endpoint

**Required ACL:** `confd.lines.{line_id}.endpoints.sccp.{sccp_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lineId
	@param sccpId
	@return EndpointsAPIDissociateLineEndpointSccpRequest
*/
func (a *EndpointsAPIService) DissociateLineEndpointSccp(ctx context.Context, lineId int32, sccpId int32) EndpointsAPIDissociateLineEndpointSccpRequest {
	return EndpointsAPIDissociateLineEndpointSccpRequest{
		ApiService: a,
		ctx:        ctx,
		lineId:     lineId,
		sccpId:     sccpId,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) DissociateLineEndpointSccpExecute(r EndpointsAPIDissociateLineEndpointSccpRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.DissociateLineEndpointSccp")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/lines/{line_id}/endpoints/sccp/{sccp_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"line_id"+"}", url.PathEscape(parameterValueToString(r.lineId, "lineId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sccp_id"+"}", url.PathEscape(parameterValueToString(r.sccpId, "sccpId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIDissociateLineEndpointSipRequest struct {
	ctx        context.Context
	ApiService EndpointsAPI
	lineId     int32
	sipUuid    string
}

func (r EndpointsAPIDissociateLineEndpointSipRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateLineEndpointSipExecute(r)
}

/*
DissociateLineEndpointSip Dissociate line and SIP endpoint

**Required ACL:** `confd.lines.{line_id}.endpoints.sip.{sip_uuid}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lineId
	@param sipUuid
	@return EndpointsAPIDissociateLineEndpointSipRequest
*/
func (a *EndpointsAPIService) DissociateLineEndpointSip(ctx context.Context, lineId int32, sipUuid string) EndpointsAPIDissociateLineEndpointSipRequest {
	return EndpointsAPIDissociateLineEndpointSipRequest{
		ApiService: a,
		ctx:        ctx,
		lineId:     lineId,
		sipUuid:    sipUuid,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) DissociateLineEndpointSipExecute(r EndpointsAPIDissociateLineEndpointSipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.DissociateLineEndpointSip")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/lines/{line_id}/endpoints/sip/{sip_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"line_id"+"}", url.PathEscape(parameterValueToString(r.lineId, "lineId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sip_uuid"+"}", url.PathEscape(parameterValueToString(r.sipUuid, "sipUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIDissociateTrunkEndpointCustomRequest struct {
	ctx        context.Context
	ApiService EndpointsAPI
	trunkId    int32
	customId   int32
}

func (r EndpointsAPIDissociateTrunkEndpointCustomRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateTrunkEndpointCustomExecute(r)
}

/*
DissociateTrunkEndpointCustom Dissociate trunk and Custom endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.custom.{custom_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param customId
	@return EndpointsAPIDissociateTrunkEndpointCustomRequest
*/
func (a *EndpointsAPIService) DissociateTrunkEndpointCustom(ctx context.Context, trunkId int32, customId int32) EndpointsAPIDissociateTrunkEndpointCustomRequest {
	return EndpointsAPIDissociateTrunkEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		customId:   customId,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) DissociateTrunkEndpointCustomExecute(r EndpointsAPIDissociateTrunkEndpointCustomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.DissociateTrunkEndpointCustom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIDissociateTrunkEndpointIaxRequest struct {
	ctx        context.Context
	ApiService EndpointsAPI
	trunkId    int32
	iaxId      int32
}

func (r EndpointsAPIDissociateTrunkEndpointIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateTrunkEndpointIaxExecute(r)
}

/*
DissociateTrunkEndpointIax Dissociate trunk and IAX endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.iax.{iax_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param iaxId
	@return EndpointsAPIDissociateTrunkEndpointIaxRequest
*/
func (a *EndpointsAPIService) DissociateTrunkEndpointIax(ctx context.Context, trunkId int32, iaxId int32) EndpointsAPIDissociateTrunkEndpointIaxRequest {
	return EndpointsAPIDissociateTrunkEndpointIaxRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		iaxId:      iaxId,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) DissociateTrunkEndpointIaxExecute(r EndpointsAPIDissociateTrunkEndpointIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.DissociateTrunkEndpointIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIDissociateTrunkEndpointSipRequest struct {
	ctx        context.Context
	ApiService EndpointsAPI
	trunkId    int32
	sipUuid    string
}

func (r EndpointsAPIDissociateTrunkEndpointSipRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateTrunkEndpointSipExecute(r)
}

/*
DissociateTrunkEndpointSip Dissociate trunk and SIP endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.sip.{sip_uuid}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param sipUuid
	@return EndpointsAPIDissociateTrunkEndpointSipRequest
*/
func (a *EndpointsAPIService) DissociateTrunkEndpointSip(ctx context.Context, trunkId int32, sipUuid string) EndpointsAPIDissociateTrunkEndpointSipRequest {
	return EndpointsAPIDissociateTrunkEndpointSipRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		sipUuid:    sipUuid,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) DissociateTrunkEndpointSipExecute(r EndpointsAPIDissociateTrunkEndpointSipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.DissociateTrunkEndpointSip")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/sip/{sip_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sip_uuid"+"}", url.PathEscape(parameterValueToString(r.sipUuid, "sipUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIGetEndpointCustomRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	customId     int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIGetEndpointCustomRequest) AccentTenant(accentTenant string) EndpointsAPIGetEndpointCustomRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPIGetEndpointCustomRequest) Execute() (*EndpointCustom, *http.Response, error) {
	return r.ApiService.GetEndpointCustomExecute(r)
}

/*
GetEndpointCustom Get Custom Endpoint

**Required ACL:** `confd.endpoints.custom.{custom_id}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customId
	@return EndpointsAPIGetEndpointCustomRequest
*/
func (a *EndpointsAPIService) GetEndpointCustom(ctx context.Context, customId int32) EndpointsAPIGetEndpointCustomRequest {
	return EndpointsAPIGetEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		customId:   customId,
	}
}

// Execute executes the request
//
//	@return EndpointCustom
func (a *EndpointsAPIService) GetEndpointCustomExecute(r EndpointsAPIGetEndpointCustomRequest) (*EndpointCustom, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointCustom
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.GetEndpointCustom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPIGetEndpointIaxRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	iaxId        int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIGetEndpointIaxRequest) AccentTenant(accentTenant string) EndpointsAPIGetEndpointIaxRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPIGetEndpointIaxRequest) Execute() (*EndpointIAX, *http.Response, error) {
	return r.ApiService.GetEndpointIaxExecute(r)
}

/*
GetEndpointIax Get IAX Endpoint

**Required ACL:** `confd.endpoints.iax.{iax_id}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param iaxId
	@return EndpointsAPIGetEndpointIaxRequest
*/
func (a *EndpointsAPIService) GetEndpointIax(ctx context.Context, iaxId int32) EndpointsAPIGetEndpointIaxRequest {
	return EndpointsAPIGetEndpointIaxRequest{
		ApiService: a,
		ctx:        ctx,
		iaxId:      iaxId,
	}
}

// Execute executes the request
//
//	@return EndpointIAX
func (a *EndpointsAPIService) GetEndpointIaxExecute(r EndpointsAPIGetEndpointIaxRequest) (*EndpointIAX, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointIAX
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.GetEndpointIax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPIGetEndpointSccpRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	sccpId       int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIGetEndpointSccpRequest) AccentTenant(accentTenant string) EndpointsAPIGetEndpointSccpRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPIGetEndpointSccpRequest) Execute() (*EndpointSccp, *http.Response, error) {
	return r.ApiService.GetEndpointSccpExecute(r)
}

/*
GetEndpointSccp Get SCCP Endpoint

**Required ACL:** `confd.endpoints.sccp.{sccp_id}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param sccpId
	@return EndpointsAPIGetEndpointSccpRequest
*/
func (a *EndpointsAPIService) GetEndpointSccp(ctx context.Context, sccpId int32) EndpointsAPIGetEndpointSccpRequest {
	return EndpointsAPIGetEndpointSccpRequest{
		ApiService: a,
		ctx:        ctx,
		sccpId:     sccpId,
	}
}

// Execute executes the request
//
//	@return EndpointSccp
func (a *EndpointsAPIService) GetEndpointSccpExecute(r EndpointsAPIGetEndpointSccpRequest) (*EndpointSccp, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointSccp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.GetEndpointSccp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sccp/{sccp_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sccp_id"+"}", url.PathEscape(parameterValueToString(r.sccpId, "sccpId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPIGetEndpointSipRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	sipUuid      string
	accentTenant *string
	view         *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIGetEndpointSipRequest) AccentTenant(accentTenant string) EndpointsAPIGetEndpointSipRequest {
	r.accentTenant = &accentTenant
	return r
}

// Different view of the SIP endpoint  The &#x60;default&#x60; view, when the argument is omitted, is to include only options that are defined on the specified endpoint.  The &#x60;merged&#x60; view includes all options from included templates.
func (r EndpointsAPIGetEndpointSipRequest) View(view string) EndpointsAPIGetEndpointSipRequest {
	r.view = &view
	return r
}

func (r EndpointsAPIGetEndpointSipRequest) Execute() (*EndpointSIP, *http.Response, error) {
	return r.ApiService.GetEndpointSipExecute(r)
}

/*
GetEndpointSip Get SIP Endpoint

**Required ACL:** `confd.endpoints.sip.{sip_uuid}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param sipUuid
	@return EndpointsAPIGetEndpointSipRequest
*/
func (a *EndpointsAPIService) GetEndpointSip(ctx context.Context, sipUuid string) EndpointsAPIGetEndpointSipRequest {
	return EndpointsAPIGetEndpointSipRequest{
		ApiService: a,
		ctx:        ctx,
		sipUuid:    sipUuid,
	}
}

// Execute executes the request
//
//	@return EndpointSIP
func (a *EndpointsAPIService) GetEndpointSipExecute(r EndpointsAPIGetEndpointSipRequest) (*EndpointSIP, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointSIP
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.GetEndpointSip")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sip/{sip_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"sip_uuid"+"}", url.PathEscape(parameterValueToString(r.sipUuid, "sipUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.view != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "view", r.view, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPIGetEndpointSipTemplateRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	templateUuid string
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIGetEndpointSipTemplateRequest) AccentTenant(accentTenant string) EndpointsAPIGetEndpointSipTemplateRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPIGetEndpointSipTemplateRequest) Execute() (*EndpointSIP, *http.Response, error) {
	return r.ApiService.GetEndpointSipTemplateExecute(r)
}

/*
GetEndpointSipTemplate Get SIP Endpoint template

**Required ACL:** `confd.endpoints.sip.templates.{template_uuid}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param templateUuid
	@return EndpointsAPIGetEndpointSipTemplateRequest
*/
func (a *EndpointsAPIService) GetEndpointSipTemplate(ctx context.Context, templateUuid string) EndpointsAPIGetEndpointSipTemplateRequest {
	return EndpointsAPIGetEndpointSipTemplateRequest{
		ApiService:   a,
		ctx:          ctx,
		templateUuid: templateUuid,
	}
}

// Execute executes the request
//
//	@return EndpointSIP
func (a *EndpointsAPIService) GetEndpointSipTemplateExecute(r EndpointsAPIGetEndpointSipTemplateRequest) (*EndpointSIP, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointSIP
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.GetEndpointSipTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sip/templates/{template_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"template_uuid"+"}", url.PathEscape(parameterValueToString(r.templateUuid, "templateUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPIGetUserLineAssociatedEndpointsSipRequest struct {
	ctx        context.Context
	ApiService EndpointsAPI
	userUuid   string
	lineId     int32
	view       *string
}

// Different view of the SIP endpoint  The &#x60;default&#x60; view, when the argument is omitted, is to include only options that are defined on the specified endpoint.  The &#x60;merged&#x60; view includes all options from included templates.
func (r EndpointsAPIGetUserLineAssociatedEndpointsSipRequest) View(view string) EndpointsAPIGetUserLineAssociatedEndpointsSipRequest {
	r.view = &view
	return r
}

func (r EndpointsAPIGetUserLineAssociatedEndpointsSipRequest) Execute() (*EndpointSIP, *http.Response, error) {
	return r.ApiService.GetUserLineAssociatedEndpointsSipExecute(r)
}

/*
GetUserLineAssociatedEndpointsSip Get SIP endpoint of a line for a user

**Required ACL:** `confd.users.{user_uuid}.lines.{line_id}.associated.endpoints.sip.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userUuid the user's UUID
	@param lineId
	@return EndpointsAPIGetUserLineAssociatedEndpointsSipRequest
*/
func (a *EndpointsAPIService) GetUserLineAssociatedEndpointsSip(ctx context.Context, userUuid string, lineId int32) EndpointsAPIGetUserLineAssociatedEndpointsSipRequest {
	return EndpointsAPIGetUserLineAssociatedEndpointsSipRequest{
		ApiService: a,
		ctx:        ctx,
		userUuid:   userUuid,
		lineId:     lineId,
	}
}

// Execute executes the request
//
//	@return EndpointSIP
func (a *EndpointsAPIService) GetUserLineAssociatedEndpointsSipExecute(r EndpointsAPIGetUserLineAssociatedEndpointsSipRequest) (*EndpointSIP, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointSIP
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.GetUserLineAssociatedEndpointsSip")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_uuid}/lines/{line_id}/associated/endpoints/sip"
	localVarPath = strings.Replace(localVarPath, "{"+"user_uuid"+"}", url.PathEscape(parameterValueToString(r.userUuid, "userUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"line_id"+"}", url.PathEscape(parameterValueToString(r.lineId, "lineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.view != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "view", r.view, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPIGetUserLineMainAssociatedEndpointsSipRequest struct {
	ctx        context.Context
	ApiService EndpointsAPI
	userUuid   string
	view       *string
}

// Different view of the SIP endpoint  The &#x60;default&#x60; view, when the argument is omitted, is to include only options that are defined on the specified endpoint.  The &#x60;merged&#x60; view includes all options from included templates.
func (r EndpointsAPIGetUserLineMainAssociatedEndpointsSipRequest) View(view string) EndpointsAPIGetUserLineMainAssociatedEndpointsSipRequest {
	r.view = &view
	return r
}

func (r EndpointsAPIGetUserLineMainAssociatedEndpointsSipRequest) Execute() (*EndpointSIP, *http.Response, error) {
	return r.ApiService.GetUserLineMainAssociatedEndpointsSipExecute(r)
}

/*
GetUserLineMainAssociatedEndpointsSip Get SIP endpoint of main line for a user

**Required ACL:** `confd.users.{user_uuid}.lines.main.associated.endpoints.sip.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userUuid the user's UUID
	@return EndpointsAPIGetUserLineMainAssociatedEndpointsSipRequest
*/
func (a *EndpointsAPIService) GetUserLineMainAssociatedEndpointsSip(ctx context.Context, userUuid string) EndpointsAPIGetUserLineMainAssociatedEndpointsSipRequest {
	return EndpointsAPIGetUserLineMainAssociatedEndpointsSipRequest{
		ApiService: a,
		ctx:        ctx,
		userUuid:   userUuid,
	}
}

// Execute executes the request
//
//	@return EndpointSIP
func (a *EndpointsAPIService) GetUserLineMainAssociatedEndpointsSipExecute(r EndpointsAPIGetUserLineMainAssociatedEndpointsSipRequest) (*EndpointSIP, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointSIP
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.GetUserLineMainAssociatedEndpointsSip")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_uuid}/lines/main/associated/endpoints/sip"
	localVarPath = strings.Replace(localVarPath, "{"+"user_uuid"+"}", url.PathEscape(parameterValueToString(r.userUuid, "userUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.view != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "view", r.view, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPIListEndpointsCustomRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIListEndpointsCustomRequest) AccentTenant(accentTenant string) EndpointsAPIListEndpointsCustomRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r EndpointsAPIListEndpointsCustomRequest) Recurse(recurse bool) EndpointsAPIListEndpointsCustomRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r EndpointsAPIListEndpointsCustomRequest) Order(order string) EndpointsAPIListEndpointsCustomRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r EndpointsAPIListEndpointsCustomRequest) Direction(direction string) EndpointsAPIListEndpointsCustomRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r EndpointsAPIListEndpointsCustomRequest) Limit(limit int32) EndpointsAPIListEndpointsCustomRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r EndpointsAPIListEndpointsCustomRequest) Offset(offset int32) EndpointsAPIListEndpointsCustomRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r EndpointsAPIListEndpointsCustomRequest) Search(search string) EndpointsAPIListEndpointsCustomRequest {
	r.search = &search
	return r
}

func (r EndpointsAPIListEndpointsCustomRequest) Execute() (*EndpointCustomItems, *http.Response, error) {
	return r.ApiService.ListEndpointsCustomExecute(r)
}

/*
ListEndpointsCustom List Custom endpoints

**Required ACL:** `confd.endpoints.custom.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EndpointsAPIListEndpointsCustomRequest
*/
func (a *EndpointsAPIService) ListEndpointsCustom(ctx context.Context) EndpointsAPIListEndpointsCustomRequest {
	return EndpointsAPIListEndpointsCustomRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EndpointCustomItems
func (a *EndpointsAPIService) ListEndpointsCustomExecute(r EndpointsAPIListEndpointsCustomRequest) (*EndpointCustomItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointCustomItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.ListEndpointsCustom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/custom"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPIListEndpointsIaxRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIListEndpointsIaxRequest) AccentTenant(accentTenant string) EndpointsAPIListEndpointsIaxRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r EndpointsAPIListEndpointsIaxRequest) Recurse(recurse bool) EndpointsAPIListEndpointsIaxRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r EndpointsAPIListEndpointsIaxRequest) Order(order string) EndpointsAPIListEndpointsIaxRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r EndpointsAPIListEndpointsIaxRequest) Direction(direction string) EndpointsAPIListEndpointsIaxRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r EndpointsAPIListEndpointsIaxRequest) Limit(limit int32) EndpointsAPIListEndpointsIaxRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r EndpointsAPIListEndpointsIaxRequest) Offset(offset int32) EndpointsAPIListEndpointsIaxRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r EndpointsAPIListEndpointsIaxRequest) Search(search string) EndpointsAPIListEndpointsIaxRequest {
	r.search = &search
	return r
}

func (r EndpointsAPIListEndpointsIaxRequest) Execute() (*EndpointIAXItems, *http.Response, error) {
	return r.ApiService.ListEndpointsIaxExecute(r)
}

/*
ListEndpointsIax List IAX endpoints

**Required ACL:** `confd.endpoints.iax.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EndpointsAPIListEndpointsIaxRequest
*/
func (a *EndpointsAPIService) ListEndpointsIax(ctx context.Context) EndpointsAPIListEndpointsIaxRequest {
	return EndpointsAPIListEndpointsIaxRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EndpointIAXItems
func (a *EndpointsAPIService) ListEndpointsIaxExecute(r EndpointsAPIListEndpointsIaxRequest) (*EndpointIAXItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointIAXItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.ListEndpointsIax")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/iax"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPIListEndpointsSccpRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIListEndpointsSccpRequest) AccentTenant(accentTenant string) EndpointsAPIListEndpointsSccpRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r EndpointsAPIListEndpointsSccpRequest) Recurse(recurse bool) EndpointsAPIListEndpointsSccpRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r EndpointsAPIListEndpointsSccpRequest) Order(order string) EndpointsAPIListEndpointsSccpRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r EndpointsAPIListEndpointsSccpRequest) Direction(direction string) EndpointsAPIListEndpointsSccpRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r EndpointsAPIListEndpointsSccpRequest) Limit(limit int32) EndpointsAPIListEndpointsSccpRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r EndpointsAPIListEndpointsSccpRequest) Offset(offset int32) EndpointsAPIListEndpointsSccpRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r EndpointsAPIListEndpointsSccpRequest) Search(search string) EndpointsAPIListEndpointsSccpRequest {
	r.search = &search
	return r
}

func (r EndpointsAPIListEndpointsSccpRequest) Execute() (*EndpointSccpItems, *http.Response, error) {
	return r.ApiService.ListEndpointsSccpExecute(r)
}

/*
ListEndpointsSccp List SCCP endpoints

**Required ACL:** `confd.endpoints.sccp.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EndpointsAPIListEndpointsSccpRequest
*/
func (a *EndpointsAPIService) ListEndpointsSccp(ctx context.Context) EndpointsAPIListEndpointsSccpRequest {
	return EndpointsAPIListEndpointsSccpRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EndpointSccpItems
func (a *EndpointsAPIService) ListEndpointsSccpExecute(r EndpointsAPIListEndpointsSccpRequest) (*EndpointSccpItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointSccpItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.ListEndpointsSccp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sccp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPIListEndpointsSipRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIListEndpointsSipRequest) AccentTenant(accentTenant string) EndpointsAPIListEndpointsSipRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r EndpointsAPIListEndpointsSipRequest) Recurse(recurse bool) EndpointsAPIListEndpointsSipRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r EndpointsAPIListEndpointsSipRequest) Order(order string) EndpointsAPIListEndpointsSipRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r EndpointsAPIListEndpointsSipRequest) Direction(direction string) EndpointsAPIListEndpointsSipRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r EndpointsAPIListEndpointsSipRequest) Limit(limit int32) EndpointsAPIListEndpointsSipRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r EndpointsAPIListEndpointsSipRequest) Offset(offset int32) EndpointsAPIListEndpointsSipRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r EndpointsAPIListEndpointsSipRequest) Search(search string) EndpointsAPIListEndpointsSipRequest {
	r.search = &search
	return r
}

func (r EndpointsAPIListEndpointsSipRequest) Execute() (*EndpointSIPItems, *http.Response, error) {
	return r.ApiService.ListEndpointsSipExecute(r)
}

/*
ListEndpointsSip List SIP endpoints

**Required ACL:** `confd.endpoints.sip.read`

List all SIP configurations, each individual configuration includes only fields that it
defines. Inherited fields from the templates or default values are not returned here.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EndpointsAPIListEndpointsSipRequest
*/
func (a *EndpointsAPIService) ListEndpointsSip(ctx context.Context) EndpointsAPIListEndpointsSipRequest {
	return EndpointsAPIListEndpointsSipRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EndpointSIPItems
func (a *EndpointsAPIService) ListEndpointsSipExecute(r EndpointsAPIListEndpointsSipRequest) (*EndpointSIPItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointSIPItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.ListEndpointsSip")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sip"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPIListEndpointsSipTemplatesRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIListEndpointsSipTemplatesRequest) AccentTenant(accentTenant string) EndpointsAPIListEndpointsSipTemplatesRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r EndpointsAPIListEndpointsSipTemplatesRequest) Recurse(recurse bool) EndpointsAPIListEndpointsSipTemplatesRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r EndpointsAPIListEndpointsSipTemplatesRequest) Order(order string) EndpointsAPIListEndpointsSipTemplatesRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r EndpointsAPIListEndpointsSipTemplatesRequest) Direction(direction string) EndpointsAPIListEndpointsSipTemplatesRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r EndpointsAPIListEndpointsSipTemplatesRequest) Limit(limit int32) EndpointsAPIListEndpointsSipTemplatesRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r EndpointsAPIListEndpointsSipTemplatesRequest) Offset(offset int32) EndpointsAPIListEndpointsSipTemplatesRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r EndpointsAPIListEndpointsSipTemplatesRequest) Search(search string) EndpointsAPIListEndpointsSipTemplatesRequest {
	r.search = &search
	return r
}

func (r EndpointsAPIListEndpointsSipTemplatesRequest) Execute() (*EndpointSIPItems, *http.Response, error) {
	return r.ApiService.ListEndpointsSipTemplatesExecute(r)
}

/*
ListEndpointsSipTemplates List SIP endpoints templates

**Required ACL:** `confd.endpoints.sip.templates.read` List all SIP configuration templates, each individual configuration includes only fields that it defines. Inherited fields from the templates or default values are not returned here.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EndpointsAPIListEndpointsSipTemplatesRequest
*/
func (a *EndpointsAPIService) ListEndpointsSipTemplates(ctx context.Context) EndpointsAPIListEndpointsSipTemplatesRequest {
	return EndpointsAPIListEndpointsSipTemplatesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EndpointSIPItems
func (a *EndpointsAPIService) ListEndpointsSipTemplatesExecute(r EndpointsAPIListEndpointsSipTemplatesRequest) (*EndpointSIPItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointSIPItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.ListEndpointsSipTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sip/templates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndpointsAPIUpdateEndpointCustomRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	body         *EndpointCustom
	customId     int32
	accentTenant *string
}

func (r EndpointsAPIUpdateEndpointCustomRequest) Body(body EndpointCustom) EndpointsAPIUpdateEndpointCustomRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIUpdateEndpointCustomRequest) AccentTenant(accentTenant string) EndpointsAPIUpdateEndpointCustomRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPIUpdateEndpointCustomRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateEndpointCustomExecute(r)
}

/*
UpdateEndpointCustom Update Custom Endpoint

**Required ACL:** `confd.endpoints.custom.{custom_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customId
	@return EndpointsAPIUpdateEndpointCustomRequest
*/
func (a *EndpointsAPIService) UpdateEndpointCustom(ctx context.Context, customId int32) EndpointsAPIUpdateEndpointCustomRequest {
	return EndpointsAPIUpdateEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		customId:   customId,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) UpdateEndpointCustomExecute(r EndpointsAPIUpdateEndpointCustomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.UpdateEndpointCustom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIUpdateEndpointIaxRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	body         *EndpointIAX
	iaxId        int32
	accentTenant *string
}

func (r EndpointsAPIUpdateEndpointIaxRequest) Body(body EndpointIAX) EndpointsAPIUpdateEndpointIaxRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIUpdateEndpointIaxRequest) AccentTenant(accentTenant string) EndpointsAPIUpdateEndpointIaxRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPIUpdateEndpointIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateEndpointIaxExecute(r)
}

/*
UpdateEndpointIax Update IAX Endpoint

**Required ACL:** `confd.endpoints.iax.{iax_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param iaxId
	@return EndpointsAPIUpdateEndpointIaxRequest
*/
func (a *EndpointsAPIService) UpdateEndpointIax(ctx context.Context, iaxId int32) EndpointsAPIUpdateEndpointIaxRequest {
	return EndpointsAPIUpdateEndpointIaxRequest{
		ApiService: a,
		ctx:        ctx,
		iaxId:      iaxId,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) UpdateEndpointIaxExecute(r EndpointsAPIUpdateEndpointIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.UpdateEndpointIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIUpdateEndpointSccpRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	body         *EndpointSccp
	sccpId       int32
	accentTenant *string
}

func (r EndpointsAPIUpdateEndpointSccpRequest) Body(body EndpointSccp) EndpointsAPIUpdateEndpointSccpRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIUpdateEndpointSccpRequest) AccentTenant(accentTenant string) EndpointsAPIUpdateEndpointSccpRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPIUpdateEndpointSccpRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateEndpointSccpExecute(r)
}

/*
UpdateEndpointSccp Update SCCP Endpoint

**Required ACL:** `confd.endpoints.sccp.{sccp_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param sccpId
	@return EndpointsAPIUpdateEndpointSccpRequest
*/
func (a *EndpointsAPIService) UpdateEndpointSccp(ctx context.Context, sccpId int32) EndpointsAPIUpdateEndpointSccpRequest {
	return EndpointsAPIUpdateEndpointSccpRequest{
		ApiService: a,
		ctx:        ctx,
		sccpId:     sccpId,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) UpdateEndpointSccpExecute(r EndpointsAPIUpdateEndpointSccpRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.UpdateEndpointSccp")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sccp/{sccp_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sccp_id"+"}", url.PathEscape(parameterValueToString(r.sccpId, "sccpId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIUpdateEndpointSipRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	body         *EndpointSIP
	sipUuid      string
	accentTenant *string
}

func (r EndpointsAPIUpdateEndpointSipRequest) Body(body EndpointSIP) EndpointsAPIUpdateEndpointSipRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIUpdateEndpointSipRequest) AccentTenant(accentTenant string) EndpointsAPIUpdateEndpointSipRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPIUpdateEndpointSipRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateEndpointSipExecute(r)
}

/*
UpdateEndpointSip Update SIP Endpoint

**Required ACL:** `confd.endpoints.sip.{sip_uuid}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param sipUuid
	@return EndpointsAPIUpdateEndpointSipRequest
*/
func (a *EndpointsAPIService) UpdateEndpointSip(ctx context.Context, sipUuid string) EndpointsAPIUpdateEndpointSipRequest {
	return EndpointsAPIUpdateEndpointSipRequest{
		ApiService: a,
		ctx:        ctx,
		sipUuid:    sipUuid,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) UpdateEndpointSipExecute(r EndpointsAPIUpdateEndpointSipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.UpdateEndpointSip")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sip/{sip_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"sip_uuid"+"}", url.PathEscape(parameterValueToString(r.sipUuid, "sipUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndpointsAPIUpdateEndpointSipTemplateRequest struct {
	ctx          context.Context
	ApiService   EndpointsAPI
	body         *EndpointSIP
	templateUuid string
	accentTenant *string
}

func (r EndpointsAPIUpdateEndpointSipTemplateRequest) Body(body EndpointSIP) EndpointsAPIUpdateEndpointSipTemplateRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r EndpointsAPIUpdateEndpointSipTemplateRequest) AccentTenant(accentTenant string) EndpointsAPIUpdateEndpointSipTemplateRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r EndpointsAPIUpdateEndpointSipTemplateRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateEndpointSipTemplateExecute(r)
}

/*
UpdateEndpointSipTemplate Update SIP Endpoint Template

**Required ACL:** `confd.endpoints.sip.templates.{template_uuid}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param templateUuid
	@return EndpointsAPIUpdateEndpointSipTemplateRequest
*/
func (a *EndpointsAPIService) UpdateEndpointSipTemplate(ctx context.Context, templateUuid string) EndpointsAPIUpdateEndpointSipTemplateRequest {
	return EndpointsAPIUpdateEndpointSipTemplateRequest{
		ApiService:   a,
		ctx:          ctx,
		templateUuid: templateUuid,
	}
}

// Execute executes the request
func (a *EndpointsAPIService) UpdateEndpointSipTemplateExecute(r EndpointsAPIUpdateEndpointSipTemplateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndpointsAPIService.UpdateEndpointSipTemplate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/sip/templates/{template_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"template_uuid"+"}", url.PathEscape(parameterValueToString(r.templateUuid, "templateUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
