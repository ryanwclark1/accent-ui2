/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WizardNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WizardNetwork{}

// WizardNetwork struct for WizardNetwork
type WizardNetwork struct {
	// Domain name
	Domain string `json:"domain"`
	// Gateway IPv4 address
	Gateway string `json:"gateway"`
	// System hostname
	Hostname string `json:"hostname"`
	// Interface name (e.g. eth0)
	Interface string `json:"interface"`
	// IPv4 address of the VoIP interface (connected to phones)
	IpAddress string `json:"ip_address"`
	// List of IPv4 addresses. Nameservers are used in resolv.conf.
	Nameservers []string `json:"nameservers"`
	// Netmask of the IP address (e.g. 255.255.0.0)
	Netmask string `json:"netmask"`
}

type _WizardNetwork WizardNetwork

// NewWizardNetwork instantiates a new WizardNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWizardNetwork(domain string, gateway string, hostname string, interface_ string, ipAddress string, nameservers []string, netmask string) *WizardNetwork {
	this := WizardNetwork{}
	this.Domain = domain
	this.Gateway = gateway
	this.Hostname = hostname
	this.Interface = interface_
	this.IpAddress = ipAddress
	this.Nameservers = nameservers
	this.Netmask = netmask
	return &this
}

// NewWizardNetworkWithDefaults instantiates a new WizardNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWizardNetworkWithDefaults() *WizardNetwork {
	this := WizardNetwork{}
	return &this
}

// GetDomain returns the Domain field value
func (o *WizardNetwork) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *WizardNetwork) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *WizardNetwork) SetDomain(v string) {
	o.Domain = v
}

// GetGateway returns the Gateway field value
func (o *WizardNetwork) GetGateway() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value
// and a boolean to check if the value has been set.
func (o *WizardNetwork) GetGatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gateway, true
}

// SetGateway sets field value
func (o *WizardNetwork) SetGateway(v string) {
	o.Gateway = v
}

// GetHostname returns the Hostname field value
func (o *WizardNetwork) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *WizardNetwork) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *WizardNetwork) SetHostname(v string) {
	o.Hostname = v
}

// GetInterface returns the Interface field value
func (o *WizardNetwork) GetInterface() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value
// and a boolean to check if the value has been set.
func (o *WizardNetwork) GetInterfaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interface, true
}

// SetInterface sets field value
func (o *WizardNetwork) SetInterface(v string) {
	o.Interface = v
}

// GetIpAddress returns the IpAddress field value
func (o *WizardNetwork) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *WizardNetwork) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *WizardNetwork) SetIpAddress(v string) {
	o.IpAddress = v
}

// GetNameservers returns the Nameservers field value
func (o *WizardNetwork) GetNameservers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Nameservers
}

// GetNameserversOk returns a tuple with the Nameservers field value
// and a boolean to check if the value has been set.
func (o *WizardNetwork) GetNameserversOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nameservers, true
}

// SetNameservers sets field value
func (o *WizardNetwork) SetNameservers(v []string) {
	o.Nameservers = v
}

// GetNetmask returns the Netmask field value
func (o *WizardNetwork) GetNetmask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value
// and a boolean to check if the value has been set.
func (o *WizardNetwork) GetNetmaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Netmask, true
}

// SetNetmask sets field value
func (o *WizardNetwork) SetNetmask(v string) {
	o.Netmask = v
}

func (o WizardNetwork) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WizardNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	toSerialize["gateway"] = o.Gateway
	toSerialize["hostname"] = o.Hostname
	toSerialize["interface"] = o.Interface
	toSerialize["ip_address"] = o.IpAddress
	toSerialize["nameservers"] = o.Nameservers
	toSerialize["netmask"] = o.Netmask
	return toSerialize, nil
}

func (o *WizardNetwork) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"gateway",
		"hostname",
		"interface",
		"ip_address",
		"nameservers",
		"netmask",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWizardNetwork := _WizardNetwork{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWizardNetwork)

	if err != nil {
		return err
	}

	*o = WizardNetwork(varWizardNetwork)

	return err
}

type NullableWizardNetwork struct {
	value *WizardNetwork
	isSet bool
}

func (v NullableWizardNetwork) Get() *WizardNetwork {
	return v.value
}

func (v *NullableWizardNetwork) Set(val *WizardNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableWizardNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableWizardNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWizardNetwork(val *WizardNetwork) *NullableWizardNetwork {
	return &NullableWizardNetwork{value: val, isSet: true}
}

func (v NullableWizardNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWizardNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
