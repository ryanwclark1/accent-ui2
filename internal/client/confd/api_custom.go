/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type CustomAPI interface {

	/*
		AssociateLineEndpointCustom Associate line and Custom endpoint

		**Required ACL:** `confd.lines.{line_id}.endpoints.custom.{custom_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param lineId
		@param customId
		@return ApiAssociateLineEndpointCustomRequest
	*/
	AssociateLineEndpointCustom(ctx context.Context, lineId int32, customId int32) ApiAssociateLineEndpointCustomRequest

	// AssociateLineEndpointCustomExecute executes the request
	AssociateLineEndpointCustomExecute(r ApiAssociateLineEndpointCustomRequest) (*http.Response, error)

	/*
		AssociateTrunkEndpointCustom Associate trunk and Custom endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.custom.{custom_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param customId
		@return ApiAssociateTrunkEndpointCustomRequest
	*/
	AssociateTrunkEndpointCustom(ctx context.Context, trunkId int32, customId int32) ApiAssociateTrunkEndpointCustomRequest

	// AssociateTrunkEndpointCustomExecute executes the request
	AssociateTrunkEndpointCustomExecute(r ApiAssociateTrunkEndpointCustomRequest) (*http.Response, error)

	/*
		CreateEndpointCustom Create Custom endpoint

		**Required ACL:** `confd.endpoints.custom.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateEndpointCustomRequest
	*/
	CreateEndpointCustom(ctx context.Context) ApiCreateEndpointCustomRequest

	// CreateEndpointCustomExecute executes the request
	//  @return EndpointCustom
	CreateEndpointCustomExecute(r ApiCreateEndpointCustomRequest) (*EndpointCustom, *http.Response, error)

	/*
		DeleteEndpointCustom Delete Custom Endpoint

		**Required ACL:** `confd.endpoints.custom.{custom_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customId
		@return ApiDeleteEndpointCustomRequest
	*/
	DeleteEndpointCustom(ctx context.Context, customId int32) ApiDeleteEndpointCustomRequest

	// DeleteEndpointCustomExecute executes the request
	DeleteEndpointCustomExecute(r ApiDeleteEndpointCustomRequest) (*http.Response, error)

	/*
		DissociateLineEndpointCustom Dissociate line and Custom endpoint

		**Required ACL:** `confd.lines.{line_id}.endpoints.custom.{custom_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param lineId
		@param customId
		@return ApiDissociateLineEndpointCustomRequest
	*/
	DissociateLineEndpointCustom(ctx context.Context, lineId int32, customId int32) ApiDissociateLineEndpointCustomRequest

	// DissociateLineEndpointCustomExecute executes the request
	DissociateLineEndpointCustomExecute(r ApiDissociateLineEndpointCustomRequest) (*http.Response, error)

	/*
		DissociateTrunkEndpointCustom Dissociate trunk and Custom endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.custom.{custom_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param customId
		@return ApiDissociateTrunkEndpointCustomRequest
	*/
	DissociateTrunkEndpointCustom(ctx context.Context, trunkId int32, customId int32) ApiDissociateTrunkEndpointCustomRequest

	// DissociateTrunkEndpointCustomExecute executes the request
	DissociateTrunkEndpointCustomExecute(r ApiDissociateTrunkEndpointCustomRequest) (*http.Response, error)

	/*
		GetEndpointCustom Get Custom Endpoint

		**Required ACL:** `confd.endpoints.custom.{custom_id}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customId
		@return ApiGetEndpointCustomRequest
	*/
	GetEndpointCustom(ctx context.Context, customId int32) ApiGetEndpointCustomRequest

	// GetEndpointCustomExecute executes the request
	//  @return EndpointCustom
	GetEndpointCustomExecute(r ApiGetEndpointCustomRequest) (*EndpointCustom, *http.Response, error)

	/*
		ListEndpointsCustom List Custom endpoints

		**Required ACL:** `confd.endpoints.custom.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListEndpointsCustomRequest
	*/
	ListEndpointsCustom(ctx context.Context) ApiListEndpointsCustomRequest

	// ListEndpointsCustomExecute executes the request
	//  @return EndpointCustomItems
	ListEndpointsCustomExecute(r ApiListEndpointsCustomRequest) (*EndpointCustomItems, *http.Response, error)

	/*
		UpdateEndpointCustom Update Custom Endpoint

		**Required ACL:** `confd.endpoints.custom.{custom_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param customId
		@return ApiUpdateEndpointCustomRequest
	*/
	UpdateEndpointCustom(ctx context.Context, customId int32) ApiUpdateEndpointCustomRequest

	// UpdateEndpointCustomExecute executes the request
	UpdateEndpointCustomExecute(r ApiUpdateEndpointCustomRequest) (*http.Response, error)
}

// CustomAPIService CustomAPI service
type CustomAPIService service

type ApiAssociateLineEndpointCustomRequest struct {
	ctx        context.Context
	ApiService CustomAPI
	lineId     int32
	customId   int32
}

func (r ApiAssociateLineEndpointCustomRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateLineEndpointCustomExecute(r)
}

/*
AssociateLineEndpointCustom Associate line and Custom endpoint

**Required ACL:** `confd.lines.{line_id}.endpoints.custom.{custom_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lineId
	@param customId
	@return ApiAssociateLineEndpointCustomRequest
*/
func (a *CustomAPIService) AssociateLineEndpointCustom(ctx context.Context, lineId int32, customId int32) ApiAssociateLineEndpointCustomRequest {
	return ApiAssociateLineEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		lineId:     lineId,
		customId:   customId,
	}
}

// Execute executes the request
func (a *CustomAPIService) AssociateLineEndpointCustomExecute(r ApiAssociateLineEndpointCustomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomAPIService.AssociateLineEndpointCustom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/lines/{line_id}/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"line_id"+"}", url.PathEscape(parameterValueToString(r.lineId, "lineId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAssociateTrunkEndpointCustomRequest struct {
	ctx        context.Context
	ApiService CustomAPI
	trunkId    int32
	customId   int32
}

func (r ApiAssociateTrunkEndpointCustomRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateTrunkEndpointCustomExecute(r)
}

/*
AssociateTrunkEndpointCustom Associate trunk and Custom endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.custom.{custom_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param customId
	@return ApiAssociateTrunkEndpointCustomRequest
*/
func (a *CustomAPIService) AssociateTrunkEndpointCustom(ctx context.Context, trunkId int32, customId int32) ApiAssociateTrunkEndpointCustomRequest {
	return ApiAssociateTrunkEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		customId:   customId,
	}
}

// Execute executes the request
func (a *CustomAPIService) AssociateTrunkEndpointCustomExecute(r ApiAssociateTrunkEndpointCustomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomAPIService.AssociateTrunkEndpointCustom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateEndpointCustomRequest struct {
	ctx          context.Context
	ApiService   CustomAPI
	body         *EndpointCustom
	accentTenant *string
}

// Custom Endpoint to create
func (r ApiCreateEndpointCustomRequest) Body(body EndpointCustom) ApiCreateEndpointCustomRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiCreateEndpointCustomRequest) AccentTenant(accentTenant string) ApiCreateEndpointCustomRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiCreateEndpointCustomRequest) Execute() (*EndpointCustom, *http.Response, error) {
	return r.ApiService.CreateEndpointCustomExecute(r)
}

/*
CreateEndpointCustom Create Custom endpoint

**Required ACL:** `confd.endpoints.custom.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateEndpointCustomRequest
*/
func (a *CustomAPIService) CreateEndpointCustom(ctx context.Context) ApiCreateEndpointCustomRequest {
	return ApiCreateEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EndpointCustom
func (a *CustomAPIService) CreateEndpointCustomExecute(r ApiCreateEndpointCustomRequest) (*EndpointCustom, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointCustom
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomAPIService.CreateEndpointCustom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/custom"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteEndpointCustomRequest struct {
	ctx          context.Context
	ApiService   CustomAPI
	customId     int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiDeleteEndpointCustomRequest) AccentTenant(accentTenant string) ApiDeleteEndpointCustomRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiDeleteEndpointCustomRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEndpointCustomExecute(r)
}

/*
DeleteEndpointCustom Delete Custom Endpoint

**Required ACL:** `confd.endpoints.custom.{custom_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customId
	@return ApiDeleteEndpointCustomRequest
*/
func (a *CustomAPIService) DeleteEndpointCustom(ctx context.Context, customId int32) ApiDeleteEndpointCustomRequest {
	return ApiDeleteEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		customId:   customId,
	}
}

// Execute executes the request
func (a *CustomAPIService) DeleteEndpointCustomExecute(r ApiDeleteEndpointCustomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomAPIService.DeleteEndpointCustom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDissociateLineEndpointCustomRequest struct {
	ctx        context.Context
	ApiService CustomAPI
	lineId     int32
	customId   int32
}

func (r ApiDissociateLineEndpointCustomRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateLineEndpointCustomExecute(r)
}

/*
DissociateLineEndpointCustom Dissociate line and Custom endpoint

**Required ACL:** `confd.lines.{line_id}.endpoints.custom.{custom_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lineId
	@param customId
	@return ApiDissociateLineEndpointCustomRequest
*/
func (a *CustomAPIService) DissociateLineEndpointCustom(ctx context.Context, lineId int32, customId int32) ApiDissociateLineEndpointCustomRequest {
	return ApiDissociateLineEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		lineId:     lineId,
		customId:   customId,
	}
}

// Execute executes the request
func (a *CustomAPIService) DissociateLineEndpointCustomExecute(r ApiDissociateLineEndpointCustomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomAPIService.DissociateLineEndpointCustom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/lines/{line_id}/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"line_id"+"}", url.PathEscape(parameterValueToString(r.lineId, "lineId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDissociateTrunkEndpointCustomRequest struct {
	ctx        context.Context
	ApiService CustomAPI
	trunkId    int32
	customId   int32
}

func (r ApiDissociateTrunkEndpointCustomRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateTrunkEndpointCustomExecute(r)
}

/*
DissociateTrunkEndpointCustom Dissociate trunk and Custom endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.custom.{custom_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param customId
	@return ApiDissociateTrunkEndpointCustomRequest
*/
func (a *CustomAPIService) DissociateTrunkEndpointCustom(ctx context.Context, trunkId int32, customId int32) ApiDissociateTrunkEndpointCustomRequest {
	return ApiDissociateTrunkEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		customId:   customId,
	}
}

// Execute executes the request
func (a *CustomAPIService) DissociateTrunkEndpointCustomExecute(r ApiDissociateTrunkEndpointCustomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomAPIService.DissociateTrunkEndpointCustom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetEndpointCustomRequest struct {
	ctx          context.Context
	ApiService   CustomAPI
	customId     int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiGetEndpointCustomRequest) AccentTenant(accentTenant string) ApiGetEndpointCustomRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiGetEndpointCustomRequest) Execute() (*EndpointCustom, *http.Response, error) {
	return r.ApiService.GetEndpointCustomExecute(r)
}

/*
GetEndpointCustom Get Custom Endpoint

**Required ACL:** `confd.endpoints.custom.{custom_id}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customId
	@return ApiGetEndpointCustomRequest
*/
func (a *CustomAPIService) GetEndpointCustom(ctx context.Context, customId int32) ApiGetEndpointCustomRequest {
	return ApiGetEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		customId:   customId,
	}
}

// Execute executes the request
//
//	@return EndpointCustom
func (a *CustomAPIService) GetEndpointCustomExecute(r ApiGetEndpointCustomRequest) (*EndpointCustom, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointCustom
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomAPIService.GetEndpointCustom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListEndpointsCustomRequest struct {
	ctx          context.Context
	ApiService   CustomAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiListEndpointsCustomRequest) AccentTenant(accentTenant string) ApiListEndpointsCustomRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r ApiListEndpointsCustomRequest) Recurse(recurse bool) ApiListEndpointsCustomRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r ApiListEndpointsCustomRequest) Order(order string) ApiListEndpointsCustomRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r ApiListEndpointsCustomRequest) Direction(direction string) ApiListEndpointsCustomRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r ApiListEndpointsCustomRequest) Limit(limit int32) ApiListEndpointsCustomRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r ApiListEndpointsCustomRequest) Offset(offset int32) ApiListEndpointsCustomRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r ApiListEndpointsCustomRequest) Search(search string) ApiListEndpointsCustomRequest {
	r.search = &search
	return r
}

func (r ApiListEndpointsCustomRequest) Execute() (*EndpointCustomItems, *http.Response, error) {
	return r.ApiService.ListEndpointsCustomExecute(r)
}

/*
ListEndpointsCustom List Custom endpoints

**Required ACL:** `confd.endpoints.custom.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListEndpointsCustomRequest
*/
func (a *CustomAPIService) ListEndpointsCustom(ctx context.Context) ApiListEndpointsCustomRequest {
	return ApiListEndpointsCustomRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EndpointCustomItems
func (a *CustomAPIService) ListEndpointsCustomExecute(r ApiListEndpointsCustomRequest) (*EndpointCustomItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EndpointCustomItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomAPIService.ListEndpointsCustom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/custom"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateEndpointCustomRequest struct {
	ctx          context.Context
	ApiService   CustomAPI
	body         *EndpointCustom
	customId     int32
	accentTenant *string
}

func (r ApiUpdateEndpointCustomRequest) Body(body EndpointCustom) ApiUpdateEndpointCustomRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiUpdateEndpointCustomRequest) AccentTenant(accentTenant string) ApiUpdateEndpointCustomRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiUpdateEndpointCustomRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateEndpointCustomExecute(r)
}

/*
UpdateEndpointCustom Update Custom Endpoint

**Required ACL:** `confd.endpoints.custom.{custom_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customId
	@return ApiUpdateEndpointCustomRequest
*/
func (a *CustomAPIService) UpdateEndpointCustom(ctx context.Context, customId int32) ApiUpdateEndpointCustomRequest {
	return ApiUpdateEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		customId:   customId,
	}
}

// Execute executes the request
func (a *CustomAPIService) UpdateEndpointCustomExecute(r ApiUpdateEndpointCustomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomAPIService.UpdateEndpointCustom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
