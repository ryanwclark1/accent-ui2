/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the EndpointSccp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointSccp{}

// EndpointSccp struct for EndpointSccp
type EndpointSccp struct {
	// SCCP Endpoint ID
	Id    *int32             `json:"id,omitempty"`
	Trunk *TrunkRelationBase `json:"trunk,omitempty"`
	Line  []LineRelationBase `json:"line,omitempty"`
	// Advanced configuration options. Options are appended at the end of a  SCCP account in the file 'sccp.conf' used by asterisk. Please consult the asterisk documentation for further details on available parameters. Because of database limitations, only the following options are allowed:   * cid_name  * cid_num  * allow  * disallow   Options must have the following the form:  ``` {   \"options\": [     [\"name1\", \"value1\"],     [\"name2\", \"value2\"]   ] } ```  The resulting configuration in sip.conf will have the following form:  ``` [1000] name1=value1 name2=value2 ```
	Options [][]string `json:"options,omitempty"`
	// The UUID of the tenant
	TenantUuid *string `json:"tenant_uuid,omitempty"`
}

// NewEndpointSccp instantiates a new EndpointSccp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointSccp() *EndpointSccp {
	this := EndpointSccp{}
	return &this
}

// NewEndpointSccpWithDefaults instantiates a new EndpointSccp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointSccpWithDefaults() *EndpointSccp {
	this := EndpointSccp{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EndpointSccp) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointSccp) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EndpointSccp) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *EndpointSccp) SetId(v int32) {
	o.Id = &v
}

// GetTrunk returns the Trunk field value if set, zero value otherwise.
func (o *EndpointSccp) GetTrunk() TrunkRelationBase {
	if o == nil || IsNil(o.Trunk) {
		var ret TrunkRelationBase
		return ret
	}
	return *o.Trunk
}

// GetTrunkOk returns a tuple with the Trunk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointSccp) GetTrunkOk() (*TrunkRelationBase, bool) {
	if o == nil || IsNil(o.Trunk) {
		return nil, false
	}
	return o.Trunk, true
}

// HasTrunk returns a boolean if a field has been set.
func (o *EndpointSccp) HasTrunk() bool {
	if o != nil && !IsNil(o.Trunk) {
		return true
	}

	return false
}

// SetTrunk gets a reference to the given TrunkRelationBase and assigns it to the Trunk field.
func (o *EndpointSccp) SetTrunk(v TrunkRelationBase) {
	o.Trunk = &v
}

// GetLine returns the Line field value if set, zero value otherwise.
func (o *EndpointSccp) GetLine() []LineRelationBase {
	if o == nil || IsNil(o.Line) {
		var ret []LineRelationBase
		return ret
	}
	return o.Line
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointSccp) GetLineOk() ([]LineRelationBase, bool) {
	if o == nil || IsNil(o.Line) {
		return nil, false
	}
	return o.Line, true
}

// HasLine returns a boolean if a field has been set.
func (o *EndpointSccp) HasLine() bool {
	if o != nil && !IsNil(o.Line) {
		return true
	}

	return false
}

// SetLine gets a reference to the given []LineRelationBase and assigns it to the Line field.
func (o *EndpointSccp) SetLine(v []LineRelationBase) {
	o.Line = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *EndpointSccp) GetOptions() [][]string {
	if o == nil || IsNil(o.Options) {
		var ret [][]string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointSccp) GetOptionsOk() ([][]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *EndpointSccp) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given [][]string and assigns it to the Options field.
func (o *EndpointSccp) SetOptions(v [][]string) {
	o.Options = v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *EndpointSccp) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointSccp) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *EndpointSccp) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *EndpointSccp) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

func (o EndpointSccp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointSccp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Trunk) {
		toSerialize["trunk"] = o.Trunk
	}
	if !IsNil(o.Line) {
		toSerialize["line"] = o.Line
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	return toSerialize, nil
}

type NullableEndpointSccp struct {
	value *EndpointSccp
	isSet bool
}

func (v NullableEndpointSccp) Get() *EndpointSccp {
	return v.value
}

func (v *NullableEndpointSccp) Set(val *EndpointSccp) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointSccp) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointSccp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointSccp(val *EndpointSccp) *NullableEndpointSccp {
	return &NullableEndpointSccp{value: val, isSet: true}
}

func (v NullableEndpointSccp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointSccp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
