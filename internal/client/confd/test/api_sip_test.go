/*
accent-confd

Testing SipAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_SipAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SipAPIService AssociateLineEndpointSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var sipUuid string

		httpRes, err := apiClient.SipAPI.AssociateLineEndpointSip(context.Background(), lineId, sipUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService AssociateTrunkEndpointSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32
		var sipUuid string

		httpRes, err := apiClient.SipAPI.AssociateTrunkEndpointSip(context.Background(), trunkId, sipUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService CreateEndpointSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SipAPI.CreateEndpointSip(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService CreateEndpointSipTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SipAPI.CreateEndpointSipTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService CreateSipTransport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SipAPI.CreateSipTransport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService DeleteEndpointSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var sipUuid string

		httpRes, err := apiClient.SipAPI.DeleteEndpointSip(context.Background(), sipUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService DeleteEndpointSipTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateUuid string

		httpRes, err := apiClient.SipAPI.DeleteEndpointSipTemplate(context.Background(), templateUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService DeleteSipTransport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transportUuid string

		httpRes, err := apiClient.SipAPI.DeleteSipTransport(context.Background(), transportUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService DissociateLineEndpointSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var sipUuid string

		httpRes, err := apiClient.SipAPI.DissociateLineEndpointSip(context.Background(), lineId, sipUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService DissociateTrunkEndpointSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32
		var sipUuid string

		httpRes, err := apiClient.SipAPI.DissociateTrunkEndpointSip(context.Background(), trunkId, sipUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService GetEndpointSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var sipUuid string

		resp, httpRes, err := apiClient.SipAPI.GetEndpointSip(context.Background(), sipUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService GetEndpointSipTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateUuid string

		resp, httpRes, err := apiClient.SipAPI.GetEndpointSipTemplate(context.Background(), templateUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService GetSipTransport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transportUuid string

		resp, httpRes, err := apiClient.SipAPI.GetSipTransport(context.Background(), transportUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService ListAsteriskPjsipGlobal", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SipAPI.ListAsteriskPjsipGlobal(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService ListAsteriskPjsipSystem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SipAPI.ListAsteriskPjsipSystem(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService ListEndpointsSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SipAPI.ListEndpointsSip(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService ListEndpointsSipTemplates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SipAPI.ListEndpointsSipTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService ListSipTransports", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SipAPI.ListSipTransports(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService ShowPjsipDoc", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SipAPI.ShowPjsipDoc(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService UpdateAsteriskPjsipGlobal", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SipAPI.UpdateAsteriskPjsipGlobal(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService UpdateAsteriskPjsipSystem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SipAPI.UpdateAsteriskPjsipSystem(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService UpdateEndpointSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var sipUuid string

		httpRes, err := apiClient.SipAPI.UpdateEndpointSip(context.Background(), sipUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService UpdateEndpointSipTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateUuid string

		httpRes, err := apiClient.SipAPI.UpdateEndpointSipTemplate(context.Background(), templateUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SipAPIService UpdateSipTransport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transportUuid string

		httpRes, err := apiClient.SipAPI.UpdateSipTransport(context.Background(), transportUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
