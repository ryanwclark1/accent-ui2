/*
accent-confd

Testing SkillsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_SkillsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SkillsAPIService AssociateAgentSkill", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId int32
		var skillId int32

		httpRes, err := apiClient.SkillsAPI.AssociateAgentSkill(context.Background(), agentId, skillId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkillsAPIService CreateSkill", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SkillsAPI.CreateSkill(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkillsAPIService CreateSkillRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SkillsAPI.CreateSkillRule(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkillsAPIService DeleteSkill", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skillId int32

		httpRes, err := apiClient.SkillsAPI.DeleteSkill(context.Background(), skillId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkillsAPIService DeleteSkillRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skillruleId int32

		httpRes, err := apiClient.SkillsAPI.DeleteSkillRule(context.Background(), skillruleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkillsAPIService DissociateAgentSkill", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId int32
		var skillId int32

		httpRes, err := apiClient.SkillsAPI.DissociateAgentSkill(context.Background(), agentId, skillId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkillsAPIService GetSkill", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skillId int32

		resp, httpRes, err := apiClient.SkillsAPI.GetSkill(context.Background(), skillId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkillsAPIService GetSkillRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skillruleId int32

		resp, httpRes, err := apiClient.SkillsAPI.GetSkillRule(context.Background(), skillruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkillsAPIService ListSkillRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SkillsAPI.ListSkillRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkillsAPIService ListSkills", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SkillsAPI.ListSkills(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkillsAPIService UpdateSkill", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skillId int32

		httpRes, err := apiClient.SkillsAPI.UpdateSkill(context.Background(), skillId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkillsAPIService UpdateSkillRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skillruleId int32

		httpRes, err := apiClient.SkillsAPI.UpdateSkillRule(context.Background(), skillruleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
