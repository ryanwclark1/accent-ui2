/*
accent-confd

Testing SwitchboardsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_SwitchboardsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SwitchboardsAPIService GetSwitchboardFallback", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var switchboardUuid string

		resp, httpRes, err := apiClient.SwitchboardsAPI.GetSwitchboardFallback(context.Background(), switchboardUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchboardsAPIService SwitchboardsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SwitchboardsAPI.SwitchboardsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchboardsAPIService SwitchboardsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SwitchboardsAPI.SwitchboardsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchboardsAPIService SwitchboardsSwitchboardUuidDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var switchboardUuid string

		httpRes, err := apiClient.SwitchboardsAPI.SwitchboardsSwitchboardUuidDelete(context.Background(), switchboardUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchboardsAPIService SwitchboardsSwitchboardUuidGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var switchboardUuid string

		resp, httpRes, err := apiClient.SwitchboardsAPI.SwitchboardsSwitchboardUuidGet(context.Background(), switchboardUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchboardsAPIService SwitchboardsSwitchboardUuidPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var switchboardUuid string

		httpRes, err := apiClient.SwitchboardsAPI.SwitchboardsSwitchboardUuidPut(context.Background(), switchboardUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchboardsAPIService UpdateSwitchboardFallback", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var switchboardUuid string

		httpRes, err := apiClient.SwitchboardsAPI.UpdateSwitchboardFallback(context.Background(), switchboardUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SwitchboardsAPIService UpdateSwitchboardMemberUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var switchboardUuid string

		httpRes, err := apiClient.SwitchboardsAPI.UpdateSwitchboardMemberUsers(context.Background(), switchboardUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
