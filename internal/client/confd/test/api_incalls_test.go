/*
accent-confd

Testing IncallsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_IncallsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IncallsAPIService AssociateIncallExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var incallId int32
		var extensionId int32

		httpRes, err := apiClient.IncallsAPI.AssociateIncallExtension(context.Background(), incallId, extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IncallsAPIService AssociateIncallSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var incallId int32
		var scheduleId int32

		httpRes, err := apiClient.IncallsAPI.AssociateIncallSchedule(context.Background(), incallId, scheduleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IncallsAPIService CreateIncall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.IncallsAPI.CreateIncall(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IncallsAPIService DeleteIncall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var incallId int32

		httpRes, err := apiClient.IncallsAPI.DeleteIncall(context.Background(), incallId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IncallsAPIService DissociateIncallExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var incallId int32
		var extensionId int32

		httpRes, err := apiClient.IncallsAPI.DissociateIncallExtension(context.Background(), incallId, extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IncallsAPIService DissociateIncallSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var incallId int32
		var scheduleId int32

		httpRes, err := apiClient.IncallsAPI.DissociateIncallSchedule(context.Background(), incallId, scheduleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IncallsAPIService GetIncall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var incallId int32

		resp, httpRes, err := apiClient.IncallsAPI.GetIncall(context.Background(), incallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IncallsAPIService ListIncalls", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.IncallsAPI.ListIncalls(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IncallsAPIService UpdateIncall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var incallId int32

		httpRes, err := apiClient.IncallsAPI.UpdateIncall(context.Background(), incallId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
