/*
accent-confd

Testing QueuesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_QueuesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test QueuesAPIService AssociateQueueExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32
		var extensionId int32

		httpRes, err := apiClient.QueuesAPI.AssociateQueueExtension(context.Background(), queueId, extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService AssociateQueueSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32
		var scheduleId int32

		httpRes, err := apiClient.QueuesAPI.AssociateQueueSchedule(context.Background(), queueId, scheduleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService CreateQueue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.QueuesAPI.CreateQueue(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService CreateSkillRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.QueuesAPI.CreateSkillRule(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService DeleteQueue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32

		httpRes, err := apiClient.QueuesAPI.DeleteQueue(context.Background(), queueId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService DeleteSkillRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skillruleId int32

		httpRes, err := apiClient.QueuesAPI.DeleteSkillRule(context.Background(), skillruleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService DissociateAgentQueue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32
		var agentId int32

		httpRes, err := apiClient.QueuesAPI.DissociateAgentQueue(context.Background(), queueId, agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService DissociateQueueExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32
		var extensionId int32

		httpRes, err := apiClient.QueuesAPI.DissociateQueueExtension(context.Background(), queueId, extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService DissociateQueueSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32
		var scheduleId int32

		httpRes, err := apiClient.QueuesAPI.DissociateQueueSchedule(context.Background(), queueId, scheduleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService DissociateUserQueue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32
		var userId string

		httpRes, err := apiClient.QueuesAPI.DissociateUserQueue(context.Background(), queueId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService GetQueue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32

		resp, httpRes, err := apiClient.QueuesAPI.GetQueue(context.Background(), queueId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService GetQueueFallback", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32

		resp, httpRes, err := apiClient.QueuesAPI.GetQueueFallback(context.Background(), queueId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService GetSkillRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skillruleId int32

		resp, httpRes, err := apiClient.QueuesAPI.GetSkillRule(context.Background(), skillruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService ListQueues", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.QueuesAPI.ListQueues(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService ListSkillRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.QueuesAPI.ListSkillRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService UpdateAgentQueueAssociation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32
		var agentId int32

		httpRes, err := apiClient.QueuesAPI.UpdateAgentQueueAssociation(context.Background(), queueId, agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService UpdateQueue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32

		httpRes, err := apiClient.QueuesAPI.UpdateQueue(context.Background(), queueId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService UpdateQueueFallback", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32

		httpRes, err := apiClient.QueuesAPI.UpdateQueueFallback(context.Background(), queueId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService UpdateSkillRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skillruleId int32

		httpRes, err := apiClient.QueuesAPI.UpdateSkillRule(context.Background(), skillruleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QueuesAPIService UpdateUserQueueAssociation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32
		var userId string

		httpRes, err := apiClient.QueuesAPI.UpdateUserQueueAssociation(context.Background(), queueId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
