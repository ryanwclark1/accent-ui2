/*
accent-confd

Testing RegistersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_RegistersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RegistersAPIService AssociateTrunkRegisterIax", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32
		var iaxId int32

		httpRes, err := apiClient.RegistersAPI.AssociateTrunkRegisterIax(context.Background(), trunkId, iaxId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistersAPIService CreateRegisterIax", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RegistersAPI.CreateRegisterIax(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistersAPIService DeleteRegisterIax", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var registerIaxId int32

		httpRes, err := apiClient.RegistersAPI.DeleteRegisterIax(context.Background(), registerIaxId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistersAPIService DissociateTrunkRegisterIax", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32
		var iaxId int32

		httpRes, err := apiClient.RegistersAPI.DissociateTrunkRegisterIax(context.Background(), trunkId, iaxId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistersAPIService GetRegisterIax", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var registerIaxId int32

		resp, httpRes, err := apiClient.RegistersAPI.GetRegisterIax(context.Background(), registerIaxId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistersAPIService ListRegistersIax", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RegistersAPI.ListRegistersIax(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistersAPIService UpdateRegisterIax", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var registerIaxId int32

		httpRes, err := apiClient.RegistersAPI.UpdateRegisterIax(context.Background(), registerIaxId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
