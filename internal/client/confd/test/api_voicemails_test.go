/*
accent-confd

Testing VoicemailsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_VoicemailsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VoicemailsAPIService AssociateUserVoicemail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string
		var voicemailId int32

		httpRes, err := apiClient.VoicemailsAPI.AssociateUserVoicemail(context.Background(), userId, voicemailId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailsAPIService CreateUserVoicemail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.VoicemailsAPI.CreateUserVoicemail(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailsAPIService CreateVoicemail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VoicemailsAPI.CreateVoicemail(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailsAPIService DeleteVoicemail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var voicemailId int32

		httpRes, err := apiClient.VoicemailsAPI.DeleteVoicemail(context.Background(), voicemailId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailsAPIService DissociateUserVoicemail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		httpRes, err := apiClient.VoicemailsAPI.DissociateUserVoicemail(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailsAPIService GetUserVoicemail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.VoicemailsAPI.GetUserVoicemail(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailsAPIService GetVoicemail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var voicemailId int32

		resp, httpRes, err := apiClient.VoicemailsAPI.GetVoicemail(context.Background(), voicemailId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailsAPIService ListAsteriskVoicemailZonemessages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VoicemailsAPI.ListAsteriskVoicemailZonemessages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailsAPIService ListVoicemails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VoicemailsAPI.ListVoicemails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailsAPIService UpdateAsteriskVoicemailZonemessages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.VoicemailsAPI.UpdateAsteriskVoicemailZonemessages(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicemailsAPIService UpdateVoicemail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var voicemailId int32

		httpRes, err := apiClient.VoicemailsAPI.UpdateVoicemail(context.Background(), voicemailId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
