/*
accent-confd

Testing DevicesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_DevicesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DevicesAPIService AssignUnallocatedDeviceTenant", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceId string

		httpRes, err := apiClient.DevicesAPI.AssignUnallocatedDeviceTenant(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService AssociateLineDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var deviceId string

		httpRes, err := apiClient.DevicesAPI.AssociateLineDevice(context.Background(), lineId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService CreateDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DevicesAPI.CreateDevice(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService DeleteDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceId string

		httpRes, err := apiClient.DevicesAPI.DeleteDevice(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService DissociateLineDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var deviceId string

		httpRes, err := apiClient.DevicesAPI.DissociateLineDevice(context.Background(), lineId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DevicesAPI.GetDevice(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDeviceLineAssociation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DevicesAPI.GetDeviceLineAssociation(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetLineDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32

		resp, httpRes, err := apiClient.DevicesAPI.GetLineDevice(context.Background(), lineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService ListDevices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DevicesAPI.ListDevices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService ListUnallocatedDevices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DevicesAPI.ListUnallocatedDevices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService ResetDeviceAutoprov", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceId string

		httpRes, err := apiClient.DevicesAPI.ResetDeviceAutoprov(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService SynchronizeDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceId string

		httpRes, err := apiClient.DevicesAPI.SynchronizeDevice(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService UpdateDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceId string

		httpRes, err := apiClient.DevicesAPI.UpdateDevice(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
