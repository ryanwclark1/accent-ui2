/*
accent-confd

Testing AgentsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_AgentsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AgentsAPIService AssociateAgentSkill", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId int32
		var skillId int32

		httpRes, err := apiClient.AgentsAPI.AssociateAgentSkill(context.Background(), agentId, skillId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService AssociateUserAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string
		var agentId int32

		httpRes, err := apiClient.AgentsAPI.AssociateUserAgent(context.Background(), userId, agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService CreateAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.CreateAgent(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService CreateSkill", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.CreateSkill(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService DeleteAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId int32

		httpRes, err := apiClient.AgentsAPI.DeleteAgent(context.Background(), agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService DissociateAgentQueue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32
		var agentId int32

		httpRes, err := apiClient.AgentsAPI.DissociateAgentQueue(context.Background(), queueId, agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService DissociateAgentSkill", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId int32
		var skillId int32

		httpRes, err := apiClient.AgentsAPI.DissociateAgentSkill(context.Background(), agentId, skillId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService DissociateUserAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		httpRes, err := apiClient.AgentsAPI.DissociateUserAgent(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService GetAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId int32

		resp, httpRes, err := apiClient.AgentsAPI.GetAgent(context.Background(), agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService GetSkill", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skillId int32

		resp, httpRes, err := apiClient.AgentsAPI.GetSkill(context.Background(), skillId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ListAgents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ListAgents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ListSkills", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ListSkills(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService UpdateAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId int32

		httpRes, err := apiClient.AgentsAPI.UpdateAgent(context.Background(), agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService UpdateAgentQueueAssociation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var queueId int32
		var agentId int32

		httpRes, err := apiClient.AgentsAPI.UpdateAgentQueueAssociation(context.Background(), queueId, agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
