/*
accent-confd

Testing OutcallsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_OutcallsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OutcallsAPIService AssociateOutcallCallpermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var outcallId int32
		var callpermissionId int32

		httpRes, err := apiClient.OutcallsAPI.AssociateOutcallCallpermission(context.Background(), outcallId, callpermissionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutcallsAPIService AssociateOutcallExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var outcallId int32
		var extensionId int32

		httpRes, err := apiClient.OutcallsAPI.AssociateOutcallExtension(context.Background(), outcallId, extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutcallsAPIService AssociateOutcallSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var outcallId int32
		var scheduleId int32

		httpRes, err := apiClient.OutcallsAPI.AssociateOutcallSchedule(context.Background(), outcallId, scheduleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutcallsAPIService AssociateOutcallTrunks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var outcallId int32

		httpRes, err := apiClient.OutcallsAPI.AssociateOutcallTrunks(context.Background(), outcallId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutcallsAPIService CreateOutcall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.OutcallsAPI.CreateOutcall(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutcallsAPIService DeleteOutcall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var outcallId int32

		httpRes, err := apiClient.OutcallsAPI.DeleteOutcall(context.Background(), outcallId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutcallsAPIService DissociateOutcallCallpermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var outcallId int32
		var callpermissionId int32

		httpRes, err := apiClient.OutcallsAPI.DissociateOutcallCallpermission(context.Background(), outcallId, callpermissionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutcallsAPIService DissociateOutcallExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var outcallId int32
		var extensionId int32

		httpRes, err := apiClient.OutcallsAPI.DissociateOutcallExtension(context.Background(), outcallId, extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutcallsAPIService DissociateOutcallSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var outcallId int32
		var scheduleId int32

		httpRes, err := apiClient.OutcallsAPI.DissociateOutcallSchedule(context.Background(), outcallId, scheduleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutcallsAPIService GetOutcall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var outcallId int32

		resp, httpRes, err := apiClient.OutcallsAPI.GetOutcall(context.Background(), outcallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutcallsAPIService ListOutcalls", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.OutcallsAPI.ListOutcalls(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutcallsAPIService UpdateOutcall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var outcallId int32

		httpRes, err := apiClient.OutcallsAPI.UpdateOutcall(context.Background(), outcallId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
