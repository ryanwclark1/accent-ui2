/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Schedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Schedule{}

// Schedule struct for Schedule
type Schedule struct {
	Id *int32 `json:"id,omitempty"`
	// The name to identify the schedule
	Name *string `json:"name,omitempty"`
	// The UUID of the tenant
	TenantUuid         *string                     `json:"tenant_uuid,omitempty"`
	Incalls            []OutcallRelationBase       `json:"incalls,omitempty"`
	ClosedDestination  DestinationType             `json:"closed_destination"`
	Enabled            *bool                       `json:"enabled,omitempty"`
	ExceptionalPeriods []ScheduleExceptionalPeriod `json:"exceptional_periods,omitempty"`
	OpenPeriods        []ScheduleOpenPeriod        `json:"open_periods,omitempty"`
	// The number of the schedule
	Timezone *string `json:"timezone,omitempty"`
}

type _Schedule Schedule

// NewSchedule instantiates a new Schedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedule(closedDestination DestinationType) *Schedule {
	this := Schedule{}
	this.ClosedDestination = closedDestination
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// NewScheduleWithDefaults instantiates a new Schedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleWithDefaults() *Schedule {
	this := Schedule{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Schedule) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Schedule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Schedule) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Schedule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Schedule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Schedule) SetName(v string) {
	o.Name = &v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *Schedule) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *Schedule) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *Schedule) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

// GetIncalls returns the Incalls field value if set, zero value otherwise.
func (o *Schedule) GetIncalls() []OutcallRelationBase {
	if o == nil || IsNil(o.Incalls) {
		var ret []OutcallRelationBase
		return ret
	}
	return o.Incalls
}

// GetIncallsOk returns a tuple with the Incalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetIncallsOk() ([]OutcallRelationBase, bool) {
	if o == nil || IsNil(o.Incalls) {
		return nil, false
	}
	return o.Incalls, true
}

// HasIncalls returns a boolean if a field has been set.
func (o *Schedule) HasIncalls() bool {
	if o != nil && !IsNil(o.Incalls) {
		return true
	}

	return false
}

// SetIncalls gets a reference to the given []OutcallRelationBase and assigns it to the Incalls field.
func (o *Schedule) SetIncalls(v []OutcallRelationBase) {
	o.Incalls = v
}

// GetClosedDestination returns the ClosedDestination field value
func (o *Schedule) GetClosedDestination() DestinationType {
	if o == nil {
		var ret DestinationType
		return ret
	}

	return o.ClosedDestination
}

// GetClosedDestinationOk returns a tuple with the ClosedDestination field value
// and a boolean to check if the value has been set.
func (o *Schedule) GetClosedDestinationOk() (*DestinationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClosedDestination, true
}

// SetClosedDestination sets field value
func (o *Schedule) SetClosedDestination(v DestinationType) {
	o.ClosedDestination = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Schedule) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Schedule) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Schedule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExceptionalPeriods returns the ExceptionalPeriods field value if set, zero value otherwise.
func (o *Schedule) GetExceptionalPeriods() []ScheduleExceptionalPeriod {
	if o == nil || IsNil(o.ExceptionalPeriods) {
		var ret []ScheduleExceptionalPeriod
		return ret
	}
	return o.ExceptionalPeriods
}

// GetExceptionalPeriodsOk returns a tuple with the ExceptionalPeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetExceptionalPeriodsOk() ([]ScheduleExceptionalPeriod, bool) {
	if o == nil || IsNil(o.ExceptionalPeriods) {
		return nil, false
	}
	return o.ExceptionalPeriods, true
}

// HasExceptionalPeriods returns a boolean if a field has been set.
func (o *Schedule) HasExceptionalPeriods() bool {
	if o != nil && !IsNil(o.ExceptionalPeriods) {
		return true
	}

	return false
}

// SetExceptionalPeriods gets a reference to the given []ScheduleExceptionalPeriod and assigns it to the ExceptionalPeriods field.
func (o *Schedule) SetExceptionalPeriods(v []ScheduleExceptionalPeriod) {
	o.ExceptionalPeriods = v
}

// GetOpenPeriods returns the OpenPeriods field value if set, zero value otherwise.
func (o *Schedule) GetOpenPeriods() []ScheduleOpenPeriod {
	if o == nil || IsNil(o.OpenPeriods) {
		var ret []ScheduleOpenPeriod
		return ret
	}
	return o.OpenPeriods
}

// GetOpenPeriodsOk returns a tuple with the OpenPeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetOpenPeriodsOk() ([]ScheduleOpenPeriod, bool) {
	if o == nil || IsNil(o.OpenPeriods) {
		return nil, false
	}
	return o.OpenPeriods, true
}

// HasOpenPeriods returns a boolean if a field has been set.
func (o *Schedule) HasOpenPeriods() bool {
	if o != nil && !IsNil(o.OpenPeriods) {
		return true
	}

	return false
}

// SetOpenPeriods gets a reference to the given []ScheduleOpenPeriod and assigns it to the OpenPeriods field.
func (o *Schedule) SetOpenPeriods(v []ScheduleOpenPeriod) {
	o.OpenPeriods = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *Schedule) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *Schedule) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *Schedule) SetTimezone(v string) {
	o.Timezone = &v
}

func (o Schedule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Schedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	if !IsNil(o.Incalls) {
		toSerialize["incalls"] = o.Incalls
	}
	toSerialize["closed_destination"] = o.ClosedDestination
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ExceptionalPeriods) {
		toSerialize["exceptional_periods"] = o.ExceptionalPeriods
	}
	if !IsNil(o.OpenPeriods) {
		toSerialize["open_periods"] = o.OpenPeriods
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	return toSerialize, nil
}

func (o *Schedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"closed_destination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchedule := _Schedule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSchedule)

	if err != nil {
		return err
	}

	*o = Schedule(varSchedule)

	return err
}

type NullableSchedule struct {
	value *Schedule
	isSet bool
}

func (v NullableSchedule) Get() *Schedule {
	return v.value
}

func (v *NullableSchedule) Set(val *Schedule) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedule(val *Schedule) *NullableSchedule {
	return &NullableSchedule{value: val, isSet: true}
}

func (v NullableSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
