/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Paging type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Paging{}

// Paging struct for Paging
type Paging struct {
	Callers *PagingRelationMemberUsers `json:"callers,omitempty"`
	Members *PagingRelationMemberUsers `json:"members,omitempty"`
	// Play the announce sound to the caller
	AnnounceCaller *bool `json:"announce_caller,omitempty"`
	// The sound played to everyone
	AnnounceSound *string `json:"announce_sound,omitempty"`
	// Play a notification to caller
	CallerNotification *bool `json:"caller_notification,omitempty"`
	// Duplex audio
	Duplex  *bool  `json:"duplex,omitempty"`
	Enabled *bool  `json:"enabled,omitempty"`
	Id      *int32 `json:"id,omitempty"`
	// Ignore attemps to forward the call
	IgnoreForward *bool `json:"ignore_forward,omitempty"`
	// The name to identify the paging
	Name *string `json:"name,omitempty"`
	// The number of the paging
	Number string `json:"number"`
	// Record the paging
	Record *bool `json:"record,omitempty"`
	// The UUID of the tenant
	TenantUuid *string `json:"tenant_uuid,omitempty"`
}

type _Paging Paging

// NewPaging instantiates a new Paging object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaging(number string) *Paging {
	this := Paging{}
	var announceCaller bool = true
	this.AnnounceCaller = &announceCaller
	var callerNotification bool = true
	this.CallerNotification = &callerNotification
	var duplex bool = false
	this.Duplex = &duplex
	var enabled bool = true
	this.Enabled = &enabled
	var ignoreForward bool = false
	this.IgnoreForward = &ignoreForward
	this.Number = number
	var record bool = false
	this.Record = &record
	return &this
}

// NewPagingWithDefaults instantiates a new Paging object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPagingWithDefaults() *Paging {
	this := Paging{}
	var announceCaller bool = true
	this.AnnounceCaller = &announceCaller
	var callerNotification bool = true
	this.CallerNotification = &callerNotification
	var duplex bool = false
	this.Duplex = &duplex
	var enabled bool = true
	this.Enabled = &enabled
	var ignoreForward bool = false
	this.IgnoreForward = &ignoreForward
	var record bool = false
	this.Record = &record
	return &this
}

// GetCallers returns the Callers field value if set, zero value otherwise.
func (o *Paging) GetCallers() PagingRelationMemberUsers {
	if o == nil || IsNil(o.Callers) {
		var ret PagingRelationMemberUsers
		return ret
	}
	return *o.Callers
}

// GetCallersOk returns a tuple with the Callers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paging) GetCallersOk() (*PagingRelationMemberUsers, bool) {
	if o == nil || IsNil(o.Callers) {
		return nil, false
	}
	return o.Callers, true
}

// HasCallers returns a boolean if a field has been set.
func (o *Paging) HasCallers() bool {
	if o != nil && !IsNil(o.Callers) {
		return true
	}

	return false
}

// SetCallers gets a reference to the given PagingRelationMemberUsers and assigns it to the Callers field.
func (o *Paging) SetCallers(v PagingRelationMemberUsers) {
	o.Callers = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *Paging) GetMembers() PagingRelationMemberUsers {
	if o == nil || IsNil(o.Members) {
		var ret PagingRelationMemberUsers
		return ret
	}
	return *o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paging) GetMembersOk() (*PagingRelationMemberUsers, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Paging) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given PagingRelationMemberUsers and assigns it to the Members field.
func (o *Paging) SetMembers(v PagingRelationMemberUsers) {
	o.Members = &v
}

// GetAnnounceCaller returns the AnnounceCaller field value if set, zero value otherwise.
func (o *Paging) GetAnnounceCaller() bool {
	if o == nil || IsNil(o.AnnounceCaller) {
		var ret bool
		return ret
	}
	return *o.AnnounceCaller
}

// GetAnnounceCallerOk returns a tuple with the AnnounceCaller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paging) GetAnnounceCallerOk() (*bool, bool) {
	if o == nil || IsNil(o.AnnounceCaller) {
		return nil, false
	}
	return o.AnnounceCaller, true
}

// HasAnnounceCaller returns a boolean if a field has been set.
func (o *Paging) HasAnnounceCaller() bool {
	if o != nil && !IsNil(o.AnnounceCaller) {
		return true
	}

	return false
}

// SetAnnounceCaller gets a reference to the given bool and assigns it to the AnnounceCaller field.
func (o *Paging) SetAnnounceCaller(v bool) {
	o.AnnounceCaller = &v
}

// GetAnnounceSound returns the AnnounceSound field value if set, zero value otherwise.
func (o *Paging) GetAnnounceSound() string {
	if o == nil || IsNil(o.AnnounceSound) {
		var ret string
		return ret
	}
	return *o.AnnounceSound
}

// GetAnnounceSoundOk returns a tuple with the AnnounceSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paging) GetAnnounceSoundOk() (*string, bool) {
	if o == nil || IsNil(o.AnnounceSound) {
		return nil, false
	}
	return o.AnnounceSound, true
}

// HasAnnounceSound returns a boolean if a field has been set.
func (o *Paging) HasAnnounceSound() bool {
	if o != nil && !IsNil(o.AnnounceSound) {
		return true
	}

	return false
}

// SetAnnounceSound gets a reference to the given string and assigns it to the AnnounceSound field.
func (o *Paging) SetAnnounceSound(v string) {
	o.AnnounceSound = &v
}

// GetCallerNotification returns the CallerNotification field value if set, zero value otherwise.
func (o *Paging) GetCallerNotification() bool {
	if o == nil || IsNil(o.CallerNotification) {
		var ret bool
		return ret
	}
	return *o.CallerNotification
}

// GetCallerNotificationOk returns a tuple with the CallerNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paging) GetCallerNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.CallerNotification) {
		return nil, false
	}
	return o.CallerNotification, true
}

// HasCallerNotification returns a boolean if a field has been set.
func (o *Paging) HasCallerNotification() bool {
	if o != nil && !IsNil(o.CallerNotification) {
		return true
	}

	return false
}

// SetCallerNotification gets a reference to the given bool and assigns it to the CallerNotification field.
func (o *Paging) SetCallerNotification(v bool) {
	o.CallerNotification = &v
}

// GetDuplex returns the Duplex field value if set, zero value otherwise.
func (o *Paging) GetDuplex() bool {
	if o == nil || IsNil(o.Duplex) {
		var ret bool
		return ret
	}
	return *o.Duplex
}

// GetDuplexOk returns a tuple with the Duplex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paging) GetDuplexOk() (*bool, bool) {
	if o == nil || IsNil(o.Duplex) {
		return nil, false
	}
	return o.Duplex, true
}

// HasDuplex returns a boolean if a field has been set.
func (o *Paging) HasDuplex() bool {
	if o != nil && !IsNil(o.Duplex) {
		return true
	}

	return false
}

// SetDuplex gets a reference to the given bool and assigns it to the Duplex field.
func (o *Paging) SetDuplex(v bool) {
	o.Duplex = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Paging) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paging) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Paging) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Paging) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Paging) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paging) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Paging) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Paging) SetId(v int32) {
	o.Id = &v
}

// GetIgnoreForward returns the IgnoreForward field value if set, zero value otherwise.
func (o *Paging) GetIgnoreForward() bool {
	if o == nil || IsNil(o.IgnoreForward) {
		var ret bool
		return ret
	}
	return *o.IgnoreForward
}

// GetIgnoreForwardOk returns a tuple with the IgnoreForward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paging) GetIgnoreForwardOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreForward) {
		return nil, false
	}
	return o.IgnoreForward, true
}

// HasIgnoreForward returns a boolean if a field has been set.
func (o *Paging) HasIgnoreForward() bool {
	if o != nil && !IsNil(o.IgnoreForward) {
		return true
	}

	return false
}

// SetIgnoreForward gets a reference to the given bool and assigns it to the IgnoreForward field.
func (o *Paging) SetIgnoreForward(v bool) {
	o.IgnoreForward = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Paging) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paging) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Paging) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Paging) SetName(v string) {
	o.Name = &v
}

// GetNumber returns the Number field value
func (o *Paging) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *Paging) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Paging) SetNumber(v string) {
	o.Number = v
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *Paging) GetRecord() bool {
	if o == nil || IsNil(o.Record) {
		var ret bool
		return ret
	}
	return *o.Record
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paging) GetRecordOk() (*bool, bool) {
	if o == nil || IsNil(o.Record) {
		return nil, false
	}
	return o.Record, true
}

// HasRecord returns a boolean if a field has been set.
func (o *Paging) HasRecord() bool {
	if o != nil && !IsNil(o.Record) {
		return true
	}

	return false
}

// SetRecord gets a reference to the given bool and assigns it to the Record field.
func (o *Paging) SetRecord(v bool) {
	o.Record = &v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *Paging) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paging) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *Paging) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *Paging) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

func (o Paging) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Paging) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Callers) {
		toSerialize["callers"] = o.Callers
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.AnnounceCaller) {
		toSerialize["announce_caller"] = o.AnnounceCaller
	}
	if !IsNil(o.AnnounceSound) {
		toSerialize["announce_sound"] = o.AnnounceSound
	}
	if !IsNil(o.CallerNotification) {
		toSerialize["caller_notification"] = o.CallerNotification
	}
	if !IsNil(o.Duplex) {
		toSerialize["duplex"] = o.Duplex
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IgnoreForward) {
		toSerialize["ignore_forward"] = o.IgnoreForward
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["number"] = o.Number
	if !IsNil(o.Record) {
		toSerialize["record"] = o.Record
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	return toSerialize, nil
}

func (o *Paging) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaging := _Paging{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaging)

	if err != nil {
		return err
	}

	*o = Paging(varPaging)

	return err
}

type NullablePaging struct {
	value *Paging
	isSet bool
}

func (v NullablePaging) Get() *Paging {
	return v.value
}

func (v *NullablePaging) Set(val *Paging) {
	v.value = val
	v.isSet = true
}

func (v NullablePaging) IsSet() bool {
	return v.isSet
}

func (v *NullablePaging) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaging(val *Paging) *NullablePaging {
	return &NullablePaging{value: val, isSet: true}
}

func (v NullablePaging) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaging) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
