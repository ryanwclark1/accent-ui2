/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the Switchboard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Switchboard{}

// Switchboard struct for Switchboard
type Switchboard struct {
	Incalls          []SwitchboardRelationIncall     `json:"incalls,omitempty"`
	Members          *SwitchboardRelationMemberUsers `json:"members,omitempty"`
	Fallbacks        *SwitchboardFallbacks           `json:"fallbacks,omitempty"`
	Name             *string                         `json:"name,omitempty"`
	QueueMusicOnHold *string                         `json:"queue_music_on_hold,omitempty"`
	// The UUID of the tenant
	TenantUuid *string `json:"tenant_uuid,omitempty"`
	// Maximum time allowed for a call to be queued. When the timeout expires, the call is redirected to the no-answer fallback.
	Timeout                *int32  `json:"timeout,omitempty"`
	Uuid                   *string `json:"uuid,omitempty"`
	WaitingRoomMusicOnHold *string `json:"waiting_room_music_on_hold,omitempty"`
}

// NewSwitchboard instantiates a new Switchboard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchboard() *Switchboard {
	this := Switchboard{}
	return &this
}

// NewSwitchboardWithDefaults instantiates a new Switchboard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchboardWithDefaults() *Switchboard {
	this := Switchboard{}
	return &this
}

// GetIncalls returns the Incalls field value if set, zero value otherwise.
func (o *Switchboard) GetIncalls() []SwitchboardRelationIncall {
	if o == nil || IsNil(o.Incalls) {
		var ret []SwitchboardRelationIncall
		return ret
	}
	return o.Incalls
}

// GetIncallsOk returns a tuple with the Incalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Switchboard) GetIncallsOk() ([]SwitchboardRelationIncall, bool) {
	if o == nil || IsNil(o.Incalls) {
		return nil, false
	}
	return o.Incalls, true
}

// HasIncalls returns a boolean if a field has been set.
func (o *Switchboard) HasIncalls() bool {
	if o != nil && !IsNil(o.Incalls) {
		return true
	}

	return false
}

// SetIncalls gets a reference to the given []SwitchboardRelationIncall and assigns it to the Incalls field.
func (o *Switchboard) SetIncalls(v []SwitchboardRelationIncall) {
	o.Incalls = v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *Switchboard) GetMembers() SwitchboardRelationMemberUsers {
	if o == nil || IsNil(o.Members) {
		var ret SwitchboardRelationMemberUsers
		return ret
	}
	return *o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Switchboard) GetMembersOk() (*SwitchboardRelationMemberUsers, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Switchboard) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given SwitchboardRelationMemberUsers and assigns it to the Members field.
func (o *Switchboard) SetMembers(v SwitchboardRelationMemberUsers) {
	o.Members = &v
}

// GetFallbacks returns the Fallbacks field value if set, zero value otherwise.
func (o *Switchboard) GetFallbacks() SwitchboardFallbacks {
	if o == nil || IsNil(o.Fallbacks) {
		var ret SwitchboardFallbacks
		return ret
	}
	return *o.Fallbacks
}

// GetFallbacksOk returns a tuple with the Fallbacks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Switchboard) GetFallbacksOk() (*SwitchboardFallbacks, bool) {
	if o == nil || IsNil(o.Fallbacks) {
		return nil, false
	}
	return o.Fallbacks, true
}

// HasFallbacks returns a boolean if a field has been set.
func (o *Switchboard) HasFallbacks() bool {
	if o != nil && !IsNil(o.Fallbacks) {
		return true
	}

	return false
}

// SetFallbacks gets a reference to the given SwitchboardFallbacks and assigns it to the Fallbacks field.
func (o *Switchboard) SetFallbacks(v SwitchboardFallbacks) {
	o.Fallbacks = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Switchboard) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Switchboard) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Switchboard) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Switchboard) SetName(v string) {
	o.Name = &v
}

// GetQueueMusicOnHold returns the QueueMusicOnHold field value if set, zero value otherwise.
func (o *Switchboard) GetQueueMusicOnHold() string {
	if o == nil || IsNil(o.QueueMusicOnHold) {
		var ret string
		return ret
	}
	return *o.QueueMusicOnHold
}

// GetQueueMusicOnHoldOk returns a tuple with the QueueMusicOnHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Switchboard) GetQueueMusicOnHoldOk() (*string, bool) {
	if o == nil || IsNil(o.QueueMusicOnHold) {
		return nil, false
	}
	return o.QueueMusicOnHold, true
}

// HasQueueMusicOnHold returns a boolean if a field has been set.
func (o *Switchboard) HasQueueMusicOnHold() bool {
	if o != nil && !IsNil(o.QueueMusicOnHold) {
		return true
	}

	return false
}

// SetQueueMusicOnHold gets a reference to the given string and assigns it to the QueueMusicOnHold field.
func (o *Switchboard) SetQueueMusicOnHold(v string) {
	o.QueueMusicOnHold = &v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *Switchboard) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Switchboard) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *Switchboard) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *Switchboard) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *Switchboard) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Switchboard) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *Switchboard) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *Switchboard) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Switchboard) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Switchboard) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Switchboard) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Switchboard) SetUuid(v string) {
	o.Uuid = &v
}

// GetWaitingRoomMusicOnHold returns the WaitingRoomMusicOnHold field value if set, zero value otherwise.
func (o *Switchboard) GetWaitingRoomMusicOnHold() string {
	if o == nil || IsNil(o.WaitingRoomMusicOnHold) {
		var ret string
		return ret
	}
	return *o.WaitingRoomMusicOnHold
}

// GetWaitingRoomMusicOnHoldOk returns a tuple with the WaitingRoomMusicOnHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Switchboard) GetWaitingRoomMusicOnHoldOk() (*string, bool) {
	if o == nil || IsNil(o.WaitingRoomMusicOnHold) {
		return nil, false
	}
	return o.WaitingRoomMusicOnHold, true
}

// HasWaitingRoomMusicOnHold returns a boolean if a field has been set.
func (o *Switchboard) HasWaitingRoomMusicOnHold() bool {
	if o != nil && !IsNil(o.WaitingRoomMusicOnHold) {
		return true
	}

	return false
}

// SetWaitingRoomMusicOnHold gets a reference to the given string and assigns it to the WaitingRoomMusicOnHold field.
func (o *Switchboard) SetWaitingRoomMusicOnHold(v string) {
	o.WaitingRoomMusicOnHold = &v
}

func (o Switchboard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Switchboard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Incalls) {
		toSerialize["incalls"] = o.Incalls
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Fallbacks) {
		toSerialize["fallbacks"] = o.Fallbacks
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.QueueMusicOnHold) {
		toSerialize["queue_music_on_hold"] = o.QueueMusicOnHold
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.WaitingRoomMusicOnHold) {
		toSerialize["waiting_room_music_on_hold"] = o.WaitingRoomMusicOnHold
	}
	return toSerialize, nil
}

type NullableSwitchboard struct {
	value *Switchboard
	isSet bool
}

func (v NullableSwitchboard) Get() *Switchboard {
	return v.value
}

func (v *NullableSwitchboard) Set(val *Switchboard) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchboard) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchboard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchboard(val *Switchboard) *NullableSwitchboard {
	return &NullableSwitchboard{value: val, isSet: true}
}

func (v NullableSwitchboard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchboard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
