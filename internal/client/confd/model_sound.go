/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Sound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sound{}

// Sound struct for Sound
type Sound struct {
	// The audio files
	Files []SoundFile `json:"files,omitempty"`
	// The name of the category (can only by set on create and must be unique)
	Name string `json:"name"`
	// The UUID of the tenant of the category
	TenantUuid *string `json:"tenant_uuid,omitempty"`
}

type _Sound Sound

// NewSound instantiates a new Sound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSound(name string) *Sound {
	this := Sound{}
	this.Name = name
	return &this
}

// NewSoundWithDefaults instantiates a new Sound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoundWithDefaults() *Sound {
	this := Sound{}
	return &this
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *Sound) GetFiles() []SoundFile {
	if o == nil || IsNil(o.Files) {
		var ret []SoundFile
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sound) GetFilesOk() ([]SoundFile, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *Sound) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []SoundFile and assigns it to the Files field.
func (o *Sound) SetFiles(v []SoundFile) {
	o.Files = v
}

// GetName returns the Name field value
func (o *Sound) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Sound) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Sound) SetName(v string) {
	o.Name = v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *Sound) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sound) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *Sound) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *Sound) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

func (o Sound) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	return toSerialize, nil
}

func (o *Sound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSound := _Sound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSound)

	if err != nil {
		return err
	}

	*o = Sound(varSound)

	return err
}

type NullableSound struct {
	value *Sound
	isSet bool
}

func (v NullableSound) Get() *Sound {
	return v.value
}

func (v *NullableSound) Set(val *Sound) {
	v.value = val
	v.isSet = true
}

func (v NullableSound) IsSet() bool {
	return v.isSet
}

func (v *NullableSound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSound(val *Sound) *NullableSound {
	return &NullableSound{value: val, isSet: true}
}

func (v NullableSound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
