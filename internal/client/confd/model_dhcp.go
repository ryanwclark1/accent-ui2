/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the DHCP type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DHCP{}

// DHCP struct for DHCP
type DHCP struct {
	// Is the DHCP service enabled?
	Active *bool `json:"active,omitempty"`
	// A comma separated list of network interface that the DHCP server listens on
	NetworkInterfaces []string `json:"network_interfaces,omitempty"`
	// The last IP address that can be allocated by DHCP
	PoolEnd *string `json:"pool_end,omitempty"`
	// The first IP address that can be allocated by DHCP
	PoolStart *string `json:"pool_start,omitempty"`
}

// NewDHCP instantiates a new DHCP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDHCP() *DHCP {
	this := DHCP{}
	return &this
}

// NewDHCPWithDefaults instantiates a new DHCP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDHCPWithDefaults() *DHCP {
	this := DHCP{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *DHCP) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCP) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *DHCP) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *DHCP) SetActive(v bool) {
	o.Active = &v
}

// GetNetworkInterfaces returns the NetworkInterfaces field value if set, zero value otherwise.
func (o *DHCP) GetNetworkInterfaces() []string {
	if o == nil || IsNil(o.NetworkInterfaces) {
		var ret []string
		return ret
	}
	return o.NetworkInterfaces
}

// GetNetworkInterfacesOk returns a tuple with the NetworkInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCP) GetNetworkInterfacesOk() ([]string, bool) {
	if o == nil || IsNil(o.NetworkInterfaces) {
		return nil, false
	}
	return o.NetworkInterfaces, true
}

// HasNetworkInterfaces returns a boolean if a field has been set.
func (o *DHCP) HasNetworkInterfaces() bool {
	if o != nil && !IsNil(o.NetworkInterfaces) {
		return true
	}

	return false
}

// SetNetworkInterfaces gets a reference to the given []string and assigns it to the NetworkInterfaces field.
func (o *DHCP) SetNetworkInterfaces(v []string) {
	o.NetworkInterfaces = v
}

// GetPoolEnd returns the PoolEnd field value if set, zero value otherwise.
func (o *DHCP) GetPoolEnd() string {
	if o == nil || IsNil(o.PoolEnd) {
		var ret string
		return ret
	}
	return *o.PoolEnd
}

// GetPoolEndOk returns a tuple with the PoolEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCP) GetPoolEndOk() (*string, bool) {
	if o == nil || IsNil(o.PoolEnd) {
		return nil, false
	}
	return o.PoolEnd, true
}

// HasPoolEnd returns a boolean if a field has been set.
func (o *DHCP) HasPoolEnd() bool {
	if o != nil && !IsNil(o.PoolEnd) {
		return true
	}

	return false
}

// SetPoolEnd gets a reference to the given string and assigns it to the PoolEnd field.
func (o *DHCP) SetPoolEnd(v string) {
	o.PoolEnd = &v
}

// GetPoolStart returns the PoolStart field value if set, zero value otherwise.
func (o *DHCP) GetPoolStart() string {
	if o == nil || IsNil(o.PoolStart) {
		var ret string
		return ret
	}
	return *o.PoolStart
}

// GetPoolStartOk returns a tuple with the PoolStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCP) GetPoolStartOk() (*string, bool) {
	if o == nil || IsNil(o.PoolStart) {
		return nil, false
	}
	return o.PoolStart, true
}

// HasPoolStart returns a boolean if a field has been set.
func (o *DHCP) HasPoolStart() bool {
	if o != nil && !IsNil(o.PoolStart) {
		return true
	}

	return false
}

// SetPoolStart gets a reference to the given string and assigns it to the PoolStart field.
func (o *DHCP) SetPoolStart(v string) {
	o.PoolStart = &v
}

func (o DHCP) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DHCP) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.NetworkInterfaces) {
		toSerialize["network_interfaces"] = o.NetworkInterfaces
	}
	if !IsNil(o.PoolEnd) {
		toSerialize["pool_end"] = o.PoolEnd
	}
	if !IsNil(o.PoolStart) {
		toSerialize["pool_start"] = o.PoolStart
	}
	return toSerialize, nil
}

type NullableDHCP struct {
	value *DHCP
	isSet bool
}

func (v NullableDHCP) Get() *DHCP {
	return v.value
}

func (v *NullableDHCP) Set(val *DHCP) {
	v.value = val
	v.isSet = true
}

func (v NullableDHCP) IsSet() bool {
	return v.isSet
}

func (v *NullableDHCP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDHCP(val *DHCP) *NullableDHCP {
	return &NullableDHCP{value: val, isSet: true}
}

func (v NullableDHCP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDHCP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
