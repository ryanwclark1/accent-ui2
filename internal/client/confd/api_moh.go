/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type MohAPI interface {

	/*
		CreateMoh Create MOH class

		**Required ACL:** `confd.moh.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MohAPICreateMohRequest
	*/
	CreateMoh(ctx context.Context) MohAPICreateMohRequest

	// CreateMohExecute executes the request
	//  @return Moh
	CreateMohExecute(r MohAPICreateMohRequest) (*Moh, *http.Response, error)

	/*
		DeleteMoh Delete MOH class

		**Required ACL:** `confd.moh.{moh_uuid}.delete`

	Delete the MOH class and associated audio files.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param mohUuid
		@return MohAPIDeleteMohRequest
	*/
	DeleteMoh(ctx context.Context, mohUuid string) MohAPIDeleteMohRequest

	// DeleteMohExecute executes the request
	DeleteMohExecute(r MohAPIDeleteMohRequest) (*http.Response, error)

	/*
		DeleteMohFiles Delete audio file

		**Required ACL:** `confd.moh.{moh_uuid}.files.{moh_filename}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param mohUuid
		@param mohFilename
		@return MohAPIDeleteMohFilesRequest
	*/
	DeleteMohFiles(ctx context.Context, mohUuid string, mohFilename string) MohAPIDeleteMohFilesRequest

	// DeleteMohFilesExecute executes the request
	DeleteMohFilesExecute(r MohAPIDeleteMohFilesRequest) (*http.Response, error)

	/*
		GetMoh Get MOH class

		**Required ACL:** `confd.moh.{moh_uuid}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param mohUuid
		@return MohAPIGetMohRequest
	*/
	GetMoh(ctx context.Context, mohUuid string) MohAPIGetMohRequest

	// GetMohExecute executes the request
	//  @return Moh
	GetMohExecute(r MohAPIGetMohRequest) (*Moh, *http.Response, error)

	/*
		GetMohFiles Get audio file

		**Required ACL:** `confd.moh.{moh_uuid}.files.{moh_filename}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param mohUuid
		@param mohFilename
		@return MohAPIGetMohFilesRequest
	*/
	GetMohFiles(ctx context.Context, mohUuid string, mohFilename string) MohAPIGetMohFilesRequest

	// GetMohFilesExecute executes the request
	GetMohFilesExecute(r MohAPIGetMohFilesRequest) (*http.Response, error)

	/*
		ListMoh List MOH classes

		**Required ACL:** `confd.moh.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MohAPIListMohRequest
	*/
	ListMoh(ctx context.Context) MohAPIListMohRequest

	// ListMohExecute executes the request
	//  @return MohItems
	ListMohExecute(r MohAPIListMohRequest) (*MohItems, *http.Response, error)

	/*
		UpdateMoh Update MOH class

		**Required ACL:** `confd.moh.{moh_uuid}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param mohUuid
		@return MohAPIUpdateMohRequest
	*/
	UpdateMoh(ctx context.Context, mohUuid string) MohAPIUpdateMohRequest

	// UpdateMohExecute executes the request
	UpdateMohExecute(r MohAPIUpdateMohRequest) (*http.Response, error)

	/*
		UpdateMohFiles Add or update audio file

		**Required ACL:** `confd.moh.{moh_uuid}.files.{moh_filename}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param mohUuid
		@param mohFilename
		@return MohAPIUpdateMohFilesRequest
	*/
	UpdateMohFiles(ctx context.Context, mohUuid string, mohFilename string) MohAPIUpdateMohFilesRequest

	// UpdateMohFilesExecute executes the request
	UpdateMohFilesExecute(r MohAPIUpdateMohFilesRequest) (*http.Response, error)
}

// MohAPIService MohAPI service
type MohAPIService service

type MohAPICreateMohRequest struct {
	ctx        context.Context
	ApiService MohAPI
	body       *Moh
}

// MOH class to create
func (r MohAPICreateMohRequest) Body(body Moh) MohAPICreateMohRequest {
	r.body = &body
	return r
}

func (r MohAPICreateMohRequest) Execute() (*Moh, *http.Response, error) {
	return r.ApiService.CreateMohExecute(r)
}

/*
CreateMoh Create MOH class

**Required ACL:** `confd.moh.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MohAPICreateMohRequest
*/
func (a *MohAPIService) CreateMoh(ctx context.Context) MohAPICreateMohRequest {
	return MohAPICreateMohRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Moh
func (a *MohAPIService) CreateMohExecute(r MohAPICreateMohRequest) (*Moh, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Moh
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MohAPIService.CreateMoh")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/moh"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MohAPIDeleteMohRequest struct {
	ctx          context.Context
	ApiService   MohAPI
	mohUuid      string
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r MohAPIDeleteMohRequest) AccentTenant(accentTenant string) MohAPIDeleteMohRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r MohAPIDeleteMohRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMohExecute(r)
}

/*
DeleteMoh Delete MOH class

**Required ACL:** `confd.moh.{moh_uuid}.delete`

Delete the MOH class and associated audio files.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mohUuid
	@return MohAPIDeleteMohRequest
*/
func (a *MohAPIService) DeleteMoh(ctx context.Context, mohUuid string) MohAPIDeleteMohRequest {
	return MohAPIDeleteMohRequest{
		ApiService: a,
		ctx:        ctx,
		mohUuid:    mohUuid,
	}
}

// Execute executes the request
func (a *MohAPIService) DeleteMohExecute(r MohAPIDeleteMohRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MohAPIService.DeleteMoh")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/moh/{moh_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"moh_uuid"+"}", url.PathEscape(parameterValueToString(r.mohUuid, "mohUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MohAPIDeleteMohFilesRequest struct {
	ctx          context.Context
	ApiService   MohAPI
	mohUuid      string
	mohFilename  string
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r MohAPIDeleteMohFilesRequest) AccentTenant(accentTenant string) MohAPIDeleteMohFilesRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r MohAPIDeleteMohFilesRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMohFilesExecute(r)
}

/*
DeleteMohFiles Delete audio file

**Required ACL:** `confd.moh.{moh_uuid}.files.{moh_filename}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mohUuid
	@param mohFilename
	@return MohAPIDeleteMohFilesRequest
*/
func (a *MohAPIService) DeleteMohFiles(ctx context.Context, mohUuid string, mohFilename string) MohAPIDeleteMohFilesRequest {
	return MohAPIDeleteMohFilesRequest{
		ApiService:  a,
		ctx:         ctx,
		mohUuid:     mohUuid,
		mohFilename: mohFilename,
	}
}

// Execute executes the request
func (a *MohAPIService) DeleteMohFilesExecute(r MohAPIDeleteMohFilesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MohAPIService.DeleteMohFiles")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/moh/{moh_uuid}/files/{moh_filename}"
	localVarPath = strings.Replace(localVarPath, "{"+"moh_uuid"+"}", url.PathEscape(parameterValueToString(r.mohUuid, "mohUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"moh_filename"+"}", url.PathEscape(parameterValueToString(r.mohFilename, "mohFilename")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MohAPIGetMohRequest struct {
	ctx          context.Context
	ApiService   MohAPI
	mohUuid      string
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r MohAPIGetMohRequest) AccentTenant(accentTenant string) MohAPIGetMohRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r MohAPIGetMohRequest) Execute() (*Moh, *http.Response, error) {
	return r.ApiService.GetMohExecute(r)
}

/*
GetMoh Get MOH class

**Required ACL:** `confd.moh.{moh_uuid}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mohUuid
	@return MohAPIGetMohRequest
*/
func (a *MohAPIService) GetMoh(ctx context.Context, mohUuid string) MohAPIGetMohRequest {
	return MohAPIGetMohRequest{
		ApiService: a,
		ctx:        ctx,
		mohUuid:    mohUuid,
	}
}

// Execute executes the request
//
//	@return Moh
func (a *MohAPIService) GetMohExecute(r MohAPIGetMohRequest) (*Moh, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Moh
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MohAPIService.GetMoh")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/moh/{moh_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"moh_uuid"+"}", url.PathEscape(parameterValueToString(r.mohUuid, "mohUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MohAPIGetMohFilesRequest struct {
	ctx          context.Context
	ApiService   MohAPI
	mohUuid      string
	mohFilename  string
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r MohAPIGetMohFilesRequest) AccentTenant(accentTenant string) MohAPIGetMohFilesRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r MohAPIGetMohFilesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetMohFilesExecute(r)
}

/*
GetMohFiles Get audio file

**Required ACL:** `confd.moh.{moh_uuid}.files.{moh_filename}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mohUuid
	@param mohFilename
	@return MohAPIGetMohFilesRequest
*/
func (a *MohAPIService) GetMohFiles(ctx context.Context, mohUuid string, mohFilename string) MohAPIGetMohFilesRequest {
	return MohAPIGetMohFilesRequest{
		ApiService:  a,
		ctx:         ctx,
		mohUuid:     mohUuid,
		mohFilename: mohFilename,
	}
}

// Execute executes the request
func (a *MohAPIService) GetMohFilesExecute(r MohAPIGetMohFilesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MohAPIService.GetMohFiles")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/moh/{moh_uuid}/files/{moh_filename}"
	localVarPath = strings.Replace(localVarPath, "{"+"moh_uuid"+"}", url.PathEscape(parameterValueToString(r.mohUuid, "mohUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"moh_filename"+"}", url.PathEscape(parameterValueToString(r.mohFilename, "mohFilename")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MohAPIListMohRequest struct {
	ctx          context.Context
	ApiService   MohAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r MohAPIListMohRequest) AccentTenant(accentTenant string) MohAPIListMohRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r MohAPIListMohRequest) Recurse(recurse bool) MohAPIListMohRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r MohAPIListMohRequest) Order(order string) MohAPIListMohRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r MohAPIListMohRequest) Direction(direction string) MohAPIListMohRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r MohAPIListMohRequest) Limit(limit int32) MohAPIListMohRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r MohAPIListMohRequest) Offset(offset int32) MohAPIListMohRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r MohAPIListMohRequest) Search(search string) MohAPIListMohRequest {
	r.search = &search
	return r
}

func (r MohAPIListMohRequest) Execute() (*MohItems, *http.Response, error) {
	return r.ApiService.ListMohExecute(r)
}

/*
ListMoh List MOH classes

**Required ACL:** `confd.moh.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MohAPIListMohRequest
*/
func (a *MohAPIService) ListMoh(ctx context.Context) MohAPIListMohRequest {
	return MohAPIListMohRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return MohItems
func (a *MohAPIService) ListMohExecute(r MohAPIListMohRequest) (*MohItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MohItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MohAPIService.ListMoh")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/moh"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MohAPIUpdateMohRequest struct {
	ctx          context.Context
	ApiService   MohAPI
	body         *Moh
	mohUuid      string
	accentTenant *string
}

func (r MohAPIUpdateMohRequest) Body(body Moh) MohAPIUpdateMohRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r MohAPIUpdateMohRequest) AccentTenant(accentTenant string) MohAPIUpdateMohRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r MohAPIUpdateMohRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateMohExecute(r)
}

/*
UpdateMoh Update MOH class

**Required ACL:** `confd.moh.{moh_uuid}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mohUuid
	@return MohAPIUpdateMohRequest
*/
func (a *MohAPIService) UpdateMoh(ctx context.Context, mohUuid string) MohAPIUpdateMohRequest {
	return MohAPIUpdateMohRequest{
		ApiService: a,
		ctx:        ctx,
		mohUuid:    mohUuid,
	}
}

// Execute executes the request
func (a *MohAPIService) UpdateMohExecute(r MohAPIUpdateMohRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MohAPIService.UpdateMoh")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/moh/{moh_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"moh_uuid"+"}", url.PathEscape(parameterValueToString(r.mohUuid, "mohUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MohAPIUpdateMohFilesRequest struct {
	ctx          context.Context
	ApiService   MohAPI
	body         *map[string]interface{}
	mohUuid      string
	mohFilename  string
	accentTenant *string
}

func (r MohAPIUpdateMohFilesRequest) Body(body map[string]interface{}) MohAPIUpdateMohFilesRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r MohAPIUpdateMohFilesRequest) AccentTenant(accentTenant string) MohAPIUpdateMohFilesRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r MohAPIUpdateMohFilesRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateMohFilesExecute(r)
}

/*
UpdateMohFiles Add or update audio file

**Required ACL:** `confd.moh.{moh_uuid}.files.{moh_filename}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mohUuid
	@param mohFilename
	@return MohAPIUpdateMohFilesRequest
*/
func (a *MohAPIService) UpdateMohFiles(ctx context.Context, mohUuid string, mohFilename string) MohAPIUpdateMohFilesRequest {
	return MohAPIUpdateMohFilesRequest{
		ApiService:  a,
		ctx:         ctx,
		mohUuid:     mohUuid,
		mohFilename: mohFilename,
	}
}

// Execute executes the request
func (a *MohAPIService) UpdateMohFilesExecute(r MohAPIUpdateMohFilesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MohAPIService.UpdateMohFiles")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/moh/{moh_uuid}/files/{moh_filename}"
	localVarPath = strings.Replace(localVarPath, "{"+"moh_uuid"+"}", url.PathEscape(parameterValueToString(r.mohUuid, "mohUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"moh_filename"+"}", url.PathEscape(parameterValueToString(r.mohFilename, "mohFilename")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
