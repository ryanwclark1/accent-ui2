/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Wizard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Wizard{}

// Wizard struct for Wizard
type Wizard struct {
	// Accent administrator ``root`` password
	AdminPassword string `json:"admin_password"`
	// The language in which the Accent will play sounds
	Language *string `json:"language,omitempty"`
	// Accept/decline the GPLv3: http://www.gnu.org/licenses/gpl-3.0.en.html
	License bool          `json:"license"`
	Network WizardNetwork `json:"network"`
	Steps   *WizardSteps  `json:"steps,omitempty"`
	// System timezone. Example: America/Montreal. For the complete list of supported timezones, see ``/usr/share/zoneinfo/``
	Timezone string `json:"timezone"`
}

type _Wizard Wizard

// NewWizard instantiates a new Wizard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWizard(adminPassword string, license bool, network WizardNetwork, timezone string) *Wizard {
	this := Wizard{}
	this.AdminPassword = adminPassword
	var language string = "en_US"
	this.Language = &language
	this.License = license
	this.Network = network
	this.Timezone = timezone
	return &this
}

// NewWizardWithDefaults instantiates a new Wizard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWizardWithDefaults() *Wizard {
	this := Wizard{}
	var language string = "en_US"
	this.Language = &language
	return &this
}

// GetAdminPassword returns the AdminPassword field value
func (o *Wizard) GetAdminPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdminPassword
}

// GetAdminPasswordOk returns a tuple with the AdminPassword field value
// and a boolean to check if the value has been set.
func (o *Wizard) GetAdminPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminPassword, true
}

// SetAdminPassword sets field value
func (o *Wizard) SetAdminPassword(v string) {
	o.AdminPassword = v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Wizard) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wizard) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Wizard) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Wizard) SetLanguage(v string) {
	o.Language = &v
}

// GetLicense returns the License field value
func (o *Wizard) GetLicense() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.License
}

// GetLicenseOk returns a tuple with the License field value
// and a boolean to check if the value has been set.
func (o *Wizard) GetLicenseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.License, true
}

// SetLicense sets field value
func (o *Wizard) SetLicense(v bool) {
	o.License = v
}

// GetNetwork returns the Network field value
func (o *Wizard) GetNetwork() WizardNetwork {
	if o == nil {
		var ret WizardNetwork
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *Wizard) GetNetworkOk() (*WizardNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *Wizard) SetNetwork(v WizardNetwork) {
	o.Network = v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *Wizard) GetSteps() WizardSteps {
	if o == nil || IsNil(o.Steps) {
		var ret WizardSteps
		return ret
	}
	return *o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wizard) GetStepsOk() (*WizardSteps, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *Wizard) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given WizardSteps and assigns it to the Steps field.
func (o *Wizard) SetSteps(v WizardSteps) {
	o.Steps = &v
}

// GetTimezone returns the Timezone field value
func (o *Wizard) GetTimezone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
func (o *Wizard) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timezone, true
}

// SetTimezone sets field value
func (o *Wizard) SetTimezone(v string) {
	o.Timezone = v
}

func (o Wizard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Wizard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["admin_password"] = o.AdminPassword
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	toSerialize["license"] = o.License
	toSerialize["network"] = o.Network
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}
	toSerialize["timezone"] = o.Timezone
	return toSerialize, nil
}

func (o *Wizard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"admin_password",
		"license",
		"network",
		"timezone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWizard := _Wizard{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWizard)

	if err != nil {
		return err
	}

	*o = Wizard(varWizard)

	return err
}

type NullableWizard struct {
	value *Wizard
	isSet bool
}

func (v NullableWizard) Get() *Wizard {
	return v.value
}

func (v *NullableWizard) Set(val *Wizard) {
	v.value = val
	v.isSet = true
}

func (v NullableWizard) IsSet() bool {
	return v.isSet
}

func (v *NullableWizard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWizard(val *Wizard) *NullableWizard {
	return &NullableWizard{value: val, isSet: true}
}

func (v NullableWizard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWizard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
