/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the AuthUserPostAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthUserPostAuth{}

// AuthUserPostAuth struct for AuthUserPostAuth
type AuthUserPostAuth struct {
	Emails   []AuthUserPostAuthEmailsInner `json:"emails,omitempty"`
	Purpose  *string                       `json:"purpose,omitempty"`
	Username *string                       `json:"username,omitempty"`
	Uuid     *string                       `json:"uuid,omitempty"`
}

// NewAuthUserPostAuth instantiates a new AuthUserPostAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthUserPostAuth() *AuthUserPostAuth {
	this := AuthUserPostAuth{}
	return &this
}

// NewAuthUserPostAuthWithDefaults instantiates a new AuthUserPostAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthUserPostAuthWithDefaults() *AuthUserPostAuth {
	this := AuthUserPostAuth{}
	return &this
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *AuthUserPostAuth) GetEmails() []AuthUserPostAuthEmailsInner {
	if o == nil || IsNil(o.Emails) {
		var ret []AuthUserPostAuthEmailsInner
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserPostAuth) GetEmailsOk() ([]AuthUserPostAuthEmailsInner, bool) {
	if o == nil || IsNil(o.Emails) {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *AuthUserPostAuth) HasEmails() bool {
	if o != nil && !IsNil(o.Emails) {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []AuthUserPostAuthEmailsInner and assigns it to the Emails field.
func (o *AuthUserPostAuth) SetEmails(v []AuthUserPostAuthEmailsInner) {
	o.Emails = v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *AuthUserPostAuth) GetPurpose() string {
	if o == nil || IsNil(o.Purpose) {
		var ret string
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserPostAuth) GetPurposeOk() (*string, bool) {
	if o == nil || IsNil(o.Purpose) {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *AuthUserPostAuth) HasPurpose() bool {
	if o != nil && !IsNil(o.Purpose) {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given string and assigns it to the Purpose field.
func (o *AuthUserPostAuth) SetPurpose(v string) {
	o.Purpose = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *AuthUserPostAuth) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserPostAuth) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *AuthUserPostAuth) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *AuthUserPostAuth) SetUsername(v string) {
	o.Username = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *AuthUserPostAuth) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthUserPostAuth) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *AuthUserPostAuth) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *AuthUserPostAuth) SetUuid(v string) {
	o.Uuid = &v
}

func (o AuthUserPostAuth) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthUserPostAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Emails) {
		toSerialize["emails"] = o.Emails
	}
	if !IsNil(o.Purpose) {
		toSerialize["purpose"] = o.Purpose
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableAuthUserPostAuth struct {
	value *AuthUserPostAuth
	isSet bool
}

func (v NullableAuthUserPostAuth) Get() *AuthUserPostAuth {
	return v.value
}

func (v *NullableAuthUserPostAuth) Set(val *AuthUserPostAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthUserPostAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthUserPostAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthUserPostAuth(val *AuthUserPostAuth) *NullableAuthUserPostAuth {
	return &NullableAuthUserPostAuth{value: val, isSet: true}
}

func (v NullableAuthUserPostAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthUserPostAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
