/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DestinationSound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DestinationSound{}

// DestinationSound struct for DestinationSound
type DestinationSound struct {
	// The filename of the sound. The file MUST be imported by to webi in the playback directory. The extension of file SHOULD be not present.
	Filename string `json:"filename"`
	// Play this sound without answering the call
	NoAnswer *bool `json:"no_answer,omitempty"`
	// Do not play this sound if the call is not answered
	Skip *bool `json:"skip,omitempty"`
	// MUST be 'sound'
	Type string `json:"type"`
}

type _DestinationSound DestinationSound

// NewDestinationSound instantiates a new DestinationSound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationSound(filename string, type_ string) *DestinationSound {
	this := DestinationSound{}
	this.Filename = filename
	this.Type = type_
	return &this
}

// NewDestinationSoundWithDefaults instantiates a new DestinationSound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationSoundWithDefaults() *DestinationSound {
	this := DestinationSound{}
	return &this
}

// GetFilename returns the Filename field value
func (o *DestinationSound) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *DestinationSound) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *DestinationSound) SetFilename(v string) {
	o.Filename = v
}

// GetNoAnswer returns the NoAnswer field value if set, zero value otherwise.
func (o *DestinationSound) GetNoAnswer() bool {
	if o == nil || IsNil(o.NoAnswer) {
		var ret bool
		return ret
	}
	return *o.NoAnswer
}

// GetNoAnswerOk returns a tuple with the NoAnswer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationSound) GetNoAnswerOk() (*bool, bool) {
	if o == nil || IsNil(o.NoAnswer) {
		return nil, false
	}
	return o.NoAnswer, true
}

// HasNoAnswer returns a boolean if a field has been set.
func (o *DestinationSound) HasNoAnswer() bool {
	if o != nil && !IsNil(o.NoAnswer) {
		return true
	}

	return false
}

// SetNoAnswer gets a reference to the given bool and assigns it to the NoAnswer field.
func (o *DestinationSound) SetNoAnswer(v bool) {
	o.NoAnswer = &v
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *DestinationSound) GetSkip() bool {
	if o == nil || IsNil(o.Skip) {
		var ret bool
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationSound) GetSkipOk() (*bool, bool) {
	if o == nil || IsNil(o.Skip) {
		return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *DestinationSound) HasSkip() bool {
	if o != nil && !IsNil(o.Skip) {
		return true
	}

	return false
}

// SetSkip gets a reference to the given bool and assigns it to the Skip field.
func (o *DestinationSound) SetSkip(v bool) {
	o.Skip = &v
}

// GetType returns the Type field value
func (o *DestinationSound) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DestinationSound) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DestinationSound) SetType(v string) {
	o.Type = v
}

func (o DestinationSound) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DestinationSound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filename"] = o.Filename
	if !IsNil(o.NoAnswer) {
		toSerialize["no_answer"] = o.NoAnswer
	}
	if !IsNil(o.Skip) {
		toSerialize["skip"] = o.Skip
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *DestinationSound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filename",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDestinationSound := _DestinationSound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDestinationSound)

	if err != nil {
		return err
	}

	*o = DestinationSound(varDestinationSound)

	return err
}

type NullableDestinationSound struct {
	value *DestinationSound
	isSet bool
}

func (v NullableDestinationSound) Get() *DestinationSound {
	return v.value
}

func (v *NullableDestinationSound) Set(val *DestinationSound) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationSound) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationSound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationSound(val *DestinationSound) *NullableDestinationSound {
	return &NullableDestinationSound{value: val, isSet: true}
}

func (v NullableDestinationSound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationSound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
