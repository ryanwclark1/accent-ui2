/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DestinationOutcall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DestinationOutcall{}

// DestinationOutcall struct for DestinationOutcall
type DestinationOutcall struct {
	Exten string `json:"exten"`
	// The id of the outcall
	OutcallId int32 `json:"outcall_id"`
	// MUST be 'outcall'
	Type string `json:"type"`
}

type _DestinationOutcall DestinationOutcall

// NewDestinationOutcall instantiates a new DestinationOutcall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationOutcall(exten string, outcallId int32, type_ string) *DestinationOutcall {
	this := DestinationOutcall{}
	this.Exten = exten
	this.OutcallId = outcallId
	this.Type = type_
	return &this
}

// NewDestinationOutcallWithDefaults instantiates a new DestinationOutcall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationOutcallWithDefaults() *DestinationOutcall {
	this := DestinationOutcall{}
	return &this
}

// GetExten returns the Exten field value
func (o *DestinationOutcall) GetExten() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Exten
}

// GetExtenOk returns a tuple with the Exten field value
// and a boolean to check if the value has been set.
func (o *DestinationOutcall) GetExtenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exten, true
}

// SetExten sets field value
func (o *DestinationOutcall) SetExten(v string) {
	o.Exten = v
}

// GetOutcallId returns the OutcallId field value
func (o *DestinationOutcall) GetOutcallId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OutcallId
}

// GetOutcallIdOk returns a tuple with the OutcallId field value
// and a boolean to check if the value has been set.
func (o *DestinationOutcall) GetOutcallIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OutcallId, true
}

// SetOutcallId sets field value
func (o *DestinationOutcall) SetOutcallId(v int32) {
	o.OutcallId = v
}

// GetType returns the Type field value
func (o *DestinationOutcall) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DestinationOutcall) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DestinationOutcall) SetType(v string) {
	o.Type = v
}

func (o DestinationOutcall) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DestinationOutcall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["exten"] = o.Exten
	toSerialize["outcall_id"] = o.OutcallId
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *DestinationOutcall) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"exten",
		"outcall_id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDestinationOutcall := _DestinationOutcall{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDestinationOutcall)

	if err != nil {
		return err
	}

	*o = DestinationOutcall(varDestinationOutcall)

	return err
}

type NullableDestinationOutcall struct {
	value *DestinationOutcall
	isSet bool
}

func (v NullableDestinationOutcall) Get() *DestinationOutcall {
	return v.value
}

func (v *NullableDestinationOutcall) Set(val *DestinationOutcall) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationOutcall) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationOutcall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationOutcall(val *DestinationOutcall) *NullableDestinationOutcall {
	return &NullableDestinationOutcall{value: val, isSet: true}
}

func (v NullableDestinationOutcall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationOutcall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
