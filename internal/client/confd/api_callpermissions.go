/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type CallpermissionsAPI interface {

	/*
		AssociateGroupCallpermission Associate group and call permission

		**Required ACL:** `confd.groups.{group_uuid}.callpermissions.{call_permission_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param groupUuid the group's UUID
		@param callpermissionId Call Permission's ID
		@return ApiAssociateGroupCallpermissionRequest
	*/
	AssociateGroupCallpermission(ctx context.Context, groupUuid string, callpermissionId int32) ApiAssociateGroupCallpermissionRequest

	// AssociateGroupCallpermissionExecute executes the request
	AssociateGroupCallpermissionExecute(r ApiAssociateGroupCallpermissionRequest) (*http.Response, error)

	/*
		AssociateOutcallCallpermission Associate outcall and call permission

		**Required ACL:** `confd.outcalls.{outcall_id}.callpermissions.{call_permission_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param outcallId Outgoing call's ID
		@param callpermissionId Call Permission's ID
		@return ApiAssociateOutcallCallpermissionRequest
	*/
	AssociateOutcallCallpermission(ctx context.Context, outcallId int32, callpermissionId int32) ApiAssociateOutcallCallpermissionRequest

	// AssociateOutcallCallpermissionExecute executes the request
	AssociateOutcallCallpermissionExecute(r ApiAssociateOutcallCallpermissionRequest) (*http.Response, error)

	/*
		AssociateUserCallpermission Associate user and call permission

		**Required ACL:** `confd.users.{user_id}.callpermissions.{call_permission_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userId the user's ID or UUID
		@param callpermissionId Call Permission's ID
		@return ApiAssociateUserCallpermissionRequest
	*/
	AssociateUserCallpermission(ctx context.Context, userId string, callpermissionId int32) ApiAssociateUserCallpermissionRequest

	// AssociateUserCallpermissionExecute executes the request
	AssociateUserCallpermissionExecute(r ApiAssociateUserCallpermissionRequest) (*http.Response, error)

	/*
		CreateCallpermission Create call permission

		**Required ACL:** `confd.callpermissions.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateCallpermissionRequest
	*/
	CreateCallpermission(ctx context.Context) ApiCreateCallpermissionRequest

	// CreateCallpermissionExecute executes the request
	//  @return CallPermission
	CreateCallpermissionExecute(r ApiCreateCallpermissionRequest) (*CallPermission, *http.Response, error)

	/*
		DeleteCallpermission Delete call permission

		**Required ACL:** `confd.callpermissions.{callpermission_id}.delete` . The call permission will also be removed from all users, groups, incoming calls and outgoing calls.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callpermissionId Call Permission's ID
		@return ApiDeleteCallpermissionRequest
	*/
	DeleteCallpermission(ctx context.Context, callpermissionId int32) ApiDeleteCallpermissionRequest

	// DeleteCallpermissionExecute executes the request
	DeleteCallpermissionExecute(r ApiDeleteCallpermissionRequest) (*http.Response, error)

	/*
		DissociateGroupCallpermission Dissociate group and call permission

		**Required ACL:** `confd.groups.{group_id}.callpermissions.{call_permission_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param groupUuid the group's UUID
		@param callpermissionId Call Permission's ID
		@return ApiDissociateGroupCallpermissionRequest
	*/
	DissociateGroupCallpermission(ctx context.Context, groupUuid string, callpermissionId int32) ApiDissociateGroupCallpermissionRequest

	// DissociateGroupCallpermissionExecute executes the request
	DissociateGroupCallpermissionExecute(r ApiDissociateGroupCallpermissionRequest) (*http.Response, error)

	/*
		DissociateOutcallCallpermission Dissociate outcall and call permission

		**Required ACL:** `confd.outcalls.{outcall_id}.callpermissions.{call_permission_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param outcallId Outgoing call's ID
		@param callpermissionId Call Permission's ID
		@return ApiDissociateOutcallCallpermissionRequest
	*/
	DissociateOutcallCallpermission(ctx context.Context, outcallId int32, callpermissionId int32) ApiDissociateOutcallCallpermissionRequest

	// DissociateOutcallCallpermissionExecute executes the request
	DissociateOutcallCallpermissionExecute(r ApiDissociateOutcallCallpermissionRequest) (*http.Response, error)

	/*
		DissociateUserCallpermission Dissociate user and call permission

		**Required ACL:** `confd.users.{user_id}.callpermissions.{call_permission_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userId the user's ID or UUID
		@param callpermissionId Call Permission's ID
		@return ApiDissociateUserCallpermissionRequest
	*/
	DissociateUserCallpermission(ctx context.Context, userId string, callpermissionId int32) ApiDissociateUserCallpermissionRequest

	// DissociateUserCallpermissionExecute executes the request
	DissociateUserCallpermissionExecute(r ApiDissociateUserCallpermissionRequest) (*http.Response, error)

	/*
		GetCallpermission Get call permission

		**Required ACL:** `confd.callpermissions.{callpermission_id}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callpermissionId Call Permission's ID
		@return ApiGetCallpermissionRequest
	*/
	GetCallpermission(ctx context.Context, callpermissionId int32) ApiGetCallpermissionRequest

	// GetCallpermissionExecute executes the request
	//  @return CallPermission
	GetCallpermissionExecute(r ApiGetCallpermissionRequest) (*CallPermission, *http.Response, error)

	/*
		ListCallpermissions List call permissions

		**Required ACL:** `confd.callpermissions.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListCallpermissionsRequest
	*/
	ListCallpermissions(ctx context.Context) ApiListCallpermissionsRequest

	// ListCallpermissionsExecute executes the request
	//  @return CallPermissionItems
	ListCallpermissionsExecute(r ApiListCallpermissionsRequest) (*CallPermissionItems, *http.Response, error)

	/*
		UpdateCallpermission Update call permission

		**Required ACL:** `confd.callpermissions.{callpermission_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callpermissionId Call Permission's ID
		@return ApiUpdateCallpermissionRequest
	*/
	UpdateCallpermission(ctx context.Context, callpermissionId int32) ApiUpdateCallpermissionRequest

	// UpdateCallpermissionExecute executes the request
	UpdateCallpermissionExecute(r ApiUpdateCallpermissionRequest) (*http.Response, error)
}

// CallpermissionsAPIService CallpermissionsAPI service
type CallpermissionsAPIService service

type ApiAssociateGroupCallpermissionRequest struct {
	ctx              context.Context
	ApiService       CallpermissionsAPI
	groupUuid        string
	callpermissionId int32
	accentTenant     *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiAssociateGroupCallpermissionRequest) AccentTenant(accentTenant string) ApiAssociateGroupCallpermissionRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiAssociateGroupCallpermissionRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateGroupCallpermissionExecute(r)
}

/*
AssociateGroupCallpermission Associate group and call permission

**Required ACL:** `confd.groups.{group_uuid}.callpermissions.{call_permission_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupUuid the group's UUID
	@param callpermissionId Call Permission's ID
	@return ApiAssociateGroupCallpermissionRequest
*/
func (a *CallpermissionsAPIService) AssociateGroupCallpermission(ctx context.Context, groupUuid string, callpermissionId int32) ApiAssociateGroupCallpermissionRequest {
	return ApiAssociateGroupCallpermissionRequest{
		ApiService:       a,
		ctx:              ctx,
		groupUuid:        groupUuid,
		callpermissionId: callpermissionId,
	}
}

// Execute executes the request
func (a *CallpermissionsAPIService) AssociateGroupCallpermissionExecute(r ApiAssociateGroupCallpermissionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpermissionsAPIService.AssociateGroupCallpermission")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group_uuid}/callpermissions/{callpermission_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group_uuid"+"}", url.PathEscape(parameterValueToString(r.groupUuid, "groupUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"callpermission_id"+"}", url.PathEscape(parameterValueToString(r.callpermissionId, "callpermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAssociateOutcallCallpermissionRequest struct {
	ctx              context.Context
	ApiService       CallpermissionsAPI
	outcallId        int32
	callpermissionId int32
	accentTenant     *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiAssociateOutcallCallpermissionRequest) AccentTenant(accentTenant string) ApiAssociateOutcallCallpermissionRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiAssociateOutcallCallpermissionRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateOutcallCallpermissionExecute(r)
}

/*
AssociateOutcallCallpermission Associate outcall and call permission

**Required ACL:** `confd.outcalls.{outcall_id}.callpermissions.{call_permission_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param outcallId Outgoing call's ID
	@param callpermissionId Call Permission's ID
	@return ApiAssociateOutcallCallpermissionRequest
*/
func (a *CallpermissionsAPIService) AssociateOutcallCallpermission(ctx context.Context, outcallId int32, callpermissionId int32) ApiAssociateOutcallCallpermissionRequest {
	return ApiAssociateOutcallCallpermissionRequest{
		ApiService:       a,
		ctx:              ctx,
		outcallId:        outcallId,
		callpermissionId: callpermissionId,
	}
}

// Execute executes the request
func (a *CallpermissionsAPIService) AssociateOutcallCallpermissionExecute(r ApiAssociateOutcallCallpermissionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpermissionsAPIService.AssociateOutcallCallpermission")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls/{outcall_id}/callpermissions/{callpermission_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outcall_id"+"}", url.PathEscape(parameterValueToString(r.outcallId, "outcallId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"callpermission_id"+"}", url.PathEscape(parameterValueToString(r.callpermissionId, "callpermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAssociateUserCallpermissionRequest struct {
	ctx              context.Context
	ApiService       CallpermissionsAPI
	userId           string
	callpermissionId int32
	accentTenant     *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiAssociateUserCallpermissionRequest) AccentTenant(accentTenant string) ApiAssociateUserCallpermissionRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiAssociateUserCallpermissionRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateUserCallpermissionExecute(r)
}

/*
AssociateUserCallpermission Associate user and call permission

**Required ACL:** `confd.users.{user_id}.callpermissions.{call_permission_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId the user's ID or UUID
	@param callpermissionId Call Permission's ID
	@return ApiAssociateUserCallpermissionRequest
*/
func (a *CallpermissionsAPIService) AssociateUserCallpermission(ctx context.Context, userId string, callpermissionId int32) ApiAssociateUserCallpermissionRequest {
	return ApiAssociateUserCallpermissionRequest{
		ApiService:       a,
		ctx:              ctx,
		userId:           userId,
		callpermissionId: callpermissionId,
	}
}

// Execute executes the request
func (a *CallpermissionsAPIService) AssociateUserCallpermissionExecute(r ApiAssociateUserCallpermissionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpermissionsAPIService.AssociateUserCallpermission")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/callpermissions/{callpermission_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"callpermission_id"+"}", url.PathEscape(parameterValueToString(r.callpermissionId, "callpermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateCallpermissionRequest struct {
	ctx          context.Context
	ApiService   CallpermissionsAPI
	body         *CallPermission
	accentTenant *string
}

// Call Permission to create
func (r ApiCreateCallpermissionRequest) Body(body CallPermission) ApiCreateCallpermissionRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiCreateCallpermissionRequest) AccentTenant(accentTenant string) ApiCreateCallpermissionRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiCreateCallpermissionRequest) Execute() (*CallPermission, *http.Response, error) {
	return r.ApiService.CreateCallpermissionExecute(r)
}

/*
CreateCallpermission Create call permission

**Required ACL:** `confd.callpermissions.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCallpermissionRequest
*/
func (a *CallpermissionsAPIService) CreateCallpermission(ctx context.Context) ApiCreateCallpermissionRequest {
	return ApiCreateCallpermissionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CallPermission
func (a *CallpermissionsAPIService) CreateCallpermissionExecute(r ApiCreateCallpermissionRequest) (*CallPermission, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CallPermission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpermissionsAPIService.CreateCallpermission")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callpermissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCallpermissionRequest struct {
	ctx              context.Context
	ApiService       CallpermissionsAPI
	callpermissionId int32
	accentTenant     *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiDeleteCallpermissionRequest) AccentTenant(accentTenant string) ApiDeleteCallpermissionRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiDeleteCallpermissionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCallpermissionExecute(r)
}

/*
DeleteCallpermission Delete call permission

**Required ACL:** `confd.callpermissions.{callpermission_id}.delete` . The call permission will also be removed from all users, groups, incoming calls and outgoing calls.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callpermissionId Call Permission's ID
	@return ApiDeleteCallpermissionRequest
*/
func (a *CallpermissionsAPIService) DeleteCallpermission(ctx context.Context, callpermissionId int32) ApiDeleteCallpermissionRequest {
	return ApiDeleteCallpermissionRequest{
		ApiService:       a,
		ctx:              ctx,
		callpermissionId: callpermissionId,
	}
}

// Execute executes the request
func (a *CallpermissionsAPIService) DeleteCallpermissionExecute(r ApiDeleteCallpermissionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpermissionsAPIService.DeleteCallpermission")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callpermissions/{callpermission_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"callpermission_id"+"}", url.PathEscape(parameterValueToString(r.callpermissionId, "callpermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDissociateGroupCallpermissionRequest struct {
	ctx              context.Context
	ApiService       CallpermissionsAPI
	groupUuid        string
	callpermissionId int32
	accentTenant     *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiDissociateGroupCallpermissionRequest) AccentTenant(accentTenant string) ApiDissociateGroupCallpermissionRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiDissociateGroupCallpermissionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateGroupCallpermissionExecute(r)
}

/*
DissociateGroupCallpermission Dissociate group and call permission

**Required ACL:** `confd.groups.{group_id}.callpermissions.{call_permission_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupUuid the group's UUID
	@param callpermissionId Call Permission's ID
	@return ApiDissociateGroupCallpermissionRequest
*/
func (a *CallpermissionsAPIService) DissociateGroupCallpermission(ctx context.Context, groupUuid string, callpermissionId int32) ApiDissociateGroupCallpermissionRequest {
	return ApiDissociateGroupCallpermissionRequest{
		ApiService:       a,
		ctx:              ctx,
		groupUuid:        groupUuid,
		callpermissionId: callpermissionId,
	}
}

// Execute executes the request
func (a *CallpermissionsAPIService) DissociateGroupCallpermissionExecute(r ApiDissociateGroupCallpermissionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpermissionsAPIService.DissociateGroupCallpermission")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group_uuid}/callpermissions/{callpermission_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group_uuid"+"}", url.PathEscape(parameterValueToString(r.groupUuid, "groupUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"callpermission_id"+"}", url.PathEscape(parameterValueToString(r.callpermissionId, "callpermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDissociateOutcallCallpermissionRequest struct {
	ctx              context.Context
	ApiService       CallpermissionsAPI
	outcallId        int32
	callpermissionId int32
	accentTenant     *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiDissociateOutcallCallpermissionRequest) AccentTenant(accentTenant string) ApiDissociateOutcallCallpermissionRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiDissociateOutcallCallpermissionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateOutcallCallpermissionExecute(r)
}

/*
DissociateOutcallCallpermission Dissociate outcall and call permission

**Required ACL:** `confd.outcalls.{outcall_id}.callpermissions.{call_permission_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param outcallId Outgoing call's ID
	@param callpermissionId Call Permission's ID
	@return ApiDissociateOutcallCallpermissionRequest
*/
func (a *CallpermissionsAPIService) DissociateOutcallCallpermission(ctx context.Context, outcallId int32, callpermissionId int32) ApiDissociateOutcallCallpermissionRequest {
	return ApiDissociateOutcallCallpermissionRequest{
		ApiService:       a,
		ctx:              ctx,
		outcallId:        outcallId,
		callpermissionId: callpermissionId,
	}
}

// Execute executes the request
func (a *CallpermissionsAPIService) DissociateOutcallCallpermissionExecute(r ApiDissociateOutcallCallpermissionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpermissionsAPIService.DissociateOutcallCallpermission")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls/{outcall_id}/callpermissions/{callpermission_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outcall_id"+"}", url.PathEscape(parameterValueToString(r.outcallId, "outcallId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"callpermission_id"+"}", url.PathEscape(parameterValueToString(r.callpermissionId, "callpermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDissociateUserCallpermissionRequest struct {
	ctx              context.Context
	ApiService       CallpermissionsAPI
	userId           string
	callpermissionId int32
	accentTenant     *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiDissociateUserCallpermissionRequest) AccentTenant(accentTenant string) ApiDissociateUserCallpermissionRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiDissociateUserCallpermissionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateUserCallpermissionExecute(r)
}

/*
DissociateUserCallpermission Dissociate user and call permission

**Required ACL:** `confd.users.{user_id}.callpermissions.{call_permission_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId the user's ID or UUID
	@param callpermissionId Call Permission's ID
	@return ApiDissociateUserCallpermissionRequest
*/
func (a *CallpermissionsAPIService) DissociateUserCallpermission(ctx context.Context, userId string, callpermissionId int32) ApiDissociateUserCallpermissionRequest {
	return ApiDissociateUserCallpermissionRequest{
		ApiService:       a,
		ctx:              ctx,
		userId:           userId,
		callpermissionId: callpermissionId,
	}
}

// Execute executes the request
func (a *CallpermissionsAPIService) DissociateUserCallpermissionExecute(r ApiDissociateUserCallpermissionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpermissionsAPIService.DissociateUserCallpermission")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/callpermissions/{callpermission_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"callpermission_id"+"}", url.PathEscape(parameterValueToString(r.callpermissionId, "callpermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCallpermissionRequest struct {
	ctx              context.Context
	ApiService       CallpermissionsAPI
	callpermissionId int32
	accentTenant     *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiGetCallpermissionRequest) AccentTenant(accentTenant string) ApiGetCallpermissionRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiGetCallpermissionRequest) Execute() (*CallPermission, *http.Response, error) {
	return r.ApiService.GetCallpermissionExecute(r)
}

/*
GetCallpermission Get call permission

**Required ACL:** `confd.callpermissions.{callpermission_id}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callpermissionId Call Permission's ID
	@return ApiGetCallpermissionRequest
*/
func (a *CallpermissionsAPIService) GetCallpermission(ctx context.Context, callpermissionId int32) ApiGetCallpermissionRequest {
	return ApiGetCallpermissionRequest{
		ApiService:       a,
		ctx:              ctx,
		callpermissionId: callpermissionId,
	}
}

// Execute executes the request
//
//	@return CallPermission
func (a *CallpermissionsAPIService) GetCallpermissionExecute(r ApiGetCallpermissionRequest) (*CallPermission, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CallPermission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpermissionsAPIService.GetCallpermission")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callpermissions/{callpermission_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"callpermission_id"+"}", url.PathEscape(parameterValueToString(r.callpermissionId, "callpermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCallpermissionsRequest struct {
	ctx          context.Context
	ApiService   CallpermissionsAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiListCallpermissionsRequest) AccentTenant(accentTenant string) ApiListCallpermissionsRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r ApiListCallpermissionsRequest) Recurse(recurse bool) ApiListCallpermissionsRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r ApiListCallpermissionsRequest) Order(order string) ApiListCallpermissionsRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r ApiListCallpermissionsRequest) Direction(direction string) ApiListCallpermissionsRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r ApiListCallpermissionsRequest) Limit(limit int32) ApiListCallpermissionsRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r ApiListCallpermissionsRequest) Offset(offset int32) ApiListCallpermissionsRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r ApiListCallpermissionsRequest) Search(search string) ApiListCallpermissionsRequest {
	r.search = &search
	return r
}

func (r ApiListCallpermissionsRequest) Execute() (*CallPermissionItems, *http.Response, error) {
	return r.ApiService.ListCallpermissionsExecute(r)
}

/*
ListCallpermissions List call permissions

**Required ACL:** `confd.callpermissions.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListCallpermissionsRequest
*/
func (a *CallpermissionsAPIService) ListCallpermissions(ctx context.Context) ApiListCallpermissionsRequest {
	return ApiListCallpermissionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CallPermissionItems
func (a *CallpermissionsAPIService) ListCallpermissionsExecute(r ApiListCallpermissionsRequest) (*CallPermissionItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CallPermissionItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpermissionsAPIService.ListCallpermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callpermissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCallpermissionRequest struct {
	ctx              context.Context
	ApiService       CallpermissionsAPI
	body             *CallPermission
	callpermissionId int32
	accentTenant     *string
}

func (r ApiUpdateCallpermissionRequest) Body(body CallPermission) ApiUpdateCallpermissionRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiUpdateCallpermissionRequest) AccentTenant(accentTenant string) ApiUpdateCallpermissionRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiUpdateCallpermissionRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCallpermissionExecute(r)
}

/*
UpdateCallpermission Update call permission

**Required ACL:** `confd.callpermissions.{callpermission_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callpermissionId Call Permission's ID
	@return ApiUpdateCallpermissionRequest
*/
func (a *CallpermissionsAPIService) UpdateCallpermission(ctx context.Context, callpermissionId int32) ApiUpdateCallpermissionRequest {
	return ApiUpdateCallpermissionRequest{
		ApiService:       a,
		ctx:              ctx,
		callpermissionId: callpermissionId,
	}
}

// Execute executes the request
func (a *CallpermissionsAPIService) UpdateCallpermissionExecute(r ApiUpdateCallpermissionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpermissionsAPIService.UpdateCallpermission")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callpermissions/{callpermission_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"callpermission_id"+"}", url.PathEscape(parameterValueToString(r.callpermissionId, "callpermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
