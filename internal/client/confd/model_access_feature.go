/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AccessFeature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessFeature{}

// AccessFeature struct for AccessFeature
type AccessFeature struct {
	Enabled *bool `json:"enabled,omitempty"`
	// The feature to limit the access to
	Feature string `json:"feature"`
	// The host or subnet string (e.g. 10.0.0.0/24)
	Host string `json:"host"`
	// The access_feature ID
	Id *int32 `json:"id,omitempty"`
}

type _AccessFeature AccessFeature

// NewAccessFeature instantiates a new AccessFeature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessFeature(feature string, host string) *AccessFeature {
	this := AccessFeature{}
	this.Feature = feature
	this.Host = host
	return &this
}

// NewAccessFeatureWithDefaults instantiates a new AccessFeature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessFeatureWithDefaults() *AccessFeature {
	this := AccessFeature{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AccessFeature) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessFeature) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AccessFeature) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AccessFeature) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFeature returns the Feature field value
func (o *AccessFeature) GetFeature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value
// and a boolean to check if the value has been set.
func (o *AccessFeature) GetFeatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Feature, true
}

// SetFeature sets field value
func (o *AccessFeature) SetFeature(v string) {
	o.Feature = v
}

// GetHost returns the Host field value
func (o *AccessFeature) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *AccessFeature) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *AccessFeature) SetHost(v string) {
	o.Host = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccessFeature) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessFeature) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccessFeature) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AccessFeature) SetId(v int32) {
	o.Id = &v
}

func (o AccessFeature) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessFeature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	toSerialize["feature"] = o.Feature
	toSerialize["host"] = o.Host
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

func (o *AccessFeature) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"feature",
		"host",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessFeature := _AccessFeature{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccessFeature)

	if err != nil {
		return err
	}

	*o = AccessFeature(varAccessFeature)

	return err
}

type NullableAccessFeature struct {
	value *AccessFeature
	isSet bool
}

func (v NullableAccessFeature) Get() *AccessFeature {
	return v.value
}

func (v *NullableAccessFeature) Set(val *AccessFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessFeature(val *AccessFeature) *NullableAccessFeature {
	return &NullableAccessFeature{value: val, isSet: true}
}

func (v NullableAccessFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
