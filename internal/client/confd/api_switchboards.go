/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type SwitchboardsAPI interface {

	/*
		GetSwitchboardFallback List all fallbacks for switchboard

		**Required ACL:** `confd.switchboards.{switchboard_uuid}.fallbacks.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param switchboardUuid
		@return SwitchboardsAPIGetSwitchboardFallbackRequest
	*/
	GetSwitchboardFallback(ctx context.Context, switchboardUuid string) SwitchboardsAPIGetSwitchboardFallbackRequest

	// GetSwitchboardFallbackExecute executes the request
	//  @return SwitchboardFallbacks
	GetSwitchboardFallbackExecute(r SwitchboardsAPIGetSwitchboardFallbackRequest) (*SwitchboardFallbacks, *http.Response, error)

	/*
		SwitchboardsGet List switchboards

		**Required ACL:** `confd.switchboards.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SwitchboardsAPISwitchboardsGetRequest
	*/
	SwitchboardsGet(ctx context.Context) SwitchboardsAPISwitchboardsGetRequest

	// SwitchboardsGetExecute executes the request
	//  @return SwitchboardsGet200Response
	SwitchboardsGetExecute(r SwitchboardsAPISwitchboardsGetRequest) (*SwitchboardsGet200Response, *http.Response, error)

	/*
		SwitchboardsPost Create a switchboard

		**Required ACL:** `confd.switchboard.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SwitchboardsAPISwitchboardsPostRequest
	*/
	SwitchboardsPost(ctx context.Context) SwitchboardsAPISwitchboardsPostRequest

	// SwitchboardsPostExecute executes the request
	//  @return Switchboard
	SwitchboardsPostExecute(r SwitchboardsAPISwitchboardsPostRequest) (*Switchboard, *http.Response, error)

	/*
		SwitchboardsSwitchboardUuidDelete Delete a switchboard

		**Required ACL:** `confd.switchboard.{switchboard_uuid}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param switchboardUuid
		@return SwitchboardsAPISwitchboardsSwitchboardUuidDeleteRequest
	*/
	SwitchboardsSwitchboardUuidDelete(ctx context.Context, switchboardUuid string) SwitchboardsAPISwitchboardsSwitchboardUuidDeleteRequest

	// SwitchboardsSwitchboardUuidDeleteExecute executes the request
	SwitchboardsSwitchboardUuidDeleteExecute(r SwitchboardsAPISwitchboardsSwitchboardUuidDeleteRequest) (*http.Response, error)

	/*
		SwitchboardsSwitchboardUuidGet Get a switchboard

		**Required ACL:** `confd.switchboards.{switchboard_uuid}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param switchboardUuid
		@return SwitchboardsAPISwitchboardsSwitchboardUuidGetRequest
	*/
	SwitchboardsSwitchboardUuidGet(ctx context.Context, switchboardUuid string) SwitchboardsAPISwitchboardsSwitchboardUuidGetRequest

	// SwitchboardsSwitchboardUuidGetExecute executes the request
	//  @return Switchboard
	SwitchboardsSwitchboardUuidGetExecute(r SwitchboardsAPISwitchboardsSwitchboardUuidGetRequest) (*Switchboard, *http.Response, error)

	/*
		SwitchboardsSwitchboardUuidPut Update a switchboard

		**Required ACL:** `confd.switchboards.{switchboard_uuid}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param switchboardUuid
		@return SwitchboardsAPISwitchboardsSwitchboardUuidPutRequest
	*/
	SwitchboardsSwitchboardUuidPut(ctx context.Context, switchboardUuid string) SwitchboardsAPISwitchboardsSwitchboardUuidPutRequest

	// SwitchboardsSwitchboardUuidPutExecute executes the request
	SwitchboardsSwitchboardUuidPutExecute(r SwitchboardsAPISwitchboardsSwitchboardUuidPutRequest) (*http.Response, error)

	/*
		UpdateSwitchboardFallback Update switchboard's fallbacks

		**Required ACL:** `confd.switchboards.{switchboard_uuid}.fallbacks.update`

	**WARNING** This endpoint delete all fields that are not defined.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param switchboardUuid
		@return SwitchboardsAPIUpdateSwitchboardFallbackRequest
	*/
	UpdateSwitchboardFallback(ctx context.Context, switchboardUuid string) SwitchboardsAPIUpdateSwitchboardFallbackRequest

	// UpdateSwitchboardFallbackExecute executes the request
	UpdateSwitchboardFallbackExecute(r SwitchboardsAPIUpdateSwitchboardFallbackRequest) (*http.Response, error)

	/*
		UpdateSwitchboardMemberUsers Update switchboard and members

		**Required ACL:** `confd.switchboards.{switchboard_uuid}.members.users.update`

	**WARNING**
	This endpoint removes all members which are not defined.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param switchboardUuid
		@return SwitchboardsAPIUpdateSwitchboardMemberUsersRequest
	*/
	UpdateSwitchboardMemberUsers(ctx context.Context, switchboardUuid string) SwitchboardsAPIUpdateSwitchboardMemberUsersRequest

	// UpdateSwitchboardMemberUsersExecute executes the request
	UpdateSwitchboardMemberUsersExecute(r SwitchboardsAPIUpdateSwitchboardMemberUsersRequest) (*http.Response, error)
}

// SwitchboardsAPIService SwitchboardsAPI service
type SwitchboardsAPIService service

type SwitchboardsAPIGetSwitchboardFallbackRequest struct {
	ctx             context.Context
	ApiService      SwitchboardsAPI
	switchboardUuid string
	accentTenant    *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r SwitchboardsAPIGetSwitchboardFallbackRequest) AccentTenant(accentTenant string) SwitchboardsAPIGetSwitchboardFallbackRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r SwitchboardsAPIGetSwitchboardFallbackRequest) Execute() (*SwitchboardFallbacks, *http.Response, error) {
	return r.ApiService.GetSwitchboardFallbackExecute(r)
}

/*
GetSwitchboardFallback List all fallbacks for switchboard

**Required ACL:** `confd.switchboards.{switchboard_uuid}.fallbacks.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param switchboardUuid
	@return SwitchboardsAPIGetSwitchboardFallbackRequest
*/
func (a *SwitchboardsAPIService) GetSwitchboardFallback(ctx context.Context, switchboardUuid string) SwitchboardsAPIGetSwitchboardFallbackRequest {
	return SwitchboardsAPIGetSwitchboardFallbackRequest{
		ApiService:      a,
		ctx:             ctx,
		switchboardUuid: switchboardUuid,
	}
}

// Execute executes the request
//
//	@return SwitchboardFallbacks
func (a *SwitchboardsAPIService) GetSwitchboardFallbackExecute(r SwitchboardsAPIGetSwitchboardFallbackRequest) (*SwitchboardFallbacks, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SwitchboardFallbacks
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchboardsAPIService.GetSwitchboardFallback")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchboards/{switchboard_uuid}/fallbacks"
	localVarPath = strings.Replace(localVarPath, "{"+"switchboard_uuid"+"}", url.PathEscape(parameterValueToString(r.switchboardUuid, "switchboardUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SwitchboardsAPISwitchboardsGetRequest struct {
	ctx          context.Context
	ApiService   SwitchboardsAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r SwitchboardsAPISwitchboardsGetRequest) AccentTenant(accentTenant string) SwitchboardsAPISwitchboardsGetRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r SwitchboardsAPISwitchboardsGetRequest) Recurse(recurse bool) SwitchboardsAPISwitchboardsGetRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r SwitchboardsAPISwitchboardsGetRequest) Order(order string) SwitchboardsAPISwitchboardsGetRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r SwitchboardsAPISwitchboardsGetRequest) Direction(direction string) SwitchboardsAPISwitchboardsGetRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r SwitchboardsAPISwitchboardsGetRequest) Limit(limit int32) SwitchboardsAPISwitchboardsGetRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r SwitchboardsAPISwitchboardsGetRequest) Offset(offset int32) SwitchboardsAPISwitchboardsGetRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r SwitchboardsAPISwitchboardsGetRequest) Search(search string) SwitchboardsAPISwitchboardsGetRequest {
	r.search = &search
	return r
}

func (r SwitchboardsAPISwitchboardsGetRequest) Execute() (*SwitchboardsGet200Response, *http.Response, error) {
	return r.ApiService.SwitchboardsGetExecute(r)
}

/*
SwitchboardsGet List switchboards

**Required ACL:** `confd.switchboards.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SwitchboardsAPISwitchboardsGetRequest
*/
func (a *SwitchboardsAPIService) SwitchboardsGet(ctx context.Context) SwitchboardsAPISwitchboardsGetRequest {
	return SwitchboardsAPISwitchboardsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SwitchboardsGet200Response
func (a *SwitchboardsAPIService) SwitchboardsGetExecute(r SwitchboardsAPISwitchboardsGetRequest) (*SwitchboardsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SwitchboardsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchboardsAPIService.SwitchboardsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchboards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SwitchboardsAPISwitchboardsPostRequest struct {
	ctx          context.Context
	ApiService   SwitchboardsAPI
	body         *Switchboard
	accentTenant *string
}

// Switchboard parameters
func (r SwitchboardsAPISwitchboardsPostRequest) Body(body Switchboard) SwitchboardsAPISwitchboardsPostRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r SwitchboardsAPISwitchboardsPostRequest) AccentTenant(accentTenant string) SwitchboardsAPISwitchboardsPostRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r SwitchboardsAPISwitchboardsPostRequest) Execute() (*Switchboard, *http.Response, error) {
	return r.ApiService.SwitchboardsPostExecute(r)
}

/*
SwitchboardsPost Create a switchboard

**Required ACL:** `confd.switchboard.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SwitchboardsAPISwitchboardsPostRequest
*/
func (a *SwitchboardsAPIService) SwitchboardsPost(ctx context.Context) SwitchboardsAPISwitchboardsPostRequest {
	return SwitchboardsAPISwitchboardsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Switchboard
func (a *SwitchboardsAPIService) SwitchboardsPostExecute(r SwitchboardsAPISwitchboardsPostRequest) (*Switchboard, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Switchboard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchboardsAPIService.SwitchboardsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchboards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SwitchboardsAPISwitchboardsSwitchboardUuidDeleteRequest struct {
	ctx             context.Context
	ApiService      SwitchboardsAPI
	switchboardUuid string
	accentTenant    *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r SwitchboardsAPISwitchboardsSwitchboardUuidDeleteRequest) AccentTenant(accentTenant string) SwitchboardsAPISwitchboardsSwitchboardUuidDeleteRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r SwitchboardsAPISwitchboardsSwitchboardUuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SwitchboardsSwitchboardUuidDeleteExecute(r)
}

/*
SwitchboardsSwitchboardUuidDelete Delete a switchboard

**Required ACL:** `confd.switchboard.{switchboard_uuid}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param switchboardUuid
	@return SwitchboardsAPISwitchboardsSwitchboardUuidDeleteRequest
*/
func (a *SwitchboardsAPIService) SwitchboardsSwitchboardUuidDelete(ctx context.Context, switchboardUuid string) SwitchboardsAPISwitchboardsSwitchboardUuidDeleteRequest {
	return SwitchboardsAPISwitchboardsSwitchboardUuidDeleteRequest{
		ApiService:      a,
		ctx:             ctx,
		switchboardUuid: switchboardUuid,
	}
}

// Execute executes the request
func (a *SwitchboardsAPIService) SwitchboardsSwitchboardUuidDeleteExecute(r SwitchboardsAPISwitchboardsSwitchboardUuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchboardsAPIService.SwitchboardsSwitchboardUuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchboards/{switchboard_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"switchboard_uuid"+"}", url.PathEscape(parameterValueToString(r.switchboardUuid, "switchboardUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SwitchboardsAPISwitchboardsSwitchboardUuidGetRequest struct {
	ctx             context.Context
	ApiService      SwitchboardsAPI
	switchboardUuid string
	accentTenant    *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r SwitchboardsAPISwitchboardsSwitchboardUuidGetRequest) AccentTenant(accentTenant string) SwitchboardsAPISwitchboardsSwitchboardUuidGetRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r SwitchboardsAPISwitchboardsSwitchboardUuidGetRequest) Execute() (*Switchboard, *http.Response, error) {
	return r.ApiService.SwitchboardsSwitchboardUuidGetExecute(r)
}

/*
SwitchboardsSwitchboardUuidGet Get a switchboard

**Required ACL:** `confd.switchboards.{switchboard_uuid}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param switchboardUuid
	@return SwitchboardsAPISwitchboardsSwitchboardUuidGetRequest
*/
func (a *SwitchboardsAPIService) SwitchboardsSwitchboardUuidGet(ctx context.Context, switchboardUuid string) SwitchboardsAPISwitchboardsSwitchboardUuidGetRequest {
	return SwitchboardsAPISwitchboardsSwitchboardUuidGetRequest{
		ApiService:      a,
		ctx:             ctx,
		switchboardUuid: switchboardUuid,
	}
}

// Execute executes the request
//
//	@return Switchboard
func (a *SwitchboardsAPIService) SwitchboardsSwitchboardUuidGetExecute(r SwitchboardsAPISwitchboardsSwitchboardUuidGetRequest) (*Switchboard, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Switchboard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchboardsAPIService.SwitchboardsSwitchboardUuidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchboards/{switchboard_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"switchboard_uuid"+"}", url.PathEscape(parameterValueToString(r.switchboardUuid, "switchboardUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SwitchboardsAPISwitchboardsSwitchboardUuidPutRequest struct {
	ctx             context.Context
	ApiService      SwitchboardsAPI
	body            *Switchboard
	switchboardUuid string
	accentTenant    *string
}

func (r SwitchboardsAPISwitchboardsSwitchboardUuidPutRequest) Body(body Switchboard) SwitchboardsAPISwitchboardsSwitchboardUuidPutRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r SwitchboardsAPISwitchboardsSwitchboardUuidPutRequest) AccentTenant(accentTenant string) SwitchboardsAPISwitchboardsSwitchboardUuidPutRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r SwitchboardsAPISwitchboardsSwitchboardUuidPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.SwitchboardsSwitchboardUuidPutExecute(r)
}

/*
SwitchboardsSwitchboardUuidPut Update a switchboard

**Required ACL:** `confd.switchboards.{switchboard_uuid}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param switchboardUuid
	@return SwitchboardsAPISwitchboardsSwitchboardUuidPutRequest
*/
func (a *SwitchboardsAPIService) SwitchboardsSwitchboardUuidPut(ctx context.Context, switchboardUuid string) SwitchboardsAPISwitchboardsSwitchboardUuidPutRequest {
	return SwitchboardsAPISwitchboardsSwitchboardUuidPutRequest{
		ApiService:      a,
		ctx:             ctx,
		switchboardUuid: switchboardUuid,
	}
}

// Execute executes the request
func (a *SwitchboardsAPIService) SwitchboardsSwitchboardUuidPutExecute(r SwitchboardsAPISwitchboardsSwitchboardUuidPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchboardsAPIService.SwitchboardsSwitchboardUuidPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchboards/{switchboard_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"switchboard_uuid"+"}", url.PathEscape(parameterValueToString(r.switchboardUuid, "switchboardUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SwitchboardsAPIUpdateSwitchboardFallbackRequest struct {
	ctx             context.Context
	ApiService      SwitchboardsAPI
	switchboardUuid string
	body            *SwitchboardFallbacks
	accentTenant    *string
}

// Fallbacks for switchboard
func (r SwitchboardsAPIUpdateSwitchboardFallbackRequest) Body(body SwitchboardFallbacks) SwitchboardsAPIUpdateSwitchboardFallbackRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r SwitchboardsAPIUpdateSwitchboardFallbackRequest) AccentTenant(accentTenant string) SwitchboardsAPIUpdateSwitchboardFallbackRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r SwitchboardsAPIUpdateSwitchboardFallbackRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateSwitchboardFallbackExecute(r)
}

/*
UpdateSwitchboardFallback Update switchboard's fallbacks

**Required ACL:** `confd.switchboards.{switchboard_uuid}.fallbacks.update`

**WARNING** This endpoint delete all fields that are not defined.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param switchboardUuid
	@return SwitchboardsAPIUpdateSwitchboardFallbackRequest
*/
func (a *SwitchboardsAPIService) UpdateSwitchboardFallback(ctx context.Context, switchboardUuid string) SwitchboardsAPIUpdateSwitchboardFallbackRequest {
	return SwitchboardsAPIUpdateSwitchboardFallbackRequest{
		ApiService:      a,
		ctx:             ctx,
		switchboardUuid: switchboardUuid,
	}
}

// Execute executes the request
func (a *SwitchboardsAPIService) UpdateSwitchboardFallbackExecute(r SwitchboardsAPIUpdateSwitchboardFallbackRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchboardsAPIService.UpdateSwitchboardFallback")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchboards/{switchboard_uuid}/fallbacks"
	localVarPath = strings.Replace(localVarPath, "{"+"switchboard_uuid"+"}", url.PathEscape(parameterValueToString(r.switchboardUuid, "switchboardUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SwitchboardsAPIUpdateSwitchboardMemberUsersRequest struct {
	ctx             context.Context
	ApiService      SwitchboardsAPI
	body            *UsersUuid
	switchboardUuid string
}

// Users to associate with the switchboard
func (r SwitchboardsAPIUpdateSwitchboardMemberUsersRequest) Body(body UsersUuid) SwitchboardsAPIUpdateSwitchboardMemberUsersRequest {
	r.body = &body
	return r
}

func (r SwitchboardsAPIUpdateSwitchboardMemberUsersRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateSwitchboardMemberUsersExecute(r)
}

/*
UpdateSwitchboardMemberUsers Update switchboard and members

**Required ACL:** `confd.switchboards.{switchboard_uuid}.members.users.update`

**WARNING**
This endpoint removes all members which are not defined.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param switchboardUuid
	@return SwitchboardsAPIUpdateSwitchboardMemberUsersRequest
*/
func (a *SwitchboardsAPIService) UpdateSwitchboardMemberUsers(ctx context.Context, switchboardUuid string) SwitchboardsAPIUpdateSwitchboardMemberUsersRequest {
	return SwitchboardsAPIUpdateSwitchboardMemberUsersRequest{
		ApiService:      a,
		ctx:             ctx,
		switchboardUuid: switchboardUuid,
	}
}

// Execute executes the request
func (a *SwitchboardsAPIService) UpdateSwitchboardMemberUsersExecute(r SwitchboardsAPIUpdateSwitchboardMemberUsersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SwitchboardsAPIService.UpdateSwitchboardMemberUsers")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/switchboards/{switchboard_uuid}/members/users"
	localVarPath = strings.Replace(localVarPath, "{"+"switchboard_uuid"+"}", url.PathEscape(parameterValueToString(r.switchboardUuid, "switchboardUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
