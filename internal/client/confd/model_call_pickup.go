/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CallPickup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallPickup{}

// CallPickup struct for CallPickup
type CallPickup struct {
	Recipients *CallPickupTargetUsers      `json:"recipients,omitempty"`
	Surrogates *CallPickupInterceptorUsers `json:"surrogates,omitempty"`
	// Additional information about the call pickup
	Description *string `json:"description,omitempty"`
	// Disable or enable the call pickup
	Enabled *bool `json:"enabled,omitempty"`
	// The id of the call pickup
	Id *int32 `json:"id,omitempty"`
	// The name of the call pickup
	Name string `json:"name"`
	// The UUID of the tenant
	TenantUuid *string `json:"tenant_uuid,omitempty"`
}

type _CallPickup CallPickup

// NewCallPickup instantiates a new CallPickup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallPickup(name string) *CallPickup {
	this := CallPickup{}
	var enabled bool = true
	this.Enabled = &enabled
	this.Name = name
	return &this
}

// NewCallPickupWithDefaults instantiates a new CallPickup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallPickupWithDefaults() *CallPickup {
	this := CallPickup{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
func (o *CallPickup) GetRecipients() CallPickupTargetUsers {
	if o == nil || IsNil(o.Recipients) {
		var ret CallPickupTargetUsers
		return ret
	}
	return *o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallPickup) GetRecipientsOk() (*CallPickupTargetUsers, bool) {
	if o == nil || IsNil(o.Recipients) {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *CallPickup) HasRecipients() bool {
	if o != nil && !IsNil(o.Recipients) {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given CallPickupTargetUsers and assigns it to the Recipients field.
func (o *CallPickup) SetRecipients(v CallPickupTargetUsers) {
	o.Recipients = &v
}

// GetSurrogates returns the Surrogates field value if set, zero value otherwise.
func (o *CallPickup) GetSurrogates() CallPickupInterceptorUsers {
	if o == nil || IsNil(o.Surrogates) {
		var ret CallPickupInterceptorUsers
		return ret
	}
	return *o.Surrogates
}

// GetSurrogatesOk returns a tuple with the Surrogates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallPickup) GetSurrogatesOk() (*CallPickupInterceptorUsers, bool) {
	if o == nil || IsNil(o.Surrogates) {
		return nil, false
	}
	return o.Surrogates, true
}

// HasSurrogates returns a boolean if a field has been set.
func (o *CallPickup) HasSurrogates() bool {
	if o != nil && !IsNil(o.Surrogates) {
		return true
	}

	return false
}

// SetSurrogates gets a reference to the given CallPickupInterceptorUsers and assigns it to the Surrogates field.
func (o *CallPickup) SetSurrogates(v CallPickupInterceptorUsers) {
	o.Surrogates = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CallPickup) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallPickup) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CallPickup) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CallPickup) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CallPickup) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallPickup) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CallPickup) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CallPickup) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CallPickup) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallPickup) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CallPickup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CallPickup) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *CallPickup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CallPickup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CallPickup) SetName(v string) {
	o.Name = v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *CallPickup) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallPickup) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *CallPickup) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *CallPickup) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

func (o CallPickup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallPickup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Recipients) {
		toSerialize["recipients"] = o.Recipients
	}
	if !IsNil(o.Surrogates) {
		toSerialize["surrogates"] = o.Surrogates
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	return toSerialize, nil
}

func (o *CallPickup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCallPickup := _CallPickup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCallPickup)

	if err != nil {
		return err
	}

	*o = CallPickup(varCallPickup)

	return err
}

type NullableCallPickup struct {
	value *CallPickup
	isSet bool
}

func (v NullableCallPickup) Get() *CallPickup {
	return v.value
}

func (v *NullableCallPickup) Set(val *CallPickup) {
	v.value = val
	v.isSet = true
}

func (v NullableCallPickup) IsSet() bool {
	return v.isSet
}

func (v *NullableCallPickup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallPickup(val *CallPickup) *NullableCallPickup {
	return &NullableCallPickup{value: val, isSet: true}
}

func (v NullableCallPickup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallPickup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
