/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Registrar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Registrar{}

// Registrar struct for Registrar
type Registrar struct {
	// Backup registrar host
	BackupHost *string `json:"backup_host,omitempty"`
	// Backup registrar port
	BackupPort *int32 `json:"backup_port,omitempty"`
	// Define if the registrar can be deleted
	Deletable *bool `json:"deletable,omitempty"`
	// Registrar identifier
	Id *string `json:"id,omitempty"`
	// Registrar host
	MainHost string `json:"main_host"`
	// Registrar port
	MainPort *int32 `json:"main_port,omitempty"`
	// Display name of the registrar
	Name *string `json:"name,omitempty"`
	// Outbound proxy host
	OutboundProxyHost *string `json:"outbound_proxy_host,omitempty"`
	// Outbound proxy port
	OutboundProxyPort *int32 `json:"outbound_proxy_port,omitempty"`
	// Backup proxy host
	ProxyBackupHost *string `json:"proxy_backup_host,omitempty"`
	// Backup proxy port
	ProxyBackupPort *int32 `json:"proxy_backup_port,omitempty"`
	// Proxy host. Using IPv4 is recommended to have a better integration with some provisioning plugins. (ex: Yealink DND integration)
	ProxyMainHost string `json:"proxy_main_host"`
	// Proxy port
	ProxyMainPort *int32 `json:"proxy_main_port,omitempty"`
}

type _Registrar Registrar

// NewRegistrar instantiates a new Registrar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistrar(mainHost string, proxyMainHost string) *Registrar {
	this := Registrar{}
	this.MainHost = mainHost
	this.ProxyMainHost = proxyMainHost
	return &this
}

// NewRegistrarWithDefaults instantiates a new Registrar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistrarWithDefaults() *Registrar {
	this := Registrar{}
	return &this
}

// GetBackupHost returns the BackupHost field value if set, zero value otherwise.
func (o *Registrar) GetBackupHost() string {
	if o == nil || IsNil(o.BackupHost) {
		var ret string
		return ret
	}
	return *o.BackupHost
}

// GetBackupHostOk returns a tuple with the BackupHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registrar) GetBackupHostOk() (*string, bool) {
	if o == nil || IsNil(o.BackupHost) {
		return nil, false
	}
	return o.BackupHost, true
}

// HasBackupHost returns a boolean if a field has been set.
func (o *Registrar) HasBackupHost() bool {
	if o != nil && !IsNil(o.BackupHost) {
		return true
	}

	return false
}

// SetBackupHost gets a reference to the given string and assigns it to the BackupHost field.
func (o *Registrar) SetBackupHost(v string) {
	o.BackupHost = &v
}

// GetBackupPort returns the BackupPort field value if set, zero value otherwise.
func (o *Registrar) GetBackupPort() int32 {
	if o == nil || IsNil(o.BackupPort) {
		var ret int32
		return ret
	}
	return *o.BackupPort
}

// GetBackupPortOk returns a tuple with the BackupPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registrar) GetBackupPortOk() (*int32, bool) {
	if o == nil || IsNil(o.BackupPort) {
		return nil, false
	}
	return o.BackupPort, true
}

// HasBackupPort returns a boolean if a field has been set.
func (o *Registrar) HasBackupPort() bool {
	if o != nil && !IsNil(o.BackupPort) {
		return true
	}

	return false
}

// SetBackupPort gets a reference to the given int32 and assigns it to the BackupPort field.
func (o *Registrar) SetBackupPort(v int32) {
	o.BackupPort = &v
}

// GetDeletable returns the Deletable field value if set, zero value otherwise.
func (o *Registrar) GetDeletable() bool {
	if o == nil || IsNil(o.Deletable) {
		var ret bool
		return ret
	}
	return *o.Deletable
}

// GetDeletableOk returns a tuple with the Deletable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registrar) GetDeletableOk() (*bool, bool) {
	if o == nil || IsNil(o.Deletable) {
		return nil, false
	}
	return o.Deletable, true
}

// HasDeletable returns a boolean if a field has been set.
func (o *Registrar) HasDeletable() bool {
	if o != nil && !IsNil(o.Deletable) {
		return true
	}

	return false
}

// SetDeletable gets a reference to the given bool and assigns it to the Deletable field.
func (o *Registrar) SetDeletable(v bool) {
	o.Deletable = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Registrar) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registrar) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Registrar) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Registrar) SetId(v string) {
	o.Id = &v
}

// GetMainHost returns the MainHost field value
func (o *Registrar) GetMainHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MainHost
}

// GetMainHostOk returns a tuple with the MainHost field value
// and a boolean to check if the value has been set.
func (o *Registrar) GetMainHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MainHost, true
}

// SetMainHost sets field value
func (o *Registrar) SetMainHost(v string) {
	o.MainHost = v
}

// GetMainPort returns the MainPort field value if set, zero value otherwise.
func (o *Registrar) GetMainPort() int32 {
	if o == nil || IsNil(o.MainPort) {
		var ret int32
		return ret
	}
	return *o.MainPort
}

// GetMainPortOk returns a tuple with the MainPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registrar) GetMainPortOk() (*int32, bool) {
	if o == nil || IsNil(o.MainPort) {
		return nil, false
	}
	return o.MainPort, true
}

// HasMainPort returns a boolean if a field has been set.
func (o *Registrar) HasMainPort() bool {
	if o != nil && !IsNil(o.MainPort) {
		return true
	}

	return false
}

// SetMainPort gets a reference to the given int32 and assigns it to the MainPort field.
func (o *Registrar) SetMainPort(v int32) {
	o.MainPort = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Registrar) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registrar) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Registrar) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Registrar) SetName(v string) {
	o.Name = &v
}

// GetOutboundProxyHost returns the OutboundProxyHost field value if set, zero value otherwise.
func (o *Registrar) GetOutboundProxyHost() string {
	if o == nil || IsNil(o.OutboundProxyHost) {
		var ret string
		return ret
	}
	return *o.OutboundProxyHost
}

// GetOutboundProxyHostOk returns a tuple with the OutboundProxyHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registrar) GetOutboundProxyHostOk() (*string, bool) {
	if o == nil || IsNil(o.OutboundProxyHost) {
		return nil, false
	}
	return o.OutboundProxyHost, true
}

// HasOutboundProxyHost returns a boolean if a field has been set.
func (o *Registrar) HasOutboundProxyHost() bool {
	if o != nil && !IsNil(o.OutboundProxyHost) {
		return true
	}

	return false
}

// SetOutboundProxyHost gets a reference to the given string and assigns it to the OutboundProxyHost field.
func (o *Registrar) SetOutboundProxyHost(v string) {
	o.OutboundProxyHost = &v
}

// GetOutboundProxyPort returns the OutboundProxyPort field value if set, zero value otherwise.
func (o *Registrar) GetOutboundProxyPort() int32 {
	if o == nil || IsNil(o.OutboundProxyPort) {
		var ret int32
		return ret
	}
	return *o.OutboundProxyPort
}

// GetOutboundProxyPortOk returns a tuple with the OutboundProxyPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registrar) GetOutboundProxyPortOk() (*int32, bool) {
	if o == nil || IsNil(o.OutboundProxyPort) {
		return nil, false
	}
	return o.OutboundProxyPort, true
}

// HasOutboundProxyPort returns a boolean if a field has been set.
func (o *Registrar) HasOutboundProxyPort() bool {
	if o != nil && !IsNil(o.OutboundProxyPort) {
		return true
	}

	return false
}

// SetOutboundProxyPort gets a reference to the given int32 and assigns it to the OutboundProxyPort field.
func (o *Registrar) SetOutboundProxyPort(v int32) {
	o.OutboundProxyPort = &v
}

// GetProxyBackupHost returns the ProxyBackupHost field value if set, zero value otherwise.
func (o *Registrar) GetProxyBackupHost() string {
	if o == nil || IsNil(o.ProxyBackupHost) {
		var ret string
		return ret
	}
	return *o.ProxyBackupHost
}

// GetProxyBackupHostOk returns a tuple with the ProxyBackupHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registrar) GetProxyBackupHostOk() (*string, bool) {
	if o == nil || IsNil(o.ProxyBackupHost) {
		return nil, false
	}
	return o.ProxyBackupHost, true
}

// HasProxyBackupHost returns a boolean if a field has been set.
func (o *Registrar) HasProxyBackupHost() bool {
	if o != nil && !IsNil(o.ProxyBackupHost) {
		return true
	}

	return false
}

// SetProxyBackupHost gets a reference to the given string and assigns it to the ProxyBackupHost field.
func (o *Registrar) SetProxyBackupHost(v string) {
	o.ProxyBackupHost = &v
}

// GetProxyBackupPort returns the ProxyBackupPort field value if set, zero value otherwise.
func (o *Registrar) GetProxyBackupPort() int32 {
	if o == nil || IsNil(o.ProxyBackupPort) {
		var ret int32
		return ret
	}
	return *o.ProxyBackupPort
}

// GetProxyBackupPortOk returns a tuple with the ProxyBackupPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registrar) GetProxyBackupPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ProxyBackupPort) {
		return nil, false
	}
	return o.ProxyBackupPort, true
}

// HasProxyBackupPort returns a boolean if a field has been set.
func (o *Registrar) HasProxyBackupPort() bool {
	if o != nil && !IsNil(o.ProxyBackupPort) {
		return true
	}

	return false
}

// SetProxyBackupPort gets a reference to the given int32 and assigns it to the ProxyBackupPort field.
func (o *Registrar) SetProxyBackupPort(v int32) {
	o.ProxyBackupPort = &v
}

// GetProxyMainHost returns the ProxyMainHost field value
func (o *Registrar) GetProxyMainHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProxyMainHost
}

// GetProxyMainHostOk returns a tuple with the ProxyMainHost field value
// and a boolean to check if the value has been set.
func (o *Registrar) GetProxyMainHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProxyMainHost, true
}

// SetProxyMainHost sets field value
func (o *Registrar) SetProxyMainHost(v string) {
	o.ProxyMainHost = v
}

// GetProxyMainPort returns the ProxyMainPort field value if set, zero value otherwise.
func (o *Registrar) GetProxyMainPort() int32 {
	if o == nil || IsNil(o.ProxyMainPort) {
		var ret int32
		return ret
	}
	return *o.ProxyMainPort
}

// GetProxyMainPortOk returns a tuple with the ProxyMainPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registrar) GetProxyMainPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ProxyMainPort) {
		return nil, false
	}
	return o.ProxyMainPort, true
}

// HasProxyMainPort returns a boolean if a field has been set.
func (o *Registrar) HasProxyMainPort() bool {
	if o != nil && !IsNil(o.ProxyMainPort) {
		return true
	}

	return false
}

// SetProxyMainPort gets a reference to the given int32 and assigns it to the ProxyMainPort field.
func (o *Registrar) SetProxyMainPort(v int32) {
	o.ProxyMainPort = &v
}

func (o Registrar) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Registrar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackupHost) {
		toSerialize["backup_host"] = o.BackupHost
	}
	if !IsNil(o.BackupPort) {
		toSerialize["backup_port"] = o.BackupPort
	}
	if !IsNil(o.Deletable) {
		toSerialize["deletable"] = o.Deletable
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["main_host"] = o.MainHost
	if !IsNil(o.MainPort) {
		toSerialize["main_port"] = o.MainPort
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OutboundProxyHost) {
		toSerialize["outbound_proxy_host"] = o.OutboundProxyHost
	}
	if !IsNil(o.OutboundProxyPort) {
		toSerialize["outbound_proxy_port"] = o.OutboundProxyPort
	}
	if !IsNil(o.ProxyBackupHost) {
		toSerialize["proxy_backup_host"] = o.ProxyBackupHost
	}
	if !IsNil(o.ProxyBackupPort) {
		toSerialize["proxy_backup_port"] = o.ProxyBackupPort
	}
	toSerialize["proxy_main_host"] = o.ProxyMainHost
	if !IsNil(o.ProxyMainPort) {
		toSerialize["proxy_main_port"] = o.ProxyMainPort
	}
	return toSerialize, nil
}

func (o *Registrar) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"main_host",
		"proxy_main_host",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegistrar := _Registrar{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegistrar)

	if err != nil {
		return err
	}

	*o = Registrar(varRegistrar)

	return err
}

type NullableRegistrar struct {
	value *Registrar
	isSet bool
}

func (v NullableRegistrar) Get() *Registrar {
	return v.value
}

func (v *NullableRegistrar) Set(val *Registrar) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistrar) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistrar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistrar(val *Registrar) *NullableRegistrar {
	return &NullableRegistrar{value: val, isSet: true}
}

func (v NullableRegistrar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistrar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
