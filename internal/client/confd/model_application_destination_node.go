/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the ApplicationDestinationNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationDestinationNode{}

// ApplicationDestinationNode struct for ApplicationDestinationNode
type ApplicationDestinationNode struct {
	// Automatically answer the call when the call enters the destination node
	Answer *bool `json:"answer,omitempty"`
	// Name of the MOH category to use for music on hold
	MusicOnHold *string `json:"music_on_hold,omitempty"`
	// type of the default node
	Type *string `json:"type,omitempty"`
}

// NewApplicationDestinationNode instantiates a new ApplicationDestinationNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationDestinationNode() *ApplicationDestinationNode {
	this := ApplicationDestinationNode{}
	return &this
}

// NewApplicationDestinationNodeWithDefaults instantiates a new ApplicationDestinationNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationDestinationNodeWithDefaults() *ApplicationDestinationNode {
	this := ApplicationDestinationNode{}
	return &this
}

// GetAnswer returns the Answer field value if set, zero value otherwise.
func (o *ApplicationDestinationNode) GetAnswer() bool {
	if o == nil || IsNil(o.Answer) {
		var ret bool
		return ret
	}
	return *o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationDestinationNode) GetAnswerOk() (*bool, bool) {
	if o == nil || IsNil(o.Answer) {
		return nil, false
	}
	return o.Answer, true
}

// HasAnswer returns a boolean if a field has been set.
func (o *ApplicationDestinationNode) HasAnswer() bool {
	if o != nil && !IsNil(o.Answer) {
		return true
	}

	return false
}

// SetAnswer gets a reference to the given bool and assigns it to the Answer field.
func (o *ApplicationDestinationNode) SetAnswer(v bool) {
	o.Answer = &v
}

// GetMusicOnHold returns the MusicOnHold field value if set, zero value otherwise.
func (o *ApplicationDestinationNode) GetMusicOnHold() string {
	if o == nil || IsNil(o.MusicOnHold) {
		var ret string
		return ret
	}
	return *o.MusicOnHold
}

// GetMusicOnHoldOk returns a tuple with the MusicOnHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationDestinationNode) GetMusicOnHoldOk() (*string, bool) {
	if o == nil || IsNil(o.MusicOnHold) {
		return nil, false
	}
	return o.MusicOnHold, true
}

// HasMusicOnHold returns a boolean if a field has been set.
func (o *ApplicationDestinationNode) HasMusicOnHold() bool {
	if o != nil && !IsNil(o.MusicOnHold) {
		return true
	}

	return false
}

// SetMusicOnHold gets a reference to the given string and assigns it to the MusicOnHold field.
func (o *ApplicationDestinationNode) SetMusicOnHold(v string) {
	o.MusicOnHold = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApplicationDestinationNode) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationDestinationNode) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApplicationDestinationNode) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApplicationDestinationNode) SetType(v string) {
	o.Type = &v
}

func (o ApplicationDestinationNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationDestinationNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Answer) {
		toSerialize["answer"] = o.Answer
	}
	if !IsNil(o.MusicOnHold) {
		toSerialize["music_on_hold"] = o.MusicOnHold
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableApplicationDestinationNode struct {
	value *ApplicationDestinationNode
	isSet bool
}

func (v NullableApplicationDestinationNode) Get() *ApplicationDestinationNode {
	return v.value
}

func (v *NullableApplicationDestinationNode) Set(val *ApplicationDestinationNode) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationDestinationNode) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationDestinationNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationDestinationNode(val *ApplicationDestinationNode) *NullableApplicationDestinationNode {
	return &NullableApplicationDestinationNode{value: val, isSet: true}
}

func (v NullableApplicationDestinationNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationDestinationNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
