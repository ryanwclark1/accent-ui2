/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DestinationQueue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DestinationQueue{}

// DestinationQueue struct for DestinationQueue
type DestinationQueue struct {
	// The id of the queue
	QueueId  int32    `json:"queue_id"`
	RingTime *float32 `json:"ring_time,omitempty"`
	// The id of the skill rule
	SkillRuleId *int32 `json:"skill_rule_id,omitempty"`
	// key-value where key represents the variable of the skill rule and value represents a value
	SkillRuleVariables map[string]interface{} `json:"skill_rule_variables,omitempty"`
	// MUST be 'queue'
	Type string `json:"type"`
}

type _DestinationQueue DestinationQueue

// NewDestinationQueue instantiates a new DestinationQueue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationQueue(queueId int32, type_ string) *DestinationQueue {
	this := DestinationQueue{}
	this.QueueId = queueId
	this.Type = type_
	return &this
}

// NewDestinationQueueWithDefaults instantiates a new DestinationQueue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationQueueWithDefaults() *DestinationQueue {
	this := DestinationQueue{}
	return &this
}

// GetQueueId returns the QueueId field value
func (o *DestinationQueue) GetQueueId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.QueueId
}

// GetQueueIdOk returns a tuple with the QueueId field value
// and a boolean to check if the value has been set.
func (o *DestinationQueue) GetQueueIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueueId, true
}

// SetQueueId sets field value
func (o *DestinationQueue) SetQueueId(v int32) {
	o.QueueId = v
}

// GetRingTime returns the RingTime field value if set, zero value otherwise.
func (o *DestinationQueue) GetRingTime() float32 {
	if o == nil || IsNil(o.RingTime) {
		var ret float32
		return ret
	}
	return *o.RingTime
}

// GetRingTimeOk returns a tuple with the RingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationQueue) GetRingTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.RingTime) {
		return nil, false
	}
	return o.RingTime, true
}

// HasRingTime returns a boolean if a field has been set.
func (o *DestinationQueue) HasRingTime() bool {
	if o != nil && !IsNil(o.RingTime) {
		return true
	}

	return false
}

// SetRingTime gets a reference to the given float32 and assigns it to the RingTime field.
func (o *DestinationQueue) SetRingTime(v float32) {
	o.RingTime = &v
}

// GetSkillRuleId returns the SkillRuleId field value if set, zero value otherwise.
func (o *DestinationQueue) GetSkillRuleId() int32 {
	if o == nil || IsNil(o.SkillRuleId) {
		var ret int32
		return ret
	}
	return *o.SkillRuleId
}

// GetSkillRuleIdOk returns a tuple with the SkillRuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationQueue) GetSkillRuleIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SkillRuleId) {
		return nil, false
	}
	return o.SkillRuleId, true
}

// HasSkillRuleId returns a boolean if a field has been set.
func (o *DestinationQueue) HasSkillRuleId() bool {
	if o != nil && !IsNil(o.SkillRuleId) {
		return true
	}

	return false
}

// SetSkillRuleId gets a reference to the given int32 and assigns it to the SkillRuleId field.
func (o *DestinationQueue) SetSkillRuleId(v int32) {
	o.SkillRuleId = &v
}

// GetSkillRuleVariables returns the SkillRuleVariables field value if set, zero value otherwise.
func (o *DestinationQueue) GetSkillRuleVariables() map[string]interface{} {
	if o == nil || IsNil(o.SkillRuleVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.SkillRuleVariables
}

// GetSkillRuleVariablesOk returns a tuple with the SkillRuleVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationQueue) GetSkillRuleVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SkillRuleVariables) {
		return map[string]interface{}{}, false
	}
	return o.SkillRuleVariables, true
}

// HasSkillRuleVariables returns a boolean if a field has been set.
func (o *DestinationQueue) HasSkillRuleVariables() bool {
	if o != nil && !IsNil(o.SkillRuleVariables) {
		return true
	}

	return false
}

// SetSkillRuleVariables gets a reference to the given map[string]interface{} and assigns it to the SkillRuleVariables field.
func (o *DestinationQueue) SetSkillRuleVariables(v map[string]interface{}) {
	o.SkillRuleVariables = v
}

// GetType returns the Type field value
func (o *DestinationQueue) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DestinationQueue) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DestinationQueue) SetType(v string) {
	o.Type = v
}

func (o DestinationQueue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DestinationQueue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["queue_id"] = o.QueueId
	if !IsNil(o.RingTime) {
		toSerialize["ring_time"] = o.RingTime
	}
	if !IsNil(o.SkillRuleId) {
		toSerialize["skill_rule_id"] = o.SkillRuleId
	}
	if !IsNil(o.SkillRuleVariables) {
		toSerialize["skill_rule_variables"] = o.SkillRuleVariables
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *DestinationQueue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"queue_id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDestinationQueue := _DestinationQueue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDestinationQueue)

	if err != nil {
		return err
	}

	*o = DestinationQueue(varDestinationQueue)

	return err
}

type NullableDestinationQueue struct {
	value *DestinationQueue
	isSet bool
}

func (v NullableDestinationQueue) Get() *DestinationQueue {
	return v.value
}

func (v *NullableDestinationQueue) Set(val *DestinationQueue) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationQueue) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationQueue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationQueue(val *DestinationQueue) *NullableDestinationQueue {
	return &NullableDestinationQueue{value: val, isSet: true}
}

func (v NullableDestinationQueue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationQueue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
