/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ContextRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContextRange{}

// ContextRange struct for ContextRange
type ContextRange struct {
	End   *string `json:"end,omitempty"`
	Start string  `json:"start"`
}

type _ContextRange ContextRange

// NewContextRange instantiates a new ContextRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContextRange(start string) *ContextRange {
	this := ContextRange{}
	var end string = "<end>"
	this.End = &end
	this.Start = start
	return &this
}

// NewContextRangeWithDefaults instantiates a new ContextRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextRangeWithDefaults() *ContextRange {
	this := ContextRange{}
	var end string = "<end>"
	this.End = &end
	var start string = "<start>"
	this.Start = start
	return &this
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *ContextRange) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextRange) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *ContextRange) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *ContextRange) SetEnd(v string) {
	o.End = &v
}

// GetStart returns the Start field value
func (o *ContextRange) GetStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *ContextRange) GetStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *ContextRange) SetStart(v string) {
	o.Start = v
}

func (o ContextRange) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContextRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	toSerialize["start"] = o.Start
	return toSerialize, nil
}

func (o *ContextRange) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"start",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContextRange := _ContextRange{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContextRange)

	if err != nil {
		return err
	}

	*o = ContextRange(varContextRange)

	return err
}

type NullableContextRange struct {
	value *ContextRange
	isSet bool
}

func (v NullableContextRange) Get() *ContextRange {
	return v.value
}

func (v *NullableContextRange) Set(val *ContextRange) {
	v.value = val
	v.isSet = true
}

func (v NullableContextRange) IsSet() bool {
	return v.isSet
}

func (v *NullableContextRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextRange(val *ContextRange) *NullableContextRange {
	return &NullableContextRange{value: val, isSet: true}
}

func (v NullableContextRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
