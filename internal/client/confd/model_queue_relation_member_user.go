/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the QueueRelationMemberUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueueRelationMemberUser{}

// QueueRelationMemberUser struct for QueueRelationMemberUser
type QueueRelationMemberUser struct {
	// User firstname
	Firstname *string `json:"firstname,omitempty"`
	// User lastname
	Lastname *string `json:"lastname,omitempty"`
	// User UUID. This ID is globally unique across multiple Accent instances
	Uuid *string `json:"uuid,omitempty"`
	// Priority of user in the queue. Only used for linear ring strategy
	Priority *int32 `json:"priority,omitempty"`
}

// NewQueueRelationMemberUser instantiates a new QueueRelationMemberUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueueRelationMemberUser() *QueueRelationMemberUser {
	this := QueueRelationMemberUser{}
	return &this
}

// NewQueueRelationMemberUserWithDefaults instantiates a new QueueRelationMemberUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueueRelationMemberUserWithDefaults() *QueueRelationMemberUser {
	this := QueueRelationMemberUser{}
	return &this
}

// GetFirstname returns the Firstname field value if set, zero value otherwise.
func (o *QueueRelationMemberUser) GetFirstname() string {
	if o == nil || IsNil(o.Firstname) {
		var ret string
		return ret
	}
	return *o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueueRelationMemberUser) GetFirstnameOk() (*string, bool) {
	if o == nil || IsNil(o.Firstname) {
		return nil, false
	}
	return o.Firstname, true
}

// HasFirstname returns a boolean if a field has been set.
func (o *QueueRelationMemberUser) HasFirstname() bool {
	if o != nil && !IsNil(o.Firstname) {
		return true
	}

	return false
}

// SetFirstname gets a reference to the given string and assigns it to the Firstname field.
func (o *QueueRelationMemberUser) SetFirstname(v string) {
	o.Firstname = &v
}

// GetLastname returns the Lastname field value if set, zero value otherwise.
func (o *QueueRelationMemberUser) GetLastname() string {
	if o == nil || IsNil(o.Lastname) {
		var ret string
		return ret
	}
	return *o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueueRelationMemberUser) GetLastnameOk() (*string, bool) {
	if o == nil || IsNil(o.Lastname) {
		return nil, false
	}
	return o.Lastname, true
}

// HasLastname returns a boolean if a field has been set.
func (o *QueueRelationMemberUser) HasLastname() bool {
	if o != nil && !IsNil(o.Lastname) {
		return true
	}

	return false
}

// SetLastname gets a reference to the given string and assigns it to the Lastname field.
func (o *QueueRelationMemberUser) SetLastname(v string) {
	o.Lastname = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *QueueRelationMemberUser) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueueRelationMemberUser) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *QueueRelationMemberUser) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *QueueRelationMemberUser) SetUuid(v string) {
	o.Uuid = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *QueueRelationMemberUser) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueueRelationMemberUser) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *QueueRelationMemberUser) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *QueueRelationMemberUser) SetPriority(v int32) {
	o.Priority = &v
}

func (o QueueRelationMemberUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueueRelationMemberUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Firstname) {
		toSerialize["firstname"] = o.Firstname
	}
	if !IsNil(o.Lastname) {
		toSerialize["lastname"] = o.Lastname
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	return toSerialize, nil
}

type NullableQueueRelationMemberUser struct {
	value *QueueRelationMemberUser
	isSet bool
}

func (v NullableQueueRelationMemberUser) Get() *QueueRelationMemberUser {
	return v.value
}

func (v *NullableQueueRelationMemberUser) Set(val *QueueRelationMemberUser) {
	v.value = val
	v.isSet = true
}

func (v NullableQueueRelationMemberUser) IsSet() bool {
	return v.isSet
}

func (v *NullableQueueRelationMemberUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueueRelationMemberUser(val *QueueRelationMemberUser) *NullableQueueRelationMemberUser {
	return &NullableQueueRelationMemberUser{value: val, isSet: true}
}

func (v NullableQueueRelationMemberUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueueRelationMemberUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
