/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the EmailConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailConfig{}

// EmailConfig struct for EmailConfig
type EmailConfig struct {
	// Rules for local address to external address rewriting
	AddressRewritingRules []RewritingRule `json:"address_rewriting_rules,omitempty"`
	// The domain name of the current mailing server, i.e. `example.com`
	DomainName *string `json:"domain_name,omitempty"`
	// Fallback relay server hostname or address. It is possible to specify the port, for example `domain.com:587`
	FallbackSmtpHost *string `json:"fallback_smtp_host,omitempty"`
	// The e-mail address or domain name to use in the `From` header for local services
	From *string `json:"from,omitempty"`
	// E-mail relay server hostname or address. It is possible to specify the port, for example `domain.com:587`
	SmtpHost *string `json:"smtp_host,omitempty"`
}

// NewEmailConfig instantiates a new EmailConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailConfig() *EmailConfig {
	this := EmailConfig{}
	return &this
}

// NewEmailConfigWithDefaults instantiates a new EmailConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailConfigWithDefaults() *EmailConfig {
	this := EmailConfig{}
	return &this
}

// GetAddressRewritingRules returns the AddressRewritingRules field value if set, zero value otherwise.
func (o *EmailConfig) GetAddressRewritingRules() []RewritingRule {
	if o == nil || IsNil(o.AddressRewritingRules) {
		var ret []RewritingRule
		return ret
	}
	return o.AddressRewritingRules
}

// GetAddressRewritingRulesOk returns a tuple with the AddressRewritingRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetAddressRewritingRulesOk() ([]RewritingRule, bool) {
	if o == nil || IsNil(o.AddressRewritingRules) {
		return nil, false
	}
	return o.AddressRewritingRules, true
}

// HasAddressRewritingRules returns a boolean if a field has been set.
func (o *EmailConfig) HasAddressRewritingRules() bool {
	if o != nil && !IsNil(o.AddressRewritingRules) {
		return true
	}

	return false
}

// SetAddressRewritingRules gets a reference to the given []RewritingRule and assigns it to the AddressRewritingRules field.
func (o *EmailConfig) SetAddressRewritingRules(v []RewritingRule) {
	o.AddressRewritingRules = v
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *EmailConfig) GetDomainName() string {
	if o == nil || IsNil(o.DomainName) {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainName) {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *EmailConfig) HasDomainName() bool {
	if o != nil && !IsNil(o.DomainName) {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *EmailConfig) SetDomainName(v string) {
	o.DomainName = &v
}

// GetFallbackSmtpHost returns the FallbackSmtpHost field value if set, zero value otherwise.
func (o *EmailConfig) GetFallbackSmtpHost() string {
	if o == nil || IsNil(o.FallbackSmtpHost) {
		var ret string
		return ret
	}
	return *o.FallbackSmtpHost
}

// GetFallbackSmtpHostOk returns a tuple with the FallbackSmtpHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetFallbackSmtpHostOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackSmtpHost) {
		return nil, false
	}
	return o.FallbackSmtpHost, true
}

// HasFallbackSmtpHost returns a boolean if a field has been set.
func (o *EmailConfig) HasFallbackSmtpHost() bool {
	if o != nil && !IsNil(o.FallbackSmtpHost) {
		return true
	}

	return false
}

// SetFallbackSmtpHost gets a reference to the given string and assigns it to the FallbackSmtpHost field.
func (o *EmailConfig) SetFallbackSmtpHost(v string) {
	o.FallbackSmtpHost = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *EmailConfig) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *EmailConfig) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *EmailConfig) SetFrom(v string) {
	o.From = &v
}

// GetSmtpHost returns the SmtpHost field value if set, zero value otherwise.
func (o *EmailConfig) GetSmtpHost() string {
	if o == nil || IsNil(o.SmtpHost) {
		var ret string
		return ret
	}
	return *o.SmtpHost
}

// GetSmtpHostOk returns a tuple with the SmtpHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetSmtpHostOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpHost) {
		return nil, false
	}
	return o.SmtpHost, true
}

// HasSmtpHost returns a boolean if a field has been set.
func (o *EmailConfig) HasSmtpHost() bool {
	if o != nil && !IsNil(o.SmtpHost) {
		return true
	}

	return false
}

// SetSmtpHost gets a reference to the given string and assigns it to the SmtpHost field.
func (o *EmailConfig) SetSmtpHost(v string) {
	o.SmtpHost = &v
}

func (o EmailConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressRewritingRules) {
		toSerialize["address_rewriting_rules"] = o.AddressRewritingRules
	}
	if !IsNil(o.DomainName) {
		toSerialize["domain_name"] = o.DomainName
	}
	if !IsNil(o.FallbackSmtpHost) {
		toSerialize["fallback_smtp_host"] = o.FallbackSmtpHost
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.SmtpHost) {
		toSerialize["smtp_host"] = o.SmtpHost
	}
	return toSerialize, nil
}

type NullableEmailConfig struct {
	value *EmailConfig
	isSet bool
}

func (v NullableEmailConfig) Get() *EmailConfig {
	return v.value
}

func (v *NullableEmailConfig) Set(val *EmailConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailConfig(val *EmailConfig) *NullableEmailConfig {
	return &NullableEmailConfig{value: val, isSet: true}
}

func (v NullableEmailConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
