/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the UserPostRelationIncallsIncallsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPostRelationIncallsIncallsInner{}

// UserPostRelationIncallsIncallsInner struct for UserPostRelationIncallsIncallsInner
type UserPostRelationIncallsIncallsInner struct {
	// How the caller_id_name will be treated
	CallerIdMode *string `json:"caller_id_mode,omitempty"`
	// Name to display when calling
	CallerIdName *string                                              `json:"caller_id_name,omitempty"`
	Extensions   []UserPostRelationIncallsIncallsInnerExtensionsInner `json:"extensions,omitempty"`
	// The name of the sound file to be played before redirecting the caller to the destination
	GreetingSound *string `json:"greeting_sound,omitempty"`
	// The id of the incoming call
	Id *int32 `json:"id,omitempty"`
	// Name of the subroutine to execute in asterisk before receiving a call
	PreprocessSubroutine *string `json:"preprocess_subroutine,omitempty"`
}

// NewUserPostRelationIncallsIncallsInner instantiates a new UserPostRelationIncallsIncallsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPostRelationIncallsIncallsInner() *UserPostRelationIncallsIncallsInner {
	this := UserPostRelationIncallsIncallsInner{}
	return &this
}

// NewUserPostRelationIncallsIncallsInnerWithDefaults instantiates a new UserPostRelationIncallsIncallsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPostRelationIncallsIncallsInnerWithDefaults() *UserPostRelationIncallsIncallsInner {
	this := UserPostRelationIncallsIncallsInner{}
	return &this
}

// GetCallerIdMode returns the CallerIdMode field value if set, zero value otherwise.
func (o *UserPostRelationIncallsIncallsInner) GetCallerIdMode() string {
	if o == nil || IsNil(o.CallerIdMode) {
		var ret string
		return ret
	}
	return *o.CallerIdMode
}

// GetCallerIdModeOk returns a tuple with the CallerIdMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationIncallsIncallsInner) GetCallerIdModeOk() (*string, bool) {
	if o == nil || IsNil(o.CallerIdMode) {
		return nil, false
	}
	return o.CallerIdMode, true
}

// HasCallerIdMode returns a boolean if a field has been set.
func (o *UserPostRelationIncallsIncallsInner) HasCallerIdMode() bool {
	if o != nil && !IsNil(o.CallerIdMode) {
		return true
	}

	return false
}

// SetCallerIdMode gets a reference to the given string and assigns it to the CallerIdMode field.
func (o *UserPostRelationIncallsIncallsInner) SetCallerIdMode(v string) {
	o.CallerIdMode = &v
}

// GetCallerIdName returns the CallerIdName field value if set, zero value otherwise.
func (o *UserPostRelationIncallsIncallsInner) GetCallerIdName() string {
	if o == nil || IsNil(o.CallerIdName) {
		var ret string
		return ret
	}
	return *o.CallerIdName
}

// GetCallerIdNameOk returns a tuple with the CallerIdName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationIncallsIncallsInner) GetCallerIdNameOk() (*string, bool) {
	if o == nil || IsNil(o.CallerIdName) {
		return nil, false
	}
	return o.CallerIdName, true
}

// HasCallerIdName returns a boolean if a field has been set.
func (o *UserPostRelationIncallsIncallsInner) HasCallerIdName() bool {
	if o != nil && !IsNil(o.CallerIdName) {
		return true
	}

	return false
}

// SetCallerIdName gets a reference to the given string and assigns it to the CallerIdName field.
func (o *UserPostRelationIncallsIncallsInner) SetCallerIdName(v string) {
	o.CallerIdName = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *UserPostRelationIncallsIncallsInner) GetExtensions() []UserPostRelationIncallsIncallsInnerExtensionsInner {
	if o == nil || IsNil(o.Extensions) {
		var ret []UserPostRelationIncallsIncallsInnerExtensionsInner
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationIncallsIncallsInner) GetExtensionsOk() ([]UserPostRelationIncallsIncallsInnerExtensionsInner, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *UserPostRelationIncallsIncallsInner) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []UserPostRelationIncallsIncallsInnerExtensionsInner and assigns it to the Extensions field.
func (o *UserPostRelationIncallsIncallsInner) SetExtensions(v []UserPostRelationIncallsIncallsInnerExtensionsInner) {
	o.Extensions = v
}

// GetGreetingSound returns the GreetingSound field value if set, zero value otherwise.
func (o *UserPostRelationIncallsIncallsInner) GetGreetingSound() string {
	if o == nil || IsNil(o.GreetingSound) {
		var ret string
		return ret
	}
	return *o.GreetingSound
}

// GetGreetingSoundOk returns a tuple with the GreetingSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationIncallsIncallsInner) GetGreetingSoundOk() (*string, bool) {
	if o == nil || IsNil(o.GreetingSound) {
		return nil, false
	}
	return o.GreetingSound, true
}

// HasGreetingSound returns a boolean if a field has been set.
func (o *UserPostRelationIncallsIncallsInner) HasGreetingSound() bool {
	if o != nil && !IsNil(o.GreetingSound) {
		return true
	}

	return false
}

// SetGreetingSound gets a reference to the given string and assigns it to the GreetingSound field.
func (o *UserPostRelationIncallsIncallsInner) SetGreetingSound(v string) {
	o.GreetingSound = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserPostRelationIncallsIncallsInner) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationIncallsIncallsInner) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserPostRelationIncallsIncallsInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UserPostRelationIncallsIncallsInner) SetId(v int32) {
	o.Id = &v
}

// GetPreprocessSubroutine returns the PreprocessSubroutine field value if set, zero value otherwise.
func (o *UserPostRelationIncallsIncallsInner) GetPreprocessSubroutine() string {
	if o == nil || IsNil(o.PreprocessSubroutine) {
		var ret string
		return ret
	}
	return *o.PreprocessSubroutine
}

// GetPreprocessSubroutineOk returns a tuple with the PreprocessSubroutine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationIncallsIncallsInner) GetPreprocessSubroutineOk() (*string, bool) {
	if o == nil || IsNil(o.PreprocessSubroutine) {
		return nil, false
	}
	return o.PreprocessSubroutine, true
}

// HasPreprocessSubroutine returns a boolean if a field has been set.
func (o *UserPostRelationIncallsIncallsInner) HasPreprocessSubroutine() bool {
	if o != nil && !IsNil(o.PreprocessSubroutine) {
		return true
	}

	return false
}

// SetPreprocessSubroutine gets a reference to the given string and assigns it to the PreprocessSubroutine field.
func (o *UserPostRelationIncallsIncallsInner) SetPreprocessSubroutine(v string) {
	o.PreprocessSubroutine = &v
}

func (o UserPostRelationIncallsIncallsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPostRelationIncallsIncallsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallerIdMode) {
		toSerialize["caller_id_mode"] = o.CallerIdMode
	}
	if !IsNil(o.CallerIdName) {
		toSerialize["caller_id_name"] = o.CallerIdName
	}
	if !IsNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	if !IsNil(o.GreetingSound) {
		toSerialize["greeting_sound"] = o.GreetingSound
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PreprocessSubroutine) {
		toSerialize["preprocess_subroutine"] = o.PreprocessSubroutine
	}
	return toSerialize, nil
}

type NullableUserPostRelationIncallsIncallsInner struct {
	value *UserPostRelationIncallsIncallsInner
	isSet bool
}

func (v NullableUserPostRelationIncallsIncallsInner) Get() *UserPostRelationIncallsIncallsInner {
	return v.value
}

func (v *NullableUserPostRelationIncallsIncallsInner) Set(val *UserPostRelationIncallsIncallsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPostRelationIncallsIncallsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPostRelationIncallsIncallsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPostRelationIncallsIncallsInner(val *UserPostRelationIncallsIncallsInner) *NullableUserPostRelationIncallsIncallsInner {
	return &NullableUserPostRelationIncallsIncallsInner{value: val, isSet: true}
}

func (v NullableUserPostRelationIncallsIncallsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPostRelationIncallsIncallsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
