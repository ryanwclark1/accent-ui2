/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the ParkingLot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParkingLot{}

// ParkingLot struct for ParkingLot
type ParkingLot struct {
	Id *int32 `json:"id,omitempty"`
	// name to identify the parking lot
	Name       *string                 `json:"name,omitempty"`
	Extensions []ExtensionRelationBase `json:"extensions,omitempty"`
	// Name of the MOH category to use for music on hold
	MusicOnHold *string `json:"music_on_hold,omitempty"`
	// Ending extension to park calls
	SlotsEnd *string `json:"slots_end,omitempty"`
	// Starting extension to park calls
	SlotsStart *string `json:"slots_start,omitempty"`
	// The UUID of the tenant
	TenantUuid *string `json:"tenant_uuid,omitempty"`
	// Maximum time on parking
	Timeout *int32 `json:"timeout,omitempty"`
}

// NewParkingLot instantiates a new ParkingLot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParkingLot() *ParkingLot {
	this := ParkingLot{}
	var musicOnHold string = "default"
	this.MusicOnHold = &musicOnHold
	return &this
}

// NewParkingLotWithDefaults instantiates a new ParkingLot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParkingLotWithDefaults() *ParkingLot {
	this := ParkingLot{}
	var musicOnHold string = "default"
	this.MusicOnHold = &musicOnHold
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ParkingLot) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParkingLot) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ParkingLot) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ParkingLot) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ParkingLot) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParkingLot) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ParkingLot) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ParkingLot) SetName(v string) {
	o.Name = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *ParkingLot) GetExtensions() []ExtensionRelationBase {
	if o == nil || IsNil(o.Extensions) {
		var ret []ExtensionRelationBase
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParkingLot) GetExtensionsOk() ([]ExtensionRelationBase, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *ParkingLot) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []ExtensionRelationBase and assigns it to the Extensions field.
func (o *ParkingLot) SetExtensions(v []ExtensionRelationBase) {
	o.Extensions = v
}

// GetMusicOnHold returns the MusicOnHold field value if set, zero value otherwise.
func (o *ParkingLot) GetMusicOnHold() string {
	if o == nil || IsNil(o.MusicOnHold) {
		var ret string
		return ret
	}
	return *o.MusicOnHold
}

// GetMusicOnHoldOk returns a tuple with the MusicOnHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParkingLot) GetMusicOnHoldOk() (*string, bool) {
	if o == nil || IsNil(o.MusicOnHold) {
		return nil, false
	}
	return o.MusicOnHold, true
}

// HasMusicOnHold returns a boolean if a field has been set.
func (o *ParkingLot) HasMusicOnHold() bool {
	if o != nil && !IsNil(o.MusicOnHold) {
		return true
	}

	return false
}

// SetMusicOnHold gets a reference to the given string and assigns it to the MusicOnHold field.
func (o *ParkingLot) SetMusicOnHold(v string) {
	o.MusicOnHold = &v
}

// GetSlotsEnd returns the SlotsEnd field value if set, zero value otherwise.
func (o *ParkingLot) GetSlotsEnd() string {
	if o == nil || IsNil(o.SlotsEnd) {
		var ret string
		return ret
	}
	return *o.SlotsEnd
}

// GetSlotsEndOk returns a tuple with the SlotsEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParkingLot) GetSlotsEndOk() (*string, bool) {
	if o == nil || IsNil(o.SlotsEnd) {
		return nil, false
	}
	return o.SlotsEnd, true
}

// HasSlotsEnd returns a boolean if a field has been set.
func (o *ParkingLot) HasSlotsEnd() bool {
	if o != nil && !IsNil(o.SlotsEnd) {
		return true
	}

	return false
}

// SetSlotsEnd gets a reference to the given string and assigns it to the SlotsEnd field.
func (o *ParkingLot) SetSlotsEnd(v string) {
	o.SlotsEnd = &v
}

// GetSlotsStart returns the SlotsStart field value if set, zero value otherwise.
func (o *ParkingLot) GetSlotsStart() string {
	if o == nil || IsNil(o.SlotsStart) {
		var ret string
		return ret
	}
	return *o.SlotsStart
}

// GetSlotsStartOk returns a tuple with the SlotsStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParkingLot) GetSlotsStartOk() (*string, bool) {
	if o == nil || IsNil(o.SlotsStart) {
		return nil, false
	}
	return o.SlotsStart, true
}

// HasSlotsStart returns a boolean if a field has been set.
func (o *ParkingLot) HasSlotsStart() bool {
	if o != nil && !IsNil(o.SlotsStart) {
		return true
	}

	return false
}

// SetSlotsStart gets a reference to the given string and assigns it to the SlotsStart field.
func (o *ParkingLot) SetSlotsStart(v string) {
	o.SlotsStart = &v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *ParkingLot) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParkingLot) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *ParkingLot) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *ParkingLot) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *ParkingLot) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParkingLot) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *ParkingLot) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *ParkingLot) SetTimeout(v int32) {
	o.Timeout = &v
}

func (o ParkingLot) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParkingLot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	if !IsNil(o.MusicOnHold) {
		toSerialize["music_on_hold"] = o.MusicOnHold
	}
	if !IsNil(o.SlotsEnd) {
		toSerialize["slots_end"] = o.SlotsEnd
	}
	if !IsNil(o.SlotsStart) {
		toSerialize["slots_start"] = o.SlotsStart
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	return toSerialize, nil
}

type NullableParkingLot struct {
	value *ParkingLot
	isSet bool
}

func (v NullableParkingLot) Get() *ParkingLot {
	return v.value
}

func (v *NullableParkingLot) Set(val *ParkingLot) {
	v.value = val
	v.isSet = true
}

func (v NullableParkingLot) IsSet() bool {
	return v.isSet
}

func (v *NullableParkingLot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParkingLot(val *ParkingLot) *NullableParkingLot {
	return &NullableParkingLot{value: val, isSet: true}
}

func (v NullableParkingLot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParkingLot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
