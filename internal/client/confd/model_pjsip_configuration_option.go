/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the PJSIPConfigurationOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PJSIPConfigurationOption{}

// PJSIPConfigurationOption struct for PJSIPConfigurationOption
type PJSIPConfigurationOption struct {
	// The default value for this option
	Default *string `json:"default,omitempty"`
	// A long description of the option
	Description *string `json:"description,omitempty"`
	// The name of the option
	Name *string `json:"name,omitempty"`
	// A brief description of the option
	Synopsis *string `json:"synopsis,omitempty"`
}

// NewPJSIPConfigurationOption instantiates a new PJSIPConfigurationOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPJSIPConfigurationOption() *PJSIPConfigurationOption {
	this := PJSIPConfigurationOption{}
	return &this
}

// NewPJSIPConfigurationOptionWithDefaults instantiates a new PJSIPConfigurationOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPJSIPConfigurationOptionWithDefaults() *PJSIPConfigurationOption {
	this := PJSIPConfigurationOption{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *PJSIPConfigurationOption) GetDefault() string {
	if o == nil || IsNil(o.Default) {
		var ret string
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PJSIPConfigurationOption) GetDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *PJSIPConfigurationOption) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given string and assigns it to the Default field.
func (o *PJSIPConfigurationOption) SetDefault(v string) {
	o.Default = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PJSIPConfigurationOption) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PJSIPConfigurationOption) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PJSIPConfigurationOption) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PJSIPConfigurationOption) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PJSIPConfigurationOption) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PJSIPConfigurationOption) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PJSIPConfigurationOption) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PJSIPConfigurationOption) SetName(v string) {
	o.Name = &v
}

// GetSynopsis returns the Synopsis field value if set, zero value otherwise.
func (o *PJSIPConfigurationOption) GetSynopsis() string {
	if o == nil || IsNil(o.Synopsis) {
		var ret string
		return ret
	}
	return *o.Synopsis
}

// GetSynopsisOk returns a tuple with the Synopsis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PJSIPConfigurationOption) GetSynopsisOk() (*string, bool) {
	if o == nil || IsNil(o.Synopsis) {
		return nil, false
	}
	return o.Synopsis, true
}

// HasSynopsis returns a boolean if a field has been set.
func (o *PJSIPConfigurationOption) HasSynopsis() bool {
	if o != nil && !IsNil(o.Synopsis) {
		return true
	}

	return false
}

// SetSynopsis gets a reference to the given string and assigns it to the Synopsis field.
func (o *PJSIPConfigurationOption) SetSynopsis(v string) {
	o.Synopsis = &v
}

func (o PJSIPConfigurationOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PJSIPConfigurationOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Synopsis) {
		toSerialize["synopsis"] = o.Synopsis
	}
	return toSerialize, nil
}

type NullablePJSIPConfigurationOption struct {
	value *PJSIPConfigurationOption
	isSet bool
}

func (v NullablePJSIPConfigurationOption) Get() *PJSIPConfigurationOption {
	return v.value
}

func (v *NullablePJSIPConfigurationOption) Set(val *PJSIPConfigurationOption) {
	v.value = val
	v.isSet = true
}

func (v NullablePJSIPConfigurationOption) IsSet() bool {
	return v.isSet
}

func (v *NullablePJSIPConfigurationOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePJSIPConfigurationOption(val *PJSIPConfigurationOption) *NullablePJSIPConfigurationOption {
	return &NullablePJSIPConfigurationOption{value: val, isSet: true}
}

func (v NullablePJSIPConfigurationOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePJSIPConfigurationOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
