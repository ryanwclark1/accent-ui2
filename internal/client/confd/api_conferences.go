/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type ConferencesAPI interface {

	/*
		AssociateConferenceExtension Associate conference and extension

		**Required ACL:** `confd.conferences.{conference_id}.extensions.{extension_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param conferenceId Conference's ID
		@param extensionId
		@return ConferencesAPIAssociateConferenceExtensionRequest
	*/
	AssociateConferenceExtension(ctx context.Context, conferenceId int32, extensionId int32) ConferencesAPIAssociateConferenceExtensionRequest

	// AssociateConferenceExtensionExecute executes the request
	AssociateConferenceExtensionExecute(r ConferencesAPIAssociateConferenceExtensionRequest) (*http.Response, error)

	/*
		CreateConference Create conference

		**Required ACL:** `confd.conferences.create` All conferences have the same menu. Please consult the asterisk [documentation](https://raw.githubusercontent.com/asterisk/asterisk/master/configs/samples/confbridge.conf.sample) for definitions: ``` * = playback_and_continue 1 = toggle_mute 4 = decrease_listening_volume 5 = reset_listening_volume 6 = increase_listening_volume 7 = decrease_talking_volume 8 = reset_talking_volume 9 = increase_talking_volume ```
	And the following options are added to the admin user:
	``` 2 = admin_toggle_conference_lock 3 = admin_kick_last 0 = admin_toggle_mute_participants' ```

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ConferencesAPICreateConferenceRequest
	*/
	CreateConference(ctx context.Context) ConferencesAPICreateConferenceRequest

	// CreateConferenceExecute executes the request
	//  @return Conference
	CreateConferenceExecute(r ConferencesAPICreateConferenceRequest) (*Conference, *http.Response, error)

	/*
		DeleteConference Delete conference

		**Required ACL:** `confd.conferences.{conference_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param conferenceId Conference's ID
		@return ConferencesAPIDeleteConferenceRequest
	*/
	DeleteConference(ctx context.Context, conferenceId int32) ConferencesAPIDeleteConferenceRequest

	// DeleteConferenceExecute executes the request
	DeleteConferenceExecute(r ConferencesAPIDeleteConferenceRequest) (*http.Response, error)

	/*
		DissociateConferenceExtension Dissociate conference and extension

		**Required ACL:** `confd.conferences.{conference_id}.extensions.{extension_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param conferenceId Conference's ID
		@param extensionId
		@return ConferencesAPIDissociateConferenceExtensionRequest
	*/
	DissociateConferenceExtension(ctx context.Context, conferenceId int32, extensionId int32) ConferencesAPIDissociateConferenceExtensionRequest

	// DissociateConferenceExtensionExecute executes the request
	DissociateConferenceExtensionExecute(r ConferencesAPIDissociateConferenceExtensionRequest) (*http.Response, error)

	/*
		GetConference Get conference

		**Required ACL:** `confd.conferences.{conference_id}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param conferenceId Conference's ID
		@return ConferencesAPIGetConferenceRequest
	*/
	GetConference(ctx context.Context, conferenceId int32) ConferencesAPIGetConferenceRequest

	// GetConferenceExecute executes the request
	//  @return Conference
	GetConferenceExecute(r ConferencesAPIGetConferenceRequest) (*Conference, *http.Response, error)

	/*
		ListAsteriskConfbridgeAccentDefaultBridge List ConfBridge accent_default_bridge options

		**Required ACL:** `confd.asterisk.confbridge.accent_default_bridge.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ConferencesAPIListAsteriskConfbridgeAccentDefaultBridgeRequest
	*/
	ListAsteriskConfbridgeAccentDefaultBridge(ctx context.Context) ConferencesAPIListAsteriskConfbridgeAccentDefaultBridgeRequest

	// ListAsteriskConfbridgeAccentDefaultBridgeExecute executes the request
	//  @return ConfBridgeConfiguration
	ListAsteriskConfbridgeAccentDefaultBridgeExecute(r ConferencesAPIListAsteriskConfbridgeAccentDefaultBridgeRequest) (*ConfBridgeConfiguration, *http.Response, error)

	/*
		ListAsteriskConfbridgeAccentDefaultUser List ConfBridge accent_default_user options

		**Required ACL:** `confd.asterisk.confbridge.accent_default_user.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ConferencesAPIListAsteriskConfbridgeAccentDefaultUserRequest
	*/
	ListAsteriskConfbridgeAccentDefaultUser(ctx context.Context) ConferencesAPIListAsteriskConfbridgeAccentDefaultUserRequest

	// ListAsteriskConfbridgeAccentDefaultUserExecute executes the request
	//  @return ConfBridgeConfiguration
	ListAsteriskConfbridgeAccentDefaultUserExecute(r ConferencesAPIListAsteriskConfbridgeAccentDefaultUserRequest) (*ConfBridgeConfiguration, *http.Response, error)

	/*
		ListConferences List conference

		**Required ACL:** `confd.conferences.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ConferencesAPIListConferencesRequest
	*/
	ListConferences(ctx context.Context) ConferencesAPIListConferencesRequest

	// ListConferencesExecute executes the request
	//  @return ConferenceItems
	ListConferencesExecute(r ConferencesAPIListConferencesRequest) (*ConferenceItems, *http.Response, error)

	/*
		UpdateAsteriskConfbridgeAccentDefaultBridge Update ConfBridge accent_default_bridge option

		**Required ACL:** `confd.asterisk.confbridge.accent_default_bridge.update` **WARNING** This endpoint restore to default value or delete all fields that are not defined. All available configuration options are listed in the [sample](https://raw.githubusercontent.com/asterisk/asterisk/master/configs/samples/confbridge.conf.sample) Asterisk configuration file.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultBridgeRequest
	*/
	UpdateAsteriskConfbridgeAccentDefaultBridge(ctx context.Context) ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultBridgeRequest

	// UpdateAsteriskConfbridgeAccentDefaultBridgeExecute executes the request
	UpdateAsteriskConfbridgeAccentDefaultBridgeExecute(r ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultBridgeRequest) (*http.Response, error)

	/*
		UpdateAsteriskConfbridgeAccentDefaultUser Update ConfBridge accent_default_user option

		**Required ACL:** `confd.asterisk.confbridge.accent_default_user.update` **WARNING** This endpoint restore to default value or delete all fields that are not defined. All available configuration options are listed in the [sample](https://raw.githubusercontent.com/asterisk/asterisk/master/configs/samples/confbridge.conf.sample) Asterisk configuration file.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultUserRequest
	*/
	UpdateAsteriskConfbridgeAccentDefaultUser(ctx context.Context) ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultUserRequest

	// UpdateAsteriskConfbridgeAccentDefaultUserExecute executes the request
	UpdateAsteriskConfbridgeAccentDefaultUserExecute(r ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultUserRequest) (*http.Response, error)

	/*
		UpdateConference Update conference

		**Required ACL:** `confd.conferences.{conference_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param conferenceId Conference's ID
		@return ConferencesAPIUpdateConferenceRequest
	*/
	UpdateConference(ctx context.Context, conferenceId int32) ConferencesAPIUpdateConferenceRequest

	// UpdateConferenceExecute executes the request
	UpdateConferenceExecute(r ConferencesAPIUpdateConferenceRequest) (*http.Response, error)
}

// ConferencesAPIService ConferencesAPI service
type ConferencesAPIService service

type ConferencesAPIAssociateConferenceExtensionRequest struct {
	ctx          context.Context
	ApiService   ConferencesAPI
	conferenceId int32
	extensionId  int32
}

func (r ConferencesAPIAssociateConferenceExtensionRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateConferenceExtensionExecute(r)
}

/*
AssociateConferenceExtension Associate conference and extension

**Required ACL:** `confd.conferences.{conference_id}.extensions.{extension_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param conferenceId Conference's ID
	@param extensionId
	@return ConferencesAPIAssociateConferenceExtensionRequest
*/
func (a *ConferencesAPIService) AssociateConferenceExtension(ctx context.Context, conferenceId int32, extensionId int32) ConferencesAPIAssociateConferenceExtensionRequest {
	return ConferencesAPIAssociateConferenceExtensionRequest{
		ApiService:   a,
		ctx:          ctx,
		conferenceId: conferenceId,
		extensionId:  extensionId,
	}
}

// Execute executes the request
func (a *ConferencesAPIService) AssociateConferenceExtensionExecute(r ConferencesAPIAssociateConferenceExtensionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConferencesAPIService.AssociateConferenceExtension")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conferences/{conference_id}/extensions/{extension_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"conference_id"+"}", url.PathEscape(parameterValueToString(r.conferenceId, "conferenceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extension_id"+"}", url.PathEscape(parameterValueToString(r.extensionId, "extensionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConferencesAPICreateConferenceRequest struct {
	ctx          context.Context
	ApiService   ConferencesAPI
	body         *Conference
	accentTenant *string
}

// Conference to create
func (r ConferencesAPICreateConferenceRequest) Body(body Conference) ConferencesAPICreateConferenceRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ConferencesAPICreateConferenceRequest) AccentTenant(accentTenant string) ConferencesAPICreateConferenceRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ConferencesAPICreateConferenceRequest) Execute() (*Conference, *http.Response, error) {
	return r.ApiService.CreateConferenceExecute(r)
}

/*
CreateConference Create conference

**Required ACL:** `confd.conferences.create` All conferences have the same menu. Please consult the asterisk [documentation](https://raw.githubusercontent.com/asterisk/asterisk/master/configs/samples/confbridge.conf.sample) for definitions: ``` * = playback_and_continue 1 = toggle_mute 4 = decrease_listening_volume 5 = reset_listening_volume 6 = increase_listening_volume 7 = decrease_talking_volume 8 = reset_talking_volume 9 = increase_talking_volume ```
And the following options are added to the admin user:
``` 2 = admin_toggle_conference_lock 3 = admin_kick_last 0 = admin_toggle_mute_participants' ```

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ConferencesAPICreateConferenceRequest
*/
func (a *ConferencesAPIService) CreateConference(ctx context.Context) ConferencesAPICreateConferenceRequest {
	return ConferencesAPICreateConferenceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Conference
func (a *ConferencesAPIService) CreateConferenceExecute(r ConferencesAPICreateConferenceRequest) (*Conference, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Conference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConferencesAPIService.CreateConference")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conferences"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConferencesAPIDeleteConferenceRequest struct {
	ctx          context.Context
	ApiService   ConferencesAPI
	conferenceId int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ConferencesAPIDeleteConferenceRequest) AccentTenant(accentTenant string) ConferencesAPIDeleteConferenceRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ConferencesAPIDeleteConferenceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConferenceExecute(r)
}

/*
DeleteConference Delete conference

**Required ACL:** `confd.conferences.{conference_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param conferenceId Conference's ID
	@return ConferencesAPIDeleteConferenceRequest
*/
func (a *ConferencesAPIService) DeleteConference(ctx context.Context, conferenceId int32) ConferencesAPIDeleteConferenceRequest {
	return ConferencesAPIDeleteConferenceRequest{
		ApiService:   a,
		ctx:          ctx,
		conferenceId: conferenceId,
	}
}

// Execute executes the request
func (a *ConferencesAPIService) DeleteConferenceExecute(r ConferencesAPIDeleteConferenceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConferencesAPIService.DeleteConference")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conferences/{conference_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"conference_id"+"}", url.PathEscape(parameterValueToString(r.conferenceId, "conferenceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConferencesAPIDissociateConferenceExtensionRequest struct {
	ctx          context.Context
	ApiService   ConferencesAPI
	conferenceId int32
	extensionId  int32
}

func (r ConferencesAPIDissociateConferenceExtensionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateConferenceExtensionExecute(r)
}

/*
DissociateConferenceExtension Dissociate conference and extension

**Required ACL:** `confd.conferences.{conference_id}.extensions.{extension_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param conferenceId Conference's ID
	@param extensionId
	@return ConferencesAPIDissociateConferenceExtensionRequest
*/
func (a *ConferencesAPIService) DissociateConferenceExtension(ctx context.Context, conferenceId int32, extensionId int32) ConferencesAPIDissociateConferenceExtensionRequest {
	return ConferencesAPIDissociateConferenceExtensionRequest{
		ApiService:   a,
		ctx:          ctx,
		conferenceId: conferenceId,
		extensionId:  extensionId,
	}
}

// Execute executes the request
func (a *ConferencesAPIService) DissociateConferenceExtensionExecute(r ConferencesAPIDissociateConferenceExtensionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConferencesAPIService.DissociateConferenceExtension")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conferences/{conference_id}/extensions/{extension_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"conference_id"+"}", url.PathEscape(parameterValueToString(r.conferenceId, "conferenceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extension_id"+"}", url.PathEscape(parameterValueToString(r.extensionId, "extensionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConferencesAPIGetConferenceRequest struct {
	ctx          context.Context
	ApiService   ConferencesAPI
	conferenceId int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ConferencesAPIGetConferenceRequest) AccentTenant(accentTenant string) ConferencesAPIGetConferenceRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ConferencesAPIGetConferenceRequest) Execute() (*Conference, *http.Response, error) {
	return r.ApiService.GetConferenceExecute(r)
}

/*
GetConference Get conference

**Required ACL:** `confd.conferences.{conference_id}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param conferenceId Conference's ID
	@return ConferencesAPIGetConferenceRequest
*/
func (a *ConferencesAPIService) GetConference(ctx context.Context, conferenceId int32) ConferencesAPIGetConferenceRequest {
	return ConferencesAPIGetConferenceRequest{
		ApiService:   a,
		ctx:          ctx,
		conferenceId: conferenceId,
	}
}

// Execute executes the request
//
//	@return Conference
func (a *ConferencesAPIService) GetConferenceExecute(r ConferencesAPIGetConferenceRequest) (*Conference, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Conference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConferencesAPIService.GetConference")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conferences/{conference_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"conference_id"+"}", url.PathEscape(parameterValueToString(r.conferenceId, "conferenceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConferencesAPIListAsteriskConfbridgeAccentDefaultBridgeRequest struct {
	ctx        context.Context
	ApiService ConferencesAPI
}

func (r ConferencesAPIListAsteriskConfbridgeAccentDefaultBridgeRequest) Execute() (*ConfBridgeConfiguration, *http.Response, error) {
	return r.ApiService.ListAsteriskConfbridgeAccentDefaultBridgeExecute(r)
}

/*
ListAsteriskConfbridgeAccentDefaultBridge List ConfBridge accent_default_bridge options

**Required ACL:** `confd.asterisk.confbridge.accent_default_bridge.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ConferencesAPIListAsteriskConfbridgeAccentDefaultBridgeRequest
*/
func (a *ConferencesAPIService) ListAsteriskConfbridgeAccentDefaultBridge(ctx context.Context) ConferencesAPIListAsteriskConfbridgeAccentDefaultBridgeRequest {
	return ConferencesAPIListAsteriskConfbridgeAccentDefaultBridgeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConfBridgeConfiguration
func (a *ConferencesAPIService) ListAsteriskConfbridgeAccentDefaultBridgeExecute(r ConferencesAPIListAsteriskConfbridgeAccentDefaultBridgeRequest) (*ConfBridgeConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfBridgeConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConferencesAPIService.ListAsteriskConfbridgeAccentDefaultBridge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/asterisk/confbridge/accent_default_bridge"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConferencesAPIListAsteriskConfbridgeAccentDefaultUserRequest struct {
	ctx        context.Context
	ApiService ConferencesAPI
}

func (r ConferencesAPIListAsteriskConfbridgeAccentDefaultUserRequest) Execute() (*ConfBridgeConfiguration, *http.Response, error) {
	return r.ApiService.ListAsteriskConfbridgeAccentDefaultUserExecute(r)
}

/*
ListAsteriskConfbridgeAccentDefaultUser List ConfBridge accent_default_user options

**Required ACL:** `confd.asterisk.confbridge.accent_default_user.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ConferencesAPIListAsteriskConfbridgeAccentDefaultUserRequest
*/
func (a *ConferencesAPIService) ListAsteriskConfbridgeAccentDefaultUser(ctx context.Context) ConferencesAPIListAsteriskConfbridgeAccentDefaultUserRequest {
	return ConferencesAPIListAsteriskConfbridgeAccentDefaultUserRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConfBridgeConfiguration
func (a *ConferencesAPIService) ListAsteriskConfbridgeAccentDefaultUserExecute(r ConferencesAPIListAsteriskConfbridgeAccentDefaultUserRequest) (*ConfBridgeConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfBridgeConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConferencesAPIService.ListAsteriskConfbridgeAccentDefaultUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/asterisk/confbridge/accent_default_user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConferencesAPIListConferencesRequest struct {
	ctx          context.Context
	ApiService   ConferencesAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ConferencesAPIListConferencesRequest) AccentTenant(accentTenant string) ConferencesAPIListConferencesRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r ConferencesAPIListConferencesRequest) Recurse(recurse bool) ConferencesAPIListConferencesRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r ConferencesAPIListConferencesRequest) Order(order string) ConferencesAPIListConferencesRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r ConferencesAPIListConferencesRequest) Direction(direction string) ConferencesAPIListConferencesRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r ConferencesAPIListConferencesRequest) Limit(limit int32) ConferencesAPIListConferencesRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r ConferencesAPIListConferencesRequest) Offset(offset int32) ConferencesAPIListConferencesRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r ConferencesAPIListConferencesRequest) Search(search string) ConferencesAPIListConferencesRequest {
	r.search = &search
	return r
}

func (r ConferencesAPIListConferencesRequest) Execute() (*ConferenceItems, *http.Response, error) {
	return r.ApiService.ListConferencesExecute(r)
}

/*
ListConferences List conference

**Required ACL:** `confd.conferences.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ConferencesAPIListConferencesRequest
*/
func (a *ConferencesAPIService) ListConferences(ctx context.Context) ConferencesAPIListConferencesRequest {
	return ConferencesAPIListConferencesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConferenceItems
func (a *ConferencesAPIService) ListConferencesExecute(r ConferencesAPIListConferencesRequest) (*ConferenceItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConferenceItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConferencesAPIService.ListConferences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conferences"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultBridgeRequest struct {
	ctx        context.Context
	ApiService ConferencesAPI
	body       *ConfBridgeConfiguration
}

func (r ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultBridgeRequest) Body(body ConfBridgeConfiguration) ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultBridgeRequest {
	r.body = &body
	return r
}

func (r ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultBridgeRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateAsteriskConfbridgeAccentDefaultBridgeExecute(r)
}

/*
UpdateAsteriskConfbridgeAccentDefaultBridge Update ConfBridge accent_default_bridge option

**Required ACL:** `confd.asterisk.confbridge.accent_default_bridge.update` **WARNING** This endpoint restore to default value or delete all fields that are not defined. All available configuration options are listed in the [sample](https://raw.githubusercontent.com/asterisk/asterisk/master/configs/samples/confbridge.conf.sample) Asterisk configuration file.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultBridgeRequest
*/
func (a *ConferencesAPIService) UpdateAsteriskConfbridgeAccentDefaultBridge(ctx context.Context) ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultBridgeRequest {
	return ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultBridgeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ConferencesAPIService) UpdateAsteriskConfbridgeAccentDefaultBridgeExecute(r ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultBridgeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConferencesAPIService.UpdateAsteriskConfbridgeAccentDefaultBridge")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/asterisk/confbridge/accent_default_bridge"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultUserRequest struct {
	ctx        context.Context
	ApiService ConferencesAPI
	body       *ConfBridgeConfiguration
}

func (r ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultUserRequest) Body(body ConfBridgeConfiguration) ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultUserRequest {
	r.body = &body
	return r
}

func (r ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultUserRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateAsteriskConfbridgeAccentDefaultUserExecute(r)
}

/*
UpdateAsteriskConfbridgeAccentDefaultUser Update ConfBridge accent_default_user option

**Required ACL:** `confd.asterisk.confbridge.accent_default_user.update` **WARNING** This endpoint restore to default value or delete all fields that are not defined. All available configuration options are listed in the [sample](https://raw.githubusercontent.com/asterisk/asterisk/master/configs/samples/confbridge.conf.sample) Asterisk configuration file.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultUserRequest
*/
func (a *ConferencesAPIService) UpdateAsteriskConfbridgeAccentDefaultUser(ctx context.Context) ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultUserRequest {
	return ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultUserRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ConferencesAPIService) UpdateAsteriskConfbridgeAccentDefaultUserExecute(r ConferencesAPIUpdateAsteriskConfbridgeAccentDefaultUserRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConferencesAPIService.UpdateAsteriskConfbridgeAccentDefaultUser")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/asterisk/confbridge/accent_default_user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ConferencesAPIUpdateConferenceRequest struct {
	ctx          context.Context
	ApiService   ConferencesAPI
	body         *Conference
	conferenceId int32
	accentTenant *string
}

func (r ConferencesAPIUpdateConferenceRequest) Body(body Conference) ConferencesAPIUpdateConferenceRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ConferencesAPIUpdateConferenceRequest) AccentTenant(accentTenant string) ConferencesAPIUpdateConferenceRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ConferencesAPIUpdateConferenceRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateConferenceExecute(r)
}

/*
UpdateConference Update conference

**Required ACL:** `confd.conferences.{conference_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param conferenceId Conference's ID
	@return ConferencesAPIUpdateConferenceRequest
*/
func (a *ConferencesAPIService) UpdateConference(ctx context.Context, conferenceId int32) ConferencesAPIUpdateConferenceRequest {
	return ConferencesAPIUpdateConferenceRequest{
		ApiService:   a,
		ctx:          ctx,
		conferenceId: conferenceId,
	}
}

// Execute executes the request
func (a *ConferencesAPIService) UpdateConferenceExecute(r ConferencesAPIUpdateConferenceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConferencesAPIService.UpdateConference")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conferences/{conference_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"conference_id"+"}", url.PathEscape(parameterValueToString(r.conferenceId, "conferenceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
