/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
	"time"
)

// checks if the MeetingAuthorization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeetingAuthorization{}

// MeetingAuthorization struct for MeetingAuthorization
type MeetingAuthorization struct {
	CreationTime     *time.Time `json:"creation_time,omitempty"`
	GuestName        *string    `json:"guest_name,omitempty"`
	SipAuthorization *string    `json:"sip_authorization,omitempty"`
	// The status of the authorization. If the meeting does not require an authorization, the authorization will always be `accepted`.
	Status *string `json:"status,omitempty"`
	Uuid   *string `json:"uuid,omitempty"`
}

// NewMeetingAuthorization instantiates a new MeetingAuthorization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeetingAuthorization() *MeetingAuthorization {
	this := MeetingAuthorization{}
	return &this
}

// NewMeetingAuthorizationWithDefaults instantiates a new MeetingAuthorization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeetingAuthorizationWithDefaults() *MeetingAuthorization {
	this := MeetingAuthorization{}
	return &this
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *MeetingAuthorization) GetCreationTime() time.Time {
	if o == nil || IsNil(o.CreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeetingAuthorization) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *MeetingAuthorization) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *MeetingAuthorization) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetGuestName returns the GuestName field value if set, zero value otherwise.
func (o *MeetingAuthorization) GetGuestName() string {
	if o == nil || IsNil(o.GuestName) {
		var ret string
		return ret
	}
	return *o.GuestName
}

// GetGuestNameOk returns a tuple with the GuestName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeetingAuthorization) GetGuestNameOk() (*string, bool) {
	if o == nil || IsNil(o.GuestName) {
		return nil, false
	}
	return o.GuestName, true
}

// HasGuestName returns a boolean if a field has been set.
func (o *MeetingAuthorization) HasGuestName() bool {
	if o != nil && !IsNil(o.GuestName) {
		return true
	}

	return false
}

// SetGuestName gets a reference to the given string and assigns it to the GuestName field.
func (o *MeetingAuthorization) SetGuestName(v string) {
	o.GuestName = &v
}

// GetSipAuthorization returns the SipAuthorization field value if set, zero value otherwise.
func (o *MeetingAuthorization) GetSipAuthorization() string {
	if o == nil || IsNil(o.SipAuthorization) {
		var ret string
		return ret
	}
	return *o.SipAuthorization
}

// GetSipAuthorizationOk returns a tuple with the SipAuthorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeetingAuthorization) GetSipAuthorizationOk() (*string, bool) {
	if o == nil || IsNil(o.SipAuthorization) {
		return nil, false
	}
	return o.SipAuthorization, true
}

// HasSipAuthorization returns a boolean if a field has been set.
func (o *MeetingAuthorization) HasSipAuthorization() bool {
	if o != nil && !IsNil(o.SipAuthorization) {
		return true
	}

	return false
}

// SetSipAuthorization gets a reference to the given string and assigns it to the SipAuthorization field.
func (o *MeetingAuthorization) SetSipAuthorization(v string) {
	o.SipAuthorization = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MeetingAuthorization) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeetingAuthorization) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MeetingAuthorization) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MeetingAuthorization) SetStatus(v string) {
	o.Status = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *MeetingAuthorization) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeetingAuthorization) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *MeetingAuthorization) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *MeetingAuthorization) SetUuid(v string) {
	o.Uuid = &v
}

func (o MeetingAuthorization) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeetingAuthorization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreationTime) {
		toSerialize["creation_time"] = o.CreationTime
	}
	if !IsNil(o.GuestName) {
		toSerialize["guest_name"] = o.GuestName
	}
	if !IsNil(o.SipAuthorization) {
		toSerialize["sip_authorization"] = o.SipAuthorization
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableMeetingAuthorization struct {
	value *MeetingAuthorization
	isSet bool
}

func (v NullableMeetingAuthorization) Get() *MeetingAuthorization {
	return v.value
}

func (v *NullableMeetingAuthorization) Set(val *MeetingAuthorization) {
	v.value = val
	v.isSet = true
}

func (v NullableMeetingAuthorization) IsSet() bool {
	return v.isSet
}

func (v *NullableMeetingAuthorization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeetingAuthorization(val *MeetingAuthorization) *NullableMeetingAuthorization {
	return &NullableMeetingAuthorization{value: val, isSet: true}
}

func (v NullableMeetingAuthorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeetingAuthorization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
