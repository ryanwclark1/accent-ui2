/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the Ivr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ivr{}

// Ivr struct for Ivr
type Ivr struct {
	Incalls          []IvrRelationIncall `json:"incalls,omitempty"`
	AbortDestination *DestinationType    `json:"abort_destination,omitempty"`
	// The sound played when the caller reach the maximum number of tries. Not used if an abort destination is set
	AbortSound *string `json:"abort_sound,omitempty"`
	// The menu's choices
	Choices []IvrChoice `json:"choices,omitempty"`
	// Additional information about the IVR
	Description *string `json:"description,omitempty"`
	// The sound played to greet the caller
	GreetingSound *string `json:"greeting_sound,omitempty"`
	// The id of the IVR
	Id                 *int32           `json:"id,omitempty"`
	InvalidDestination *DestinationType `json:"invalid_destination,omitempty"`
	// The sound played when the caller choose an invalid option. Not used if an invalid destination is set
	InvalidSound *string `json:"invalid_sound,omitempty"`
	// The maximum number of tries before aborting the call. Both a timeout and an invalid choice counts toward the number of tries
	MaxTries *int32 `json:"max_tries,omitempty"`
	// The sound played to prompt the caller for input
	MenuSound *string `json:"menu_sound,omitempty"`
	// The name of the IVR
	Name *string `json:"name,omitempty"`
	// The UUID of the tenant
	TenantUuid *string `json:"tenant_uuid,omitempty"`
	// Number of seconds to wait after the menu sound is played before either replaying the menu, redirecting the call to the timeout destination (if set) or aborting the call (if the maximum number of tries has been reached)
	Timeout            *int32           `json:"timeout,omitempty"`
	TimeoutDestination *DestinationType `json:"timeout_destination,omitempty"`
}

// NewIvr instantiates a new Ivr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIvr() *Ivr {
	this := Ivr{}
	return &this
}

// NewIvrWithDefaults instantiates a new Ivr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIvrWithDefaults() *Ivr {
	this := Ivr{}
	return &this
}

// GetIncalls returns the Incalls field value if set, zero value otherwise.
func (o *Ivr) GetIncalls() []IvrRelationIncall {
	if o == nil || IsNil(o.Incalls) {
		var ret []IvrRelationIncall
		return ret
	}
	return o.Incalls
}

// GetIncallsOk returns a tuple with the Incalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetIncallsOk() ([]IvrRelationIncall, bool) {
	if o == nil || IsNil(o.Incalls) {
		return nil, false
	}
	return o.Incalls, true
}

// HasIncalls returns a boolean if a field has been set.
func (o *Ivr) HasIncalls() bool {
	if o != nil && !IsNil(o.Incalls) {
		return true
	}

	return false
}

// SetIncalls gets a reference to the given []IvrRelationIncall and assigns it to the Incalls field.
func (o *Ivr) SetIncalls(v []IvrRelationIncall) {
	o.Incalls = v
}

// GetAbortDestination returns the AbortDestination field value if set, zero value otherwise.
func (o *Ivr) GetAbortDestination() DestinationType {
	if o == nil || IsNil(o.AbortDestination) {
		var ret DestinationType
		return ret
	}
	return *o.AbortDestination
}

// GetAbortDestinationOk returns a tuple with the AbortDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetAbortDestinationOk() (*DestinationType, bool) {
	if o == nil || IsNil(o.AbortDestination) {
		return nil, false
	}
	return o.AbortDestination, true
}

// HasAbortDestination returns a boolean if a field has been set.
func (o *Ivr) HasAbortDestination() bool {
	if o != nil && !IsNil(o.AbortDestination) {
		return true
	}

	return false
}

// SetAbortDestination gets a reference to the given DestinationType and assigns it to the AbortDestination field.
func (o *Ivr) SetAbortDestination(v DestinationType) {
	o.AbortDestination = &v
}

// GetAbortSound returns the AbortSound field value if set, zero value otherwise.
func (o *Ivr) GetAbortSound() string {
	if o == nil || IsNil(o.AbortSound) {
		var ret string
		return ret
	}
	return *o.AbortSound
}

// GetAbortSoundOk returns a tuple with the AbortSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetAbortSoundOk() (*string, bool) {
	if o == nil || IsNil(o.AbortSound) {
		return nil, false
	}
	return o.AbortSound, true
}

// HasAbortSound returns a boolean if a field has been set.
func (o *Ivr) HasAbortSound() bool {
	if o != nil && !IsNil(o.AbortSound) {
		return true
	}

	return false
}

// SetAbortSound gets a reference to the given string and assigns it to the AbortSound field.
func (o *Ivr) SetAbortSound(v string) {
	o.AbortSound = &v
}

// GetChoices returns the Choices field value if set, zero value otherwise.
func (o *Ivr) GetChoices() []IvrChoice {
	if o == nil || IsNil(o.Choices) {
		var ret []IvrChoice
		return ret
	}
	return o.Choices
}

// GetChoicesOk returns a tuple with the Choices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetChoicesOk() ([]IvrChoice, bool) {
	if o == nil || IsNil(o.Choices) {
		return nil, false
	}
	return o.Choices, true
}

// HasChoices returns a boolean if a field has been set.
func (o *Ivr) HasChoices() bool {
	if o != nil && !IsNil(o.Choices) {
		return true
	}

	return false
}

// SetChoices gets a reference to the given []IvrChoice and assigns it to the Choices field.
func (o *Ivr) SetChoices(v []IvrChoice) {
	o.Choices = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Ivr) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Ivr) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Ivr) SetDescription(v string) {
	o.Description = &v
}

// GetGreetingSound returns the GreetingSound field value if set, zero value otherwise.
func (o *Ivr) GetGreetingSound() string {
	if o == nil || IsNil(o.GreetingSound) {
		var ret string
		return ret
	}
	return *o.GreetingSound
}

// GetGreetingSoundOk returns a tuple with the GreetingSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetGreetingSoundOk() (*string, bool) {
	if o == nil || IsNil(o.GreetingSound) {
		return nil, false
	}
	return o.GreetingSound, true
}

// HasGreetingSound returns a boolean if a field has been set.
func (o *Ivr) HasGreetingSound() bool {
	if o != nil && !IsNil(o.GreetingSound) {
		return true
	}

	return false
}

// SetGreetingSound gets a reference to the given string and assigns it to the GreetingSound field.
func (o *Ivr) SetGreetingSound(v string) {
	o.GreetingSound = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Ivr) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Ivr) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Ivr) SetId(v int32) {
	o.Id = &v
}

// GetInvalidDestination returns the InvalidDestination field value if set, zero value otherwise.
func (o *Ivr) GetInvalidDestination() DestinationType {
	if o == nil || IsNil(o.InvalidDestination) {
		var ret DestinationType
		return ret
	}
	return *o.InvalidDestination
}

// GetInvalidDestinationOk returns a tuple with the InvalidDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetInvalidDestinationOk() (*DestinationType, bool) {
	if o == nil || IsNil(o.InvalidDestination) {
		return nil, false
	}
	return o.InvalidDestination, true
}

// HasInvalidDestination returns a boolean if a field has been set.
func (o *Ivr) HasInvalidDestination() bool {
	if o != nil && !IsNil(o.InvalidDestination) {
		return true
	}

	return false
}

// SetInvalidDestination gets a reference to the given DestinationType and assigns it to the InvalidDestination field.
func (o *Ivr) SetInvalidDestination(v DestinationType) {
	o.InvalidDestination = &v
}

// GetInvalidSound returns the InvalidSound field value if set, zero value otherwise.
func (o *Ivr) GetInvalidSound() string {
	if o == nil || IsNil(o.InvalidSound) {
		var ret string
		return ret
	}
	return *o.InvalidSound
}

// GetInvalidSoundOk returns a tuple with the InvalidSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetInvalidSoundOk() (*string, bool) {
	if o == nil || IsNil(o.InvalidSound) {
		return nil, false
	}
	return o.InvalidSound, true
}

// HasInvalidSound returns a boolean if a field has been set.
func (o *Ivr) HasInvalidSound() bool {
	if o != nil && !IsNil(o.InvalidSound) {
		return true
	}

	return false
}

// SetInvalidSound gets a reference to the given string and assigns it to the InvalidSound field.
func (o *Ivr) SetInvalidSound(v string) {
	o.InvalidSound = &v
}

// GetMaxTries returns the MaxTries field value if set, zero value otherwise.
func (o *Ivr) GetMaxTries() int32 {
	if o == nil || IsNil(o.MaxTries) {
		var ret int32
		return ret
	}
	return *o.MaxTries
}

// GetMaxTriesOk returns a tuple with the MaxTries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetMaxTriesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxTries) {
		return nil, false
	}
	return o.MaxTries, true
}

// HasMaxTries returns a boolean if a field has been set.
func (o *Ivr) HasMaxTries() bool {
	if o != nil && !IsNil(o.MaxTries) {
		return true
	}

	return false
}

// SetMaxTries gets a reference to the given int32 and assigns it to the MaxTries field.
func (o *Ivr) SetMaxTries(v int32) {
	o.MaxTries = &v
}

// GetMenuSound returns the MenuSound field value if set, zero value otherwise.
func (o *Ivr) GetMenuSound() string {
	if o == nil || IsNil(o.MenuSound) {
		var ret string
		return ret
	}
	return *o.MenuSound
}

// GetMenuSoundOk returns a tuple with the MenuSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetMenuSoundOk() (*string, bool) {
	if o == nil || IsNil(o.MenuSound) {
		return nil, false
	}
	return o.MenuSound, true
}

// HasMenuSound returns a boolean if a field has been set.
func (o *Ivr) HasMenuSound() bool {
	if o != nil && !IsNil(o.MenuSound) {
		return true
	}

	return false
}

// SetMenuSound gets a reference to the given string and assigns it to the MenuSound field.
func (o *Ivr) SetMenuSound(v string) {
	o.MenuSound = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Ivr) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ivr) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ivr) SetName(v string) {
	o.Name = &v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *Ivr) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *Ivr) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *Ivr) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *Ivr) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *Ivr) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *Ivr) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetTimeoutDestination returns the TimeoutDestination field value if set, zero value otherwise.
func (o *Ivr) GetTimeoutDestination() DestinationType {
	if o == nil || IsNil(o.TimeoutDestination) {
		var ret DestinationType
		return ret
	}
	return *o.TimeoutDestination
}

// GetTimeoutDestinationOk returns a tuple with the TimeoutDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ivr) GetTimeoutDestinationOk() (*DestinationType, bool) {
	if o == nil || IsNil(o.TimeoutDestination) {
		return nil, false
	}
	return o.TimeoutDestination, true
}

// HasTimeoutDestination returns a boolean if a field has been set.
func (o *Ivr) HasTimeoutDestination() bool {
	if o != nil && !IsNil(o.TimeoutDestination) {
		return true
	}

	return false
}

// SetTimeoutDestination gets a reference to the given DestinationType and assigns it to the TimeoutDestination field.
func (o *Ivr) SetTimeoutDestination(v DestinationType) {
	o.TimeoutDestination = &v
}

func (o Ivr) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ivr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Incalls) {
		toSerialize["incalls"] = o.Incalls
	}
	if !IsNil(o.AbortDestination) {
		toSerialize["abort_destination"] = o.AbortDestination
	}
	if !IsNil(o.AbortSound) {
		toSerialize["abort_sound"] = o.AbortSound
	}
	if !IsNil(o.Choices) {
		toSerialize["choices"] = o.Choices
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.GreetingSound) {
		toSerialize["greeting_sound"] = o.GreetingSound
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InvalidDestination) {
		toSerialize["invalid_destination"] = o.InvalidDestination
	}
	if !IsNil(o.InvalidSound) {
		toSerialize["invalid_sound"] = o.InvalidSound
	}
	if !IsNil(o.MaxTries) {
		toSerialize["max_tries"] = o.MaxTries
	}
	if !IsNil(o.MenuSound) {
		toSerialize["menu_sound"] = o.MenuSound
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.TimeoutDestination) {
		toSerialize["timeout_destination"] = o.TimeoutDestination
	}
	return toSerialize, nil
}

type NullableIvr struct {
	value *Ivr
	isSet bool
}

func (v NullableIvr) Get() *Ivr {
	return v.value
}

func (v *NullableIvr) Set(val *Ivr) {
	v.value = val
	v.isSet = true
}

func (v NullableIvr) IsSet() bool {
	return v.isSet
}

func (v *NullableIvr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIvr(val *Ivr) *NullableIvr {
	return &NullableIvr{value: val, isSet: true}
}

func (v NullableIvr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIvr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
