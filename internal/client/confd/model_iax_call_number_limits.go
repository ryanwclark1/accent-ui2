/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the IAXCallNumberLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAXCallNumberLimits{}

// IAXCallNumberLimits struct for IAXCallNumberLimits
type IAXCallNumberLimits struct {
	// IPv4 address of the destination
	IpAddress string `json:"ip_address"`
	// Maximum call for the ip_address destination
	Limit string `json:"limit"`
	// Netmask of the IP address (e.g. 255.255.255.255)
	Netmask string `json:"netmask"`
}

type _IAXCallNumberLimits IAXCallNumberLimits

// NewIAXCallNumberLimits instantiates a new IAXCallNumberLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAXCallNumberLimits(ipAddress string, limit string, netmask string) *IAXCallNumberLimits {
	this := IAXCallNumberLimits{}
	this.IpAddress = ipAddress
	this.Limit = limit
	this.Netmask = netmask
	return &this
}

// NewIAXCallNumberLimitsWithDefaults instantiates a new IAXCallNumberLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAXCallNumberLimitsWithDefaults() *IAXCallNumberLimits {
	this := IAXCallNumberLimits{}
	return &this
}

// GetIpAddress returns the IpAddress field value
func (o *IAXCallNumberLimits) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *IAXCallNumberLimits) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *IAXCallNumberLimits) SetIpAddress(v string) {
	o.IpAddress = v
}

// GetLimit returns the Limit field value
func (o *IAXCallNumberLimits) GetLimit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *IAXCallNumberLimits) GetLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *IAXCallNumberLimits) SetLimit(v string) {
	o.Limit = v
}

// GetNetmask returns the Netmask field value
func (o *IAXCallNumberLimits) GetNetmask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value
// and a boolean to check if the value has been set.
func (o *IAXCallNumberLimits) GetNetmaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Netmask, true
}

// SetNetmask sets field value
func (o *IAXCallNumberLimits) SetNetmask(v string) {
	o.Netmask = v
}

func (o IAXCallNumberLimits) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAXCallNumberLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip_address"] = o.IpAddress
	toSerialize["limit"] = o.Limit
	toSerialize["netmask"] = o.Netmask
	return toSerialize, nil
}

func (o *IAXCallNumberLimits) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ip_address",
		"limit",
		"netmask",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIAXCallNumberLimits := _IAXCallNumberLimits{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIAXCallNumberLimits)

	if err != nil {
		return err
	}

	*o = IAXCallNumberLimits(varIAXCallNumberLimits)

	return err
}

type NullableIAXCallNumberLimits struct {
	value *IAXCallNumberLimits
	isSet bool
}

func (v NullableIAXCallNumberLimits) Get() *IAXCallNumberLimits {
	return v.value
}

func (v *NullableIAXCallNumberLimits) Set(val *IAXCallNumberLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableIAXCallNumberLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableIAXCallNumberLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAXCallNumberLimits(val *IAXCallNumberLimits) *NullableIAXCallNumberLimits {
	return &NullableIAXCallNumberLimits{value: val, isSet: true}
}

func (v NullableIAXCallNumberLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAXCallNumberLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
