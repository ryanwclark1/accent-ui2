/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the HTTPIngressRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HTTPIngressRequest{}

// HTTPIngressRequest struct for HTTPIngressRequest
type HTTPIngressRequest struct {
	// The public URI to contact this stack HTTP API
	Uri string `json:"uri"`
}

type _HTTPIngressRequest HTTPIngressRequest

// NewHTTPIngressRequest instantiates a new HTTPIngressRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHTTPIngressRequest(uri string) *HTTPIngressRequest {
	this := HTTPIngressRequest{}
	this.Uri = uri
	return &this
}

// NewHTTPIngressRequestWithDefaults instantiates a new HTTPIngressRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHTTPIngressRequestWithDefaults() *HTTPIngressRequest {
	this := HTTPIngressRequest{}
	return &this
}

// GetUri returns the Uri field value
func (o *HTTPIngressRequest) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *HTTPIngressRequest) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *HTTPIngressRequest) SetUri(v string) {
	o.Uri = v
}

func (o HTTPIngressRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HTTPIngressRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

func (o *HTTPIngressRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHTTPIngressRequest := _HTTPIngressRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHTTPIngressRequest)

	if err != nil {
		return err
	}

	*o = HTTPIngressRequest(varHTTPIngressRequest)

	return err
}

type NullableHTTPIngressRequest struct {
	value *HTTPIngressRequest
	isSet bool
}

func (v NullableHTTPIngressRequest) Get() *HTTPIngressRequest {
	return v.value
}

func (v *NullableHTTPIngressRequest) Set(val *HTTPIngressRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHTTPIngressRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHTTPIngressRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHTTPIngressRequest(val *HTTPIngressRequest) *NullableHTTPIngressRequest {
	return &NullableHTTPIngressRequest{value: val, isSet: true}
}

func (v NullableHTTPIngressRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHTTPIngressRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
