/*
accent-chatd

Control your message and presence from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chatd

import (
	"encoding/json"
)

// checks if the Line type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Line{}

// Line struct for Line
type Line struct {
	Id *int32 `json:"id,omitempty"`
	// The current state of the line.
	State *string `json:"state,omitempty"`
}

// NewLine instantiates a new Line object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLine() *Line {
	this := Line{}
	return &this
}

// NewLineWithDefaults instantiates a new Line object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineWithDefaults() *Line {
	this := Line{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Line) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Line) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Line) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Line) SetId(v int32) {
	o.Id = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Line) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Line) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Line) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Line) SetState(v string) {
	o.State = &v
}

func (o Line) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Line) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableLine struct {
	value *Line
	isSet bool
}

func (v NullableLine) Get() *Line {
	return v.value
}

func (v *NullableLine) Set(val *Line) {
	v.value = val
	v.isSet = true
}

func (v NullableLine) IsSet() bool {
	return v.isSet
}

func (v *NullableLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLine(val *Line) *NullableLine {
	return &NullableLine{value: val, isSet: true}
}

func (v NullableLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
