/*
accent-chatd

Control your message and presence from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chatd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Presence type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Presence{}

// Presence struct for Presence
type Presence struct {
	// If the user has active connections.
	Connected *bool `json:"connected,omitempty"`
	// The \"do not disturb\" status of the user.
	DoNotDisturb *bool `json:"do_not_disturb,omitempty"`
	// The date time in UTC of the user's last activity. The value is updated when the user changes his state explicitly. The value is NULL for new user.
	LastActivity *string `json:"last_activity,omitempty"`
	// The current state of the most prioritize state line. The prioritization of each state is the following: ringing > progressing > holding > talking > available > unavailable
	LineState *string `json:"line_state,omitempty"`
	Lines     []Line  `json:"lines,omitempty"`
	// If the user uses a mobile application and can be considered reachable.  mobile will be true in the following situations  * The user has a mobile refresh token * The user has a mobile session
	Mobile *bool `json:"mobile,omitempty"`
	// The presence state of the user.
	State string `json:"state"`
	// An extended description of the user presence.
	Status *string `json:"status,omitempty"`
	// The UUID of the tenant of the user
	TenantUuid *string `json:"tenant_uuid,omitempty"`
	// The UUID of the user
	Uuid *string `json:"uuid,omitempty"`
}

type _Presence Presence

// NewPresence instantiates a new Presence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPresence(state string) *Presence {
	this := Presence{}
	this.State = state
	return &this
}

// NewPresenceWithDefaults instantiates a new Presence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPresenceWithDefaults() *Presence {
	this := Presence{}
	return &this
}

// GetConnected returns the Connected field value if set, zero value otherwise.
func (o *Presence) GetConnected() bool {
	if o == nil || IsNil(o.Connected) {
		var ret bool
		return ret
	}
	return *o.Connected
}

// GetConnectedOk returns a tuple with the Connected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Presence) GetConnectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Connected) {
		return nil, false
	}
	return o.Connected, true
}

// HasConnected returns a boolean if a field has been set.
func (o *Presence) HasConnected() bool {
	if o != nil && !IsNil(o.Connected) {
		return true
	}

	return false
}

// SetConnected gets a reference to the given bool and assigns it to the Connected field.
func (o *Presence) SetConnected(v bool) {
	o.Connected = &v
}

// GetDoNotDisturb returns the DoNotDisturb field value if set, zero value otherwise.
func (o *Presence) GetDoNotDisturb() bool {
	if o == nil || IsNil(o.DoNotDisturb) {
		var ret bool
		return ret
	}
	return *o.DoNotDisturb
}

// GetDoNotDisturbOk returns a tuple with the DoNotDisturb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Presence) GetDoNotDisturbOk() (*bool, bool) {
	if o == nil || IsNil(o.DoNotDisturb) {
		return nil, false
	}
	return o.DoNotDisturb, true
}

// HasDoNotDisturb returns a boolean if a field has been set.
func (o *Presence) HasDoNotDisturb() bool {
	if o != nil && !IsNil(o.DoNotDisturb) {
		return true
	}

	return false
}

// SetDoNotDisturb gets a reference to the given bool and assigns it to the DoNotDisturb field.
func (o *Presence) SetDoNotDisturb(v bool) {
	o.DoNotDisturb = &v
}

// GetLastActivity returns the LastActivity field value if set, zero value otherwise.
func (o *Presence) GetLastActivity() string {
	if o == nil || IsNil(o.LastActivity) {
		var ret string
		return ret
	}
	return *o.LastActivity
}

// GetLastActivityOk returns a tuple with the LastActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Presence) GetLastActivityOk() (*string, bool) {
	if o == nil || IsNil(o.LastActivity) {
		return nil, false
	}
	return o.LastActivity, true
}

// HasLastActivity returns a boolean if a field has been set.
func (o *Presence) HasLastActivity() bool {
	if o != nil && !IsNil(o.LastActivity) {
		return true
	}

	return false
}

// SetLastActivity gets a reference to the given string and assigns it to the LastActivity field.
func (o *Presence) SetLastActivity(v string) {
	o.LastActivity = &v
}

// GetLineState returns the LineState field value if set, zero value otherwise.
func (o *Presence) GetLineState() string {
	if o == nil || IsNil(o.LineState) {
		var ret string
		return ret
	}
	return *o.LineState
}

// GetLineStateOk returns a tuple with the LineState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Presence) GetLineStateOk() (*string, bool) {
	if o == nil || IsNil(o.LineState) {
		return nil, false
	}
	return o.LineState, true
}

// HasLineState returns a boolean if a field has been set.
func (o *Presence) HasLineState() bool {
	if o != nil && !IsNil(o.LineState) {
		return true
	}

	return false
}

// SetLineState gets a reference to the given string and assigns it to the LineState field.
func (o *Presence) SetLineState(v string) {
	o.LineState = &v
}

// GetLines returns the Lines field value if set, zero value otherwise.
func (o *Presence) GetLines() []Line {
	if o == nil || IsNil(o.Lines) {
		var ret []Line
		return ret
	}
	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Presence) GetLinesOk() ([]Line, bool) {
	if o == nil || IsNil(o.Lines) {
		return nil, false
	}
	return o.Lines, true
}

// HasLines returns a boolean if a field has been set.
func (o *Presence) HasLines() bool {
	if o != nil && !IsNil(o.Lines) {
		return true
	}

	return false
}

// SetLines gets a reference to the given []Line and assigns it to the Lines field.
func (o *Presence) SetLines(v []Line) {
	o.Lines = v
}

// GetMobile returns the Mobile field value if set, zero value otherwise.
func (o *Presence) GetMobile() bool {
	if o == nil || IsNil(o.Mobile) {
		var ret bool
		return ret
	}
	return *o.Mobile
}

// GetMobileOk returns a tuple with the Mobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Presence) GetMobileOk() (*bool, bool) {
	if o == nil || IsNil(o.Mobile) {
		return nil, false
	}
	return o.Mobile, true
}

// HasMobile returns a boolean if a field has been set.
func (o *Presence) HasMobile() bool {
	if o != nil && !IsNil(o.Mobile) {
		return true
	}

	return false
}

// SetMobile gets a reference to the given bool and assigns it to the Mobile field.
func (o *Presence) SetMobile(v bool) {
	o.Mobile = &v
}

// GetState returns the State field value
func (o *Presence) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Presence) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Presence) SetState(v string) {
	o.State = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Presence) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Presence) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Presence) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Presence) SetStatus(v string) {
	o.Status = &v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *Presence) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Presence) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *Presence) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *Presence) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Presence) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Presence) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Presence) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Presence) SetUuid(v string) {
	o.Uuid = &v
}

func (o Presence) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Presence) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Connected) {
		toSerialize["connected"] = o.Connected
	}
	if !IsNil(o.DoNotDisturb) {
		toSerialize["do_not_disturb"] = o.DoNotDisturb
	}
	if !IsNil(o.LastActivity) {
		toSerialize["last_activity"] = o.LastActivity
	}
	if !IsNil(o.LineState) {
		toSerialize["line_state"] = o.LineState
	}
	if !IsNil(o.Lines) {
		toSerialize["lines"] = o.Lines
	}
	if !IsNil(o.Mobile) {
		toSerialize["mobile"] = o.Mobile
	}
	toSerialize["state"] = o.State
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

func (o *Presence) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPresence := _Presence{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPresence)

	if err != nil {
		return err
	}

	*o = Presence(varPresence)

	return err
}

type NullablePresence struct {
	value *Presence
	isSet bool
}

func (v NullablePresence) Get() *Presence {
	return v.value
}

func (v *NullablePresence) Set(val *Presence) {
	v.value = val
	v.isSet = true
}

func (v NullablePresence) IsSet() bool {
	return v.isSet
}

func (v *NullablePresence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresence(val *Presence) *NullablePresence {
	return &NullablePresence{value: val, isSet: true}
}

func (v NullablePresence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
