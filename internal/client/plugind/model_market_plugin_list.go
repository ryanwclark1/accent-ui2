/*
accent-plugind

Accent's plugin management service

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plugind

import (
	"encoding/json"
)

// checks if the MarketPluginList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarketPluginList{}

// MarketPluginList struct for MarketPluginList
type MarketPluginList struct {
	// The name of the plugin
	Name *string `json:"name,omitempty"`
	// The namespace of the plugin
	Namespace *string `json:"namespace,omitempty"`
	// Version specific information
	Versions []VersionInfo `json:"versions,omitempty"`
}

// NewMarketPluginList instantiates a new MarketPluginList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketPluginList() *MarketPluginList {
	this := MarketPluginList{}
	return &this
}

// NewMarketPluginListWithDefaults instantiates a new MarketPluginList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketPluginListWithDefaults() *MarketPluginList {
	this := MarketPluginList{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MarketPluginList) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketPluginList) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MarketPluginList) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MarketPluginList) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *MarketPluginList) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketPluginList) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *MarketPluginList) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *MarketPluginList) SetNamespace(v string) {
	o.Namespace = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *MarketPluginList) GetVersions() []VersionInfo {
	if o == nil || IsNil(o.Versions) {
		var ret []VersionInfo
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketPluginList) GetVersionsOk() ([]VersionInfo, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *MarketPluginList) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []VersionInfo and assigns it to the Versions field.
func (o *MarketPluginList) SetVersions(v []VersionInfo) {
	o.Versions = v
}

func (o MarketPluginList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarketPluginList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

type NullableMarketPluginList struct {
	value *MarketPluginList
	isSet bool
}

func (v NullableMarketPluginList) Get() *MarketPluginList {
	return v.value
}

func (v *NullableMarketPluginList) Set(val *MarketPluginList) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketPluginList) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketPluginList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketPluginList(val *MarketPluginList) *NullableMarketPluginList {
	return &NullableMarketPluginList{value: val, isSet: true}
}

func (v NullableMarketPluginList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketPluginList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
