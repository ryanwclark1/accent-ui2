/*
accent-plugind

Accent's plugin management service

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plugind

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type MarketAPI interface {

	/*
		GetMarket List plugins available on the configured market

		**Required ACL:** `plugind.market.read` Allow the administrator to get a list of available plugins

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MarketAPIGetMarketRequest
	*/
	GetMarket(ctx context.Context) MarketAPIGetMarketRequest

	// GetMarketExecute executes the request
	//  @return GetMarketResult
	GetMarketExecute(r MarketAPIGetMarketRequest) (*GetMarketResult, *http.Response, error)

	/*
		GetMarketPlugin Fetch the information about a plugin from the market

		**Required ACL:** `plugind.market.read` Allow the administrator to view a plugins information from the market. ---

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param namespace The plugin's namespace
		@param name The plugin's name
		@return MarketAPIGetMarketPluginRequest
	*/
	GetMarketPlugin(ctx context.Context, namespace string, name string) MarketAPIGetMarketPluginRequest

	// GetMarketPluginExecute executes the request
	//  @return MarketPluginList
	GetMarketPluginExecute(r MarketAPIGetMarketPluginRequest) (*MarketPluginList, *http.Response, error)
}

// MarketAPIService MarketAPI service
type MarketAPIService service

type MarketAPIGetMarketRequest struct {
	ctx        context.Context
	ApiService MarketAPI
	limit      *int32
	offset     *int32
	order      *string
	direction  *string
	search     *string
	namespace  *string
	name       *string
	installed  *bool
}

// Maximum number of items to return in the list
func (r MarketAPIGetMarketRequest) Limit(limit int32) MarketAPIGetMarketRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r MarketAPIGetMarketRequest) Offset(offset int32) MarketAPIGetMarketRequest {
	r.offset = &offset
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r MarketAPIGetMarketRequest) Order(order string) MarketAPIGetMarketRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r MarketAPIGetMarketRequest) Direction(direction string) MarketAPIGetMarketRequest {
	r.direction = &direction
	return r
}

// Filter list of items, this search is applied to all fields and is not strict (eba matches SÃ©bastien)
func (r MarketAPIGetMarketRequest) Search(search string) MarketAPIGetMarketRequest {
	r.search = &search
	return r
}

// Search by namespace
func (r MarketAPIGetMarketRequest) Namespace(namespace string) MarketAPIGetMarketRequest {
	r.namespace = &namespace
	return r
}

// Search by name
func (r MarketAPIGetMarketRequest) Name(name string) MarketAPIGetMarketRequest {
	r.name = &name
	return r
}

// Filter installed plugins
func (r MarketAPIGetMarketRequest) Installed(installed bool) MarketAPIGetMarketRequest {
	r.installed = &installed
	return r
}

func (r MarketAPIGetMarketRequest) Execute() (*GetMarketResult, *http.Response, error) {
	return r.ApiService.GetMarketExecute(r)
}

/*
GetMarket List plugins available on the configured market

**Required ACL:** `plugind.market.read` Allow the administrator to get a list of available plugins

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MarketAPIGetMarketRequest
*/
func (a *MarketAPIService) GetMarket(ctx context.Context) MarketAPIGetMarketRequest {
	return MarketAPIGetMarketRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GetMarketResult
func (a *MarketAPIService) GetMarketExecute(r MarketAPIGetMarketRequest) (*GetMarketResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetMarketResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketAPIService.GetMarket")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/market"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.namespace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "namespace", r.namespace, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.installed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "installed", r.installed, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MarketAPIGetMarketPluginRequest struct {
	ctx        context.Context
	ApiService MarketAPI
	namespace  string
	name       string
}

func (r MarketAPIGetMarketPluginRequest) Execute() (*MarketPluginList, *http.Response, error) {
	return r.ApiService.GetMarketPluginExecute(r)
}

/*
GetMarketPlugin Fetch the information about a plugin from the market

**Required ACL:** `plugind.market.read` Allow the administrator to view a plugins information from the market. ---

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param namespace The plugin's namespace
	@param name The plugin's name
	@return MarketAPIGetMarketPluginRequest
*/
func (a *MarketAPIService) GetMarketPlugin(ctx context.Context, namespace string, name string) MarketAPIGetMarketPluginRequest {
	return MarketAPIGetMarketPluginRequest{
		ApiService: a,
		ctx:        ctx,
		namespace:  namespace,
		name:       name,
	}
}

// Execute executes the request
//
//	@return MarketPluginList
func (a *MarketAPIService) GetMarketPluginExecute(r MarketAPIGetMarketPluginRequest) (*MarketPluginList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MarketPluginList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketAPIService.GetMarketPlugin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/market/{namespace}/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
