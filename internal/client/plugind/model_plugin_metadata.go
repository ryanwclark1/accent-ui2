/*
accent-plugind

Accent's plugin management service

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plugind

import (
	"encoding/json"
)

// checks if the PluginMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginMetadata{}

// PluginMetadata struct for PluginMetadata
type PluginMetadata struct {
	// The name of the plugin
	Name *string `json:"name,omitempty"`
	// The namespace of the plugin
	Namespace *string `json:"namespace,omitempty"`
	// The version of the installed version
	Version *string `json:"version,omitempty"`
}

// NewPluginMetadata instantiates a new PluginMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginMetadata() *PluginMetadata {
	this := PluginMetadata{}
	return &this
}

// NewPluginMetadataWithDefaults instantiates a new PluginMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginMetadataWithDefaults() *PluginMetadata {
	this := PluginMetadata{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PluginMetadata) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginMetadata) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PluginMetadata) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PluginMetadata) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *PluginMetadata) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginMetadata) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *PluginMetadata) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *PluginMetadata) SetNamespace(v string) {
	o.Namespace = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PluginMetadata) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginMetadata) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PluginMetadata) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *PluginMetadata) SetVersion(v string) {
	o.Version = &v
}

func (o PluginMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullablePluginMetadata struct {
	value *PluginMetadata
	isSet bool
}

func (v NullablePluginMetadata) Get() *PluginMetadata {
	return v.value
}

func (v *NullablePluginMetadata) Set(val *PluginMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginMetadata(val *PluginMetadata) *NullablePluginMetadata {
	return &NullablePluginMetadata{value: val, isSet: true}
}

func (v NullablePluginMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
