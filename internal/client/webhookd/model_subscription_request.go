/*
accent-webhookd

Control your webhooks from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webhookd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SubscriptionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionRequest{}

// SubscriptionRequest struct for SubscriptionRequest
type SubscriptionRequest struct {
	Config HTTPServiceConfig `json:"config"`
	Events []string          `json:"events"`
	// Only trigger webhook when an event occurs related to this user. Not compatible with all events. For more details, see: https://accentvoice.io/uc-doc/api_sdk/rest_api/webhookd/user_filter.
	EventsUserUuid *string `json:"events_user_uuid,omitempty"`
	// Only trigger webhook when an event occurs on this Accent.
	EventsAccentUuid *string `json:"events_accent_uuid,omitempty"`
	Name             string  `json:"name"`
	// Known services: http. The service may be arbitrary, but it must be bound to an installed plugin in order to be effective.
	Service string                 `json:"service"`
	Tags    map[string]interface{} `json:"tags,omitempty"`
}

type _SubscriptionRequest SubscriptionRequest

// NewSubscriptionRequest instantiates a new SubscriptionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionRequest(config HTTPServiceConfig, events []string, name string, service string) *SubscriptionRequest {
	this := SubscriptionRequest{}
	this.Config = config
	this.Events = events
	this.Name = name
	this.Service = service
	return &this
}

// NewSubscriptionRequestWithDefaults instantiates a new SubscriptionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionRequestWithDefaults() *SubscriptionRequest {
	this := SubscriptionRequest{}
	return &this
}

// GetConfig returns the Config field value
func (o *SubscriptionRequest) GetConfig() HTTPServiceConfig {
	if o == nil {
		var ret HTTPServiceConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *SubscriptionRequest) GetConfigOk() (*HTTPServiceConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *SubscriptionRequest) SetConfig(v HTTPServiceConfig) {
	o.Config = v
}

// GetEvents returns the Events field value
func (o *SubscriptionRequest) GetEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *SubscriptionRequest) GetEventsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *SubscriptionRequest) SetEvents(v []string) {
	o.Events = v
}

// GetEventsUserUuid returns the EventsUserUuid field value if set, zero value otherwise.
func (o *SubscriptionRequest) GetEventsUserUuid() string {
	if o == nil || IsNil(o.EventsUserUuid) {
		var ret string
		return ret
	}
	return *o.EventsUserUuid
}

// GetEventsUserUuidOk returns a tuple with the EventsUserUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRequest) GetEventsUserUuidOk() (*string, bool) {
	if o == nil || IsNil(o.EventsUserUuid) {
		return nil, false
	}
	return o.EventsUserUuid, true
}

// HasEventsUserUuid returns a boolean if a field has been set.
func (o *SubscriptionRequest) HasEventsUserUuid() bool {
	if o != nil && !IsNil(o.EventsUserUuid) {
		return true
	}

	return false
}

// SetEventsUserUuid gets a reference to the given string and assigns it to the EventsUserUuid field.
func (o *SubscriptionRequest) SetEventsUserUuid(v string) {
	o.EventsUserUuid = &v
}

// GetEventsAccentUuid returns the EventsAccentUuid field value if set, zero value otherwise.
func (o *SubscriptionRequest) GetEventsAccentUuid() string {
	if o == nil || IsNil(o.EventsAccentUuid) {
		var ret string
		return ret
	}
	return *o.EventsAccentUuid
}

// GetEventsAccentUuidOk returns a tuple with the EventsAccentUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRequest) GetEventsAccentUuidOk() (*string, bool) {
	if o == nil || IsNil(o.EventsAccentUuid) {
		return nil, false
	}
	return o.EventsAccentUuid, true
}

// HasEventsAccentUuid returns a boolean if a field has been set.
func (o *SubscriptionRequest) HasEventsAccentUuid() bool {
	if o != nil && !IsNil(o.EventsAccentUuid) {
		return true
	}

	return false
}

// SetEventsAccentUuid gets a reference to the given string and assigns it to the EventsAccentUuid field.
func (o *SubscriptionRequest) SetEventsAccentUuid(v string) {
	o.EventsAccentUuid = &v
}

// GetName returns the Name field value
func (o *SubscriptionRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SubscriptionRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SubscriptionRequest) SetName(v string) {
	o.Name = v
}

// GetService returns the Service field value
func (o *SubscriptionRequest) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *SubscriptionRequest) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *SubscriptionRequest) SetService(v string) {
	o.Service = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SubscriptionRequest) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRequest) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SubscriptionRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *SubscriptionRequest) SetTags(v map[string]interface{}) {
	o.Tags = v
}

func (o SubscriptionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config"] = o.Config
	toSerialize["events"] = o.Events
	if !IsNil(o.EventsUserUuid) {
		toSerialize["events_user_uuid"] = o.EventsUserUuid
	}
	if !IsNil(o.EventsAccentUuid) {
		toSerialize["events_accent_uuid"] = o.EventsAccentUuid
	}
	toSerialize["name"] = o.Name
	toSerialize["service"] = o.Service
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *SubscriptionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config",
		"events",
		"name",
		"service",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionRequest := _SubscriptionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscriptionRequest)

	if err != nil {
		return err
	}

	*o = SubscriptionRequest(varSubscriptionRequest)

	return err
}

type NullableSubscriptionRequest struct {
	value *SubscriptionRequest
	isSet bool
}

func (v NullableSubscriptionRequest) Get() *SubscriptionRequest {
	return v.value
}

func (v *NullableSubscriptionRequest) Set(val *SubscriptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionRequest(val *SubscriptionRequest) *NullableSubscriptionRequest {
	return &NullableSubscriptionRequest{value: val, isSet: true}
}

func (v NullableSubscriptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
