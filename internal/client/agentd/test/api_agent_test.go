/*
accent-agentd

Testing AgentAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package agentd

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/agentd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_agentd_AgentAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AgentAPIService AddAgentById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId int32

		httpRes, err := apiClient.AgentAPI.AddAgentById(context.Background(), agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService GetAgentById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId int32

		resp, httpRes, err := apiClient.AgentAPI.GetAgentById(context.Background(), agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService GetAgentByNumber", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentNumber string

		resp, httpRes, err := apiClient.AgentAPI.GetAgentByNumber(context.Background(), agentNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService GetUserAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentAPI.GetUserAgent(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService LoginAgentById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId int32

		httpRes, err := apiClient.AgentAPI.LoginAgentById(context.Background(), agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService LoginAgentByNumber", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentNumber string

		httpRes, err := apiClient.AgentAPI.LoginAgentByNumber(context.Background(), agentNumber).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService LoginUserAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AgentAPI.LoginUserAgent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService LogoffAgentById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId int32

		httpRes, err := apiClient.AgentAPI.LogoffAgentById(context.Background(), agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService LogoffAgentByNumber", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentNumber string

		httpRes, err := apiClient.AgentAPI.LogoffAgentByNumber(context.Background(), agentNumber).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService LogoffUserAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AgentAPI.LogoffUserAgent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService PauseAgentByNumber", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentNumber string

		httpRes, err := apiClient.AgentAPI.PauseAgentByNumber(context.Background(), agentNumber).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService PauseUserAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AgentAPI.PauseUserAgent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService RemoveAgentById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId int32

		httpRes, err := apiClient.AgentAPI.RemoveAgentById(context.Background(), agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService UnpauseAgentByNumber", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentNumber string

		httpRes, err := apiClient.AgentAPI.UnpauseAgentByNumber(context.Background(), agentNumber).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentAPIService UnpauseUserAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AgentAPI.UnpauseUserAgent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
