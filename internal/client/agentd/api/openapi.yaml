openapi: 3.0.1
info:
  contact:
    email: help@accentvoice.io
    name: Accent Team
    url: https://accentvoice.io/
  description: Agent service
  license:
    name: Proprietary
    url: https://accentvoice.io/
  title: accent-agentd
  version: "1.0"
  x-logo:
    altText: Accent Logo
    backgroundColor: '#FAFAFA'
    url: https://accentvoice.io/images/logo-black.svg
servers:
- url: http://api.accentvoice.io/1.0
- url: https://api.accentvoice.io/1.0
security:
- accent_auth_token: []
paths:
  /agents:
    get:
      description: '**Required ACL:** `agentd.agents.read`'
      operationId: get_agents
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      - description: Should the query include sub-tenants
        in: query
        name: recurse
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentStatus'
          description: A list of agent status
      summary: Get the status of all agents.
      tags:
      - agents
  /agents/by-id/{agent_id}:
    get:
      description: "**Required ACL:** `agentd.agents.by-id.{agent_id}.read`"
      operationId: get_agent_by_id
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      - description: Agent's ID
        in: path
        name: agent_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentStatus'
          description: The agent status
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent does not exist
      summary: Get agent status.
      tags:
      - agent
  /agents/by-id/{agent_id}/add:
    post:
      description: "**Required ACL:** `agentd.agents.by-id.{agent_id}.add.create`"
      operationId: add_agent_by_id
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      - description: Agent's ID
        in: path
        name: agent_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Queue'
        description: The queue to add the agent to
        required: true
      responses:
        "204":
          content: {}
          description: The operation was performed succesfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The agent and the queue are not in the same tenant
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent or queue does not exist
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent is already a member of the queue
      summary: Add agent to a queue.
      tags:
      - agent
      x-codegen-request-body-name: body
  /agents/by-id/{agent_id}/login:
    post:
      description: "**Required ACL:** `agentd.agents.by-id.{agent_id}.login.create`"
      operationId: login_agent_by_id
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      - description: Agent's ID
        in: path
        name: agent_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInfo'
        description: The extension and context on which to log the agent
        required: true
      responses:
        "204":
          content: {}
          description: The operation was performed succesfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The context and extension are not in the same tenant as the
            agent
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent or extension or context does not exist
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent is already logged or another agent is already logged
            on this extension and context
      summary: Log an agent.
      tags:
      - agent
      x-codegen-request-body-name: body
  /agents/by-id/{agent_id}/logoff:
    post:
      description: "**Required ACL:** `agentd.agents.by-id.{agent_id}.logoff.create`"
      operationId: logoff_agent_by_id
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      - description: Agent's ID
        in: path
        name: agent_id
        required: true
        schema:
          type: integer
      responses:
        "204":
          content: {}
          description: The operation was performed succesfully
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent does not exist or is not logged
      summary: Logoff an agent.
      tags:
      - agent
  /agents/by-id/{agent_id}/remove:
    post:
      description: "**Required ACL:** `agentd.agents.by-id.{agent_id}.remove.create`"
      operationId: remove_agent_by_id
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      - description: Agent's ID
        in: path
        name: agent_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Queue'
        description: The queue to remove the agent from
        required: true
      responses:
        "204":
          content: {}
          description: The operation was performed succesfully
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent or queue does not exist
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent is not a member of the queue
      summary: Remove agent from a queue.
      tags:
      - agent
      x-codegen-request-body-name: body
  /agents/by-number/{agent_number}:
    get:
      description: "**Required ACL:** `agentd.agents.by-number.{agent_number}.read`"
      operationId: get_agent_by_number
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      - description: Agent's number
        in: path
        name: agent_number
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentStatus'
          description: The agent status
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent does not exist
      summary: Get agent status.
      tags:
      - agent
  /agents/by-number/{agent_number}/login:
    post:
      description: "**Required ACL:** `agentd.agents.by-number.{agent_number}.login.create`"
      operationId: login_agent_by_number
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      - description: Agent's number
        in: path
        name: agent_number
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInfo'
        description: The extension and context on which to log the agent
        required: true
      responses:
        "204":
          content: {}
          description: The operation was performed succesfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The context and extension are not in the same tenant as the
            agent
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent or extension or context does not exist
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent is already logged or another agent is already logged
            on this extension and context
      summary: Log an agent.
      tags:
      - agent
      x-codegen-request-body-name: body
  /agents/by-number/{agent_number}/logoff:
    post:
      description: "**Required ACL:** `agentd.agents.by-number.{agent_number}.logoff.create`"
      operationId: logoff_agent_by_number
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      - description: Agent's number
        in: path
        name: agent_number
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: The operation was performed succesfully
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent does not exist or is not logged
      summary: Logoff an agent.
      tags:
      - agent
  /agents/by-number/{agent_number}/pause:
    post:
      description: "**Required ACL:** `agentd.agents.by-number.{agent_number}.pause.create`"
      operationId: pause_agent_by_number
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      - description: Agent's number
        in: path
        name: agent_number
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentPauseReason'
        description: The reason for pausing the agent
        required: false
      responses:
        "204":
          content: {}
          description: The operation was performed succesfully
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent does not exist
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent is not logged
      summary: Pause an agent.
      tags:
      - agent
      x-codegen-request-body-name: body
  /agents/by-number/{agent_number}/unpause:
    post:
      description: "**Required ACL:** `agentd.agents.by-number.{agent_number}.unpause.create`"
      operationId: unpause_agent_by_number
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      - description: Agent's number
        in: path
        name: agent_number
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: The operation was performed succesfully
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent does not exist
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent is not logged
      summary: Unpause an agent.
      tags:
      - agent
  /agents/logoff:
    post:
      description: '**Required ACL:** `agentd.agents.logoff.create`'
      operationId: logoff_agents
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: The operation was performed succesfully
      summary: Logoff all agents.
      tags:
      - agents
  /agents/relog:
    post:
      description: |-
        **Required ACL:** `agentd.agents.relog.create`

        Relog all agents which are currently logged.
      operationId: relog_agents
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: The operation was performed succesfully
      summary: Relog all agents.
      tags:
      - agents
  /status:
    get:
      description: '**Required ACL:** `agentd.status.read`'
      operationId: get_status
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusSummary'
          description: The internal status of accent-agentd
      summary: Get the status of accent-agentd.
      tags:
      - status
  /users/me/agents:
    get:
      description: '**Required ACL:** `agentd.users.me.agents.read`'
      operationId: get_user_agent
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentStatus'
          description: The agent status
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent does not exist
      summary: Get agent status of the user holding the authentication token.
      tags:
      - agent
      - user
  /users/me/agents/login:
    post:
      description: '**Required ACL:** `agentd.users.me.agents.login.create`'
      operationId: login_user_agent
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAgentLoginInfo'
        description: The line on which to log the agent
        required: true
      responses:
        "204":
          content: {}
          description: The operation was performed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The user does not own the line; or the token has no user; or
            wrong tenant; or the user has no agent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent is already logged or another agent is already logged
            on this line
      summary: Log the agent of the user holding the authentication token
      tags:
      - agent
      - user
      x-codegen-request-body-name: body
  /users/me/agents/logoff:
    post:
      description: '**Required ACL:** `agentd.users.me.agents.logoff.create`'
      operationId: logoff_user_agent
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: The operation was performed succesfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The token has no user; or wrong tenant; or the user has no
            agent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent is already logged or another agent is already logged
            on this line
      summary: Logoff the agent of the user holding the authentication token
      tags:
      - agent
      - user
  /users/me/agents/pause:
    post:
      description: '**Required ACL:** `agentd.users.me.agents.pause.create`'
      operationId: pause_user_agent
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentPauseReason'
        description: The reason for pausing the agent
        required: false
      responses:
        "204":
          content: {}
          description: The operation was performed succesfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The token has no user; or wrong tenant; or the user has no
            agent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent is already logged or another agent is already logged
            on this line
      summary: Pause the agent of the user holding the authentication token
      tags:
      - agent
      - user
      x-codegen-request-body-name: body
  /users/me/agents/unpause:
    post:
      description: '**Required ACL:** `agentd.users.me.agents.unpause.create`'
      operationId: unpause_user_agent
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: The operation was performed succesfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The token has no user; or wrong tenant; or the user has no
            agent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Agent is already logged or another agent is already logged
            on this line
      summary: Unpause the agent of the user holding the authentication token
      tags:
      - agent
      - user
components:
  parameters:
    AgentID:
      description: Agent's ID
      in: path
      name: agent_id
      required: true
      schema:
        type: integer
    AgentNumber:
      description: Agent's number
      in: path
      name: agent_number
      required: true
      schema:
        type: string
    recurse:
      description: Should the query include sub-tenants
      in: query
      name: recurse
      schema:
        default: false
        type: boolean
    tenantuuid:
      description: "The tenant's UUID, defining the ownership of a given resource."
      in: header
      name: Accent-Tenant
      schema:
        type: string
  schemas:
    AgentPauseReason:
      example:
        reason: reason
      properties:
        reason:
          description: Pause Reason
          type: string
      title: Pause reason information
      type: object
    AgentStatus:
      example:
        number: number
        extension: extension
        paused: true
        logged: true
        paused_reason: paused_reason
        tenant_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        context: context
        origin_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 0
        state_interface: state_interface
      properties:
        context:
          description: "The context on which the agent is logged, or null if the agent\
            \ is not logged"
          type: string
        extension:
          description: "The extension on which the agent is logged, or null if the\
            \ agent is not logged"
          type: string
        id:
          description: Agent's ID
          format: int32
          type: integer
        logged:
          description: "True if the agent is logged, else false"
          type: boolean
        number:
          description: Agent's number
          type: string
        origin_uuid:
          description: Accent's UUID
          format: uuid
          type: string
        paused:
          description: "True if the agent is paused, else false"
          type: boolean
        paused_reason:
          description: The reason of the agent pause
          type: string
        state_interface:
          description: The interface (e.g. SIP/alice) to determine if the agent is
            in use or not
          type: string
        tenant_uuid:
          description: Tenant's UUID
          format: uuid
          type: string
      title: Agent status
      type: object
    ComponentWithStatus:
      example:
        status: null
      properties:
        status:
          $ref: '#/components/schemas/StatusValue'
      type: object
    Error:
      example:
        error: error
      properties:
        error:
          description: Error identifier
          type: string
      title: Error
      type: object
    LoginInfo:
      example:
        extension: extension
        context: context
      properties:
        context:
          description: Context
          type: string
        extension:
          description: Extension
          type: string
      title: Login information
      type: object
    Queue:
      example:
        queue_id: 0
      properties:
        queue_id:
          description: Queue's ID
          type: integer
      title: Queue
      type: object
    StatusSummary:
      example:
        bus_consumer:
          status: null
        service_token:
          status: null
      properties:
        bus_consumer:
          $ref: '#/components/schemas/ComponentWithStatus'
        service_token:
          $ref: '#/components/schemas/ComponentWithStatus'
      type: object
    StatusValue:
      enum:
      - fail
      - ok
      type: string
    UserAgentLoginInfo:
      example:
        line_id: 0
      properties:
        line_id:
          description: ID of the line where the agent should be logged
          type: integer
      title: Login information
      type: object
  securitySchemes:
    accent_auth_token:
      in: header
      name: X-Auth-Token
      type: apiKey
x-accent-name: agentd
x-accent-port: 9493
x-original-swagger-version: "2.0"
