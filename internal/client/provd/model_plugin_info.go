/*
accent-provd

Provisioning application REST API

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provd

import (
	"encoding/json"
)

// checks if the PluginInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginInfo{}

// PluginInfo struct for PluginInfo
type PluginInfo struct {
	PluginInfo *PluginInfoObject `json:"plugin_info,omitempty"`
}

// NewPluginInfo instantiates a new PluginInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginInfo() *PluginInfo {
	this := PluginInfo{}
	return &this
}

// NewPluginInfoWithDefaults instantiates a new PluginInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginInfoWithDefaults() *PluginInfo {
	this := PluginInfo{}
	return &this
}

// GetPluginInfo returns the PluginInfo field value if set, zero value otherwise.
func (o *PluginInfo) GetPluginInfo() PluginInfoObject {
	if o == nil || IsNil(o.PluginInfo) {
		var ret PluginInfoObject
		return ret
	}
	return *o.PluginInfo
}

// GetPluginInfoOk returns a tuple with the PluginInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginInfo) GetPluginInfoOk() (*PluginInfoObject, bool) {
	if o == nil || IsNil(o.PluginInfo) {
		return nil, false
	}
	return o.PluginInfo, true
}

// HasPluginInfo returns a boolean if a field has been set.
func (o *PluginInfo) HasPluginInfo() bool {
	if o != nil && !IsNil(o.PluginInfo) {
		return true
	}

	return false
}

// SetPluginInfo gets a reference to the given PluginInfoObject and assigns it to the PluginInfo field.
func (o *PluginInfo) SetPluginInfo(v PluginInfoObject) {
	o.PluginInfo = &v
}

func (o PluginInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PluginInfo) {
		toSerialize["plugin_info"] = o.PluginInfo
	}
	return toSerialize, nil
}

type NullablePluginInfo struct {
	value *PluginInfo
	isSet bool
}

func (v NullablePluginInfo) Get() *PluginInfo {
	return v.value
}

func (v *NullablePluginInfo) Set(val *PluginInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginInfo(val *PluginInfo) *NullablePluginInfo {
	return &NullablePluginInfo{value: val, isSet: true}
}

func (v NullablePluginInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
