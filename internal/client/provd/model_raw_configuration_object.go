/*
accent-provd

Provisioning application REST API

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provd

import (
	"encoding/json"
)

// checks if the RawConfigurationObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawConfigurationObject{}

// RawConfigurationObject struct for RawConfigurationObject
type RawConfigurationObject struct {
	RawConfig map[string]interface{} `json:"raw_config,omitempty"`
}

// NewRawConfigurationObject instantiates a new RawConfigurationObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawConfigurationObject() *RawConfigurationObject {
	this := RawConfigurationObject{}
	return &this
}

// NewRawConfigurationObjectWithDefaults instantiates a new RawConfigurationObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawConfigurationObjectWithDefaults() *RawConfigurationObject {
	this := RawConfigurationObject{}
	return &this
}

// GetRawConfig returns the RawConfig field value if set, zero value otherwise.
func (o *RawConfigurationObject) GetRawConfig() map[string]interface{} {
	if o == nil || IsNil(o.RawConfig) {
		var ret map[string]interface{}
		return ret
	}
	return o.RawConfig
}

// GetRawConfigOk returns a tuple with the RawConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawConfigurationObject) GetRawConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.RawConfig) {
		return map[string]interface{}{}, false
	}
	return o.RawConfig, true
}

// HasRawConfig returns a boolean if a field has been set.
func (o *RawConfigurationObject) HasRawConfig() bool {
	if o != nil && !IsNil(o.RawConfig) {
		return true
	}

	return false
}

// SetRawConfig gets a reference to the given map[string]interface{} and assigns it to the RawConfig field.
func (o *RawConfigurationObject) SetRawConfig(v map[string]interface{}) {
	o.RawConfig = v
}

func (o RawConfigurationObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawConfigurationObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RawConfig) {
		toSerialize["raw_config"] = o.RawConfig
	}
	return toSerialize, nil
}

type NullableRawConfigurationObject struct {
	value *RawConfigurationObject
	isSet bool
}

func (v NullableRawConfigurationObject) Get() *RawConfigurationObject {
	return v.value
}

func (v *NullableRawConfigurationObject) Set(val *RawConfigurationObject) {
	v.value = val
	v.isSet = true
}

func (v NullableRawConfigurationObject) IsSet() bool {
	return v.isSet
}

func (v *NullableRawConfigurationObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawConfigurationObject(val *RawConfigurationObject) *NullableRawConfigurationObject {
	return &NullableRawConfigurationObject{value: val, isSet: true}
}

func (v NullableRawConfigurationObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawConfigurationObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
