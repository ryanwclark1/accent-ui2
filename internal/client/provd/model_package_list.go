/*
accent-provd

Provisioning application REST API

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provd

import (
	"encoding/json"
)

// checks if the PackageList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageList{}

// PackageList struct for PackageList
type PackageList struct {
	Pkgs *map[string]Package `json:"pkgs,omitempty"`
}

// NewPackageList instantiates a new PackageList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageList() *PackageList {
	this := PackageList{}
	return &this
}

// NewPackageListWithDefaults instantiates a new PackageList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageListWithDefaults() *PackageList {
	this := PackageList{}
	return &this
}

// GetPkgs returns the Pkgs field value if set, zero value otherwise.
func (o *PackageList) GetPkgs() map[string]Package {
	if o == nil || IsNil(o.Pkgs) {
		var ret map[string]Package
		return ret
	}
	return *o.Pkgs
}

// GetPkgsOk returns a tuple with the Pkgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageList) GetPkgsOk() (*map[string]Package, bool) {
	if o == nil || IsNil(o.Pkgs) {
		return nil, false
	}
	return o.Pkgs, true
}

// HasPkgs returns a boolean if a field has been set.
func (o *PackageList) HasPkgs() bool {
	if o != nil && !IsNil(o.Pkgs) {
		return true
	}

	return false
}

// SetPkgs gets a reference to the given map[string]Package and assigns it to the Pkgs field.
func (o *PackageList) SetPkgs(v map[string]Package) {
	o.Pkgs = &v
}

func (o PackageList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pkgs) {
		toSerialize["pkgs"] = o.Pkgs
	}
	return toSerialize, nil
}

type NullablePackageList struct {
	value *PackageList
	isSet bool
}

func (v NullablePackageList) Get() *PackageList {
	return v.value
}

func (v *NullablePackageList) Set(val *PackageList) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageList) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageList(val *PackageList) *NullablePackageList {
	return &NullablePackageList{value: val, isSet: true}
}

func (v NullablePackageList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
