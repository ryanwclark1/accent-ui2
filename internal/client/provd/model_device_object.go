/*
accent-provd

Provisioning application REST API

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provd

import (
	"encoding/json"
)

// checks if the DeviceObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceObject{}

// DeviceObject A device object
type DeviceObject struct {
	Device *Device `json:"device,omitempty"`
}

// NewDeviceObject instantiates a new DeviceObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceObject() *DeviceObject {
	this := DeviceObject{}
	return &this
}

// NewDeviceObjectWithDefaults instantiates a new DeviceObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceObjectWithDefaults() *DeviceObject {
	this := DeviceObject{}
	return &this
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *DeviceObject) GetDevice() Device {
	if o == nil || IsNil(o.Device) {
		var ret Device
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceObject) GetDeviceOk() (*Device, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *DeviceObject) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given Device and assigns it to the Device field.
func (o *DeviceObject) SetDevice(v Device) {
	o.Device = &v
}

func (o DeviceObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	return toSerialize, nil
}

type NullableDeviceObject struct {
	value *DeviceObject
	isSet bool
}

func (v NullableDeviceObject) Get() *DeviceObject {
	return v.value
}

func (v *NullableDeviceObject) Set(val *DeviceObject) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceObject) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceObject(val *DeviceObject) *NullableDeviceObject {
	return &NullableDeviceObject{value: val, isSet: true}
}

func (v NullableDeviceObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
