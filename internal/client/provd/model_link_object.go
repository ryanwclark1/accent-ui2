/*
accent-provd

Provisioning application REST API

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provd

import (
	"encoding/json"
)

// checks if the LinkObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkObject{}

// LinkObject Link Object
type LinkObject struct {
	// Location of the resource
	Href *string `json:"href,omitempty"`
	// Relation to the resource
	Rel *string `json:"rel,omitempty"`
}

// NewLinkObject instantiates a new LinkObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkObject() *LinkObject {
	this := LinkObject{}
	return &this
}

// NewLinkObjectWithDefaults instantiates a new LinkObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkObjectWithDefaults() *LinkObject {
	this := LinkObject{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *LinkObject) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkObject) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *LinkObject) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *LinkObject) SetHref(v string) {
	o.Href = &v
}

// GetRel returns the Rel field value if set, zero value otherwise.
func (o *LinkObject) GetRel() string {
	if o == nil || IsNil(o.Rel) {
		var ret string
		return ret
	}
	return *o.Rel
}

// GetRelOk returns a tuple with the Rel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkObject) GetRelOk() (*string, bool) {
	if o == nil || IsNil(o.Rel) {
		return nil, false
	}
	return o.Rel, true
}

// HasRel returns a boolean if a field has been set.
func (o *LinkObject) HasRel() bool {
	if o != nil && !IsNil(o.Rel) {
		return true
	}

	return false
}

// SetRel gets a reference to the given string and assigns it to the Rel field.
func (o *LinkObject) SetRel(v string) {
	o.Rel = &v
}

func (o LinkObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Rel) {
		toSerialize["rel"] = o.Rel
	}
	return toSerialize, nil
}

type NullableLinkObject struct {
	value *LinkObject
	isSet bool
}

func (v NullableLinkObject) Get() *LinkObject {
	return v.value
}

func (v *NullableLinkObject) Set(val *LinkObject) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkObject) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkObject(val *LinkObject) *NullableLinkObject {
	return &NullableLinkObject{value: val, isSet: true}
}

func (v NullableLinkObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
