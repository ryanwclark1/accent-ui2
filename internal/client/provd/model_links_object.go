/*
accent-provd

Provisioning application REST API

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provd

import (
	"encoding/json"
)

// checks if the LinksObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinksObject{}

// LinksObject Links object
type LinksObject struct {
	// Links to different resources
	Links []LinkObject `json:"links,omitempty"`
}

// NewLinksObject instantiates a new LinksObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinksObject() *LinksObject {
	this := LinksObject{}
	return &this
}

// NewLinksObjectWithDefaults instantiates a new LinksObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinksObjectWithDefaults() *LinksObject {
	this := LinksObject{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *LinksObject) GetLinks() []LinkObject {
	if o == nil || IsNil(o.Links) {
		var ret []LinkObject
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinksObject) GetLinksOk() ([]LinkObject, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *LinksObject) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []LinkObject and assigns it to the Links field.
func (o *LinksObject) SetLinks(v []LinkObject) {
	o.Links = v
}

func (o LinksObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinksObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableLinksObject struct {
	value *LinksObject
	isSet bool
}

func (v NullableLinksObject) Get() *LinksObject {
	return v.value
}

func (v *NullableLinksObject) Set(val *LinksObject) {
	v.value = val
	v.isSet = true
}

func (v NullableLinksObject) IsSet() bool {
	return v.isSet
}

func (v *NullableLinksObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinksObject(val *LinksObject) *NullableLinksObject {
	return &NullableLinksObject{value: val, isSet: true}
}

func (v NullableLinksObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinksObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
