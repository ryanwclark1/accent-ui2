/*
accent-provd

Provisioning application REST API

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provd

import (
	"encoding/json"
)

// checks if the DevicesList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevicesList{}

// DevicesList A list of devices
type DevicesList struct {
	Devices []Device `json:"devices,omitempty"`
}

// NewDevicesList instantiates a new DevicesList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicesList() *DevicesList {
	this := DevicesList{}
	return &this
}

// NewDevicesListWithDefaults instantiates a new DevicesList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicesListWithDefaults() *DevicesList {
	this := DevicesList{}
	return &this
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *DevicesList) GetDevices() []Device {
	if o == nil || IsNil(o.Devices) {
		var ret []Device
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesList) GetDevicesOk() ([]Device, bool) {
	if o == nil || IsNil(o.Devices) {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *DevicesList) HasDevices() bool {
	if o != nil && !IsNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []Device and assigns it to the Devices field.
func (o *DevicesList) SetDevices(v []Device) {
	o.Devices = v
}

func (o DevicesList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevicesList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	return toSerialize, nil
}

type NullableDevicesList struct {
	value *DevicesList
	isSet bool
}

func (v NullableDevicesList) Get() *DevicesList {
	return v.value
}

func (v *NullableDevicesList) Set(val *DevicesList) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicesList) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicesList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicesList(val *DevicesList) *NullableDevicesList {
	return &NullableDevicesList{value: val, isSet: true}
}

func (v NullableDevicesList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicesList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
