/*
accent-provd

Provisioning application REST API

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provd

import (
	"encoding/json"
)

// checks if the DHCPInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DHCPInfo{}

// DHCPInfo struct for DHCPInfo
type DHCPInfo struct {
	// The IP address of the device
	Ip *string `json:"ip,omitempty"`
	// The MAC address of the device
	Mac *string `json:"mac,omitempty"`
	// The operation to perform
	Op      *string  `json:"op,omitempty"`
	Options []string `json:"options,omitempty"`
}

// NewDHCPInfo instantiates a new DHCPInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDHCPInfo() *DHCPInfo {
	this := DHCPInfo{}
	return &this
}

// NewDHCPInfoWithDefaults instantiates a new DHCPInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDHCPInfoWithDefaults() *DHCPInfo {
	this := DHCPInfo{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *DHCPInfo) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCPInfo) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *DHCPInfo) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *DHCPInfo) SetIp(v string) {
	o.Ip = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *DHCPInfo) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCPInfo) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *DHCPInfo) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *DHCPInfo) SetMac(v string) {
	o.Mac = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *DHCPInfo) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCPInfo) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *DHCPInfo) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *DHCPInfo) SetOp(v string) {
	o.Op = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *DHCPInfo) GetOptions() []string {
	if o == nil || IsNil(o.Options) {
		var ret []string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCPInfo) GetOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *DHCPInfo) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *DHCPInfo) SetOptions(v []string) {
	o.Options = v
}

func (o DHCPInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DHCPInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableDHCPInfo struct {
	value *DHCPInfo
	isSet bool
}

func (v NullableDHCPInfo) Get() *DHCPInfo {
	return v.value
}

func (v *NullableDHCPInfo) Set(val *DHCPInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDHCPInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDHCPInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDHCPInfo(val *DHCPInfo) *NullableDHCPInfo {
	return &NullableDHCPInfo{value: val, isSet: true}
}

func (v NullableDHCPInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDHCPInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
