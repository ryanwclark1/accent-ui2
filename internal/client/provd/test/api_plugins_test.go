/*
accent-provd

Testing PluginsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package provd

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/provd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_provd_PluginsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PluginsAPIService DeletePgMgrInstall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var operationId string

		httpRes, err := apiClient.PluginsAPI.DeletePgMgrInstall(context.Background(), operationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService DeletePgMgrInstallMonitor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var pluginId string
		var operationId string

		httpRes, err := apiClient.PluginsAPI.DeletePgMgrInstallMonitor(context.Background(), pluginId, operationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService DeletePgMgrMonitor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var operationId string

		httpRes, err := apiClient.PluginsAPI.DeletePgMgrMonitor(context.Background(), operationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService DeletePgMgrPluginUpgradeMonitor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var pluginId string
		var operationId string

		httpRes, err := apiClient.PluginsAPI.DeletePgMgrPluginUpgradeMonitor(context.Background(), pluginId, operationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService DeletePgMgrUpgradeMonitor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var operationId string

		httpRes, err := apiClient.PluginsAPI.DeletePgMgrUpgradeMonitor(context.Background(), operationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgr", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgr(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgrInstall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgrInstall(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgrInstallStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var operationId string

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgrInstallStatus(context.Background(), operationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgrInstallable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgrInstallable(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgrInstallableList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var pluginId string

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgrInstallableList(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgrInstalled", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgrInstalled(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgrInstalledList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var pluginId string

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgrInstalledList(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgrPlugin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var pluginId string

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgrPlugin(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgrPluginInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var pluginId string

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgrPluginInfo(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgrPluginInstall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var pluginId string

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgrPluginInstall(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgrPluginInstallStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var pluginId string
		var operationId string

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgrPluginInstallStatus(context.Background(), pluginId, operationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgrPluginUpgradeStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var pluginId string
		var operationId string

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgrPluginUpgradeStatus(context.Background(), pluginId, operationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgrPlugins", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgrPlugins(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgrUpdateStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var operationId string

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgrUpdateStatus(context.Background(), operationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPgMgrUpgradeStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var operationId string

		resp, httpRes, err := apiClient.PluginsAPI.GetPgMgrUpgradeStatus(context.Background(), operationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService PostPgMgrInstallPlugin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PluginsAPI.PostPgMgrInstallPlugin(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService PostPgMgrPluginInstallPlugin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var pluginId string

		httpRes, err := apiClient.PluginsAPI.PostPgMgrPluginInstallPlugin(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService PostPgMgrPluginUninstallPlugin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var pluginId string

		httpRes, err := apiClient.PluginsAPI.PostPgMgrPluginUninstallPlugin(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService PostPgMgrReload", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PluginsAPI.PostPgMgrReload(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService PostPgMgrUninstallPlugin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PluginsAPI.PostPgMgrUninstallPlugin(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService PostPgMgrUpdateList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PluginsAPI.PostPgMgrUpdateList(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService PostPgMgrUpgradePlugin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PluginsAPI.PostPgMgrUpgradePlugin(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
