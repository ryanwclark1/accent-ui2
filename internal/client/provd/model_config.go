/*
accent-provd

Provisioning application REST API

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provd

import (
	"encoding/json"
)

// checks if the Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Config{}

// Config A complete configuration
type Config struct {
	Deletable *bool `json:"deletable,omitempty"`
	// The unique configuration id
	Id        *string                 `json:"id,omitempty"`
	ParentIds []string                `json:"parent_ids,omitempty"`
	RawConfig *RawConfigurationObject `json:"raw_config,omitempty"`
}

// NewConfig instantiates a new Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfig() *Config {
	this := Config{}
	return &this
}

// NewConfigWithDefaults instantiates a new Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigWithDefaults() *Config {
	this := Config{}
	return &this
}

// GetDeletable returns the Deletable field value if set, zero value otherwise.
func (o *Config) GetDeletable() bool {
	if o == nil || IsNil(o.Deletable) {
		var ret bool
		return ret
	}
	return *o.Deletable
}

// GetDeletableOk returns a tuple with the Deletable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetDeletableOk() (*bool, bool) {
	if o == nil || IsNil(o.Deletable) {
		return nil, false
	}
	return o.Deletable, true
}

// HasDeletable returns a boolean if a field has been set.
func (o *Config) HasDeletable() bool {
	if o != nil && !IsNil(o.Deletable) {
		return true
	}

	return false
}

// SetDeletable gets a reference to the given bool and assigns it to the Deletable field.
func (o *Config) SetDeletable(v bool) {
	o.Deletable = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Config) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Config) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Config) SetId(v string) {
	o.Id = &v
}

// GetParentIds returns the ParentIds field value if set, zero value otherwise.
func (o *Config) GetParentIds() []string {
	if o == nil || IsNil(o.ParentIds) {
		var ret []string
		return ret
	}
	return o.ParentIds
}

// GetParentIdsOk returns a tuple with the ParentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetParentIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ParentIds) {
		return nil, false
	}
	return o.ParentIds, true
}

// HasParentIds returns a boolean if a field has been set.
func (o *Config) HasParentIds() bool {
	if o != nil && !IsNil(o.ParentIds) {
		return true
	}

	return false
}

// SetParentIds gets a reference to the given []string and assigns it to the ParentIds field.
func (o *Config) SetParentIds(v []string) {
	o.ParentIds = v
}

// GetRawConfig returns the RawConfig field value if set, zero value otherwise.
func (o *Config) GetRawConfig() RawConfigurationObject {
	if o == nil || IsNil(o.RawConfig) {
		var ret RawConfigurationObject
		return ret
	}
	return *o.RawConfig
}

// GetRawConfigOk returns a tuple with the RawConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetRawConfigOk() (*RawConfigurationObject, bool) {
	if o == nil || IsNil(o.RawConfig) {
		return nil, false
	}
	return o.RawConfig, true
}

// HasRawConfig returns a boolean if a field has been set.
func (o *Config) HasRawConfig() bool {
	if o != nil && !IsNil(o.RawConfig) {
		return true
	}

	return false
}

// SetRawConfig gets a reference to the given RawConfigurationObject and assigns it to the RawConfig field.
func (o *Config) SetRawConfig(v RawConfigurationObject) {
	o.RawConfig = &v
}

func (o Config) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Deletable) {
		toSerialize["deletable"] = o.Deletable
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ParentIds) {
		toSerialize["parent_ids"] = o.ParentIds
	}
	if !IsNil(o.RawConfig) {
		toSerialize["raw_config"] = o.RawConfig
	}
	return toSerialize, nil
}

type NullableConfig struct {
	value *Config
	isSet bool
}

func (v NullableConfig) Get() *Config {
	return v.value
}

func (v *NullableConfig) Set(val *Config) {
	v.value = val
	v.isSet = true
}

func (v NullableConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfig(val *Config) *NullableConfig {
	return &NullableConfig{value: val, isSet: true}
}

func (v NullableConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
