/*
accent-amid

Send AMI actions to Asterisk, providing token based authentication.

API version: 0.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amid

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type ActionAPI interface {

	/*
		ActionAsteriskManager AMI action

		**Required ACL:** `amid.action.{action}.create`
	The Action endpoint sends an action to the Asterisk Manager.
	See https://wiki.asterisk.org/wiki/display/AST/Asterisk+14+AMI+Actions for more details about the AMI message parameters.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param action Name of the manager action. Currently not supported: Queues, Command.
		@return ActionAPIActionAsteriskManagerRequest
	*/
	ActionAsteriskManager(ctx context.Context, action string) ActionAPIActionAsteriskManagerRequest

	// ActionAsteriskManagerExecute executes the request
	//  @return Response
	ActionAsteriskManagerExecute(r ActionAPIActionAsteriskManagerRequest) (*Response, *http.Response, error)
}

// ActionAPIService ActionAPI service
type ActionAPIService service

type ActionAPIActionAsteriskManagerRequest struct {
	ctx             context.Context
	ApiService      ActionAPI
	action          string
	actionArguments *map[string]interface{}
}

// Arguments for the manager action. Action: taken from the URL ActionID: not necessary If you need a same key multiple times, give a list of values. For Action: Originate, you should always use Async: True
func (r ActionAPIActionAsteriskManagerRequest) ActionArguments(actionArguments map[string]interface{}) ActionAPIActionAsteriskManagerRequest {
	r.actionArguments = &actionArguments
	return r
}

func (r ActionAPIActionAsteriskManagerRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.ActionAsteriskManagerExecute(r)
}

/*
ActionAsteriskManager AMI action

**Required ACL:** `amid.action.{action}.create`
The Action endpoint sends an action to the Asterisk Manager.
See https://wiki.asterisk.org/wiki/display/AST/Asterisk+14+AMI+Actions for more details about the AMI message parameters.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param action Name of the manager action. Currently not supported: Queues, Command.
	@return ActionAPIActionAsteriskManagerRequest
*/
func (a *ActionAPIService) ActionAsteriskManager(ctx context.Context, action string) ActionAPIActionAsteriskManagerRequest {
	return ActionAPIActionAsteriskManagerRequest{
		ApiService: a,
		ctx:        ctx,
		action:     action,
	}
}

// Execute executes the request
//
//	@return Response
func (a *ActionAPIService) ActionAsteriskManagerExecute(r ActionAPIActionAsteriskManagerRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActionAPIService.ActionAsteriskManager")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/action/{action}"
	localVarPath = strings.Replace(localVarPath, "{"+"action"+"}", url.PathEscape(parameterValueToString(r.action, "action")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.actionArguments
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
