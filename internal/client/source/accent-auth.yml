host: api.accentvoice.io
basePath: /0.1
consumes:
- application/json
definitions:
  APIError:
    properties:
      details:
        type: object
      message:
        type: string
      resource:
        type: string
      timestamp:
        type: number
    type: object
  AdminUserEmailList:
    properties:
      emails:
        items:
          properties:
            address:
              type: string
            confirmed:
              type: boolean
            main:
              type: boolean
          required:
          - addresses
          - main
          type: object
        type: array
    type: object
  BackendList:
    properties:
      data:
        items:
          type: string
        type: array
    type: object
  ConfigPatchItem:
    properties:
      op:
        description: 'Patch operation. Supported operations: `replace`.'
        type: string
      path:
        description: 'JSON path to operate on. Supported paths: `/debug`.'
        type: string
      value:
        description: The new value for the operation. Type of value is dependent of
          `path`
        type: object
  Error:
    properties:
      reason:
        items:
          type: string
        type: array
      status_code:
        type: integer
      timestamp:
        items:
          type: string
        type: array
    type: object
  ExternalAuth:
    properties:
      data:
        type: object
      enabled:
        type: boolean
      plugin_info:
        type: object
      type:
        description: The external auth type name
        type: string
    type: object
  ExternalAuthList:
    properties:
      filtered:
        description: The number of external auth matching the searched term.
        type: integer
      items:
        description: A paginated list of external auth
        items:
          $ref: '#/definitions/ExternalAuth'
        type: array
      total:
        description: The number of external auth.
        type: integer
    required:
    - filtered
    - total
    - items
    type: object
  ExternalAuthUser:
    properties:
      uuid:
        format: uuid
        type: string
    type: object
  ExternalAuthUserList:
    properties:
      filtered:
        description: The number of external auth matching the searched term.
        example: 3
        type: integer
      items:
        description: A paginated list of connected external auth users
        example:
        - user_uuid: 210ef281-4201-4f95-952f-5f8d5211e085
        - user_uuid: 28e6f253-a19d-458d-8b52-2ba6feb788bc
        - user_uuid: e72fe53d-3981-4c51-a488-e06ca94fcbb1
        items:
          $ref: '#/definitions/ExternalAuthUser'
        type: array
      total:
        description: The number of connected external auth users.
        example: 3
        type: integer
    required:
    - filtered
    - total
    - items
    type: object
  ExternalConfig:
    properties:
      client_id:
        description: 'Client ID for the given authentication type.

          Required only for `google` and `microsoft` authentication types.

          '
        example: a-client-id
        type: string
      client_secret:
        description: 'Client secret for the given authentication type.

          Required only for `google` and `microsoft` authentication types.

          '
        example: a-client-secret
        type: string
      fcm_api_key:
        description: The API key to use for Firebase Cloud Messaging
        type: string
      ios_apn_certificate:
        description: Public certificate to use for Apple Push Notification Service
        type: string
      ios_apn_private:
        description: Private key to use for Apple Push Notification Service
        type: boolean
      use_sandbox:
        description: Whether to use sandbox for Apple Push Notification Service
        type: boolean
    type: object
  GetGroupsResult:
    properties:
      filtered:
        description: The number of groups matching the searched term.
        type: integer
      items:
        description: A paginated list of groups
        items:
          $ref: '#/definitions/GroupResult'
        type: array
      total:
        description: The number of groups.
        type: integer
    required:
    - filtered
    - total
    - items
    type: object
  GetPoliciesResult:
    properties:
      items:
        description: A paginated list of policies
        items:
          $ref: '#/definitions/PolicyResult'
        type: array
      total:
        description: The number of policies matching the searched term
        type: integer
    required:
    - total
    - items
    type: object
  GetSessionsResult:
    properties:
      filtered:
        description: The number of sessions matching the searched term.
        type: integer
      items:
        description: A paginated list of sessions
        items:
          $ref: '#/definitions/SessionResult'
        type: array
      total:
        description: The number of sessions.
        type: integer
    required:
    - filtered
    - total
    - items
    type: object
  Group:
    properties:
      name:
        type: string
      slug:
        default: <name>
        type: string
    required:
    - name
    type: object
  GroupPut:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  GroupResult:
    properties:
      name:
        type: string
      read_only:
        type: boolean
      slug:
        type: string
      system_managed:
        description: '*Deprecated* Please use `read_only`'
        type: boolean
      tenant_uuid:
        type: string
      uuid:
        type: string
    type: object
  LDAPBackendConfig:
    properties:
      bind_dn:
        description: 'The DN to use to bind the `accent-auth` service to the LDAP server.
          If

          unspecified, `accent-auth` will not bind with a service user but only with
          the

          final user account. For this to work though, your users will need to have
          the

          right to read their own information, particularly their email address.

          '
        example: CN=accent-auth,DC=accent-voice,DC=org
        type: string
      host:
        description: 'The host or IP address of the LDAP server.
          '
        type: string
      port:
        description: The port on which to connect to the LDAP server.
        example: 389
        type: integer
      protocol_security:
        default: ''
        description: The layer of security to use for the connection.
        enum:
        - ''
        - tls
        - ldaps
        type: string
      protocol_version:
        default: 3
        description: LDAP protocol version to use
        maximum: 3
        minimum: 2
        type: integer
      search_filters:
        description: 'Filters for finding a user DN given a service bind is used.
          Available variables are `username`, `user_login_attribute` and
          `user_email_attribute`. These variables come from the fields of the same name from the API.
          '
        example: '{user_login_attribute}={username}'
        type: string
      tenant_uuid:
        readOnly: true
        type: string
      user_base_dn:
        description: The base DN in which users are located
        example: OU=people,DC=accent-voice,DC=org
        type: string
      user_email_attribute:
        description: The attribute of the email address in the LDAP schema.
        example: mail
        type: string
      user_login_attribute:
        description: 'The attribute that identifies users. It will be prepended to the
          `user_base_dn`.
          '
        example: uid
        type: string
    required:
    - host
    - port
    - user_base_dn
    - user_login_attribute
    - user_email_attribute
    type: object
  LDAPBackendConfigEdit:
    allOf:
    - $ref: '#/definitions/LDAPBackendConfig'
    - properties:
        bind_password:
          description: 'The password to use to bind the `accent-auth` service to the
            LDAP server.
            '
          type: string
      type: object
  PasswordChange:
    properties:
      new_password:
        description: The desired password
        type: string
      old_password:
        description: The old password
        type: string
    required:
    - old_password
    - new_password
    type: object
  Policy:
    properties:
      acl:
        items:
          type: string
        type: array
      description:
        type: string
      name:
        type: string
      shared:
        description: 'Should be shared to sub-tenants or not. Cannot be changed after
          creation

          When shared is `true`, then all tenants below this policy''s tenant

          will see it as their own policy with the attribute `read_only: true`.


          Using `shared` attribute will add uniqueness constraints for the slug

          among all policies'' sub-tenants.
          '
        type: boolean
      slug:
        description: A unique, human readable identifier for this policy
        type: string
    required:
    - name
    type: object
  PolicyResult:
    allOf:
    - $ref: '#/definitions/Policy'
    - properties:
        read_only:
          type: boolean
        uuid:
          type: string
    type: object
  PostPasswordReset:
    properties:
      password:
        description: The desired password
        type: string
    required:
    - password
    type: object
  RefreshToken:
    properties:
      client_id:
        description: The `client_id` that was used to create this refresh token
        type: string
      created_at:
        description: The time at which this token was created
        type: string
      mobile:
        description: Indicate if that refresh token was created with a mobile session
          type
        type: boolean
      tenant_uuid:
        description: The tenant UUID of the user which created this refresh token
        type: string
      user_uuid:
        description: The UUID of the user which created this refresh token
        type: string
    type: object
  RefreshTokenList:
    properties:
      filtered:
        description: The number of refresh token matching the searched terms
        type: integer
      items:
        description: A paginated list of refresh tokens
        items:
          $ref: '#/definitions/RefreshToken'
        type: array
      total:
        description: The number of refresh tokens for that user
        type: integer
    type: object
  ScopeCheckRequest:
    properties:
      scopes:
        description: Scopes to check against
        items:
          type: string
        type: array
      tenant_uuid:
        description: If provided, also checks the token against this tenant
        format: uuid
        type: string
    required:
    - scopes
    type: object
  ScopeList:
    properties:
      scopes:
        description: the scopes and their check result
        items:
          description: 'JSON object with scopes as keys and boolean values whether
            the token is valid for the given scope, e.g. `{"confd.groups.create":
            true}`'
          type: object
        type: array
    type: object
  SessionResult:
    properties:
      mobile:
        type: boolean
      tenant_uuid:
        type: string
      user_uuid:
        type: string
      uuid:
        type: string
    type: object
  TenantAddress:
    properties:
      city:
        type: string
      country:
        type: string
      line_1:
        description: The first line of the address
        type: string
      line_2:
        description: The second line of the address
        type: string
      state:
        type: string
      zip_code:
        type: string
    type: object
  TenantCreate:
    properties:
      address:
        $ref: '#/definitions/TenantAddress'
      contact:
        description: The contact user's UUID
        type: string
      domain_names:
        description: A list containing human readeable unique domain names, associated
          with a specific tenant
        items:
          type: string
        type: array
        uniqueItems: true
      name:
        description: The tenant's name
        type: string
      phone:
        description: The tenant's contact phone number
        type: string
      slug:
        description: A unique, human readeable identifier for this tenant. This field
          cannot be modified and will be auto-generated if missing.
        type: string
      uuid:
        description: The tenant's UUID
        type: string
    type: object
  TenantEdit:
    properties:
      address:
        $ref: '#/definitions/TenantAddress'
      contact:
        description: The contact user's UUID
        type: string
      domain_names:
        description: A list containing human readeable unique domain names, associated
          with a specific tenant
        items:
          type: string
        type: array
        uniqueItems: true
      name:
        description: The tenant's name
        type: string
      phone:
        description: The tenant's contact phone number
        type: string
    type: object
  TenantList:
    properties:
      filtered:
        description: The number of tenants matching the searched term
        type: integer
      items:
        description: A paginated list of tenants
        items:
          $ref: '#/definitions/TenantResult'
        type: array
      total:
        description: The number of tenants
        type: integer
    type: object
  TenantPostResponse:
    properties:
      name:
        type: string
      parent_uuid:
        type: string
      uuid:
        type: string
    type: object
  TenantResult:
    properties:
      address:
        $ref: '#/definitions/TenantAddress'
      contact:
        description: The contact user's UUID
        type: string
      domain_names:
        description: A list containing human readable unique domain names, associated
          with a specific tenant
        items:
          type: string
        type: array
        uniqueItems: true
      name:
        type: string
      phone:
        description: The tenant's contact phone number
        type: string
      slug:
        description: A unique, human readeable identifier for this tenant
        type: string
      uuid:
        type: string
    type: object
  Token:
    properties:
      data:
        properties:
          acl:
            description: The list of allowed accesses for this token
            items:
              type: string
            type: array
          auth_id:
            description: The unique identifier retrieved from the backend
            type: string
          expires_at:
            type: string
          issued_at:
            type: string
          metadata:
            description: Information owned by accent-auth about this user
            type: object
          session_uuid:
            type: string
          token:
            type: string
          utc_expires_at:
            type: string
          utc_issued_at:
            type: string
          accent_user_uuid:
            description: 'The UUID of the matching accent-confd user if there is one.
              This field can be null.

              This field should NOT be used anymore, the "pbx_user_uuid" in the

              metadata field is the prefered method to access this information.
              '
            type: string
          accent_uuid:
            type: string
        type: object
    type: object
  UserCreate:
    properties:
      email_address:
        description: The main email address of the new username
        type: string
      enabled:
        type: boolean
      firstname:
        description: The user's firstname
        type: string
      lastname:
        description: The user's lastname
        type: string
      password:
        description: The password of the newly created username
        type: string
      purpose:
        default: user
        enum:
        - user
        - internal
        - external_api
        type: string
      username:
        description: The username that will identify that new username
        type: string
      uuid:
        description: The user's UUID
        type: string
    type: object
  UserEdit:
    properties:
      enabled:
        type: boolean
      firstname:
        description: The user's firstname
        type: string
      lastname:
        description: The user's lastname
        type: string
      purpose:
        default: user
        enum:
        - user
        - internal
        - external_api
        type: string
      username:
        description: The username that will identify that new username
        type: string
    type: object
  UserEmail:
    properties:
      address:
        type: string
      confirmed:
        type: boolean
      main:
        type: boolean
    type: object
  UserEmailList:
    properties:
      emails:
        items:
          properties:
            address:
              type: string
            main:
              type: boolean
          required:
          - addresses
          - main
          type: object
        type: array
    type: object
  UserList:
    properties:
      filtered:
        description: The number of users matching the searched term
        type: integer
      items:
        description: A paginated list of users
        items:
          $ref: '#/definitions/UserResult'
        type: array
      total:
        description: The number of users
        type: integer
    type: object
  UserPostResponse:
    properties:
      emails:
        items:
          $ref: '#/definitions/UserEmail'
        type: array
      purpose:
        enum:
        - user
        - internal
        - external_api
        type: string
      username:
        type: string
      uuid:
        type: string
    type: object
  UserRegister:
    properties:
      email_address:
        description: The main email address of the new username
        type: string
      firstname:
        description: The user's firstname
        type: string
      lastname:
        description: The user's lastname
        type: string
      password:
        description: The password of the newly created username
        type: string
      username:
        description: The username that will identify that new username
        type: string
    required:
    - username
    - password
    - email_address
    type: object
  UserResult:
    properties:
      emails:
        items:
          $ref: '#/definitions/UserEmail'
        type: array
      enabled:
        type: boolean
      firstname:
        type: string
      lastname:
        type: string
      purpose:
        enum:
        - user
        - internal
        - external_api
        type: string
      tenant_uuid:
        type: string
      username:
        type: string
      uuid:
        type: string
    type: object
info:
  contact:
    email: help@accentvoice.io
    name: Accent Team
    url: https://accentvoice.io/
  description: Accent's authentication service
  license:
    name: Proprietary
    url: https://accentvoice.io/
  title: accent-auth
  version: '0.1'
  x-logo:
    altText: Accent Logo
    backgroundColor: '#FAFAFA'
    url: https://accentvoice.io/images/logo-black.svg
parameters:
  ConfigPatch:
    description: See https://en.wikipedia.org/wiki/JSON_Patch.
    in: body
    name: ConfigPatch
    required: true
    schema:
      items:
        $ref: '#/definitions/ConfigPatchItem'
      type: array
  access:
    description: The access to add
    in: path
    name: access
    required: true
    type: string
  auth_type:
    description: External auth type name
    in: path
    name: auth_type
    required: true
    type: string
  client_id:
    description: The client_id of the refresh token to revoke
    in: path
    name: client_id
    required: true
    type: string
  direction:
    description: Sort list of items in 'asc' (ascending) or 'desc' (descending) order
    enum:
    - asc
    - desc
    in: query
    name: direction
    required: false
    type: string
  email_confirm_token:
    description: The UUID of the token used to confirm the email address
    in: query
    name: token
    required: true
    type: string
  email_uuid:
    description: The UUID of the email
    in: path
    name: email_uuid
    required: true
    type: string
  group_uuid:
    description: The UUID of the group
    in: path
    name: group_uuid
    required: true
    type: string
  has_policy_slug:
    description: The slug of the policy that the user must have. This includes indirect
      associations (user in group has policy).
    in: query
    name: has_policy_slug
    type: string
  has_policy_uuid:
    description: The UUID of the policy that the user must have. This includes indirect
      associations (user in group has policy).
    in: query
    name: has_policy_uuid
    type: string
  limit:
    description: The limit defines the number of individual objects that are returned
    in: query
    name: limit
    required: false
    type: integer
  offset:
    default: 0
    description: The offset defines the offsets the start by the number specified
    in: query
    name: offset
    required: false
    type: integer
  order:
    description: Name of the field to use for sorting the list of items returned.
    in: query
    name: order
    required: false
    type: string
  policy_uuid:
    description: The UUID or slug of the policy. The slug is unique within a tenant,
      hence the tenant must be specified.
    in: path
    name: policy_uuid
    required: true
    type: string
  recurse:
    default: false
    description: Should the query include sub-tenants
    in: query
    name: recurse
    required: false
    type: boolean
  scope:
    description: The required ACL
    in: query
    name: scope
    required: false
    type: string
  search:
    description: Search term for filtering a list of items. Only items with a field
      containing the search term will be returned.
    in: query
    name: search
    required: false
    type: string
  search_name:
    description: The name of the group
    in: query
    name: name
    required: false
    type: string
  search_policy_slug:
    description: The slug of the policy that the user must have. This does not include
      indirect associations (user in group has policy).
    in: query
    name: policy_slug
    type: string
  search_policy_uuid:
    description: The UUID of the policy that the user must have. This does not include
      indirect associations (user in group has policy).
    in: query
    name: policy_uuid
    type: string
  search_read_only:
    description: Is the group managed by the system?
    in: query
    name: read_only
    required: false
    type: string
  search_user_uuid:
    description: The UUID of the user
    in: query
    name: user_uuid
    required: false
    type: string
  search_uuid:
    description: The UUID of the group
    in: query
    name: uuid
    required: false
    type: string
  session_uuid:
    description: The UUID of the session
    in: path
    name: session_uuid
    required: true
    type: string
  tenant:
    description: A tenant UUID to check against
    in: query
    name: tenant
    required: false
    type: string
  tenant_uuid:
    description: The UUID of the tenant
    in: path
    name: tenant_uuid
    required: true
    type: string
  tenantuuid:
    description: The tenant's UUID, defining the ownership of a given resource.
    in: header
    name: Accent-Tenant
    required: false
    type: string
  token:
    description: The token to query
    in: path
    name: token
    required: true
    type: string
  user_uuid:
    description: The UUID of the user
    in: path
    name: user_uuid
    required: true
    type: string
  user_uuid_or_me:
    description: The UUID of the user or `me` to refer to the user doing the query
    in: path
    name: user_uuid_or_me
    required: true
    type: string
  accent_session_type:
    description: The session type
    enum:
    - mobile
    - desktop
    in: header
    name: Accent-Session-Type
    required: false
    type: string
paths:
  /admin/users/{user_uuid}/emails:
    put:
      description: '**Required ACL**: `auth.admin.users.{user_uuid}.emails.edit`
        Update all of the users email address at the same time.

        If an existing address is missing from the list, it will be removed. An empty
        list will remove all addresses. If addresses are defined, one and only one
        address should be main. If the confirmed field is set to none or ommited the
        existing value will be reused if it exists, otherwise the address will not
        be confirmed. '
      operationId: updateAllUserEmails
      parameters:
      - $ref: '#/parameters/user_uuid'
      - description: EmailAddressList
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/AdminUserEmailList'
      responses:
        '200':
          description: The updated email list
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Update email addresses
      tags:
      - admin
      - users
      - emails
  /backends:
    get:
      description: Retrieves the list of activated backends
      operationId: getBackends
      responses:
        '200':
          description: The list of activated backends
          schema:
            $ref: '#/definitions/BackendList'
      security:
      - {}
      summary: Get list of activated backends
      tags:
      - backends
  /backends/ldap:
    delete:
      description: '**Required ACL:** `auth.backends.ldap.delete`'
      operationId: deleteLDAPBackendConfig
      parameters:
      - $ref: '#/parameters/tenantuuid'
      responses:
        '204':
          description: The LDAP backend configuration has been deleted
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Delete current tenant's LDAP backend configuration
      tags:
      - backends
    get:
      description: '**Required ACL:** `auth.backends.ldap.read`'
      operationId: getLDAPBackendConfig
      parameters:
      - $ref: '#/parameters/tenantuuid'
      produces:
      - application/json
      responses:
        '200':
          description: The LDAP backend configuration
          schema:
            $ref: '#/definitions/LDAPBackendConfig'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: 'Get current tenant''s LDAP backend configuration. If there is no configuration,
        all the fields will be `null`.
        '
      tags:
      - backends
    put:
      consumes:
      - application/json
      description: '**Required ACL:** `auth.backends.ldap.update'
      operationId: updateLDAPBackendConfig
      parameters:
      - $ref: '#/parameters/tenantuuid'
      - description: The LDAP backend configuration
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/LDAPBackendConfigEdit'
      produces:
      - application/json
      responses:
        '200':
          description: The LDAP backend configuration has been updated
          schema:
            $ref: '#/definitions/LDAPBackendConfig'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Update current tenant's LDAP backend configuration
      tags:
      - backends
  /config:
    get:
      description: '**Required ACL:** `auth.config.read`'
      operationId: getConfig
      produces:
      - application/json
      responses:
        '200':
          description: The configuration of the service
      summary: Show the current configuration
      tags:
      - config
    patch:
      description: '**Required ACL:** `auth.config.update`
        Changes are not persistent across service restart.
        '
      operationId: patchConfig
      parameters:
      - $ref: '#/parameters/ConfigPatch'
      produces:
      - application/json
      responses:
        '200':
          description: The updated configuration of the service
        '400':
          description: The given confiuration is invalid
      summary: Update the current configuration.
      tags:
      - config
  /emails/{email_uuid}/confirm:
    get:
      description: '**Required ACL**: `auth.emails.{email_uuid}.confirm.edit`
        The token should be in the URL instead of being in the HTTP headers
        '
      operationId: getEmailConfirm
      parameters:
      - $ref: '#/parameters/email_uuid'
      - $ref: '#/parameters/email_confirm_token'
      responses:
        '200':
          description: The email address has been confirmed
        '404':
          description: Email not found
          schema:
            $ref: '#/definitions/Error'
      summary: Confirm an email address
      tags:
      - emails
    put:
      description: '**Required ACL**: `auth.emails.{email_uuid}.confirm.edit`'
      operationId: putEmailConfirm
      parameters:
      - $ref: '#/parameters/email_uuid'
      responses:
        '204':
          description: The email address has been confirmed
        '404':
          description: Email not found
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Confirm an email address
      tags:
      - emails
  /external/{auth_type}/config:
    delete:
      description: '**Required ACL**: `auth.{auth_type}.external.config.delete`'
      operationId: deleteExternalAuthConfig
      parameters:
      - $ref: '#/parameters/tenantuuid'
      - $ref: '#/parameters/auth_type'
      responses:
        '204':
          description: Deletion confirmed
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
      summary: Delete the client id and client secret
      tags:
      - external
    get:
      description: '**Required ACL**: `auth.{auth_type}.external.config.read`'
      operationId: getExternalAuthConfig
      parameters:
      - $ref: '#/parameters/tenantuuid'
      - $ref: '#/parameters/auth_type'
      responses:
        '200':
          description: The requested config
          schema:
            $ref: '#/definitions/ExternalConfig'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve the client id and client secret
      tags:
      - external
    post:
      description: '**Required ACL**: `auth.{auth_type}.external.config.create`'
      operationId: postExternalAuthConfig
      parameters:
      - $ref: '#/parameters/tenantuuid'
      - $ref: '#/parameters/auth_type'
      - description: JSON object holding configuration for the given authentication
          type
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/ExternalConfig'
      responses:
        '201':
          description: Config created
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Duplicate config
          schema:
            $ref: '#/definitions/Error'
      summary: Add configuration for the given auth_type
      tags:
      - external
    put:
      description: '**Required ACL**: `auth.{auth_type}.external.config.edit`'
      operationId: updateExternalAuthConfig
      parameters:
      - $ref: '#/parameters/tenantuuid'
      - $ref: '#/parameters/auth_type'
      - description: JSON object holding configuration for the given authentication
          type
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/ExternalConfig'
      responses:
        '201':
          description: Config created
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
      summary: Update configuration for the given auth_type
      tags:
      - external
  /external/{auth_type}/users:
    get:
      description: '**Required ACL**: `auth.{auth_type}.external.users`'
      operationId: getExternalAuthUsers
      parameters:
      - $ref: '#/parameters/tenantuuid'
      - $ref: '#/parameters/auth_type'
      - $ref: '#/parameters/recurse'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      responses:
        '200':
          description: The list of external auth connected users
          schema:
            $ref: '#/definitions/ExternalAuthUserList'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieves the list of connected users to this external source
      tags:
      - external
  /groups/{group_uuid}:
    delete:
      description: '**Required ACL**: `auth.groups.{group_uuid}.delete`'
      operationId: delete_group
      parameters:
      - $ref: '#/parameters/tenantuuid'
      - $ref: '#/parameters/group_uuid'
      responses:
        '204':
          description: The group has been removed
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Group not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Delete a group
      tags:
      - groups
    get:
      description: '**Required ACL**: `auth.groups.{policy_uuid}.read'
      operationId: getGroup
      parameters:
      - $ref: '#/parameters/tenantuuid'
      - $ref: '#/parameters/group_uuid'
      responses:
        '200':
          description: The group's data
          schema:
            $ref: '#/definitions/GroupResult'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Group not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Retrieves the details of a group
      tags:
      - groups
    put:
      consumes:
      - application/json
      description: '**Required ACL:** `auth.groups.{group_uuid}.edit`'
      operationId: editGroup
      parameters:
      - $ref: '#/parameters/tenantuuid'
      - $ref: '#/parameters/group_uuid'
      - description: The group parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GroupPut'
      produces:
      - application/json
      responses:
        '200':
          description: The modified group's data
          schema:
            $ref: '#/definitions/GroupResult'
        '401':
          description: Invalid data has been supplied
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Duplicate Group
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Modify a group
      tags:
      - groups
  /groups/{group_uuid}/policies:
    get:
      description: '**Required ACL**: `auth.groups.{group_uuid}.policies.read`'
      operationId: getGroupPolicies
      parameters:
      - $ref: '#/parameters/group_uuid'
      - $ref: '#/parameters/order'
      - $ref: '#/parameters/direction'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      - $ref: '#/parameters/search'
      responses:
        '200':
          description: The group's policies
          schema:
            $ref: '#/definitions/GetPoliciesResult'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Policy not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Retrieves the list of policies associated to a group
      tags:
      - groups
  /groups/{group_uuid}/policies/{policy_uuid}:
    delete:
      description: '**Required ACL:** `auth.groups.{group_uuid}.policies.{policy_uuid}.delete`'
      operationId: deleteGroupPolicy
      parameters:
      - $ref: '#/parameters/group_uuid'
      - $ref: '#/parameters/policy_uuid'
      responses:
        '204':
          description: The policy has been unassigned
        '404':
          description: Policy or Group not found
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Dissociate a policy from a group
      tags:
      - groups
      - policies
    put:
      description: '**Required ACL:** `auth.groups.{group_uuid}.policies.{policy_uuid}.create`'
      operationId: addGroupPolicy
      parameters:
      - $ref: '#/parameters/group_uuid'
      - $ref: '#/parameters/policy_uuid'
      responses:
        '204':
          description: The policy has been assigned
        '404':
          description: Policy or Group not found
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Associate a group to a policy
      tags:
      - groups
      - policies
  /groups/{group_uuid}/users:
    get:
      description: '**Required ACL**: `auth.groups.{group_uuid}.users.read`'
      operationId: getGroupUsers
      parameters:
      - $ref: '#/parameters/group_uuid'
      - $ref: '#/parameters/order'
      - $ref: '#/parameters/direction'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      - $ref: '#/parameters/search'
      responses:
        '200':
          description: The group's users
          schema:
            $ref: '#/definitions/UserList'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Group not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Retrieves the list of users associated to a group
      tags:
      - groups
  /groups/{group_uuid}/users/{user_uuid}:
    delete:
      description: '**Required ACL:** `auth.groups.{group_uuid}.users.{user_uuid}.delete`'
      operationId: removeGroupUser
      parameters:
      - $ref: '#/parameters/group_uuid'
      - $ref: '#/parameters/user_uuid'
      responses:
        '204':
          description: The user has been unassigned
        '404':
          description: User or Group not found
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Dissociate a user from a group
      tags:
      - groups
      - users
    put:
      description: '**Required ACL:** `auth.groups.{group_uuid}.users.{user_uuid}.create`'
      operationId: addGroupUser
      parameters:
      - $ref: '#/parameters/group_uuid'
      - $ref: '#/parameters/user_uuid'
      responses:
        '204':
          description: The user has been assigned
        '404':
          description: User or Group not found
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Associate a group to a user
      tags:
      - groups
      - users
  /policies:
    get:
      description: '**Required ACL:** `auth.policies.read`'
      operationId: getPolicies
      parameters:
      - $ref: '#/parameters/order'
      - $ref: '#/parameters/direction'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      - $ref: '#/parameters/search'
      - $ref: '#/parameters/tenantuuid'
      - $ref: '#/parameters/recurse'
      produces:
      - application/json
      responses:
        '200':
          description: A list of policies
          schema:
            $ref: '#/definitions/GetPoliciesResult'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: List ACL policies
      tags:
      - policies
    post:
      consumes:
      - application/json
      description: '**Required ACL:** `auth.policies.create`
        Create a new ACL policy set that can be associated to a user, an administrator,
        a service or a backend.
        An ACL policy is a list of ACL or ACL templates that is used to create a token
        '
      operationId: createPolicies
      parameters:
      - description: The policy creation parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Policy'
      - $ref: '#/parameters/tenantuuid'
      produces:
      - application/json
      responses:
        '200':
          description: The created policy's data
          schema:
            $ref: '#/definitions/PolicyResult'
        '401':
          description: Invalid data has been supplied'
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Duplicate Policy
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Create a new ACL policy
      tags:
      - policies
  /policies/{policy_uuid}:
    delete:
      description: '**Required ACL**: `auth.policies.{policy_uuid}.delete`'
      operationId: delete_policy
      parameters:
      - $ref: '#/parameters/policy_uuid'
      - $ref: '#/parameters/tenantuuid'
      responses:
        '204':
          description: The policy has been removed
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Policy not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Delete a policy
      tags:
      - policies
    get:
      description: '**Required ACL**: `auth.policies.{policy_uuid}.read'
      operationId: getPolicy
      parameters:
      - $ref: '#/parameters/policy_uuid'
      - $ref: '#/parameters/tenantuuid'
      responses:
        '200':
          description: The policy's data
          schema:
            $ref: '#/definitions/PolicyResult'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Policy not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Retrieves the details of a policy
      tags:
      - policies
    put:
      consumes:
      - application/json
      description: '**Required ACL:** `auth.policies.{policy_uuid}.edit`'
      operationId: editPolicy
      parameters:
      - $ref: '#/parameters/policy_uuid'
      - $ref: '#/parameters/tenantuuid'
      - description: The policy edition parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Policy'
      produces:
      - application/json
      responses:
        '200':
          description: The modified policy's data
          schema:
            $ref: '#/definitions/PolicyResult'
        '401':
          description: Invalid data has been supplied'
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Duplicate Policy
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Modify an ACL policy
      tags:
      - policies
  /policies/{policy_uuid}/acl/{access}:
    delete:
      description: '**Required ACL:** `auth.policies.{policy_uuid}.edit`'
      operationId: deletePolicyAccess
      parameters:
      - $ref: '#/parameters/policy_uuid'
      - $ref: '#/parameters/access'
      - $ref: '#/parameters/tenantuuid'
      responses:
        '204':
          description: The policy has been modified
        '404':
          description: Policy or access not found
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Dissociate an access from a policy
      tags:
      - policies
    put:
      description: '**Required ACL:** `auth.policies.{policy_uuid}.edit`'
      operationId: addPolicyAccess
      parameters:
      - $ref: '#/parameters/policy_uuid'
      - $ref: '#/parameters/access'
      - $ref: '#/parameters/tenantuuid'
      responses:
        '204':
          description: The policy has been modified
        '404':
          description: Policy not found
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Associate an access to a policy
      tags:
      - policies
  /sessions:
    get:
      description: '**Required ACL:** `auth.sessions.read`'
      operationId: getSessions
      parameters:
      - $ref: '#/parameters/tenantuuid'
      - $ref: '#/parameters/recurse'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      produces:
      - application/json
      responses:
        '200':
          description: A list of session
          schema:
            $ref: '#/definitions/GetSessionsResult'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: List sessions
      tags:
      - sessions
  /sessions/{session_uuid}:
    delete:
      description: '**Required ACL**: `auth.sessions.{session_uuid}.delete`'
      operationId: delete_session
      parameters:
      - $ref: '#/parameters/session_uuid'
      responses:
        '204':
          description: The session has been removed
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Delete a session
      tags:
      - sessions
  /status:
    head:
      description: This endpoint is not authenticated
      operationId: checkStatus
      responses:
        '200':
          description: accent-auth is OK
        '503':
          description: accent-auth is missing a requirement
      summary: Check if accent-auth is OK
      tags:
      - status
  /tenants:
    get:
      description: '**Required ACL**: `auth.tenants.read`
        Tenants can be filtered by domain name using the `domain_name` query string
        to do an exact match on one of its domain names or using the `search` query
        string for a fuzzy match.
        '
      operationId: getTenants
      parameters:
      - $ref: '#/parameters/order'
      - $ref: '#/parameters/direction'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      - $ref: '#/parameters/search'
      - $ref: '#/parameters/tenantuuid'
      responses:
        '200':
          description: The list of tenant
          schema:
            $ref: '#/definitions/TenantList'
      security:
      - accent_auth_token: []
      summary: Retrieves the list of tenants
      tags:
      - tenants
    post:
      consumes:
      - application/json
      description: '**Required ACL:** `auth.tenants.create`'
      operationId: createTenant
      parameters:
      - description: The tenant creation parameters
        in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/TenantCreate'
      - $ref: '#/parameters/tenantuuid'
      produces:
      - application/json
      responses:
        '200':
          description: The new tenant
          schema:
            $ref: '#/definitions/TenantPostResponse'
        '400':
          description: Invalid body
          schema:
            $ref: '#/definitions/APIError'
      security:
      - accent_auth_token: []
      summary: Creates a new tenant
      tags:
      - tenants
  /tenants/{tenant_uuid}:
    delete:
      description: '**Required ACL**: `auth.tenants.{tenant_uuid}.delete`'
      operationId: delete_tenant
      parameters:
      - $ref: '#/parameters/tenant_uuid'
      responses:
        '204':
          description: The tenant has been removed
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Tenant not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Delete a tenant
      tags:
      - tenants
    get:
      description: '**Required ACL**: `auth.tenants.{tenant_uuid}.read`'
      operationId: getTenant
      parameters:
      - $ref: '#/parameters/tenant_uuid'
      responses:
        '200':
          description: The tenant's data
          schema:
            $ref: '#/definitions/TenantResult'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Tenant not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Retrieves the details of a tenant
      tags:
      - tenants
    put:
      consumes:
      - application/json
      description: '**Required ACL:** `auth.tenants.{tenant_uuid}.edit`'
      operationId: updateTenant
      parameters:
      - $ref: '#/parameters/tenant_uuid'
      - description: The tenant parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/TenantEdit'
      produces:
      - application/json
      responses:
        '200':
          description: The new tenant
          schema:
            $ref: '#/definitions/TenantPostResponse'
        '400':
          description: Invalid body
          schema:
            $ref: '#/definitions/APIError'
        '404':
          description: Tenant not found
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Modify a tenant
      tags:
      - tenants
  /token:
    post:
      consumes:
      - application/json
      description: 'Creates a valid token for the supplied username and password combination or refresh_token using the specified backend.

        The user''s email address can be used instead of the username if the email
        address is confirmed.

        The stock backends are: ``accent_user``, ``ldap_user``.

        Creating  a token with the `access_type` *offline* will also create a refresh
        token which can be used

        to create a new token without specifying the username and password.

        The username/password and refresh_token method of authentication are mutually
        exclusive

        For more details about the backends, see http://documentation.accent.community/en/latest/system/accent-auth/stock_plugins.html#backends-plugins
        '
      operationId: createToken
      parameters:
      - $ref: '#/parameters/accent_session_type'
      - description: The token creation parameters
        in: body
        name: body
        required: false
        schema:
          properties:
            access_type:
              default: online
              description: 'The `access_type` indicates whether your application can
                refresh the tokens when the user is not

                present at the browser. Valid parameter values are *online*, which
                is the default value, and *offline*

                Only one refresh token will be created for a given user with a given
                `client_id`. The old refresh

                for `client_id` will be revoken when creating a new one.

                The *client_id* field is required when using the `access_type` *offline*
                '
              enum:
              - online
              - offline
              type: string
            backend:
              default: accent_user
              type: string
            client_id:
              description: 'The `client_id` is used in conjunction with the `access_type`
                *offline* to known for which application

                a refresh token has been emitted.

                *Required when using `access_type: offline`*
                '
              type: string
            domain_name:
              description: 'The `domain_name` must match a tenant''s domain_name entry
                to find the appropriate ldap configuration.

                '
              type: string
            expiration:
              default: 7200
              description: Expiration time in seconds.
              maximum: 315360000
              type: integer
            refresh_token:
              description: 'The `refresh_token` can be used to get a new access token
                without using the username/password.

                This is useful for client application that should not store the username
                and password once the

                user has logged in a first time.
                '
              type: string
          type: object
      produces:
      - application/json
      responses:
        '200':
          description: The created token's data
          schema:
            $ref: '#/definitions/Token'
        '400':
          description: Invalid expiration or missing field
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related token generation error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_basic: []
      summary: Creates a token
      tags:
      - token
  /token/{token}:
    delete:
      operationId: revokeToken
      parameters:
      - $ref: '#/parameters/token'
      responses:
        '200':
          description: Success message
        '500':
          description: System related token error
          schema:
            $ref: '#/definitions/Error'
      security:
      - {}
      summary: Revoke a token
      tags:
      - token
    get:
      description: Checks if a token is valid in a given context and return the token
        data.  If a scope is given, the token must have the necessary permissions
        for the ACL. If a tenant is given, the token must have that tenant in its
        sub-tenant subtree.
      operationId: getToken
      parameters:
      - $ref: '#/parameters/token'
      - $ref: '#/parameters/scope'
      - $ref: '#/parameters/tenant'
      responses:
        '200':
          description: The token's data
          schema:
            $ref: '#/definitions/Token'
        '403':
          description: This token cannot acces the required ACL
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Token not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related token error
          schema:
            $ref: '#/definitions/Error'
      security:
      - {}
      summary: Retrieves token data
      tags:
      - token
    head:
      description: Checks if a token is valid in a given context.  If a scope is given,
        the token must have the necessary permissions for the ACL. If a tenant is
        given, the token must have that tenant in its sub-tenant subtree.
      operationId: checkTokenContext
      parameters:
      - $ref: '#/parameters/token'
      - $ref: '#/parameters/scope'
      - $ref: '#/parameters/tenant'
      responses:
        '204':
          description: No data
        '403':
          description: This token cannot acces the required ACL
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Token not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related token error
          schema:
            $ref: '#/definitions/Error'
      security:
      - {}
      summary: Checks if a token is valid
      tags:
      - token
  /token/{token}/scopes/check:
    post:
      description: Checks if a token is valid for given scopes.
      operationId: checkTokenScopes
      parameters:
      - $ref: '#/parameters/token'
      - description: The token scopes check parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ScopeCheckRequest'
      responses:
        '200':
          description: Provided scope list checked against the token
          schema:
            $ref: '#/definitions/ScopeList'
        '400':
          description: The provided scope list is invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: This token is not valid for the provided tenant
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Token not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related token error
          schema:
            $ref: '#/definitions/Error'
      security:
      - {}
      summary: Check a token against scopes
      tags:
      - token
  /tokens:
    get:
      description: '**Required ACL**: `auth.tokens.read`
        Finds all refresh tokens and return the list. Access tokens are not included
        in the result.
        '
      operationId: getTokens
      parameters:
      - $ref: '#/parameters/tenantuuid'
      - $ref: '#/parameters/recurse'
      - $ref: '#/parameters/order'
      - $ref: '#/parameters/direction'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      - $ref: '#/parameters/search'
      responses:
        '200':
          description: A refresh token list
          schema:
            $ref: '#/definitions/RefreshTokenList'
        '400':
          description: Invalid parameters
          schema:
            $ref: '#/definitions/APIError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
        '500':
          description: System related token error
          schema:
            $ref: '#/definitions/APIError'
      security:
      - accent_auth_token: []
      summary: Retrieve a list of refresh tokens that have been created on the system
      tags:
      - token
  /users:
    get:
      description: '**Required ACL**: `auth.users.read`'
      operationId: getUsers
      parameters:
      - $ref: '#/parameters/order'
      - $ref: '#/parameters/direction'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      - $ref: '#/parameters/search'
      - $ref: '#/parameters/tenantuuid'
      - $ref: '#/parameters/recurse'
      - $ref: '#/parameters/has_policy_slug'
      - $ref: '#/parameters/has_policy_uuid'
      - $ref: '#/parameters/search_policy_slug'
      - $ref: '#/parameters/search_policy_uuid'
      responses:
        '200':
          description: The list of user
          schema:
            $ref: '#/definitions/UserList'
      security:
      - accent_auth_token: []
      summary: Retrieves the list of users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: '**Required ACL**: `auth.users.create`
        Creates a new user that can be used to retrieve a token. The UUID can be used
        to link this user the a

        accent-confd user by using the same UUID
        '
      operationId: createUser
      parameters:
      - description: The user creation parameters
        in: body
        name: body
        schema:
          $ref: '#/definitions/UserCreate'
      - $ref: '#/parameters/tenantuuid'
      produces:
      - application/json
      responses:
        '200':
          description: The new user data without the password
          schema:
            $ref: '#/definitions/UserPostResponse'
        '400':
          description: Invalid body
          schema:
            $ref: '#/definitions/APIError'
      summary: Create a user
      tags:
      - users
  /users/password/reset:
    get:
      description: 'This action will send an email containing instructions to set
        a new password.

        The login or username or email address should be supplied as query string
        to find the user
        '
      operationId: reset_password
      parameters:
      - description: The user's username
        in: query
        name: username
        type: string
      - description: The user's email address
        in: query
        name: email
        type: string
      - description: The user's login (username or email)
        in: query
        name: login
        type: string
      responses:
        '204':
          description: A mail will be sent if the username or email were found
      summary: Reset the user password
      tags:
      - users
    post:
      description: '**Required ACL**: `auth.users.password.reset.{user_uuid}.create`

        Set a new password for the user after the user used the GET on the reset URL
        '
      operationId: reset_password_change
      parameters:
      - description: The user's UUID
        in: query
        name: user_uuid
        required: true
        type: string
      - description: The password change parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/PostPasswordReset'
      responses:
        '204':
          description: Password changed
      security:
      - accent_auth_token: []
      summary: Set the user password
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Creates a new user that can be used to retrieve a token.
      operationId: registerUser
      parameters:
      - description: The user creation parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UserRegister'
      produces:
      - application/json
      responses:
        '200':
          description: The new user data without the password
          schema:
            $ref: '#/definitions/UserPostResponse'
        '400':
          description: Invalid body
          schema:
            $ref: '#/definitions/APIError'
      summary: Create a user
      tags:
      - users
  /users/{user_uuid_or_me}/tokens:
    get:
      description: '**Required ACL**: `auth.users.{user_uuid}.tokens.read`

        Finds all of a user''s refresh token and return the list. Access tokens are
        not included in the result.

        Doing a query with the `user_uuid` `me` will result in the current user''s
        token being used.
        '
      operationId: getUserTokens
      parameters:
      - $ref: '#/parameters/user_uuid_or_me'
      - $ref: '#/parameters/tenantuuid'
      - $ref: '#/parameters/order'
      - $ref: '#/parameters/direction'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      - $ref: '#/parameters/search'
      responses:
        '200':
          description: A refresh token list
          schema:
            $ref: '#/definitions/RefreshTokenList'
        '400':
          description: Invalid parameters
          schema:
            $ref: '#/definitions/APIError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/APIError'
        '500':
          description: System related token error
          schema:
            $ref: '#/definitions/APIError'
      security:
      - accent_auth_token: []
      summary: Retrieve a user's refresh token list
      tags:
      - token
      - users
  /users/{user_uuid_or_me}/tokens/{client_id}:
    delete:
      description: '**Required ACL**: `auth.users.{user_uuid}.tokens.{client_id}.delete`
        Remove a given refresh token. This only prevent this refresh token from creating new
        access tokens. Any tokens that are currently issued are still usable and should be
        revoked if needed.
        '
      operationId: deleteRefreshTokens
      parameters:
      - $ref: '#/parameters/user_uuid_or_me'
      - $ref: '#/parameters/client_id'
      responses:
        '204':
          description: The refresh token has been deleted
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
        '404':
          description: User or refresh token not found
          schema:
            $ref: '#/definitions/APIError'
        '500':
          description: System related token error
          schema:
            $ref: '#/definitions/APIError'
      security:
      - accent_auth_token: []
      summary: Delete a user's refresh token
      tags:
      - token
      - users
  /users/{user_uuid}:
    delete:
      description: '**Required ACL**: `auth.users.{user_uuid}.delete`'
      operationId: delete_user
      parameters:
      - $ref: '#/parameters/user_uuid'
      responses:
        '204':
          description: The user has been removed
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Delete a user
      tags:
      - users
    get:
      description: '**Required ACL**: `auth.users.{user_uuid}.read`'
      operationId: getUser
      parameters:
      - $ref: '#/parameters/user_uuid'
      responses:
        '200':
          description: The user's data
          schema:
            $ref: '#/definitions/UserResult'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Retrieves the details of a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: '**Required ACL**: `auth.users.{user_uuid}.edit`'
      operationId: updateUser
      parameters:
      - $ref: '#/parameters/user_uuid'
      - description: The user parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UserEdit'
      produces:
      - application/json
      responses:
        '200':
          description: The new user data without the password
          schema:
            $ref: '#/definitions/UserPostResponse'
        '400':
          description: Invalid body
          schema:
            $ref: '#/definitions/APIError'
        '404':
          description: not found
          schema:
            $ref: '#/definitions/Error'
      summary: Update an existing user
      tags:
      - users
  /users/{user_uuid}/emails:
    put:
      description: '**Required ACL**: `auth.users.{user_uuid}.emails.edit`
        Update all of the users email address at the same time.

        If an existing address is missing from the list, it will be removed. An empty
        list will remove all addresses. If addresses are defined, one and only one
        address should be main. All new address are created unconfirmed. '
      operationId: updateUserEmails
      parameters:
      - $ref: '#/parameters/user_uuid'
      - description: EmailAddressList
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UserEmailList'
      responses:
        '200':
          description: The updated email list
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Update email addresses
      tags:
      - users
      - emails
  /users/{user_uuid}/emails/{email_uuid}/confirm:
    get:
      description: '**Required ACL**: `auth.users.{user_uuid}.emails.{email_uuid}.confirm.read`'
      operationId: getNewEmailConfirmation
      parameters:
      - $ref: '#/parameters/user_uuid'
      - $ref: '#/parameters/email_uuid'
      responses:
        '204':
          description: The new email confirmation email has been sent
        '404':
          description: User or Email not found
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Already confirmed
      security:
      - accent_auth_token: []
      summary: Ask a new confirmation email
      tags:
      - users
      - emails
  /users/{user_uuid}/external:
    get:
      description: '**Required ACL**: `auth.users.{user_uuid}.external.read`
        This list should not contain any sensible information
        '
      operationId: getUserExternalAuth
      parameters:
      - $ref: '#/parameters/user_uuid'
      - $ref: '#/parameters/order'
      - $ref: '#/parameters/direction'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      - $ref: '#/parameters/search'
      responses:
        '200':
          description: The list of external auth data
          schema:
            $ref: '#/definitions/ExternalAuthList'
      security:
      - accent_auth_token: []
      summary: Retrieves the list of the users external auth data
      tags:
      - users
      - external
  /users/{user_uuid}/groups:
    get:
      description: '**Required ACL**: `auth.users.{user_uuid}.groups.read`'
      operationId: getUserGroups
      parameters:
      - $ref: '#/parameters/user_uuid'
      - $ref: '#/parameters/order'
      - $ref: '#/parameters/direction'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      - $ref: '#/parameters/search'
      responses:
        '200':
          description: The groups of the user
          schema:
            $ref: '#/definitions/GetGroupsResult'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Retrieves the list of groups associated to a user
      tags:
      - users
  /users/{user_uuid}/password:
    put:
      consumes:
      - application/json
      description: '**Required ACL**: `auth.users.{user_uuid}.password.edit`'
      operationId: changeUserPassword
      parameters:
      - $ref: '#/parameters/user_uuid'
      - description: The user creation parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/PasswordChange'
      responses:
        '204':
          description: Password changed
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Change the user's password
      tags:
      - users
  /users/{user_uuid}/policies:
    get:
      description: '**Required ACL**: `auth.users.{user_uuid}.policies.read`'
      operationId: getUserPolicies
      parameters:
      - $ref: '#/parameters/user_uuid'
      - $ref: '#/parameters/order'
      - $ref: '#/parameters/direction'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      - $ref: '#/parameters/search'
      responses:
        '200':
          description: The user's policies
          schema:
            $ref: '#/definitions/GetPoliciesResult'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Retrieves the list of policies associated to a user
      tags:
      - users
      - policies
  /users/{user_uuid}/policies/{policy_uuid}:
    delete:
      description: '**Required ACL:** `auth.users.{user_uuid}.policies.{policy_uuid}.delete`'
      operationId: deleteUserPolicy
      parameters:
      - $ref: '#/parameters/policy_uuid'
      - $ref: '#/parameters/user_uuid'
      responses:
        '204':
          description: The policy has been unassigned
        '404':
          description: User or Policy not found
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Dissociate a policy from a user
      tags:
      - users
      - policies
    put:
      description: '**Required ACL:** `auth.users.{user_uuid}.policies.{policy_uuid}.create`'
      operationId: addUserPolicy
      parameters:
      - $ref: '#/parameters/policy_uuid'
      - $ref: '#/parameters/user_uuid'
      responses:
        '204':
          description: The policy has been assigned
        '404':
          description: User or Policy not found
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Associate a policy to a user
      tags:
      - users
      - policies
  /users/{user_uuid}/sessions:
    get:
      description: '**Required ACL**: `auth.users.{user_uuid}.sessions.read`'
      operationId: getUserSessions
      parameters:
      - $ref: '#/parameters/user_uuid'
      - $ref: '#/parameters/tenantuuid'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      responses:
        '200':
          description: The sessions of the user
          schema:
            $ref: '#/definitions/GetSessionsResult'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related error
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Retrieves the list of sessions associated to a user
      tags:
      - users
      - sessions
  /users/{user_uuid}/sessions/{session_uuid}:
    delete:
      description: '**Required ACL**: `auth.users.{user_uuid}.sessions.{session_uuid}.delete`'
      operationId: user_delete_session
      parameters:
      - $ref: '#/parameters/user_uuid'
      - $ref: '#/parameters/session_uuid'
      responses:
        '204':
          description: The session has been removed
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      security:
      - accent_auth_token: []
      summary: Delete a session
      tags:
      - users
      - sessions
produces:
- application/json
schemes:
- http
- https
securityDefinitions:
  accent_auth_basic:
    type: basic
  accent_auth_token:
    in: header
    name: X-Auth-Token
    type: apiKey
swagger: "2.0"
x-accent-name: auth
x-accent-port: 9497
