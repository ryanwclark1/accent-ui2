/*
accent-chatd

Control your message and presence from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chatd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

type MessagesAPI interface {

	/*
		CreateRoomMessage Create room messages

		**Required ACL:** `chatd.users.me.rooms.{room_uuid}.messages.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param roomUuid The UUID of the room
		@return ApiCreateRoomMessageRequest
	*/
	CreateRoomMessage(ctx context.Context, roomUuid string) ApiCreateRoomMessageRequest

	// CreateRoomMessageExecute executes the request
	//  @return Message
	CreateRoomMessageExecute(r ApiCreateRoomMessageRequest) (*Message, *http.Response, error)

	/*
		ListRoomMessage List room messages

		**Required ACL:** `chatd.users.me.rooms.{room_uuid}.messages.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param roomUuid The UUID of the room
		@return ApiListRoomMessageRequest
	*/
	ListRoomMessage(ctx context.Context, roomUuid string) ApiListRoomMessageRequest

	// ListRoomMessageExecute executes the request
	//  @return Messages
	ListRoomMessageExecute(r ApiListRoomMessageRequest) (*Messages, *http.Response, error)

	/*
		ListRoomsMessages List rooms messages

		**Required ACL:** `chatd.users.me.rooms.messages.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListRoomsMessagesRequest
	*/
	ListRoomsMessages(ctx context.Context) ApiListRoomsMessagesRequest

	// ListRoomsMessagesExecute executes the request
	//  @return Messages
	ListRoomsMessagesExecute(r ApiListRoomsMessagesRequest) (*Messages, *http.Response, error)
}

// MessagesAPIService MessagesAPI service
type MessagesAPIService service

type ApiCreateRoomMessageRequest struct {
	ctx        context.Context
	ApiService MessagesAPI
	body       *UserMessagePOST
	roomUuid   string
}

// message to create
func (r ApiCreateRoomMessageRequest) Body(body UserMessagePOST) ApiCreateRoomMessageRequest {
	r.body = &body
	return r
}

func (r ApiCreateRoomMessageRequest) Execute() (*Message, *http.Response, error) {
	return r.ApiService.CreateRoomMessageExecute(r)
}

/*
CreateRoomMessage Create room messages

**Required ACL:** `chatd.users.me.rooms.{room_uuid}.messages.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param roomUuid The UUID of the room
	@return ApiCreateRoomMessageRequest
*/
func (a *MessagesAPIService) CreateRoomMessage(ctx context.Context, roomUuid string) ApiCreateRoomMessageRequest {
	return ApiCreateRoomMessageRequest{
		ApiService: a,
		ctx:        ctx,
		roomUuid:   roomUuid,
	}
}

// Execute executes the request
//
//	@return Message
func (a *MessagesAPIService) CreateRoomMessageExecute(r ApiCreateRoomMessageRequest) (*Message, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Message
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessagesAPIService.CreateRoomMessage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/me/rooms/{room_uuid}/messages"
	localVarPath = strings.Replace(localVarPath, "{"+"room_uuid"+"}", url.PathEscape(parameterValueToString(r.roomUuid, "roomUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRoomMessageRequest struct {
	ctx        context.Context
	ApiService MessagesAPI
	roomUuid   string
	fromDate   *time.Time
	direction  *string
	limit      *int32
	order      *string
	offset     *int32
	search     *string
}

// The date and time from which to retrieve messages. Example: 2019-06-12T10:00:00.000+00:00
func (r ApiListRoomMessageRequest) FromDate(fromDate time.Time) ApiListRoomMessageRequest {
	r.fromDate = &fromDate
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r ApiListRoomMessageRequest) Direction(direction string) ApiListRoomMessageRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r ApiListRoomMessageRequest) Limit(limit int32) ApiListRoomMessageRequest {
	r.limit = &limit
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r ApiListRoomMessageRequest) Order(order string) ApiListRoomMessageRequest {
	r.order = &order
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r ApiListRoomMessageRequest) Offset(offset int32) ApiListRoomMessageRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned. Required if &#x60;distinct&#x60; is not specified.
func (r ApiListRoomMessageRequest) Search(search string) ApiListRoomMessageRequest {
	r.search = &search
	return r
}

func (r ApiListRoomMessageRequest) Execute() (*Messages, *http.Response, error) {
	return r.ApiService.ListRoomMessageExecute(r)
}

/*
ListRoomMessage List room messages

**Required ACL:** `chatd.users.me.rooms.{room_uuid}.messages.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param roomUuid The UUID of the room
	@return ApiListRoomMessageRequest
*/
func (a *MessagesAPIService) ListRoomMessage(ctx context.Context, roomUuid string) ApiListRoomMessageRequest {
	return ApiListRoomMessageRequest{
		ApiService: a,
		ctx:        ctx,
		roomUuid:   roomUuid,
	}
}

// Execute executes the request
//
//	@return Messages
func (a *MessagesAPIService) ListRoomMessageExecute(r ApiListRoomMessageRequest) (*Messages, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Messages
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessagesAPIService.ListRoomMessage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/me/rooms/{room_uuid}/messages"
	localVarPath = strings.Replace(localVarPath, "{"+"room_uuid"+"}", url.PathEscape(parameterValueToString(r.roomUuid, "roomUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_date", r.fromDate, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRoomsMessagesRequest struct {
	ctx        context.Context
	ApiService MessagesAPI
	direction  *string
	limit      *int32
	order      *string
	offset     *int32
	search     *string
	distinct   *string
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r ApiListRoomsMessagesRequest) Direction(direction string) ApiListRoomsMessagesRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r ApiListRoomsMessagesRequest) Limit(limit int32) ApiListRoomsMessagesRequest {
	r.limit = &limit
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r ApiListRoomsMessagesRequest) Order(order string) ApiListRoomsMessagesRequest {
	r.order = &order
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r ApiListRoomsMessagesRequest) Offset(offset int32) ApiListRoomsMessagesRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r ApiListRoomsMessagesRequest) Search(search string) ApiListRoomsMessagesRequest {
	r.search = &search
	return r
}

// Distinct list results by field. Always picks the latest entry. Required if &#x60;search&#x60; is not specified.
func (r ApiListRoomsMessagesRequest) Distinct(distinct string) ApiListRoomsMessagesRequest {
	r.distinct = &distinct
	return r
}

func (r ApiListRoomsMessagesRequest) Execute() (*Messages, *http.Response, error) {
	return r.ApiService.ListRoomsMessagesExecute(r)
}

/*
ListRoomsMessages List rooms messages

**Required ACL:** `chatd.users.me.rooms.messages.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListRoomsMessagesRequest
*/
func (a *MessagesAPIService) ListRoomsMessages(ctx context.Context) ApiListRoomsMessagesRequest {
	return ApiListRoomsMessagesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Messages
func (a *MessagesAPIService) ListRoomsMessagesExecute(r ApiListRoomsMessagesRequest) (*Messages, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Messages
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessagesAPIService.ListRoomsMessages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/me/rooms/messages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v APIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
