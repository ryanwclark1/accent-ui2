/*
accent-chatd

Control your message and presence from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chatd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RoomUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomUser{}

// RoomUser struct for RoomUser
type RoomUser struct {
	// The tenant of the user_uuid. Default to the same tenant as the token owner
	TenantUuid *string `json:"tenant_uuid,omitempty"`
	Uuid       string  `json:"uuid"`
	// The accent of the tenant_uuid. Default to the same accent as the token owner
	AccentUuid *string `json:"accent_uuid,omitempty"`
}

type _RoomUser RoomUser

// NewRoomUser instantiates a new RoomUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomUser(uuid string) *RoomUser {
	this := RoomUser{}
	this.Uuid = uuid
	return &this
}

// NewRoomUserWithDefaults instantiates a new RoomUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomUserWithDefaults() *RoomUser {
	this := RoomUser{}
	return &this
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *RoomUser) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomUser) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *RoomUser) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *RoomUser) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

// GetUuid returns the Uuid field value
func (o *RoomUser) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *RoomUser) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *RoomUser) SetUuid(v string) {
	o.Uuid = v
}

// GetAccentUuid returns the AccentUuid field value if set, zero value otherwise.
func (o *RoomUser) GetAccentUuid() string {
	if o == nil || IsNil(o.AccentUuid) {
		var ret string
		return ret
	}
	return *o.AccentUuid
}

// GetAccentUuidOk returns a tuple with the AccentUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomUser) GetAccentUuidOk() (*string, bool) {
	if o == nil || IsNil(o.AccentUuid) {
		return nil, false
	}
	return o.AccentUuid, true
}

// HasAccentUuid returns a boolean if a field has been set.
func (o *RoomUser) HasAccentUuid() bool {
	if o != nil && !IsNil(o.AccentUuid) {
		return true
	}

	return false
}

// SetAccentUuid gets a reference to the given string and assigns it to the AccentUuid field.
func (o *RoomUser) SetAccentUuid(v string) {
	o.AccentUuid = &v
}

func (o RoomUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	toSerialize["uuid"] = o.Uuid
	if !IsNil(o.AccentUuid) {
		toSerialize["accent_uuid"] = o.AccentUuid
	}
	return toSerialize, nil
}

func (o *RoomUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoomUser := _RoomUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoomUser)

	if err != nil {
		return err
	}

	*o = RoomUser(varRoomUser)

	return err
}

type NullableRoomUser struct {
	value *RoomUser
	isSet bool
}

func (v NullableRoomUser) Get() *RoomUser {
	return v.value
}

func (v *NullableRoomUser) Set(val *RoomUser) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomUser) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomUser(val *RoomUser) *NullableRoomUser {
	return &NullableRoomUser{value: val, isSet: true}
}

func (v NullableRoomUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
