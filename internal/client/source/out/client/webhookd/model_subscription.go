/*
accent-webhookd

Control your webhooks from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webhookd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Subscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subscription{}

// Subscription struct for Subscription
type Subscription struct {
	Config map[string]string `json:"config"`
	Events []string          `json:"events"`
	// Only trigger webhook when an event occurs related to this user. Not compatible with all events. For more details, see: https://accentvoice.io/uc-doc/api_sdk/rest_api/webhookd/user_filter
	EventsUserUuid *string `json:"events_user_uuid,omitempty"`
	Name           string  `json:"name"`
	// The user who owns this subscription. Admin-created subscriptions are not owned.
	OwnerUserUuid *string `json:"owner_user_uuid,omitempty"`
	Service       string  `json:"service"`
	Uuid          *string `json:"uuid,omitempty"`
}

type _Subscription Subscription

// NewSubscription instantiates a new Subscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscription(config map[string]string, events []string, name string, service string) *Subscription {
	this := Subscription{}
	this.Config = config
	this.Events = events
	this.Name = name
	this.Service = service
	return &this
}

// NewSubscriptionWithDefaults instantiates a new Subscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionWithDefaults() *Subscription {
	this := Subscription{}
	return &this
}

// GetConfig returns the Config field value
func (o *Subscription) GetConfig() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetConfigOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *Subscription) SetConfig(v map[string]string) {
	o.Config = v
}

// GetEvents returns the Events field value
func (o *Subscription) GetEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetEventsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *Subscription) SetEvents(v []string) {
	o.Events = v
}

// GetEventsUserUuid returns the EventsUserUuid field value if set, zero value otherwise.
func (o *Subscription) GetEventsUserUuid() string {
	if o == nil || IsNil(o.EventsUserUuid) {
		var ret string
		return ret
	}
	return *o.EventsUserUuid
}

// GetEventsUserUuidOk returns a tuple with the EventsUserUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetEventsUserUuidOk() (*string, bool) {
	if o == nil || IsNil(o.EventsUserUuid) {
		return nil, false
	}
	return o.EventsUserUuid, true
}

// HasEventsUserUuid returns a boolean if a field has been set.
func (o *Subscription) HasEventsUserUuid() bool {
	if o != nil && !IsNil(o.EventsUserUuid) {
		return true
	}

	return false
}

// SetEventsUserUuid gets a reference to the given string and assigns it to the EventsUserUuid field.
func (o *Subscription) SetEventsUserUuid(v string) {
	o.EventsUserUuid = &v
}

// GetName returns the Name field value
func (o *Subscription) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Subscription) SetName(v string) {
	o.Name = v
}

// GetOwnerUserUuid returns the OwnerUserUuid field value if set, zero value otherwise.
func (o *Subscription) GetOwnerUserUuid() string {
	if o == nil || IsNil(o.OwnerUserUuid) {
		var ret string
		return ret
	}
	return *o.OwnerUserUuid
}

// GetOwnerUserUuidOk returns a tuple with the OwnerUserUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetOwnerUserUuidOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerUserUuid) {
		return nil, false
	}
	return o.OwnerUserUuid, true
}

// HasOwnerUserUuid returns a boolean if a field has been set.
func (o *Subscription) HasOwnerUserUuid() bool {
	if o != nil && !IsNil(o.OwnerUserUuid) {
		return true
	}

	return false
}

// SetOwnerUserUuid gets a reference to the given string and assigns it to the OwnerUserUuid field.
func (o *Subscription) SetOwnerUserUuid(v string) {
	o.OwnerUserUuid = &v
}

// GetService returns the Service field value
func (o *Subscription) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *Subscription) SetService(v string) {
	o.Service = v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Subscription) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Subscription) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Subscription) SetUuid(v string) {
	o.Uuid = &v
}

func (o Subscription) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config"] = o.Config
	toSerialize["events"] = o.Events
	if !IsNil(o.EventsUserUuid) {
		toSerialize["events_user_uuid"] = o.EventsUserUuid
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.OwnerUserUuid) {
		toSerialize["owner_user_uuid"] = o.OwnerUserUuid
	}
	toSerialize["service"] = o.Service
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

func (o *Subscription) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config",
		"events",
		"name",
		"service",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscription := _Subscription{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscription)

	if err != nil {
		return err
	}

	*o = Subscription(varSubscription)

	return err
}

type NullableSubscription struct {
	value *Subscription
	isSet bool
}

func (v NullableSubscription) Get() *Subscription {
	return v.value
}

func (v *NullableSubscription) Set(val *Subscription) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscription(val *Subscription) *NullableSubscription {
	return &NullableSubscription{value: val, isSet: true}
}

func (v NullableSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
