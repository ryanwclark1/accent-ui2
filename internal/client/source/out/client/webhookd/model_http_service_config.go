/*
accent-webhookd

Control your webhooks from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webhookd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the HTTPServiceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HTTPServiceConfig{}

// HTTPServiceConfig struct for HTTPServiceConfig
type HTTPServiceConfig struct {
	// Jinja2 template, where variables come from the event triggering the webhook. For more details, see https://accentvoice.io/uc-doc/api_sdk/rest_api/webhookd/templates. **Default:** the complete event data, JSON-encoded.
	Body *string `json:"body,omitempty"`
	// Content-Type of the body
	ContentType *string `json:"content_type,omitempty"`
	Method      string  `json:"method"`
	// Jinja2 template, where variables come from the event triggering the webhook. For more details, see https://accentvoice.io/uc-doc/api_sdk/rest_api/webhookd/templates
	Url string `json:"url"`
	// May be `true`, `false` or a path to the certificate bundle
	VerifyCertificate *string `json:"verify_certificate,omitempty"`
}

type _HTTPServiceConfig HTTPServiceConfig

// NewHTTPServiceConfig instantiates a new HTTPServiceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHTTPServiceConfig(method string, url string) *HTTPServiceConfig {
	this := HTTPServiceConfig{}
	this.Method = method
	this.Url = url
	var verifyCertificate string = "true"
	this.VerifyCertificate = &verifyCertificate
	return &this
}

// NewHTTPServiceConfigWithDefaults instantiates a new HTTPServiceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHTTPServiceConfigWithDefaults() *HTTPServiceConfig {
	this := HTTPServiceConfig{}
	var verifyCertificate string = "true"
	this.VerifyCertificate = &verifyCertificate
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *HTTPServiceConfig) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPServiceConfig) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *HTTPServiceConfig) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *HTTPServiceConfig) SetBody(v string) {
	o.Body = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *HTTPServiceConfig) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPServiceConfig) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *HTTPServiceConfig) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *HTTPServiceConfig) SetContentType(v string) {
	o.ContentType = &v
}

// GetMethod returns the Method field value
func (o *HTTPServiceConfig) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *HTTPServiceConfig) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *HTTPServiceConfig) SetMethod(v string) {
	o.Method = v
}

// GetUrl returns the Url field value
func (o *HTTPServiceConfig) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *HTTPServiceConfig) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *HTTPServiceConfig) SetUrl(v string) {
	o.Url = v
}

// GetVerifyCertificate returns the VerifyCertificate field value if set, zero value otherwise.
func (o *HTTPServiceConfig) GetVerifyCertificate() string {
	if o == nil || IsNil(o.VerifyCertificate) {
		var ret string
		return ret
	}
	return *o.VerifyCertificate
}

// GetVerifyCertificateOk returns a tuple with the VerifyCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPServiceConfig) GetVerifyCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.VerifyCertificate) {
		return nil, false
	}
	return o.VerifyCertificate, true
}

// HasVerifyCertificate returns a boolean if a field has been set.
func (o *HTTPServiceConfig) HasVerifyCertificate() bool {
	if o != nil && !IsNil(o.VerifyCertificate) {
		return true
	}

	return false
}

// SetVerifyCertificate gets a reference to the given string and assigns it to the VerifyCertificate field.
func (o *HTTPServiceConfig) SetVerifyCertificate(v string) {
	o.VerifyCertificate = &v
}

func (o HTTPServiceConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HTTPServiceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.ContentType) {
		toSerialize["content_type"] = o.ContentType
	}
	toSerialize["method"] = o.Method
	toSerialize["url"] = o.Url
	if !IsNil(o.VerifyCertificate) {
		toSerialize["verify_certificate"] = o.VerifyCertificate
	}
	return toSerialize, nil
}

func (o *HTTPServiceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"method",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHTTPServiceConfig := _HTTPServiceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHTTPServiceConfig)

	if err != nil {
		return err
	}

	*o = HTTPServiceConfig(varHTTPServiceConfig)

	return err
}

type NullableHTTPServiceConfig struct {
	value *HTTPServiceConfig
	isSet bool
}

func (v NullableHTTPServiceConfig) Get() *HTTPServiceConfig {
	return v.value
}

func (v *NullableHTTPServiceConfig) Set(val *HTTPServiceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHTTPServiceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHTTPServiceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHTTPServiceConfig(val *HTTPServiceConfig) *NullableHTTPServiceConfig {
	return &NullableHTTPServiceConfig{value: val, isSet: true}
}

func (v NullableHTTPServiceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHTTPServiceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
