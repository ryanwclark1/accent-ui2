/*
accent-webhookd

Control your webhooks from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webhookd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserSubscriptionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSubscriptionRequest{}

// UserSubscriptionRequest struct for UserSubscriptionRequest
type UserSubscriptionRequest struct {
	Config HTTPServiceConfig `json:"config"`
	Events []string          `json:"events"`
	Name   string            `json:"name"`
	// Known services: http. The service may be arbitrary, but it must be bound to an installed plugin in order to be effective.
	Service string `json:"service"`
	// Arbitrary key-value storage for this subscription. May be used to tag subscriptions. PUT replaces all metadata.
	Tags map[string]interface{} `json:"tags,omitempty"`
}

type _UserSubscriptionRequest UserSubscriptionRequest

// NewUserSubscriptionRequest instantiates a new UserSubscriptionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSubscriptionRequest(config HTTPServiceConfig, events []string, name string, service string) *UserSubscriptionRequest {
	this := UserSubscriptionRequest{}
	this.Config = config
	this.Events = events
	this.Name = name
	this.Service = service
	return &this
}

// NewUserSubscriptionRequestWithDefaults instantiates a new UserSubscriptionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSubscriptionRequestWithDefaults() *UserSubscriptionRequest {
	this := UserSubscriptionRequest{}
	return &this
}

// GetConfig returns the Config field value
func (o *UserSubscriptionRequest) GetConfig() HTTPServiceConfig {
	if o == nil {
		var ret HTTPServiceConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *UserSubscriptionRequest) GetConfigOk() (*HTTPServiceConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *UserSubscriptionRequest) SetConfig(v HTTPServiceConfig) {
	o.Config = v
}

// GetEvents returns the Events field value
func (o *UserSubscriptionRequest) GetEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *UserSubscriptionRequest) GetEventsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *UserSubscriptionRequest) SetEvents(v []string) {
	o.Events = v
}

// GetName returns the Name field value
func (o *UserSubscriptionRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserSubscriptionRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserSubscriptionRequest) SetName(v string) {
	o.Name = v
}

// GetService returns the Service field value
func (o *UserSubscriptionRequest) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *UserSubscriptionRequest) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *UserSubscriptionRequest) SetService(v string) {
	o.Service = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UserSubscriptionRequest) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSubscriptionRequest) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UserSubscriptionRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *UserSubscriptionRequest) SetTags(v map[string]interface{}) {
	o.Tags = v
}

func (o UserSubscriptionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSubscriptionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config"] = o.Config
	toSerialize["events"] = o.Events
	toSerialize["name"] = o.Name
	toSerialize["service"] = o.Service
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *UserSubscriptionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config",
		"events",
		"name",
		"service",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSubscriptionRequest := _UserSubscriptionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSubscriptionRequest)

	if err != nil {
		return err
	}

	*o = UserSubscriptionRequest(varUserSubscriptionRequest)

	return err
}

type NullableUserSubscriptionRequest struct {
	value *UserSubscriptionRequest
	isSet bool
}

func (v NullableUserSubscriptionRequest) Get() *UserSubscriptionRequest {
	return v.value
}

func (v *NullableUserSubscriptionRequest) Set(val *UserSubscriptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSubscriptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSubscriptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSubscriptionRequest(val *UserSubscriptionRequest) *NullableUserSubscriptionRequest {
	return &NullableUserSubscriptionRequest{value: val, isSet: true}
}

func (v NullableUserSubscriptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSubscriptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
