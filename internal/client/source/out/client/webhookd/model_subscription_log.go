/*
accent-webhookd

Control your webhooks from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webhookd

import (
	"encoding/json"
	"time"
)

// checks if the SubscriptionLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionLog{}

// SubscriptionLog struct for SubscriptionLog
type SubscriptionLog struct {
	// The current attempts
	Attempts *int32          `json:"attempts,omitempty"`
	Detail   *HTTPServiceLog `json:"detail,omitempty"`
	EndedAt  *time.Time      `json:"ended_at,omitempty"`
	Event    *string         `json:"event,omitempty"`
	// Limit of number of attempts
	MaxAttempts *int32     `json:"max_attempts,omitempty"`
	StartedAt   *time.Time `json:"started_at,omitempty"`
	Status      *string    `json:"status,omitempty"`
	Uuid        *string    `json:"uuid,omitempty"`
}

// NewSubscriptionLog instantiates a new SubscriptionLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionLog() *SubscriptionLog {
	this := SubscriptionLog{}
	return &this
}

// NewSubscriptionLogWithDefaults instantiates a new SubscriptionLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionLogWithDefaults() *SubscriptionLog {
	this := SubscriptionLog{}
	return &this
}

// GetAttempts returns the Attempts field value if set, zero value otherwise.
func (o *SubscriptionLog) GetAttempts() int32 {
	if o == nil || IsNil(o.Attempts) {
		var ret int32
		return ret
	}
	return *o.Attempts
}

// GetAttemptsOk returns a tuple with the Attempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionLog) GetAttemptsOk() (*int32, bool) {
	if o == nil || IsNil(o.Attempts) {
		return nil, false
	}
	return o.Attempts, true
}

// HasAttempts returns a boolean if a field has been set.
func (o *SubscriptionLog) HasAttempts() bool {
	if o != nil && !IsNil(o.Attempts) {
		return true
	}

	return false
}

// SetAttempts gets a reference to the given int32 and assigns it to the Attempts field.
func (o *SubscriptionLog) SetAttempts(v int32) {
	o.Attempts = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *SubscriptionLog) GetDetail() HTTPServiceLog {
	if o == nil || IsNil(o.Detail) {
		var ret HTTPServiceLog
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionLog) GetDetailOk() (*HTTPServiceLog, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *SubscriptionLog) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given HTTPServiceLog and assigns it to the Detail field.
func (o *SubscriptionLog) SetDetail(v HTTPServiceLog) {
	o.Detail = &v
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise.
func (o *SubscriptionLog) GetEndedAt() time.Time {
	if o == nil || IsNil(o.EndedAt) {
		var ret time.Time
		return ret
	}
	return *o.EndedAt
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionLog) GetEndedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndedAt) {
		return nil, false
	}
	return o.EndedAt, true
}

// HasEndedAt returns a boolean if a field has been set.
func (o *SubscriptionLog) HasEndedAt() bool {
	if o != nil && !IsNil(o.EndedAt) {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given time.Time and assigns it to the EndedAt field.
func (o *SubscriptionLog) SetEndedAt(v time.Time) {
	o.EndedAt = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *SubscriptionLog) GetEvent() string {
	if o == nil || IsNil(o.Event) {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionLog) GetEventOk() (*string, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *SubscriptionLog) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *SubscriptionLog) SetEvent(v string) {
	o.Event = &v
}

// GetMaxAttempts returns the MaxAttempts field value if set, zero value otherwise.
func (o *SubscriptionLog) GetMaxAttempts() int32 {
	if o == nil || IsNil(o.MaxAttempts) {
		var ret int32
		return ret
	}
	return *o.MaxAttempts
}

// GetMaxAttemptsOk returns a tuple with the MaxAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionLog) GetMaxAttemptsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAttempts) {
		return nil, false
	}
	return o.MaxAttempts, true
}

// HasMaxAttempts returns a boolean if a field has been set.
func (o *SubscriptionLog) HasMaxAttempts() bool {
	if o != nil && !IsNil(o.MaxAttempts) {
		return true
	}

	return false
}

// SetMaxAttempts gets a reference to the given int32 and assigns it to the MaxAttempts field.
func (o *SubscriptionLog) SetMaxAttempts(v int32) {
	o.MaxAttempts = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *SubscriptionLog) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionLog) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *SubscriptionLog) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *SubscriptionLog) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SubscriptionLog) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionLog) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SubscriptionLog) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SubscriptionLog) SetStatus(v string) {
	o.Status = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *SubscriptionLog) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionLog) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *SubscriptionLog) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *SubscriptionLog) SetUuid(v string) {
	o.Uuid = &v
}

func (o SubscriptionLog) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attempts) {
		toSerialize["attempts"] = o.Attempts
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	if !IsNil(o.EndedAt) {
		toSerialize["ended_at"] = o.EndedAt
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.MaxAttempts) {
		toSerialize["max_attempts"] = o.MaxAttempts
	}
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableSubscriptionLog struct {
	value *SubscriptionLog
	isSet bool
}

func (v NullableSubscriptionLog) Get() *SubscriptionLog {
	return v.value
}

func (v *NullableSubscriptionLog) Set(val *SubscriptionLog) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionLog) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionLog(val *SubscriptionLog) *NullableSubscriptionLog {
	return &NullableSubscriptionLog{value: val, isSet: true}
}

func (v NullableSubscriptionLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
