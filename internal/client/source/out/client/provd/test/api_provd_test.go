/*
accent-provd

Testing ProvdAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package provd

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/provd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_provd_ProvdAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProvdAPIService GetConfigure", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ProvdAPI.GetConfigure(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvdAPIService GetConfigureParamId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paramId string

		resp, httpRes, err := apiClient.ProvdAPI.GetConfigureParamId(context.Background(), paramId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvdAPIService GetProvd", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ProvdAPI.GetProvd(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvdAPIService PutConfigureFtpProxy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ProvdAPI.PutConfigureFtpProxy(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvdAPIService PutConfigureHttpProxy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ProvdAPI.PutConfigureHttpProxy(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvdAPIService PutConfigureHttpsProxy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ProvdAPI.PutConfigureHttpsProxy(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvdAPIService PutConfigureLocale", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ProvdAPI.PutConfigureLocale(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvdAPIService PutConfigureNAT", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ProvdAPI.PutConfigureNAT(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvdAPIService PutConfigureParamId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paramId string

		httpRes, err := apiClient.ProvdAPI.PutConfigureParamId(context.Background(), paramId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvdAPIService PutConfigurePluginServer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ProvdAPI.PutConfigurePluginServer(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvdAPIService PutConfigureProvisioningKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ProvdAPI.PutConfigureProvisioningKey(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
