/*
accent-provd

Testing DevicesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package provd

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/provd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_provd_DevicesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DevicesAPIService DeleteDevMgrDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceId string

		httpRes, err := apiClient.DevicesAPI.DeleteDevMgrDevice(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService DeleteDevMgrSynchronize", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var operationId string

		httpRes, err := apiClient.DevicesAPI.DeleteDevMgrSynchronize(context.Background(), operationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService DevMgrDevicesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DevicesAPI.DevMgrDevicesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevMgr", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DevicesAPI.GetDevMgr(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevMgrDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DevicesAPI.GetDevMgrDevice(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevMgrDevices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DevicesAPI.GetDevMgrDevices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService GetDevMgrSynchronize", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var operationId string

		resp, httpRes, err := apiClient.DevicesAPI.GetDevMgrSynchronize(context.Background(), operationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService PostDevMgrDhcpinfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DevicesAPI.PostDevMgrDhcpinfo(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService PostDevMgrReconfigure", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DevicesAPI.PostDevMgrReconfigure(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService PostDevMgrSynchronize", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DevicesAPI.PostDevMgrSynchronize(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesAPIService PutDevMgrDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceId string

		httpRes, err := apiClient.DevicesAPI.PutDevMgrDevice(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
