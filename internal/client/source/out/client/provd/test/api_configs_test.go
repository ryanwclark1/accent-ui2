/*
accent-provd

Testing ConfigsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package provd

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/provd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_provd_ConfigsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConfigsAPIService DeleteCfgMgrConfigsConfigId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var configId string

		httpRes, err := apiClient.ConfigsAPI.DeleteCfgMgrConfigsConfigId(context.Background(), configId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService GetCfgMgr", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ConfigsAPI.GetCfgMgr(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService GetCfgMgrConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var configId string

		resp, httpRes, err := apiClient.ConfigsAPI.GetCfgMgrConfig(context.Background(), configId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService GetCfgMgrConfigs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ConfigsAPI.GetCfgMgrConfigs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService GetCfgMgrRawConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var configId string

		resp, httpRes, err := apiClient.ConfigsAPI.GetCfgMgrRawConfig(context.Background(), configId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService PostCfgMgrAutocreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ConfigsAPI.PostCfgMgrAutocreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService PostCfgMgrConfigs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ConfigsAPI.PostCfgMgrConfigs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService PutCfgMgrConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var configId string

		httpRes, err := apiClient.ConfigsAPI.PutCfgMgrConfig(context.Background(), configId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
