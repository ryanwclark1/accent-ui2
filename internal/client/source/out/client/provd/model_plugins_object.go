/*
accent-provd

Provisioning application REST API

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provd

import (
	"encoding/json"
)

// checks if the PluginsObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginsObject{}

// PluginsObject struct for PluginsObject
type PluginsObject struct {
	Plugins *map[string]LinksObject `json:"plugins,omitempty"`
}

// NewPluginsObject instantiates a new PluginsObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginsObject() *PluginsObject {
	this := PluginsObject{}
	return &this
}

// NewPluginsObjectWithDefaults instantiates a new PluginsObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginsObjectWithDefaults() *PluginsObject {
	this := PluginsObject{}
	return &this
}

// GetPlugins returns the Plugins field value if set, zero value otherwise.
func (o *PluginsObject) GetPlugins() map[string]LinksObject {
	if o == nil || IsNil(o.Plugins) {
		var ret map[string]LinksObject
		return ret
	}
	return *o.Plugins
}

// GetPluginsOk returns a tuple with the Plugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginsObject) GetPluginsOk() (*map[string]LinksObject, bool) {
	if o == nil || IsNil(o.Plugins) {
		return nil, false
	}
	return o.Plugins, true
}

// HasPlugins returns a boolean if a field has been set.
func (o *PluginsObject) HasPlugins() bool {
	if o != nil && !IsNil(o.Plugins) {
		return true
	}

	return false
}

// SetPlugins gets a reference to the given map[string]LinksObject and assigns it to the Plugins field.
func (o *PluginsObject) SetPlugins(v map[string]LinksObject) {
	o.Plugins = &v
}

func (o PluginsObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginsObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Plugins) {
		toSerialize["plugins"] = o.Plugins
	}
	return toSerialize, nil
}

type NullablePluginsObject struct {
	value *PluginsObject
	isSet bool
}

func (v NullablePluginsObject) Get() *PluginsObject {
	return v.value
}

func (v *NullablePluginsObject) Set(val *PluginsObject) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginsObject) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginsObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginsObject(val *PluginsObject) *NullablePluginsObject {
	return &NullablePluginsObject{value: val, isSet: true}
}

func (v NullablePluginsObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginsObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
