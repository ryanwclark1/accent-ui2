/*
accent-provd

Provisioning application REST API

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type DevicesAPI interface {

	/*
		DeleteDevMgrDevice Delete a device

		**Required ACL:** `provd.dev_mgr.devices.{device_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param deviceId Device ID
		@return ApiDeleteDevMgrDeviceRequest
	*/
	DeleteDevMgrDevice(ctx context.Context, deviceId string) ApiDeleteDevMgrDeviceRequest

	// DeleteDevMgrDeviceExecute executes the request
	DeleteDevMgrDeviceExecute(r ApiDeleteDevMgrDeviceRequest) (*http.Response, error)

	/*
		DeleteDevMgrSynchronize Delete the Operation In Progress

		**Required ACL:** `provd.operation.delete` This does not cancel the underlying operation; it only deletes the monitor Every monitor that is created should be deleted, else they won't be freed by the process and they will accumulate, taking memory

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param operationId Operation In Progress ID
		@return ApiDeleteDevMgrSynchronizeRequest
	*/
	DeleteDevMgrSynchronize(ctx context.Context, operationId string) ApiDeleteDevMgrSynchronizeRequest

	// DeleteDevMgrSynchronizeExecute executes the request
	DeleteDevMgrSynchronizeExecute(r ApiDeleteDevMgrSynchronizeRequest) (*http.Response, error)

	/*
		DevMgrDevicesPost Create a device

		**Required ACL:** `provd.dev_mgr.devices.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiDevMgrDevicesPostRequest
	*/
	DevMgrDevicesPost(ctx context.Context) ApiDevMgrDevicesPostRequest

	// DevMgrDevicesPostExecute executes the request
	//  @return IdObject
	DevMgrDevicesPostExecute(r ApiDevMgrDevicesPostRequest) (*IdObject, *http.Response, error)

	/*
		GetDevMgr Get the Device Manager resource

		**Required ACL:** `provd.dev_mgr.read` The device manager resource represents the entry point to the accent-provd device REST API

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetDevMgrRequest
	*/
	GetDevMgr(ctx context.Context) ApiGetDevMgrRequest

	// GetDevMgrExecute executes the request
	//  @return LinksObject
	GetDevMgrExecute(r ApiGetDevMgrRequest) (*LinksObject, *http.Response, error)

	/*
		GetDevMgrDevice Get a device by ID

		**Required ACL:** `provd.dev_mgr.devices.{device_id}.read` Get a device using its ID

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param deviceId Device ID
		@return ApiGetDevMgrDeviceRequest
	*/
	GetDevMgrDevice(ctx context.Context, deviceId string) ApiGetDevMgrDeviceRequest

	// GetDevMgrDeviceExecute executes the request
	//  @return DeviceObject
	GetDevMgrDeviceExecute(r ApiGetDevMgrDeviceRequest) (*DeviceObject, *http.Response, error)

	/*
		GetDevMgrDevices List and find devices

		**Required ACL:** `provd.dev_mgr.devices.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetDevMgrDevicesRequest
	*/
	GetDevMgrDevices(ctx context.Context) ApiGetDevMgrDevicesRequest

	// GetDevMgrDevicesExecute executes the request
	//  @return DevicesList
	GetDevMgrDevicesExecute(r ApiGetDevMgrDevicesRequest) (*DevicesList, *http.Response, error)

	/*
		GetDevMgrSynchronize Get the status of a synchronize Operation In Progress

		**Required ACL:** `provd.operation.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param operationId Operation In Progress ID
		@return ApiGetDevMgrSynchronizeRequest
	*/
	GetDevMgrSynchronize(ctx context.Context, operationId string) ApiGetDevMgrSynchronizeRequest

	// GetDevMgrSynchronizeExecute executes the request
	//  @return OperationInProgressObject
	GetDevMgrSynchronizeExecute(r ApiGetDevMgrSynchronizeRequest) (*OperationInProgressObject, *http.Response, error)

	/*
		PostDevMgrDhcpinfo Push DHCP request information

		**Required ACL:** `provd.dev_mgr.dhcpinfo.create` The provisioning server either creates a new device or changes the information of the device with the same MAC address

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiPostDevMgrDhcpinfoRequest
	*/
	PostDevMgrDhcpinfo(ctx context.Context) ApiPostDevMgrDhcpinfoRequest

	// PostDevMgrDhcpinfoExecute executes the request
	PostDevMgrDhcpinfoExecute(r ApiPostDevMgrDhcpinfoRequest) (*http.Response, error)

	/*
		PostDevMgrReconfigure Reconfigure a device

		**Required ACL:** `provd.dev_mgr.reconfigure.create` Regenerate the configuration file for the specified device

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiPostDevMgrReconfigureRequest
	*/
	PostDevMgrReconfigure(ctx context.Context) ApiPostDevMgrReconfigureRequest

	// PostDevMgrReconfigureExecute executes the request
	PostDevMgrReconfigureExecute(r ApiPostDevMgrReconfigureRequest) (*http.Response, error)

	/*
		PostDevMgrSynchronize Synchronize a device

		**Required ACL:** `provd.dev_mgr.synchronize.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiPostDevMgrSynchronizeRequest
	*/
	PostDevMgrSynchronize(ctx context.Context) ApiPostDevMgrSynchronizeRequest

	// PostDevMgrSynchronizeExecute executes the request
	PostDevMgrSynchronizeExecute(r ApiPostDevMgrSynchronizeRequest) (*http.Response, error)

	/*
		PutDevMgrDevice Update a device

		**Required ACL:** `provd.dev_mgr.devices.{device_id}.update` Every field must be specified, otherwise they will be omitted

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param deviceId Device ID
		@return ApiPutDevMgrDeviceRequest
	*/
	PutDevMgrDevice(ctx context.Context, deviceId string) ApiPutDevMgrDeviceRequest

	// PutDevMgrDeviceExecute executes the request
	PutDevMgrDeviceExecute(r ApiPutDevMgrDeviceRequest) (*http.Response, error)
}

// DevicesAPIService DevicesAPI service
type DevicesAPIService service

type ApiDeleteDevMgrDeviceRequest struct {
	ctx          context.Context
	ApiService   DevicesAPI
	deviceId     string
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource
func (r ApiDeleteDevMgrDeviceRequest) AccentTenant(accentTenant string) ApiDeleteDevMgrDeviceRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiDeleteDevMgrDeviceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDevMgrDeviceExecute(r)
}

/*
DeleteDevMgrDevice Delete a device

**Required ACL:** `provd.dev_mgr.devices.{device_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param deviceId Device ID
	@return ApiDeleteDevMgrDeviceRequest
*/
func (a *DevicesAPIService) DeleteDevMgrDevice(ctx context.Context, deviceId string) ApiDeleteDevMgrDeviceRequest {
	return ApiDeleteDevMgrDeviceRequest{
		ApiService: a,
		ctx:        ctx,
		deviceId:   deviceId,
	}
}

// Execute executes the request
func (a *DevicesAPIService) DeleteDevMgrDeviceExecute(r ApiDeleteDevMgrDeviceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevicesAPIService.DeleteDevMgrDevice")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dev_mgr/devices/{device_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"device_id"+"}", url.PathEscape(parameterValueToString(r.deviceId, "deviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.accent.provd+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteDevMgrSynchronizeRequest struct {
	ctx         context.Context
	ApiService  DevicesAPI
	operationId string
}

func (r ApiDeleteDevMgrSynchronizeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDevMgrSynchronizeExecute(r)
}

/*
DeleteDevMgrSynchronize Delete the Operation In Progress

**Required ACL:** `provd.operation.delete` This does not cancel the underlying operation; it only deletes the monitor Every monitor that is created should be deleted, else they won't be freed by the process and they will accumulate, taking memory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param operationId Operation In Progress ID
	@return ApiDeleteDevMgrSynchronizeRequest
*/
func (a *DevicesAPIService) DeleteDevMgrSynchronize(ctx context.Context, operationId string) ApiDeleteDevMgrSynchronizeRequest {
	return ApiDeleteDevMgrSynchronizeRequest{
		ApiService:  a,
		ctx:         ctx,
		operationId: operationId,
	}
}

// Execute executes the request
func (a *DevicesAPIService) DeleteDevMgrSynchronizeExecute(r ApiDeleteDevMgrSynchronizeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevicesAPIService.DeleteDevMgrSynchronize")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dev_mgr/synchronize/{operation_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"operation_id"+"}", url.PathEscape(parameterValueToString(r.operationId, "operationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.accent.provd+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDevMgrDevicesPostRequest struct {
	ctx          context.Context
	ApiService   DevicesAPI
	device       *DeviceObject
	accentTenant *string
}

// Device to create
func (r ApiDevMgrDevicesPostRequest) Device(device DeviceObject) ApiDevMgrDevicesPostRequest {
	r.device = &device
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource
func (r ApiDevMgrDevicesPostRequest) AccentTenant(accentTenant string) ApiDevMgrDevicesPostRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiDevMgrDevicesPostRequest) Execute() (*IdObject, *http.Response, error) {
	return r.ApiService.DevMgrDevicesPostExecute(r)
}

/*
DevMgrDevicesPost Create a device

**Required ACL:** `provd.dev_mgr.devices.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDevMgrDevicesPostRequest
*/
func (a *DevicesAPIService) DevMgrDevicesPost(ctx context.Context) ApiDevMgrDevicesPostRequest {
	return ApiDevMgrDevicesPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return IdObject
func (a *DevicesAPIService) DevMgrDevicesPostExecute(r ApiDevMgrDevicesPostRequest) (*IdObject, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IdObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevicesAPIService.DevMgrDevicesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dev_mgr/devices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.accent.provd+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.accent.provd+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.device
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDevMgrRequest struct {
	ctx        context.Context
	ApiService DevicesAPI
}

func (r ApiGetDevMgrRequest) Execute() (*LinksObject, *http.Response, error) {
	return r.ApiService.GetDevMgrExecute(r)
}

/*
GetDevMgr Get the Device Manager resource

**Required ACL:** `provd.dev_mgr.read` The device manager resource represents the entry point to the accent-provd device REST API

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetDevMgrRequest
*/
func (a *DevicesAPIService) GetDevMgr(ctx context.Context) ApiGetDevMgrRequest {
	return ApiGetDevMgrRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LinksObject
func (a *DevicesAPIService) GetDevMgrExecute(r ApiGetDevMgrRequest) (*LinksObject, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LinksObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevicesAPIService.GetDevMgr")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dev_mgr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.accent.provd+json", "links"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDevMgrDeviceRequest struct {
	ctx          context.Context
	ApiService   DevicesAPI
	deviceId     string
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource
func (r ApiGetDevMgrDeviceRequest) AccentTenant(accentTenant string) ApiGetDevMgrDeviceRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiGetDevMgrDeviceRequest) Execute() (*DeviceObject, *http.Response, error) {
	return r.ApiService.GetDevMgrDeviceExecute(r)
}

/*
GetDevMgrDevice Get a device by ID

**Required ACL:** `provd.dev_mgr.devices.{device_id}.read` Get a device using its ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param deviceId Device ID
	@return ApiGetDevMgrDeviceRequest
*/
func (a *DevicesAPIService) GetDevMgrDevice(ctx context.Context, deviceId string) ApiGetDevMgrDeviceRequest {
	return ApiGetDevMgrDeviceRequest{
		ApiService: a,
		ctx:        ctx,
		deviceId:   deviceId,
	}
}

// Execute executes the request
//
//	@return DeviceObject
func (a *DevicesAPIService) GetDevMgrDeviceExecute(r ApiGetDevMgrDeviceRequest) (*DeviceObject, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevicesAPIService.GetDevMgrDevice")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dev_mgr/devices/{device_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"device_id"+"}", url.PathEscape(parameterValueToString(r.deviceId, "deviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.accent.provd+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDevMgrDevicesRequest struct {
	ctx          context.Context
	ApiService   DevicesAPI
	q            *string
	fields       *string
	skip         *int32
	sort         *string
	sortOrd      *string
	accentTenant *string
	recurse      *bool
}

// A selector, encoded in JSON, describing which entries should be returned. All entries are returned if not specified.  Example: &#x60;{\&quot;ip\&quot;:\&quot;10.34.1.110\&quot;}&#x60;
func (r ApiGetDevMgrDevicesRequest) Q(q string) ApiGetDevMgrDevicesRequest {
	r.q = &q
	return r
}

// A list of fields, separated by comma.  Example: &#x60;mac,ip&#x60;
func (r ApiGetDevMgrDevicesRequest) Fields(fields string) ApiGetDevMgrDevicesRequest {
	r.fields = &fields
	return r
}

// An integer specifing the number of entries to skip.  Example: 10
func (r ApiGetDevMgrDevicesRequest) Skip(skip int32) ApiGetDevMgrDevicesRequest {
	r.skip = &skip
	return r
}

// The key on which to sort the results.  Example: &#x60;id&#x60;
func (r ApiGetDevMgrDevicesRequest) Sort(sort string) ApiGetDevMgrDevicesRequest {
	r.sort = &sort
	return r
}

// The order of sort
func (r ApiGetDevMgrDevicesRequest) SortOrd(sortOrd string) ApiGetDevMgrDevicesRequest {
	r.sortOrd = &sortOrd
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource
func (r ApiGetDevMgrDevicesRequest) AccentTenant(accentTenant string) ApiGetDevMgrDevicesRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r ApiGetDevMgrDevicesRequest) Recurse(recurse bool) ApiGetDevMgrDevicesRequest {
	r.recurse = &recurse
	return r
}

func (r ApiGetDevMgrDevicesRequest) Execute() (*DevicesList, *http.Response, error) {
	return r.ApiService.GetDevMgrDevicesExecute(r)
}

/*
GetDevMgrDevices List and find devices

**Required ACL:** `provd.dev_mgr.devices.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetDevMgrDevicesRequest
*/
func (a *DevicesAPIService) GetDevMgrDevices(ctx context.Context) ApiGetDevMgrDevicesRequest {
	return ApiGetDevMgrDevicesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DevicesList
func (a *DevicesAPIService) GetDevMgrDevicesExecute(r ApiGetDevMgrDevicesRequest) (*DevicesList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DevicesList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevicesAPIService.GetDevMgrDevices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dev_mgr/devices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skip", r.skip, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.sortOrd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_ord", r.sortOrd, "")
	}
	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.accent.provd+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDevMgrSynchronizeRequest struct {
	ctx         context.Context
	ApiService  DevicesAPI
	operationId string
}

func (r ApiGetDevMgrSynchronizeRequest) Execute() (*OperationInProgressObject, *http.Response, error) {
	return r.ApiService.GetDevMgrSynchronizeExecute(r)
}

/*
GetDevMgrSynchronize Get the status of a synchronize Operation In Progress

**Required ACL:** `provd.operation.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param operationId Operation In Progress ID
	@return ApiGetDevMgrSynchronizeRequest
*/
func (a *DevicesAPIService) GetDevMgrSynchronize(ctx context.Context, operationId string) ApiGetDevMgrSynchronizeRequest {
	return ApiGetDevMgrSynchronizeRequest{
		ApiService:  a,
		ctx:         ctx,
		operationId: operationId,
	}
}

// Execute executes the request
//
//	@return OperationInProgressObject
func (a *DevicesAPIService) GetDevMgrSynchronizeExecute(r ApiGetDevMgrSynchronizeRequest) (*OperationInProgressObject, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OperationInProgressObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevicesAPIService.GetDevMgrSynchronize")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dev_mgr/synchronize/{operation_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"operation_id"+"}", url.PathEscape(parameterValueToString(r.operationId, "operationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.accent.provd+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostDevMgrDhcpinfoRequest struct {
	ctx          context.Context
	ApiService   DevicesAPI
	body         *DHCPInfoObject
	accentTenant *string
}

// DHCP request information
func (r ApiPostDevMgrDhcpinfoRequest) Body(body DHCPInfoObject) ApiPostDevMgrDhcpinfoRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource
func (r ApiPostDevMgrDhcpinfoRequest) AccentTenant(accentTenant string) ApiPostDevMgrDhcpinfoRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiPostDevMgrDhcpinfoRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostDevMgrDhcpinfoExecute(r)
}

/*
PostDevMgrDhcpinfo Push DHCP request information

**Required ACL:** `provd.dev_mgr.dhcpinfo.create` The provisioning server either creates a new device or changes the information of the device with the same MAC address

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostDevMgrDhcpinfoRequest
*/
func (a *DevicesAPIService) PostDevMgrDhcpinfo(ctx context.Context) ApiPostDevMgrDhcpinfoRequest {
	return ApiPostDevMgrDhcpinfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DevicesAPIService) PostDevMgrDhcpinfoExecute(r ApiPostDevMgrDhcpinfoRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevicesAPIService.PostDevMgrDhcpinfo")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dev_mgr/dhcpinfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.accent.provd+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostDevMgrReconfigureRequest struct {
	ctx          context.Context
	ApiService   DevicesAPI
	body         *IdObject
	accentTenant *string
}

// Device ID body definition
func (r ApiPostDevMgrReconfigureRequest) Body(body IdObject) ApiPostDevMgrReconfigureRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource
func (r ApiPostDevMgrReconfigureRequest) AccentTenant(accentTenant string) ApiPostDevMgrReconfigureRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiPostDevMgrReconfigureRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostDevMgrReconfigureExecute(r)
}

/*
PostDevMgrReconfigure Reconfigure a device

**Required ACL:** `provd.dev_mgr.reconfigure.create` Regenerate the configuration file for the specified device

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostDevMgrReconfigureRequest
*/
func (a *DevicesAPIService) PostDevMgrReconfigure(ctx context.Context) ApiPostDevMgrReconfigureRequest {
	return ApiPostDevMgrReconfigureRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DevicesAPIService) PostDevMgrReconfigureExecute(r ApiPostDevMgrReconfigureRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevicesAPIService.PostDevMgrReconfigure")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dev_mgr/reconfigure"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.accent.provd+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.accent.provd+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostDevMgrSynchronizeRequest struct {
	ctx          context.Context
	ApiService   DevicesAPI
	body         *IdObject
	accentTenant *string
}

// Device ID body definition
func (r ApiPostDevMgrSynchronizeRequest) Body(body IdObject) ApiPostDevMgrSynchronizeRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource
func (r ApiPostDevMgrSynchronizeRequest) AccentTenant(accentTenant string) ApiPostDevMgrSynchronizeRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiPostDevMgrSynchronizeRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostDevMgrSynchronizeExecute(r)
}

/*
PostDevMgrSynchronize Synchronize a device

**Required ACL:** `provd.dev_mgr.synchronize.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostDevMgrSynchronizeRequest
*/
func (a *DevicesAPIService) PostDevMgrSynchronize(ctx context.Context) ApiPostDevMgrSynchronizeRequest {
	return ApiPostDevMgrSynchronizeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DevicesAPIService) PostDevMgrSynchronizeExecute(r ApiPostDevMgrSynchronizeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevicesAPIService.PostDevMgrSynchronize")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dev_mgr/synchronize"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.accent.provd+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.accent.provd+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPutDevMgrDeviceRequest struct {
	ctx          context.Context
	ApiService   DevicesAPI
	deviceId     string
	device       *DeviceObject
	accentTenant *string
}

// Device information to update
func (r ApiPutDevMgrDeviceRequest) Device(device DeviceObject) ApiPutDevMgrDeviceRequest {
	r.device = &device
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource
func (r ApiPutDevMgrDeviceRequest) AccentTenant(accentTenant string) ApiPutDevMgrDeviceRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiPutDevMgrDeviceRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutDevMgrDeviceExecute(r)
}

/*
PutDevMgrDevice Update a device

**Required ACL:** `provd.dev_mgr.devices.{device_id}.update` Every field must be specified, otherwise they will be omitted

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param deviceId Device ID
	@return ApiPutDevMgrDeviceRequest
*/
func (a *DevicesAPIService) PutDevMgrDevice(ctx context.Context, deviceId string) ApiPutDevMgrDeviceRequest {
	return ApiPutDevMgrDeviceRequest{
		ApiService: a,
		ctx:        ctx,
		deviceId:   deviceId,
	}
}

// Execute executes the request
func (a *DevicesAPIService) PutDevMgrDeviceExecute(r ApiPutDevMgrDeviceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevicesAPIService.PutDevMgrDevice")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dev_mgr/devices/{device_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"device_id"+"}", url.PathEscape(parameterValueToString(r.deviceId, "deviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.accent.provd+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.accent.provd+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.device
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
