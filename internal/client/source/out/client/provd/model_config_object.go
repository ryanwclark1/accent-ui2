/*
accent-provd

Provisioning application REST API

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provd

import (
	"encoding/json"
)

// checks if the ConfigObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigObject{}

// ConfigObject A configuration object
type ConfigObject struct {
	Config *Config `json:"config,omitempty"`
}

// NewConfigObject instantiates a new ConfigObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigObject() *ConfigObject {
	this := ConfigObject{}
	return &this
}

// NewConfigObjectWithDefaults instantiates a new ConfigObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigObjectWithDefaults() *ConfigObject {
	this := ConfigObject{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ConfigObject) GetConfig() Config {
	if o == nil || IsNil(o.Config) {
		var ret Config
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigObject) GetConfigOk() (*Config, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ConfigObject) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given Config and assigns it to the Config field.
func (o *ConfigObject) SetConfig(v Config) {
	o.Config = &v
}

func (o ConfigObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

type NullableConfigObject struct {
	value *ConfigObject
	isSet bool
}

func (v NullableConfigObject) Get() *ConfigObject {
	return v.value
}

func (v *NullableConfigObject) Set(val *ConfigObject) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigObject) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigObject(val *ConfigObject) *NullableConfigObject {
	return &NullableConfigObject{value: val, isSet: true}
}

func (v NullableConfigObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
