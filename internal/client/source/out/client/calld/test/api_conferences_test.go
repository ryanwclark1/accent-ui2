/*
accent-calld

Testing ConferencesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package calld

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/calld"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_calld_ConferencesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConferencesAPIService KickParticipant", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var conferenceId string
		var participantId string

		httpRes, err := apiClient.ConferencesAPI.KickParticipant(context.Background(), conferenceId, participantId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService ListConferenceParticipants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var conferenceId string

		resp, httpRes, err := apiClient.ConferencesAPI.ListConferenceParticipants(context.Background(), conferenceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService ListUserConferenceParticipants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var conferenceId string

		resp, httpRes, err := apiClient.ConferencesAPI.ListUserConferenceParticipants(context.Background(), conferenceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService MuteParticipant", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var conferenceId string
		var participantId string

		httpRes, err := apiClient.ConferencesAPI.MuteParticipant(context.Background(), conferenceId, participantId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService StartConferenceRecording", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var conferenceId string

		httpRes, err := apiClient.ConferencesAPI.StartConferenceRecording(context.Background(), conferenceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService StopConferenceRecording", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var conferenceId string

		httpRes, err := apiClient.ConferencesAPI.StopConferenceRecording(context.Background(), conferenceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService UnmuteParticipant", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var conferenceId string
		var participantId string

		httpRes, err := apiClient.ConferencesAPI.UnmuteParticipant(context.Background(), conferenceId, participantId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
