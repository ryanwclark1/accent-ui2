/*
accent-calld

Testing TransfersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package calld

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/calld"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_calld_TransfersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TransfersAPIService CancelTransfer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transferId string

		httpRes, err := apiClient.TransfersAPI.CancelTransfer(context.Background(), transferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransfersAPIService CancelUserTransfer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transferId string

		httpRes, err := apiClient.TransfersAPI.CancelUserTransfer(context.Background(), transferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransfersAPIService CompleteTransfer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transferId string

		httpRes, err := apiClient.TransfersAPI.CompleteTransfer(context.Background(), transferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransfersAPIService CompleteUserTransfer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transferId string

		httpRes, err := apiClient.TransfersAPI.CompleteUserTransfer(context.Background(), transferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransfersAPIService GetTransfer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transferId string

		resp, httpRes, err := apiClient.TransfersAPI.GetTransfer(context.Background(), transferId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransfersAPIService InitiateTransfer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TransfersAPI.InitiateTransfer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransfersAPIService InitiateUserTransfer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TransfersAPI.InitiateUserTransfer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransfersAPIService ListUserTransfers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TransfersAPI.ListUserTransfers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
