/*
accent-calld

Testing UsersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package calld

import (
	"context"
	openapiclient "github.com/ryanwclark1/accent-ui2/internal/client/calld"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_calld_UsersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UsersAPIService AnswerUserCall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callId string

		httpRes, err := apiClient.UsersAPI.AnswerUserCall(context.Background(), callId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService CancelRelocate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var relocateUuid string

		httpRes, err := apiClient.UsersAPI.CancelRelocate(context.Background(), relocateUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService CancelUserTransfer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transferId string

		httpRes, err := apiClient.UsersAPI.CancelUserTransfer(context.Background(), transferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService CheckUserVoicemailGreeting", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var greeting string

		httpRes, err := apiClient.UsersAPI.CheckUserVoicemailGreeting(context.Background(), greeting).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService CompleteRelocate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var relocateUuid string

		httpRes, err := apiClient.UsersAPI.CompleteRelocate(context.Background(), relocateUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService CompleteUserTransfer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transferId string

		httpRes, err := apiClient.UsersAPI.CompleteUserTransfer(context.Background(), transferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService CopyUserVoicemailGreeting", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var greeting string

		httpRes, err := apiClient.UsersAPI.CopyUserVoicemailGreeting(context.Background(), greeting).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService CreateUserCall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.CreateUserCall(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService CreateUserVoicemailGreeting", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var greeting string

		httpRes, err := apiClient.UsersAPI.CreateUserVoicemailGreeting(context.Background(), greeting).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService DeleteUserVoicemailGreeting", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var greeting string

		httpRes, err := apiClient.UsersAPI.DeleteUserVoicemailGreeting(context.Background(), greeting).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService DeleteUserVoicemailMessage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var messageId string

		httpRes, err := apiClient.UsersAPI.DeleteUserVoicemailMessage(context.Background(), messageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserVoicemailFolder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var folderId int32

		resp, httpRes, err := apiClient.UsersAPI.GetUserVoicemailFolder(context.Background(), folderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserVoicemailGreeting", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var greeting string

		httpRes, err := apiClient.UsersAPI.GetUserVoicemailGreeting(context.Background(), greeting).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserVoicemailMessage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var messageId string

		resp, httpRes, err := apiClient.UsersAPI.GetUserVoicemailMessage(context.Background(), messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService GetUserVoicemailMessageRecording", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var messageId string

		httpRes, err := apiClient.UsersAPI.GetUserVoicemailMessageRecording(context.Background(), messageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService HangupUserCall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callId string

		httpRes, err := apiClient.UsersAPI.HangupUserCall(context.Background(), callId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService HoldUserCall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callId string

		httpRes, err := apiClient.UsersAPI.HoldUserCall(context.Background(), callId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService InitiateRelocate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.InitiateRelocate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService InitiateUserTransfer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.InitiateUserTransfer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService KickUserMeetingParticipant", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var meetingUuid string
		var participantId string

		httpRes, err := apiClient.UsersAPI.KickUserMeetingParticipant(context.Background(), meetingUuid, participantId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ListUserCalls", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.ListUserCalls(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ListUserConferenceParticipants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var conferenceId string

		resp, httpRes, err := apiClient.UsersAPI.ListUserConferenceParticipants(context.Background(), conferenceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ListUserMeetingParticipants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var meetingUuid string

		resp, httpRes, err := apiClient.UsersAPI.ListUserMeetingParticipants(context.Background(), meetingUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ListUserRelocates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.ListUserRelocates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ListUserTransfers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.ListUserTransfers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ListUserVoicemails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.ListUserVoicemails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService MuteUserCall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callId string

		httpRes, err := apiClient.UsersAPI.MuteUserCall(context.Background(), callId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService SendUserDTMF", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callId string

		httpRes, err := apiClient.UsersAPI.SendUserDTMF(context.Background(), callId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService StartCurrentUserRecording", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callId string

		httpRes, err := apiClient.UsersAPI.StartCurrentUserRecording(context.Background(), callId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService StopCurrentUserRecording", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callId string

		httpRes, err := apiClient.UsersAPI.StopCurrentUserRecording(context.Background(), callId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UnholdUserCall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callId string

		httpRes, err := apiClient.UsersAPI.UnholdUserCall(context.Background(), callId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UnmuteUserCall", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callId string

		httpRes, err := apiClient.UsersAPI.UnmuteUserCall(context.Background(), callId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdateUserVoicemailGreeting", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var greeting string

		httpRes, err := apiClient.UsersAPI.UpdateUserVoicemailGreeting(context.Background(), greeting).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdateUserVoicemailMessage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var messageId string

		httpRes, err := apiClient.UsersAPI.UpdateUserVoicemailMessage(context.Background(), messageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
