/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"encoding/json"
)

// checks if the RelocateList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelocateList{}

// RelocateList struct for RelocateList
type RelocateList struct {
	Items *Relocate `json:"items,omitempty"`
}

// NewRelocateList instantiates a new RelocateList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelocateList() *RelocateList {
	this := RelocateList{}
	return &this
}

// NewRelocateListWithDefaults instantiates a new RelocateList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelocateListWithDefaults() *RelocateList {
	this := RelocateList{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *RelocateList) GetItems() Relocate {
	if o == nil || IsNil(o.Items) {
		var ret Relocate
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelocateList) GetItemsOk() (*Relocate, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *RelocateList) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given Relocate and assigns it to the Items field.
func (o *RelocateList) SetItems(v Relocate) {
	o.Items = &v
}

func (o RelocateList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelocateList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableRelocateList struct {
	value *RelocateList
	isSet bool
}

func (v NullableRelocateList) Get() *RelocateList {
	return v.value
}

func (v *NullableRelocateList) Set(val *RelocateList) {
	v.value = val
	v.isSet = true
}

func (v NullableRelocateList) IsSet() bool {
	return v.isSet
}

func (v *NullableRelocateList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelocateList(val *RelocateList) *NullableRelocateList {
	return &NullableRelocateList{value: val, isSet: true}
}

func (v NullableRelocateList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelocateList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
