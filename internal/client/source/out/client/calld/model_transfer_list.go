/*
accent-calld

Control your calls from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calld

import (
	"encoding/json"
)

// checks if the TransferList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransferList{}

// TransferList struct for TransferList
type TransferList struct {
	Items []Transfer `json:"items,omitempty"`
}

// NewTransferList instantiates a new TransferList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferList() *TransferList {
	this := TransferList{}
	return &this
}

// NewTransferListWithDefaults instantiates a new TransferList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferListWithDefaults() *TransferList {
	this := TransferList{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *TransferList) GetItems() []Transfer {
	if o == nil || IsNil(o.Items) {
		var ret []Transfer
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferList) GetItemsOk() ([]Transfer, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *TransferList) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Transfer and assigns it to the Items field.
func (o *TransferList) SetItems(v []Transfer) {
	o.Items = v
}

func (o TransferList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableTransferList struct {
	value *TransferList
	isSet bool
}

func (v NullableTransferList) Get() *TransferList {
	return v.value
}

func (v *NullableTransferList) Set(val *TransferList) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferList) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferList(val *TransferList) *NullableTransferList {
	return &NullableTransferList{value: val, isSet: true}
}

func (v NullableTransferList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
