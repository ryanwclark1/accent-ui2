/*
accent-plugind

Testing PluginAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package plugind

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/plugind"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_plugind_PluginAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PluginAPIService GetMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PluginAPI.GetMarket(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginAPIService GetMarketPlugin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var name string

		resp, httpRes, err := apiClient.PluginAPI.GetMarketPlugin(context.Background(), namespace, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginAPIService GetPlugin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var name string

		resp, httpRes, err := apiClient.PluginAPI.GetPlugin(context.Background(), namespace, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginAPIService GetPlugins", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PluginAPI.GetPlugins(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginAPIService InstallPlugin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PluginAPI.InstallPlugin(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginAPIService UninstallPlugin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var name string

		httpRes, err := apiClient.PluginAPI.UninstallPlugin(context.Background(), namespace, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
