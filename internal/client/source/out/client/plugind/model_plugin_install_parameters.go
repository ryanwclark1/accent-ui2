/*
accent-plugind

Accent's plugin management service

API version: 0.2
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plugind

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PluginInstallParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginInstallParameters{}

// PluginInstallParameters struct for PluginInstallParameters
type PluginInstallParameters struct {
	// The method used to fetch this plugin
	Method string `json:"method"`
	// Method dependant installation options
	Options map[string]interface{} `json:"options,omitempty"`
}

type _PluginInstallParameters PluginInstallParameters

// NewPluginInstallParameters instantiates a new PluginInstallParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginInstallParameters(method string) *PluginInstallParameters {
	this := PluginInstallParameters{}
	this.Method = method
	return &this
}

// NewPluginInstallParametersWithDefaults instantiates a new PluginInstallParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginInstallParametersWithDefaults() *PluginInstallParameters {
	this := PluginInstallParameters{}
	return &this
}

// GetMethod returns the Method field value
func (o *PluginInstallParameters) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *PluginInstallParameters) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *PluginInstallParameters) SetMethod(v string) {
	o.Method = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *PluginInstallParameters) GetOptions() map[string]interface{} {
	if o == nil || IsNil(o.Options) {
		var ret map[string]interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginInstallParameters) GetOptionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Options) {
		return map[string]interface{}{}, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *PluginInstallParameters) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]interface{} and assigns it to the Options field.
func (o *PluginInstallParameters) SetOptions(v map[string]interface{}) {
	o.Options = v
}

func (o PluginInstallParameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginInstallParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["method"] = o.Method
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

func (o *PluginInstallParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"method",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPluginInstallParameters := _PluginInstallParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPluginInstallParameters)

	if err != nil {
		return err
	}

	*o = PluginInstallParameters(varPluginInstallParameters)

	return err
}

type NullablePluginInstallParameters struct {
	value *PluginInstallParameters
	isSet bool
}

func (v NullablePluginInstallParameters) Get() *PluginInstallParameters {
	return v.value
}

func (v *NullablePluginInstallParameters) Set(val *PluginInstallParameters) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginInstallParameters) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginInstallParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginInstallParameters(val *PluginInstallParameters) *NullablePluginInstallParameters {
	return &NullablePluginInstallParameters{value: val, isSet: true}
}

func (v NullablePluginInstallParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginInstallParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
