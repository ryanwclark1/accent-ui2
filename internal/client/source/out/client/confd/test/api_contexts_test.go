/*
accent-confd

Testing ContextsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_ContextsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContextsAPIService AssociateContextContexts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contextId int32

		httpRes, err := apiClient.ContextsAPI.AssociateContextContexts(context.Background(), contextId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsAPIService CreateContext", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ContextsAPI.CreateContext(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsAPIService DeleteContext", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contextId int32

		httpRes, err := apiClient.ContextsAPI.DeleteContext(context.Background(), contextId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsAPIService GetContext", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contextId int32

		resp, httpRes, err := apiClient.ContextsAPI.GetContext(context.Background(), contextId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsAPIService ListContexts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ContextsAPI.ListContexts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsAPIService ListContextsRange", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var rangeType string
		var contextId int32

		resp, httpRes, err := apiClient.ContextsAPI.ListContextsRange(context.Background(), rangeType, contextId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContextsAPIService UpdateContext", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contextId int32

		httpRes, err := apiClient.ContextsAPI.UpdateContext(context.Background(), contextId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
