/*
accent-confd

Testing CustomAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_CustomAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CustomAPIService AssociateLineEndpointCustom", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var customId int32

		httpRes, err := apiClient.CustomAPI.AssociateLineEndpointCustom(context.Background(), lineId, customId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomAPIService AssociateTrunkEndpointCustom", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32
		var customId int32

		httpRes, err := apiClient.CustomAPI.AssociateTrunkEndpointCustom(context.Background(), trunkId, customId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomAPIService CreateEndpointCustom", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CustomAPI.CreateEndpointCustom(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomAPIService DeleteEndpointCustom", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customId int32

		httpRes, err := apiClient.CustomAPI.DeleteEndpointCustom(context.Background(), customId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomAPIService DissociateLineEndpointCustom", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var customId int32

		httpRes, err := apiClient.CustomAPI.DissociateLineEndpointCustom(context.Background(), lineId, customId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomAPIService DissociateTrunkEndpointCustom", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32
		var customId int32

		httpRes, err := apiClient.CustomAPI.DissociateTrunkEndpointCustom(context.Background(), trunkId, customId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomAPIService GetEndpointCustom", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customId int32

		resp, httpRes, err := apiClient.CustomAPI.GetEndpointCustom(context.Background(), customId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomAPIService ListEndpointsCustom", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CustomAPI.ListEndpointsCustom(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomAPIService UpdateEndpointCustom", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customId int32

		httpRes, err := apiClient.CustomAPI.UpdateEndpointCustom(context.Background(), customId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
