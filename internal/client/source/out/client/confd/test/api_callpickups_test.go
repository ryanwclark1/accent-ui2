/*
accent-confd

Testing CallpickupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_CallpickupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CallpickupsAPIService CreateCallpickup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CallpickupsAPI.CreateCallpickup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpickupsAPIService DeleteCallpickup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callpickupId int32

		httpRes, err := apiClient.CallpickupsAPI.DeleteCallpickup(context.Background(), callpickupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpickupsAPIService GetCallpickup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callpickupId int32

		resp, httpRes, err := apiClient.CallpickupsAPI.GetCallpickup(context.Background(), callpickupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpickupsAPIService ListCallPickups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CallpickupsAPI.ListCallPickups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpickupsAPIService UpdateCallPickupInterceptorGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callpickupId int32

		httpRes, err := apiClient.CallpickupsAPI.UpdateCallPickupInterceptorGroups(context.Background(), callpickupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpickupsAPIService UpdateCallPickupInterceptorUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callpickupId int32

		httpRes, err := apiClient.CallpickupsAPI.UpdateCallPickupInterceptorUsers(context.Background(), callpickupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpickupsAPIService UpdateCallPickupTargetGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callpickupId int32

		httpRes, err := apiClient.CallpickupsAPI.UpdateCallPickupTargetGroups(context.Background(), callpickupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpickupsAPIService UpdateCallPickupTargetUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callpickupId int32

		httpRes, err := apiClient.CallpickupsAPI.UpdateCallPickupTargetUsers(context.Background(), callpickupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpickupsAPIService UpdateCallpickup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callpickupId int32

		httpRes, err := apiClient.CallpickupsAPI.UpdateCallpickup(context.Background(), callpickupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
