/*
accent-confd

Testing CallfiltersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_CallfiltersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CallfiltersAPIService CreateCallfilter", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CallfiltersAPI.CreateCallfilter(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallfiltersAPIService DeleteCallfilter", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callfilterId int32

		httpRes, err := apiClient.CallfiltersAPI.DeleteCallfilter(context.Background(), callfilterId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallfiltersAPIService GetCallFilterFallback", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callfilterId int32

		resp, httpRes, err := apiClient.CallfiltersAPI.GetCallFilterFallback(context.Background(), callfilterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallfiltersAPIService GetCallfilter", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callfilterId int32

		resp, httpRes, err := apiClient.CallfiltersAPI.GetCallfilter(context.Background(), callfilterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallfiltersAPIService ListCallFilters", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CallfiltersAPI.ListCallFilters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallfiltersAPIService UpdateCallFilterCallerUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callfilterId int32

		httpRes, err := apiClient.CallfiltersAPI.UpdateCallFilterCallerUsers(context.Background(), callfilterId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallfiltersAPIService UpdateCallFilterFallback", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callfilterId int32

		httpRes, err := apiClient.CallfiltersAPI.UpdateCallFilterFallback(context.Background(), callfilterId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallfiltersAPIService UpdateCallFilterMemberUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callfilterId int32

		httpRes, err := apiClient.CallfiltersAPI.UpdateCallFilterMemberUsers(context.Background(), callfilterId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallfiltersAPIService UpdateCallfilter", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callfilterId int32

		httpRes, err := apiClient.CallfiltersAPI.UpdateCallfilter(context.Background(), callfilterId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
