/*
accent-confd

Testing ParkingLotsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_ParkingLotsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ParkingLotsAPIService AssociateParkingLotExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parkingLotId int32
		var extensionId int32

		httpRes, err := apiClient.ParkingLotsAPI.AssociateParkingLotExtension(context.Background(), parkingLotId, extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParkingLotsAPIService CreateParkingLot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ParkingLotsAPI.CreateParkingLot(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParkingLotsAPIService DeleteParkingLot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parkingLotId int32

		httpRes, err := apiClient.ParkingLotsAPI.DeleteParkingLot(context.Background(), parkingLotId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParkingLotsAPIService DissociateParkingLotExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parkingLotId int32
		var extensionId int32

		httpRes, err := apiClient.ParkingLotsAPI.DissociateParkingLotExtension(context.Background(), parkingLotId, extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParkingLotsAPIService GetParkingLot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parkingLotId int32

		resp, httpRes, err := apiClient.ParkingLotsAPI.GetParkingLot(context.Background(), parkingLotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParkingLotsAPIService ListParkingLots", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ParkingLotsAPI.ListParkingLots(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParkingLotsAPIService UpdateParkingLot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parkingLotId int32

		httpRes, err := apiClient.ParkingLotsAPI.UpdateParkingLot(context.Background(), parkingLotId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
