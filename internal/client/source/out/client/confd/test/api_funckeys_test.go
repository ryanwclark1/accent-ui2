/*
accent-confd

Testing FunckeysAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_FunckeysAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FunckeysAPIService AssociateUserFuncKeyTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string
		var templateId int32

		httpRes, err := apiClient.FunckeysAPI.AssociateUserFuncKeyTemplate(context.Background(), userId, templateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService CreateFuncKeyTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FunckeysAPI.CreateFuncKeyTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService DeleteFuncKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId int32
		var position int32

		httpRes, err := apiClient.FunckeysAPI.DeleteFuncKey(context.Background(), templateId, position).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService DeleteFuncKeyTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId int32

		httpRes, err := apiClient.FunckeysAPI.DeleteFuncKeyTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService DeleteUserFuncKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string
		var position int32

		httpRes, err := apiClient.FunckeysAPI.DeleteUserFuncKey(context.Background(), userId, position).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService DissociateUserFuncKeyTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string
		var templateId int32

		httpRes, err := apiClient.FunckeysAPI.DissociateUserFuncKeyTemplate(context.Background(), userId, templateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService GetFuncKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId int32
		var position int32

		resp, httpRes, err := apiClient.FunckeysAPI.GetFuncKey(context.Background(), templateId, position).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService GetFuncKeyTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId int32

		resp, httpRes, err := apiClient.FunckeysAPI.GetFuncKeyTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService GetUserFuncKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string
		var position int32

		resp, httpRes, err := apiClient.FunckeysAPI.GetUserFuncKey(context.Background(), userId, position).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService ListFuncKeyDestinations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FunckeysAPI.ListFuncKeyDestinations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService ListFuncKeyTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FunckeysAPI.ListFuncKeyTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService ListFuncKeyTemplateUserAssociations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId int32

		resp, httpRes, err := apiClient.FunckeysAPI.ListFuncKeyTemplateUserAssociations(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService ListUserFuncKeyTemplateAssociations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.FunckeysAPI.ListUserFuncKeyTemplateAssociations(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService ListUserFuncKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.FunckeysAPI.ListUserFuncKeys(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService UpdateFuncKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId int32
		var position int32

		httpRes, err := apiClient.FunckeysAPI.UpdateFuncKey(context.Background(), templateId, position).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService UpdateFuncKeyTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var templateId int32

		httpRes, err := apiClient.FunckeysAPI.UpdateFuncKeyTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService UpdateUserFuncKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string
		var position int32

		httpRes, err := apiClient.FunckeysAPI.UpdateUserFuncKey(context.Background(), userId, position).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunckeysAPIService UpdateUserFuncKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		httpRes, err := apiClient.FunckeysAPI.UpdateUserFuncKeys(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
