/*
accent-confd

Testing ExternalAppsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_ExternalAppsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExternalAppsAPIService CreateExternalApp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var appName string

		resp, httpRes, err := apiClient.ExternalAppsAPI.CreateExternalApp(context.Background(), appName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAppsAPIService CreateUserExternalApp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string
		var appName string

		resp, httpRes, err := apiClient.ExternalAppsAPI.CreateUserExternalApp(context.Background(), userUuid, appName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAppsAPIService DeleteExternalApp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var appName string

		httpRes, err := apiClient.ExternalAppsAPI.DeleteExternalApp(context.Background(), appName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAppsAPIService DeleteUserExternalApp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string
		var appName string

		httpRes, err := apiClient.ExternalAppsAPI.DeleteUserExternalApp(context.Background(), userUuid, appName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAppsAPIService GetExternalApp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var appName string

		resp, httpRes, err := apiClient.ExternalAppsAPI.GetExternalApp(context.Background(), appName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAppsAPIService GetUserExternalApp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string
		var appName string

		resp, httpRes, err := apiClient.ExternalAppsAPI.GetUserExternalApp(context.Background(), userUuid, appName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAppsAPIService ListExternalApps", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ExternalAppsAPI.ListExternalApps(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAppsAPIService ListUserExternalApps", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string

		resp, httpRes, err := apiClient.ExternalAppsAPI.ListUserExternalApps(context.Background(), userUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAppsAPIService UpdateExternalApp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var appName string

		httpRes, err := apiClient.ExternalAppsAPI.UpdateExternalApp(context.Background(), appName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAppsAPIService UpdateUserExternalApp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string
		var appName string

		httpRes, err := apiClient.ExternalAppsAPI.UpdateUserExternalApp(context.Background(), userUuid, appName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
