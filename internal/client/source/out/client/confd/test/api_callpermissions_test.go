/*
accent-confd

Testing CallpermissionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_CallpermissionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CallpermissionsAPIService AssociateGroupCallpermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupUuid string
		var callpermissionId int32

		httpRes, err := apiClient.CallpermissionsAPI.AssociateGroupCallpermission(context.Background(), groupUuid, callpermissionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpermissionsAPIService AssociateOutcallCallpermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var outcallId int32
		var callpermissionId int32

		httpRes, err := apiClient.CallpermissionsAPI.AssociateOutcallCallpermission(context.Background(), outcallId, callpermissionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpermissionsAPIService AssociateUserCallpermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string
		var callpermissionId int32

		httpRes, err := apiClient.CallpermissionsAPI.AssociateUserCallpermission(context.Background(), userId, callpermissionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpermissionsAPIService CreateCallpermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CallpermissionsAPI.CreateCallpermission(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpermissionsAPIService DeleteCallpermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callpermissionId int32

		httpRes, err := apiClient.CallpermissionsAPI.DeleteCallpermission(context.Background(), callpermissionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpermissionsAPIService DissociateGroupCallpermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupUuid string
		var callpermissionId int32

		httpRes, err := apiClient.CallpermissionsAPI.DissociateGroupCallpermission(context.Background(), groupUuid, callpermissionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpermissionsAPIService DissociateOutcallCallpermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var outcallId int32
		var callpermissionId int32

		httpRes, err := apiClient.CallpermissionsAPI.DissociateOutcallCallpermission(context.Background(), outcallId, callpermissionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpermissionsAPIService DissociateUserCallpermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string
		var callpermissionId int32

		httpRes, err := apiClient.CallpermissionsAPI.DissociateUserCallpermission(context.Background(), userId, callpermissionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpermissionsAPIService GetCallpermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callpermissionId int32

		resp, httpRes, err := apiClient.CallpermissionsAPI.GetCallpermission(context.Background(), callpermissionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpermissionsAPIService ListCallpermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CallpermissionsAPI.ListCallpermissions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallpermissionsAPIService UpdateCallpermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var callpermissionId int32

		httpRes, err := apiClient.CallpermissionsAPI.UpdateCallpermission(context.Background(), callpermissionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
