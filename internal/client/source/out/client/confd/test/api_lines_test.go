/*
accent-confd

Testing LinesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_LinesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LinesAPIService AssociateLineApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var applicationUuid int32

		httpRes, err := apiClient.LinesAPI.AssociateLineApplication(context.Background(), lineId, applicationUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService AssociateLineDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var deviceId string

		httpRes, err := apiClient.LinesAPI.AssociateLineDevice(context.Background(), lineId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService AssociateLineEndpointCustom", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var customId int32

		httpRes, err := apiClient.LinesAPI.AssociateLineEndpointCustom(context.Background(), lineId, customId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService AssociateLineEndpointSccp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var sccpId int32

		httpRes, err := apiClient.LinesAPI.AssociateLineEndpointSccp(context.Background(), lineId, sccpId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService AssociateLineEndpointSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var sipUuid string

		httpRes, err := apiClient.LinesAPI.AssociateLineEndpointSip(context.Background(), lineId, sipUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService AssociateLineExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var extensionId int32

		httpRes, err := apiClient.LinesAPI.AssociateLineExtension(context.Background(), lineId, extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService AssociateUserLine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string
		var lineId int32

		httpRes, err := apiClient.LinesAPI.AssociateUserLine(context.Background(), userId, lineId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService AssociateUserLines", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		httpRes, err := apiClient.LinesAPI.AssociateUserLines(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService CreateLine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LinesAPI.CreateLine(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService CreateLineExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32

		resp, httpRes, err := apiClient.LinesAPI.CreateLineExtension(context.Background(), lineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService DeleteLine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32

		httpRes, err := apiClient.LinesAPI.DeleteLine(context.Background(), lineId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService DissociateLineApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var applicationUuid int32

		httpRes, err := apiClient.LinesAPI.DissociateLineApplication(context.Background(), lineId, applicationUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService DissociateLineDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var deviceId string

		httpRes, err := apiClient.LinesAPI.DissociateLineDevice(context.Background(), lineId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService DissociateLineEndpointCustom", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var customId int32

		httpRes, err := apiClient.LinesAPI.DissociateLineEndpointCustom(context.Background(), lineId, customId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService DissociateLineEndpointSccp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var sccpId int32

		httpRes, err := apiClient.LinesAPI.DissociateLineEndpointSccp(context.Background(), lineId, sccpId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService DissociateLineEndpointSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var sipUuid string

		httpRes, err := apiClient.LinesAPI.DissociateLineEndpointSip(context.Background(), lineId, sipUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService DissociateLineExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32
		var extensionId int32

		httpRes, err := apiClient.LinesAPI.DissociateLineExtension(context.Background(), lineId, extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService DissociateUserLine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string
		var lineId int32

		httpRes, err := apiClient.LinesAPI.DissociateUserLine(context.Background(), userId, lineId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService GetDeviceLineAssociation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.LinesAPI.GetDeviceLineAssociation(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService GetLine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32

		resp, httpRes, err := apiClient.LinesAPI.GetLine(context.Background(), lineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService GetLineDevice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32

		resp, httpRes, err := apiClient.LinesAPI.GetLineDevice(context.Background(), lineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService GetUserLineAssociatedEndpointsSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string
		var lineId int32

		resp, httpRes, err := apiClient.LinesAPI.GetUserLineAssociatedEndpointsSip(context.Background(), userUuid, lineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService GetUserLineMainAssociatedEndpointsSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userUuid string

		resp, httpRes, err := apiClient.LinesAPI.GetUserLineMainAssociatedEndpointsSip(context.Background(), userUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService ListLines", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LinesAPI.ListLines(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinesAPIService UpdateLine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineId int32

		httpRes, err := apiClient.LinesAPI.UpdateLine(context.Background(), lineId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
