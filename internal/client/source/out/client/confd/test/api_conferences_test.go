/*
accent-confd

Testing ConferencesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_ConferencesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConferencesAPIService AssociateConferenceExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var conferenceId int32
		var extensionId int32

		httpRes, err := apiClient.ConferencesAPI.AssociateConferenceExtension(context.Background(), conferenceId, extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService CreateConference", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ConferencesAPI.CreateConference(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService DeleteConference", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var conferenceId int32

		httpRes, err := apiClient.ConferencesAPI.DeleteConference(context.Background(), conferenceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService DissociateConferenceExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var conferenceId int32
		var extensionId int32

		httpRes, err := apiClient.ConferencesAPI.DissociateConferenceExtension(context.Background(), conferenceId, extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService GetConference", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var conferenceId int32

		resp, httpRes, err := apiClient.ConferencesAPI.GetConference(context.Background(), conferenceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService ListAsteriskConfbridgeAccentDefaultBridge", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ConferencesAPI.ListAsteriskConfbridgeAccentDefaultBridge(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService ListAsteriskConfbridgeAccentDefaultUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ConferencesAPI.ListAsteriskConfbridgeAccentDefaultUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService ListConferences", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ConferencesAPI.ListConferences(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService UpdateAsteriskConfbridgeAccentDefaultBridge", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ConferencesAPI.UpdateAsteriskConfbridgeAccentDefaultBridge(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService UpdateAsteriskConfbridgeAccentDefaultUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ConferencesAPI.UpdateAsteriskConfbridgeAccentDefaultUser(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService UpdateConference", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var conferenceId int32

		httpRes, err := apiClient.ConferencesAPI.UpdateConference(context.Background(), conferenceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
