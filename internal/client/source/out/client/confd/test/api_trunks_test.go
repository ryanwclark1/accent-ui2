/*
accent-confd

Testing TrunksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package confd

import (
	"context"
	openapiclient "github.com/ryanwclark/accent-voice/confd"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_confd_TrunksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TrunksAPIService AssociateOutcallTrunks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var outcallId int32

		httpRes, err := apiClient.TrunksAPI.AssociateOutcallTrunks(context.Background(), outcallId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrunksAPIService AssociateTrunkEndpointCustom", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32
		var customId int32

		httpRes, err := apiClient.TrunksAPI.AssociateTrunkEndpointCustom(context.Background(), trunkId, customId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrunksAPIService AssociateTrunkEndpointIax", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32
		var iaxId int32

		httpRes, err := apiClient.TrunksAPI.AssociateTrunkEndpointIax(context.Background(), trunkId, iaxId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrunksAPIService AssociateTrunkEndpointSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32
		var sipUuid string

		httpRes, err := apiClient.TrunksAPI.AssociateTrunkEndpointSip(context.Background(), trunkId, sipUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrunksAPIService AssociateTrunkRegisterIax", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32
		var iaxId int32

		httpRes, err := apiClient.TrunksAPI.AssociateTrunkRegisterIax(context.Background(), trunkId, iaxId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrunksAPIService CreateTrunk", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TrunksAPI.CreateTrunk(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrunksAPIService DeleteTrunk", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32

		httpRes, err := apiClient.TrunksAPI.DeleteTrunk(context.Background(), trunkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrunksAPIService DissociateTrunkEndpointCustom", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32
		var customId int32

		httpRes, err := apiClient.TrunksAPI.DissociateTrunkEndpointCustom(context.Background(), trunkId, customId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrunksAPIService DissociateTrunkEndpointIax", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32
		var iaxId int32

		httpRes, err := apiClient.TrunksAPI.DissociateTrunkEndpointIax(context.Background(), trunkId, iaxId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrunksAPIService DissociateTrunkEndpointSip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32
		var sipUuid string

		httpRes, err := apiClient.TrunksAPI.DissociateTrunkEndpointSip(context.Background(), trunkId, sipUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrunksAPIService DissociateTrunkRegisterIax", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32
		var iaxId int32

		httpRes, err := apiClient.TrunksAPI.DissociateTrunkRegisterIax(context.Background(), trunkId, iaxId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrunksAPIService GetTrunk", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32

		resp, httpRes, err := apiClient.TrunksAPI.GetTrunk(context.Background(), trunkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrunksAPIService ListTrunks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TrunksAPI.ListTrunks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrunksAPIService UpdateTrunk", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var trunkId int32

		httpRes, err := apiClient.TrunksAPI.UpdateTrunk(context.Background(), trunkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
