/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type CallfiltersAPI interface {

	/*
		CreateCallfilter Create call filter

		**Required ACL:** `confd.callfilters.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateCallfilterRequest
	*/
	CreateCallfilter(ctx context.Context) ApiCreateCallfilterRequest

	// CreateCallfilterExecute executes the request
	//  @return CallFilter
	CreateCallfilterExecute(r ApiCreateCallfilterRequest) (*CallFilter, *http.Response, error)

	/*
		DeleteCallfilter Delete call filter

		**Required ACL:** `confd.callfilters.{callfilter_id}.delete` . The call filter will also be removed from all users, groups, incoming calls and outgoing calls.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callfilterId Call Filter's ID
		@return ApiDeleteCallfilterRequest
	*/
	DeleteCallfilter(ctx context.Context, callfilterId int32) ApiDeleteCallfilterRequest

	// DeleteCallfilterExecute executes the request
	DeleteCallfilterExecute(r ApiDeleteCallfilterRequest) (*http.Response, error)

	/*
		GetCallFilterFallback List all fallbacks for call filter

		**Required ACL:** `confd.callfilters.{callfilter_id}.fallbacks.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callfilterId Call Filter's ID
		@return ApiGetCallFilterFallbackRequest
	*/
	GetCallFilterFallback(ctx context.Context, callfilterId int32) ApiGetCallFilterFallbackRequest

	// GetCallFilterFallbackExecute executes the request
	//  @return CallFilterFallbacks
	GetCallFilterFallbackExecute(r ApiGetCallFilterFallbackRequest) (*CallFilterFallbacks, *http.Response, error)

	/*
		GetCallfilter Get call filter

		**Required ACL:** `confd.callfilters.{callfilter_id}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callfilterId Call Filter's ID
		@return ApiGetCallfilterRequest
	*/
	GetCallfilter(ctx context.Context, callfilterId int32) ApiGetCallfilterRequest

	// GetCallfilterExecute executes the request
	//  @return CallFilter
	GetCallfilterExecute(r ApiGetCallfilterRequest) (*CallFilter, *http.Response, error)

	/*
		ListCallFilters List call filters

		**Required ACL:** `confd.callfilters.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListCallFiltersRequest
	*/
	ListCallFilters(ctx context.Context) ApiListCallFiltersRequest

	// ListCallFiltersExecute executes the request
	//  @return CallFilterItems
	ListCallFiltersExecute(r ApiListCallFiltersRequest) (*CallFilterItems, *http.Response, error)

	/*
		UpdateCallFilterCallerUsers Update call filter and recipients

		**Required ACL:** `confd.callfilters.{callfilter_id}.recipients.users.update` **WARNING** This endpoint remove all recipients which are not defined.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callfilterId Call Filter's ID
		@return ApiUpdateCallFilterCallerUsersRequest
	*/
	UpdateCallFilterCallerUsers(ctx context.Context, callfilterId int32) ApiUpdateCallFilterCallerUsersRequest

	// UpdateCallFilterCallerUsersExecute executes the request
	UpdateCallFilterCallerUsersExecute(r ApiUpdateCallFilterCallerUsersRequest) (*http.Response, error)

	/*
		UpdateCallFilterFallback Update call filter's fallbacks

		**Required ACL:** `confd.callfilters.{callfilter_id}.fallbacks.update` **WARNING** This endpoint delete all fields that are not defined.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callfilterId Call Filter's ID
		@return ApiUpdateCallFilterFallbackRequest
	*/
	UpdateCallFilterFallback(ctx context.Context, callfilterId int32) ApiUpdateCallFilterFallbackRequest

	// UpdateCallFilterFallbackExecute executes the request
	UpdateCallFilterFallbackExecute(r ApiUpdateCallFilterFallbackRequest) (*http.Response, error)

	/*
		UpdateCallFilterMemberUsers Update call filter and surrogates

		**Required ACL:** `confd.callfilters.{callfilter_id}.surrogates.users.update` **WARNING** This endpoint remove all surrogates which are not defined.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callfilterId Call Filter's ID
		@return ApiUpdateCallFilterMemberUsersRequest
	*/
	UpdateCallFilterMemberUsers(ctx context.Context, callfilterId int32) ApiUpdateCallFilterMemberUsersRequest

	// UpdateCallFilterMemberUsersExecute executes the request
	UpdateCallFilterMemberUsersExecute(r ApiUpdateCallFilterMemberUsersRequest) (*http.Response, error)

	/*
		UpdateCallfilter Update call filter

		**Required ACL:** `confd.callfilters.{callfilter_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callfilterId Call Filter's ID
		@return ApiUpdateCallfilterRequest
	*/
	UpdateCallfilter(ctx context.Context, callfilterId int32) ApiUpdateCallfilterRequest

	// UpdateCallfilterExecute executes the request
	UpdateCallfilterExecute(r ApiUpdateCallfilterRequest) (*http.Response, error)
}

// CallfiltersAPIService CallfiltersAPI service
type CallfiltersAPIService service

type ApiCreateCallfilterRequest struct {
	ctx          context.Context
	ApiService   CallfiltersAPI
	body         *CallFilter
	accentTenant *string
}

// Call Filter to create
func (r ApiCreateCallfilterRequest) Body(body CallFilter) ApiCreateCallfilterRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiCreateCallfilterRequest) AccentTenant(accentTenant string) ApiCreateCallfilterRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiCreateCallfilterRequest) Execute() (*CallFilter, *http.Response, error) {
	return r.ApiService.CreateCallfilterExecute(r)
}

/*
CreateCallfilter Create call filter

**Required ACL:** `confd.callfilters.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCallfilterRequest
*/
func (a *CallfiltersAPIService) CreateCallfilter(ctx context.Context) ApiCreateCallfilterRequest {
	return ApiCreateCallfilterRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CallFilter
func (a *CallfiltersAPIService) CreateCallfilterExecute(r ApiCreateCallfilterRequest) (*CallFilter, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CallFilter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallfiltersAPIService.CreateCallfilter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callfilters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCallfilterRequest struct {
	ctx          context.Context
	ApiService   CallfiltersAPI
	callfilterId int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiDeleteCallfilterRequest) AccentTenant(accentTenant string) ApiDeleteCallfilterRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiDeleteCallfilterRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCallfilterExecute(r)
}

/*
DeleteCallfilter Delete call filter

**Required ACL:** `confd.callfilters.{callfilter_id}.delete` . The call filter will also be removed from all users, groups, incoming calls and outgoing calls.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callfilterId Call Filter's ID
	@return ApiDeleteCallfilterRequest
*/
func (a *CallfiltersAPIService) DeleteCallfilter(ctx context.Context, callfilterId int32) ApiDeleteCallfilterRequest {
	return ApiDeleteCallfilterRequest{
		ApiService:   a,
		ctx:          ctx,
		callfilterId: callfilterId,
	}
}

// Execute executes the request
func (a *CallfiltersAPIService) DeleteCallfilterExecute(r ApiDeleteCallfilterRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallfiltersAPIService.DeleteCallfilter")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callfilters/{callfilter_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"callfilter_id"+"}", url.PathEscape(parameterValueToString(r.callfilterId, "callfilterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCallFilterFallbackRequest struct {
	ctx          context.Context
	ApiService   CallfiltersAPI
	callfilterId int32
}

func (r ApiGetCallFilterFallbackRequest) Execute() (*CallFilterFallbacks, *http.Response, error) {
	return r.ApiService.GetCallFilterFallbackExecute(r)
}

/*
GetCallFilterFallback List all fallbacks for call filter

**Required ACL:** `confd.callfilters.{callfilter_id}.fallbacks.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callfilterId Call Filter's ID
	@return ApiGetCallFilterFallbackRequest
*/
func (a *CallfiltersAPIService) GetCallFilterFallback(ctx context.Context, callfilterId int32) ApiGetCallFilterFallbackRequest {
	return ApiGetCallFilterFallbackRequest{
		ApiService:   a,
		ctx:          ctx,
		callfilterId: callfilterId,
	}
}

// Execute executes the request
//
//	@return CallFilterFallbacks
func (a *CallfiltersAPIService) GetCallFilterFallbackExecute(r ApiGetCallFilterFallbackRequest) (*CallFilterFallbacks, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CallFilterFallbacks
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallfiltersAPIService.GetCallFilterFallback")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callfilters/{callfilter_id}/fallbacks"
	localVarPath = strings.Replace(localVarPath, "{"+"callfilter_id"+"}", url.PathEscape(parameterValueToString(r.callfilterId, "callfilterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCallfilterRequest struct {
	ctx          context.Context
	ApiService   CallfiltersAPI
	callfilterId int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiGetCallfilterRequest) AccentTenant(accentTenant string) ApiGetCallfilterRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiGetCallfilterRequest) Execute() (*CallFilter, *http.Response, error) {
	return r.ApiService.GetCallfilterExecute(r)
}

/*
GetCallfilter Get call filter

**Required ACL:** `confd.callfilters.{callfilter_id}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callfilterId Call Filter's ID
	@return ApiGetCallfilterRequest
*/
func (a *CallfiltersAPIService) GetCallfilter(ctx context.Context, callfilterId int32) ApiGetCallfilterRequest {
	return ApiGetCallfilterRequest{
		ApiService:   a,
		ctx:          ctx,
		callfilterId: callfilterId,
	}
}

// Execute executes the request
//
//	@return CallFilter
func (a *CallfiltersAPIService) GetCallfilterExecute(r ApiGetCallfilterRequest) (*CallFilter, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CallFilter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallfiltersAPIService.GetCallfilter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callfilters/{callfilter_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"callfilter_id"+"}", url.PathEscape(parameterValueToString(r.callfilterId, "callfilterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCallFiltersRequest struct {
	ctx          context.Context
	ApiService   CallfiltersAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiListCallFiltersRequest) AccentTenant(accentTenant string) ApiListCallFiltersRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r ApiListCallFiltersRequest) Recurse(recurse bool) ApiListCallFiltersRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r ApiListCallFiltersRequest) Order(order string) ApiListCallFiltersRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r ApiListCallFiltersRequest) Direction(direction string) ApiListCallFiltersRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r ApiListCallFiltersRequest) Limit(limit int32) ApiListCallFiltersRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r ApiListCallFiltersRequest) Offset(offset int32) ApiListCallFiltersRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r ApiListCallFiltersRequest) Search(search string) ApiListCallFiltersRequest {
	r.search = &search
	return r
}

func (r ApiListCallFiltersRequest) Execute() (*CallFilterItems, *http.Response, error) {
	return r.ApiService.ListCallFiltersExecute(r)
}

/*
ListCallFilters List call filters

**Required ACL:** `confd.callfilters.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListCallFiltersRequest
*/
func (a *CallfiltersAPIService) ListCallFilters(ctx context.Context) ApiListCallFiltersRequest {
	return ApiListCallFiltersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CallFilterItems
func (a *CallfiltersAPIService) ListCallFiltersExecute(r ApiListCallFiltersRequest) (*CallFilterItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CallFilterItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallfiltersAPIService.ListCallFilters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callfilters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCallFilterCallerUsersRequest struct {
	ctx          context.Context
	ApiService   CallfiltersAPI
	body         *CallFilterRecipientUsersUuid
	callfilterId int32
}

// Users to associated
func (r ApiUpdateCallFilterCallerUsersRequest) Body(body CallFilterRecipientUsersUuid) ApiUpdateCallFilterCallerUsersRequest {
	r.body = &body
	return r
}

func (r ApiUpdateCallFilterCallerUsersRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCallFilterCallerUsersExecute(r)
}

/*
UpdateCallFilterCallerUsers Update call filter and recipients

**Required ACL:** `confd.callfilters.{callfilter_id}.recipients.users.update` **WARNING** This endpoint remove all recipients which are not defined.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callfilterId Call Filter's ID
	@return ApiUpdateCallFilterCallerUsersRequest
*/
func (a *CallfiltersAPIService) UpdateCallFilterCallerUsers(ctx context.Context, callfilterId int32) ApiUpdateCallFilterCallerUsersRequest {
	return ApiUpdateCallFilterCallerUsersRequest{
		ApiService:   a,
		ctx:          ctx,
		callfilterId: callfilterId,
	}
}

// Execute executes the request
func (a *CallfiltersAPIService) UpdateCallFilterCallerUsersExecute(r ApiUpdateCallFilterCallerUsersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallfiltersAPIService.UpdateCallFilterCallerUsers")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callfilters/{callfilter_id}/recipients/users"
	localVarPath = strings.Replace(localVarPath, "{"+"callfilter_id"+"}", url.PathEscape(parameterValueToString(r.callfilterId, "callfilterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateCallFilterFallbackRequest struct {
	ctx          context.Context
	ApiService   CallfiltersAPI
	callfilterId int32
	body         *CallFilterFallbacks
}

// Fallbacks for call filter
func (r ApiUpdateCallFilterFallbackRequest) Body(body CallFilterFallbacks) ApiUpdateCallFilterFallbackRequest {
	r.body = &body
	return r
}

func (r ApiUpdateCallFilterFallbackRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCallFilterFallbackExecute(r)
}

/*
UpdateCallFilterFallback Update call filter's fallbacks

**Required ACL:** `confd.callfilters.{callfilter_id}.fallbacks.update` **WARNING** This endpoint delete all fields that are not defined.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callfilterId Call Filter's ID
	@return ApiUpdateCallFilterFallbackRequest
*/
func (a *CallfiltersAPIService) UpdateCallFilterFallback(ctx context.Context, callfilterId int32) ApiUpdateCallFilterFallbackRequest {
	return ApiUpdateCallFilterFallbackRequest{
		ApiService:   a,
		ctx:          ctx,
		callfilterId: callfilterId,
	}
}

// Execute executes the request
func (a *CallfiltersAPIService) UpdateCallFilterFallbackExecute(r ApiUpdateCallFilterFallbackRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallfiltersAPIService.UpdateCallFilterFallback")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callfilters/{callfilter_id}/fallbacks"
	localVarPath = strings.Replace(localVarPath, "{"+"callfilter_id"+"}", url.PathEscape(parameterValueToString(r.callfilterId, "callfilterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateCallFilterMemberUsersRequest struct {
	ctx          context.Context
	ApiService   CallfiltersAPI
	body         *UsersUuid
	callfilterId int32
}

// Users to associated
func (r ApiUpdateCallFilterMemberUsersRequest) Body(body UsersUuid) ApiUpdateCallFilterMemberUsersRequest {
	r.body = &body
	return r
}

func (r ApiUpdateCallFilterMemberUsersRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCallFilterMemberUsersExecute(r)
}

/*
UpdateCallFilterMemberUsers Update call filter and surrogates

**Required ACL:** `confd.callfilters.{callfilter_id}.surrogates.users.update` **WARNING** This endpoint remove all surrogates which are not defined.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callfilterId Call Filter's ID
	@return ApiUpdateCallFilterMemberUsersRequest
*/
func (a *CallfiltersAPIService) UpdateCallFilterMemberUsers(ctx context.Context, callfilterId int32) ApiUpdateCallFilterMemberUsersRequest {
	return ApiUpdateCallFilterMemberUsersRequest{
		ApiService:   a,
		ctx:          ctx,
		callfilterId: callfilterId,
	}
}

// Execute executes the request
func (a *CallfiltersAPIService) UpdateCallFilterMemberUsersExecute(r ApiUpdateCallFilterMemberUsersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallfiltersAPIService.UpdateCallFilterMemberUsers")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callfilters/{callfilter_id}/surrogates/users"
	localVarPath = strings.Replace(localVarPath, "{"+"callfilter_id"+"}", url.PathEscape(parameterValueToString(r.callfilterId, "callfilterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateCallfilterRequest struct {
	ctx          context.Context
	ApiService   CallfiltersAPI
	body         *CallFilter
	callfilterId int32
	accentTenant *string
}

func (r ApiUpdateCallfilterRequest) Body(body CallFilter) ApiUpdateCallfilterRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiUpdateCallfilterRequest) AccentTenant(accentTenant string) ApiUpdateCallfilterRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiUpdateCallfilterRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCallfilterExecute(r)
}

/*
UpdateCallfilter Update call filter

**Required ACL:** `confd.callfilters.{callfilter_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callfilterId Call Filter's ID
	@return ApiUpdateCallfilterRequest
*/
func (a *CallfiltersAPIService) UpdateCallfilter(ctx context.Context, callfilterId int32) ApiUpdateCallfilterRequest {
	return ApiUpdateCallfilterRequest{
		ApiService:   a,
		ctx:          ctx,
		callfilterId: callfilterId,
	}
}

// Execute executes the request
func (a *CallfiltersAPIService) UpdateCallfilterExecute(r ApiUpdateCallfilterRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallfiltersAPIService.UpdateCallfilter")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callfilters/{callfilter_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"callfilter_id"+"}", url.PathEscape(parameterValueToString(r.callfilterId, "callfilterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
