/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the HA type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HA{}

// HA struct for HA
type HA struct {
	// The role of this server in a HA cluster.
	NodeType string `json:"node_type"`
	// The remote IP address of the other machine in the HA cluster. Must be an IP address, a hostname is invalid.
	RemoteAddress *string `json:"remote_address,omitempty"`
}

type _HA HA

// NewHA instantiates a new HA object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHA(nodeType string) *HA {
	this := HA{}
	this.NodeType = nodeType
	return &this
}

// NewHAWithDefaults instantiates a new HA object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHAWithDefaults() *HA {
	this := HA{}
	return &this
}

// GetNodeType returns the NodeType field value
func (o *HA) GetNodeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value
// and a boolean to check if the value has been set.
func (o *HA) GetNodeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeType, true
}

// SetNodeType sets field value
func (o *HA) SetNodeType(v string) {
	o.NodeType = v
}

// GetRemoteAddress returns the RemoteAddress field value if set, zero value otherwise.
func (o *HA) GetRemoteAddress() string {
	if o == nil || IsNil(o.RemoteAddress) {
		var ret string
		return ret
	}
	return *o.RemoteAddress
}

// GetRemoteAddressOk returns a tuple with the RemoteAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HA) GetRemoteAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteAddress) {
		return nil, false
	}
	return o.RemoteAddress, true
}

// HasRemoteAddress returns a boolean if a field has been set.
func (o *HA) HasRemoteAddress() bool {
	if o != nil && !IsNil(o.RemoteAddress) {
		return true
	}

	return false
}

// SetRemoteAddress gets a reference to the given string and assigns it to the RemoteAddress field.
func (o *HA) SetRemoteAddress(v string) {
	o.RemoteAddress = &v
}

func (o HA) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HA) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["node_type"] = o.NodeType
	if !IsNil(o.RemoteAddress) {
		toSerialize["remote_address"] = o.RemoteAddress
	}
	return toSerialize, nil
}

func (o *HA) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"node_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHA := _HA{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHA)

	if err != nil {
		return err
	}

	*o = HA(varHA)

	return err
}

type NullableHA struct {
	value *HA
	isSet bool
}

func (v NullableHA) Get() *HA {
	return v.value
}

func (v *NullableHA) Set(val *HA) {
	v.value = val
	v.isSet = true
}

func (v NullableHA) IsSet() bool {
	return v.isSet
}

func (v *NullableHA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHA(val *HA) *NullableHA {
	return &NullableHA{value: val, isSet: true}
}

func (v NullableHA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
