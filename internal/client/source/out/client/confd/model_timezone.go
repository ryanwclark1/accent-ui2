/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the Timezone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Timezone{}

// Timezone struct for Timezone
type Timezone struct {
	ZoneName *string `json:"zone_name,omitempty"`
}

// NewTimezone instantiates a new Timezone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimezone() *Timezone {
	this := Timezone{}
	return &this
}

// NewTimezoneWithDefaults instantiates a new Timezone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimezoneWithDefaults() *Timezone {
	this := Timezone{}
	return &this
}

// GetZoneName returns the ZoneName field value if set, zero value otherwise.
func (o *Timezone) GetZoneName() string {
	if o == nil || IsNil(o.ZoneName) {
		var ret string
		return ret
	}
	return *o.ZoneName
}

// GetZoneNameOk returns a tuple with the ZoneName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Timezone) GetZoneNameOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneName) {
		return nil, false
	}
	return o.ZoneName, true
}

// HasZoneName returns a boolean if a field has been set.
func (o *Timezone) HasZoneName() bool {
	if o != nil && !IsNil(o.ZoneName) {
		return true
	}

	return false
}

// SetZoneName gets a reference to the given string and assigns it to the ZoneName field.
func (o *Timezone) SetZoneName(v string) {
	o.ZoneName = &v
}

func (o Timezone) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Timezone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ZoneName) {
		toSerialize["zone_name"] = o.ZoneName
	}
	return toSerialize, nil
}

type NullableTimezone struct {
	value *Timezone
	isSet bool
}

func (v NullableTimezone) Get() *Timezone {
	return v.value
}

func (v *NullableTimezone) Set(val *Timezone) {
	v.value = val
	v.isSet = true
}

func (v NullableTimezone) IsSet() bool {
	return v.isSet
}

func (v *NullableTimezone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimezone(val *Timezone) *NullableTimezone {
	return &NullableTimezone{value: val, isSet: true}
}

func (v NullableTimezone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimezone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
