/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the Conference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Conference{}

// Conference struct for Conference
type Conference struct {
	Id *int32 `json:"id,omitempty"`
	// name to identify the conference
	Name       *string                    `json:"name,omitempty"`
	Extensions []ExtensionRelationBase    `json:"extensions,omitempty"`
	Incalls    []ConferenceRelationIncall `json:"incalls,omitempty"`
	// Administrator pin to enter in the conference
	AdminPin *string `json:"admin_pin,omitempty"`
	// Record name and announce join/leave
	AnnounceJoinLeave *bool `json:"announce_join_leave,omitempty"`
	// Announce when a participant is alone in conference
	AnnounceOnlyUser *bool `json:"announce_only_user,omitempty"`
	// Announce the number of participants
	AnnounceUserCount *bool `json:"announce_user_count,omitempty"`
	// Maximum users allowed in the conference. This exclude admin.
	MaxUsers *int32 `json:"max_users,omitempty"`
	// Name of the MOH category to use for music on hold
	MusicOnHold *string `json:"music_on_hold,omitempty"`
	// Pin to enter in the conference
	Pin *string `json:"pin,omitempty"`
	// Name of the subroutine to execute in asterisk before entering the conference
	PreprocessSubroutine *string `json:"preprocess_subroutine,omitempty"`
	// Play 'beep' notification when join/leave a conference
	QuietJoinLeave *bool `json:"quiet_join_leave,omitempty"`
	// Record the conference
	Record *bool `json:"record,omitempty"`
	// The UUID of the tenant
	TenantUuid *string `json:"tenant_uuid,omitempty"`
}

// NewConference instantiates a new Conference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConference() *Conference {
	this := Conference{}
	var announceJoinLeave bool = false
	this.AnnounceJoinLeave = &announceJoinLeave
	var announceOnlyUser bool = true
	this.AnnounceOnlyUser = &announceOnlyUser
	var announceUserCount bool = false
	this.AnnounceUserCount = &announceUserCount
	var quietJoinLeave bool = false
	this.QuietJoinLeave = &quietJoinLeave
	var record bool = false
	this.Record = &record
	return &this
}

// NewConferenceWithDefaults instantiates a new Conference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceWithDefaults() *Conference {
	this := Conference{}
	var announceJoinLeave bool = false
	this.AnnounceJoinLeave = &announceJoinLeave
	var announceOnlyUser bool = true
	this.AnnounceOnlyUser = &announceOnlyUser
	var announceUserCount bool = false
	this.AnnounceUserCount = &announceUserCount
	var quietJoinLeave bool = false
	this.QuietJoinLeave = &quietJoinLeave
	var record bool = false
	this.Record = &record
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Conference) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Conference) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Conference) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Conference) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Conference) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Conference) SetName(v string) {
	o.Name = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *Conference) GetExtensions() []ExtensionRelationBase {
	if o == nil || IsNil(o.Extensions) {
		var ret []ExtensionRelationBase
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetExtensionsOk() ([]ExtensionRelationBase, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *Conference) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []ExtensionRelationBase and assigns it to the Extensions field.
func (o *Conference) SetExtensions(v []ExtensionRelationBase) {
	o.Extensions = v
}

// GetIncalls returns the Incalls field value if set, zero value otherwise.
func (o *Conference) GetIncalls() []ConferenceRelationIncall {
	if o == nil || IsNil(o.Incalls) {
		var ret []ConferenceRelationIncall
		return ret
	}
	return o.Incalls
}

// GetIncallsOk returns a tuple with the Incalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetIncallsOk() ([]ConferenceRelationIncall, bool) {
	if o == nil || IsNil(o.Incalls) {
		return nil, false
	}
	return o.Incalls, true
}

// HasIncalls returns a boolean if a field has been set.
func (o *Conference) HasIncalls() bool {
	if o != nil && !IsNil(o.Incalls) {
		return true
	}

	return false
}

// SetIncalls gets a reference to the given []ConferenceRelationIncall and assigns it to the Incalls field.
func (o *Conference) SetIncalls(v []ConferenceRelationIncall) {
	o.Incalls = v
}

// GetAdminPin returns the AdminPin field value if set, zero value otherwise.
func (o *Conference) GetAdminPin() string {
	if o == nil || IsNil(o.AdminPin) {
		var ret string
		return ret
	}
	return *o.AdminPin
}

// GetAdminPinOk returns a tuple with the AdminPin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetAdminPinOk() (*string, bool) {
	if o == nil || IsNil(o.AdminPin) {
		return nil, false
	}
	return o.AdminPin, true
}

// HasAdminPin returns a boolean if a field has been set.
func (o *Conference) HasAdminPin() bool {
	if o != nil && !IsNil(o.AdminPin) {
		return true
	}

	return false
}

// SetAdminPin gets a reference to the given string and assigns it to the AdminPin field.
func (o *Conference) SetAdminPin(v string) {
	o.AdminPin = &v
}

// GetAnnounceJoinLeave returns the AnnounceJoinLeave field value if set, zero value otherwise.
func (o *Conference) GetAnnounceJoinLeave() bool {
	if o == nil || IsNil(o.AnnounceJoinLeave) {
		var ret bool
		return ret
	}
	return *o.AnnounceJoinLeave
}

// GetAnnounceJoinLeaveOk returns a tuple with the AnnounceJoinLeave field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetAnnounceJoinLeaveOk() (*bool, bool) {
	if o == nil || IsNil(o.AnnounceJoinLeave) {
		return nil, false
	}
	return o.AnnounceJoinLeave, true
}

// HasAnnounceJoinLeave returns a boolean if a field has been set.
func (o *Conference) HasAnnounceJoinLeave() bool {
	if o != nil && !IsNil(o.AnnounceJoinLeave) {
		return true
	}

	return false
}

// SetAnnounceJoinLeave gets a reference to the given bool and assigns it to the AnnounceJoinLeave field.
func (o *Conference) SetAnnounceJoinLeave(v bool) {
	o.AnnounceJoinLeave = &v
}

// GetAnnounceOnlyUser returns the AnnounceOnlyUser field value if set, zero value otherwise.
func (o *Conference) GetAnnounceOnlyUser() bool {
	if o == nil || IsNil(o.AnnounceOnlyUser) {
		var ret bool
		return ret
	}
	return *o.AnnounceOnlyUser
}

// GetAnnounceOnlyUserOk returns a tuple with the AnnounceOnlyUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetAnnounceOnlyUserOk() (*bool, bool) {
	if o == nil || IsNil(o.AnnounceOnlyUser) {
		return nil, false
	}
	return o.AnnounceOnlyUser, true
}

// HasAnnounceOnlyUser returns a boolean if a field has been set.
func (o *Conference) HasAnnounceOnlyUser() bool {
	if o != nil && !IsNil(o.AnnounceOnlyUser) {
		return true
	}

	return false
}

// SetAnnounceOnlyUser gets a reference to the given bool and assigns it to the AnnounceOnlyUser field.
func (o *Conference) SetAnnounceOnlyUser(v bool) {
	o.AnnounceOnlyUser = &v
}

// GetAnnounceUserCount returns the AnnounceUserCount field value if set, zero value otherwise.
func (o *Conference) GetAnnounceUserCount() bool {
	if o == nil || IsNil(o.AnnounceUserCount) {
		var ret bool
		return ret
	}
	return *o.AnnounceUserCount
}

// GetAnnounceUserCountOk returns a tuple with the AnnounceUserCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetAnnounceUserCountOk() (*bool, bool) {
	if o == nil || IsNil(o.AnnounceUserCount) {
		return nil, false
	}
	return o.AnnounceUserCount, true
}

// HasAnnounceUserCount returns a boolean if a field has been set.
func (o *Conference) HasAnnounceUserCount() bool {
	if o != nil && !IsNil(o.AnnounceUserCount) {
		return true
	}

	return false
}

// SetAnnounceUserCount gets a reference to the given bool and assigns it to the AnnounceUserCount field.
func (o *Conference) SetAnnounceUserCount(v bool) {
	o.AnnounceUserCount = &v
}

// GetMaxUsers returns the MaxUsers field value if set, zero value otherwise.
func (o *Conference) GetMaxUsers() int32 {
	if o == nil || IsNil(o.MaxUsers) {
		var ret int32
		return ret
	}
	return *o.MaxUsers
}

// GetMaxUsersOk returns a tuple with the MaxUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetMaxUsersOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxUsers) {
		return nil, false
	}
	return o.MaxUsers, true
}

// HasMaxUsers returns a boolean if a field has been set.
func (o *Conference) HasMaxUsers() bool {
	if o != nil && !IsNil(o.MaxUsers) {
		return true
	}

	return false
}

// SetMaxUsers gets a reference to the given int32 and assigns it to the MaxUsers field.
func (o *Conference) SetMaxUsers(v int32) {
	o.MaxUsers = &v
}

// GetMusicOnHold returns the MusicOnHold field value if set, zero value otherwise.
func (o *Conference) GetMusicOnHold() string {
	if o == nil || IsNil(o.MusicOnHold) {
		var ret string
		return ret
	}
	return *o.MusicOnHold
}

// GetMusicOnHoldOk returns a tuple with the MusicOnHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetMusicOnHoldOk() (*string, bool) {
	if o == nil || IsNil(o.MusicOnHold) {
		return nil, false
	}
	return o.MusicOnHold, true
}

// HasMusicOnHold returns a boolean if a field has been set.
func (o *Conference) HasMusicOnHold() bool {
	if o != nil && !IsNil(o.MusicOnHold) {
		return true
	}

	return false
}

// SetMusicOnHold gets a reference to the given string and assigns it to the MusicOnHold field.
func (o *Conference) SetMusicOnHold(v string) {
	o.MusicOnHold = &v
}

// GetPin returns the Pin field value if set, zero value otherwise.
func (o *Conference) GetPin() string {
	if o == nil || IsNil(o.Pin) {
		var ret string
		return ret
	}
	return *o.Pin
}

// GetPinOk returns a tuple with the Pin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetPinOk() (*string, bool) {
	if o == nil || IsNil(o.Pin) {
		return nil, false
	}
	return o.Pin, true
}

// HasPin returns a boolean if a field has been set.
func (o *Conference) HasPin() bool {
	if o != nil && !IsNil(o.Pin) {
		return true
	}

	return false
}

// SetPin gets a reference to the given string and assigns it to the Pin field.
func (o *Conference) SetPin(v string) {
	o.Pin = &v
}

// GetPreprocessSubroutine returns the PreprocessSubroutine field value if set, zero value otherwise.
func (o *Conference) GetPreprocessSubroutine() string {
	if o == nil || IsNil(o.PreprocessSubroutine) {
		var ret string
		return ret
	}
	return *o.PreprocessSubroutine
}

// GetPreprocessSubroutineOk returns a tuple with the PreprocessSubroutine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetPreprocessSubroutineOk() (*string, bool) {
	if o == nil || IsNil(o.PreprocessSubroutine) {
		return nil, false
	}
	return o.PreprocessSubroutine, true
}

// HasPreprocessSubroutine returns a boolean if a field has been set.
func (o *Conference) HasPreprocessSubroutine() bool {
	if o != nil && !IsNil(o.PreprocessSubroutine) {
		return true
	}

	return false
}

// SetPreprocessSubroutine gets a reference to the given string and assigns it to the PreprocessSubroutine field.
func (o *Conference) SetPreprocessSubroutine(v string) {
	o.PreprocessSubroutine = &v
}

// GetQuietJoinLeave returns the QuietJoinLeave field value if set, zero value otherwise.
func (o *Conference) GetQuietJoinLeave() bool {
	if o == nil || IsNil(o.QuietJoinLeave) {
		var ret bool
		return ret
	}
	return *o.QuietJoinLeave
}

// GetQuietJoinLeaveOk returns a tuple with the QuietJoinLeave field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetQuietJoinLeaveOk() (*bool, bool) {
	if o == nil || IsNil(o.QuietJoinLeave) {
		return nil, false
	}
	return o.QuietJoinLeave, true
}

// HasQuietJoinLeave returns a boolean if a field has been set.
func (o *Conference) HasQuietJoinLeave() bool {
	if o != nil && !IsNil(o.QuietJoinLeave) {
		return true
	}

	return false
}

// SetQuietJoinLeave gets a reference to the given bool and assigns it to the QuietJoinLeave field.
func (o *Conference) SetQuietJoinLeave(v bool) {
	o.QuietJoinLeave = &v
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *Conference) GetRecord() bool {
	if o == nil || IsNil(o.Record) {
		var ret bool
		return ret
	}
	return *o.Record
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetRecordOk() (*bool, bool) {
	if o == nil || IsNil(o.Record) {
		return nil, false
	}
	return o.Record, true
}

// HasRecord returns a boolean if a field has been set.
func (o *Conference) HasRecord() bool {
	if o != nil && !IsNil(o.Record) {
		return true
	}

	return false
}

// SetRecord gets a reference to the given bool and assigns it to the Record field.
func (o *Conference) SetRecord(v bool) {
	o.Record = &v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *Conference) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *Conference) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *Conference) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

func (o Conference) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Conference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	if !IsNil(o.Incalls) {
		toSerialize["incalls"] = o.Incalls
	}
	if !IsNil(o.AdminPin) {
		toSerialize["admin_pin"] = o.AdminPin
	}
	if !IsNil(o.AnnounceJoinLeave) {
		toSerialize["announce_join_leave"] = o.AnnounceJoinLeave
	}
	if !IsNil(o.AnnounceOnlyUser) {
		toSerialize["announce_only_user"] = o.AnnounceOnlyUser
	}
	if !IsNil(o.AnnounceUserCount) {
		toSerialize["announce_user_count"] = o.AnnounceUserCount
	}
	if !IsNil(o.MaxUsers) {
		toSerialize["max_users"] = o.MaxUsers
	}
	if !IsNil(o.MusicOnHold) {
		toSerialize["music_on_hold"] = o.MusicOnHold
	}
	if !IsNil(o.Pin) {
		toSerialize["pin"] = o.Pin
	}
	if !IsNil(o.PreprocessSubroutine) {
		toSerialize["preprocess_subroutine"] = o.PreprocessSubroutine
	}
	if !IsNil(o.QuietJoinLeave) {
		toSerialize["quiet_join_leave"] = o.QuietJoinLeave
	}
	if !IsNil(o.Record) {
		toSerialize["record"] = o.Record
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	return toSerialize, nil
}

type NullableConference struct {
	value *Conference
	isSet bool
}

func (v NullableConference) Get() *Conference {
	return v.value
}

func (v *NullableConference) Set(val *Conference) {
	v.value = val
	v.isSet = true
}

func (v NullableConference) IsSet() bool {
	return v.isSet
}

func (v *NullableConference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConference(val *Conference) *NullableConference {
	return &NullableConference{value: val, isSet: true}
}

func (v NullableConference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
