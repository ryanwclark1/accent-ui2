/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DestinationCustom type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DestinationCustom{}

// DestinationCustom struct for DestinationCustom
type DestinationCustom struct {
	// The command to execute
	Command string `json:"command"`
	// MUST be 'custom'
	Type string `json:"type"`
}

type _DestinationCustom DestinationCustom

// NewDestinationCustom instantiates a new DestinationCustom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationCustom(command string, type_ string) *DestinationCustom {
	this := DestinationCustom{}
	this.Command = command
	this.Type = type_
	return &this
}

// NewDestinationCustomWithDefaults instantiates a new DestinationCustom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationCustomWithDefaults() *DestinationCustom {
	this := DestinationCustom{}
	return &this
}

// GetCommand returns the Command field value
func (o *DestinationCustom) GetCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *DestinationCustom) GetCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *DestinationCustom) SetCommand(v string) {
	o.Command = v
}

// GetType returns the Type field value
func (o *DestinationCustom) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DestinationCustom) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DestinationCustom) SetType(v string) {
	o.Type = v
}

func (o DestinationCustom) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DestinationCustom) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["command"] = o.Command
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *DestinationCustom) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"command",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDestinationCustom := _DestinationCustom{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDestinationCustom)

	if err != nil {
		return err
	}

	*o = DestinationCustom(varDestinationCustom)

	return err
}

type NullableDestinationCustom struct {
	value *DestinationCustom
	isSet bool
}

func (v NullableDestinationCustom) Get() *DestinationCustom {
	return v.value
}

func (v *NullableDestinationCustom) Set(val *DestinationCustom) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationCustom) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationCustom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationCustom(val *DestinationCustom) *NullableDestinationCustom {
	return &NullableDestinationCustom{value: val, isSet: true}
}

func (v NullableDestinationCustom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationCustom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
