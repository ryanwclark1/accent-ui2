/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type CallpickupsAPI interface {

	/*
		CreateCallpickup Create call pickup

		**Required ACL:** `confd.callpickups.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateCallpickupRequest
	*/
	CreateCallpickup(ctx context.Context) ApiCreateCallpickupRequest

	// CreateCallpickupExecute executes the request
	//  @return CallPickup
	CreateCallpickupExecute(r ApiCreateCallpickupRequest) (*CallPickup, *http.Response, error)

	/*
		DeleteCallpickup Delete call pickup

		**Required ACL:** `confd.callpickups.{callpickup_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callpickupId Call Pickup's ID
		@return ApiDeleteCallpickupRequest
	*/
	DeleteCallpickup(ctx context.Context, callpickupId int32) ApiDeleteCallpickupRequest

	// DeleteCallpickupExecute executes the request
	DeleteCallpickupExecute(r ApiDeleteCallpickupRequest) (*http.Response, error)

	/*
		GetCallpickup Get call pickup

		**Required ACL:** `confd.callpickups.{callpickup_id}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callpickupId Call Pickup's ID
		@return ApiGetCallpickupRequest
	*/
	GetCallpickup(ctx context.Context, callpickupId int32) ApiGetCallpickupRequest

	// GetCallpickupExecute executes the request
	//  @return CallPickup
	GetCallpickupExecute(r ApiGetCallpickupRequest) (*CallPickup, *http.Response, error)

	/*
		ListCallPickups List call pickups

		**Required ACL:** `confd.callpickups.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListCallPickupsRequest
	*/
	ListCallPickups(ctx context.Context) ApiListCallPickupsRequest

	// ListCallPickupsExecute executes the request
	//  @return CallPickupItems
	ListCallPickupsExecute(r ApiListCallPickupsRequest) (*CallPickupItems, *http.Response, error)

	/*
		UpdateCallPickupInterceptorGroups Update call pickup and interceptors

		**Required ACL:** `confd.callpickups.{callpickup_id}.interceptors.groups.update` **WARNING** This endpoint remove all interceptors which are not defined.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callpickupId Call Pickup's ID
		@return ApiUpdateCallPickupInterceptorGroupsRequest
	*/
	UpdateCallPickupInterceptorGroups(ctx context.Context, callpickupId int32) ApiUpdateCallPickupInterceptorGroupsRequest

	// UpdateCallPickupInterceptorGroupsExecute executes the request
	UpdateCallPickupInterceptorGroupsExecute(r ApiUpdateCallPickupInterceptorGroupsRequest) (*http.Response, error)

	/*
		UpdateCallPickupInterceptorUsers Update call pickup and interceptors

		**Required ACL:** `confd.callpickups.{callpickup_id}.interceptors.users.update` **WARNING** This endpoint remove all interceptors which are not defined.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callpickupId Call Pickup's ID
		@return ApiUpdateCallPickupInterceptorUsersRequest
	*/
	UpdateCallPickupInterceptorUsers(ctx context.Context, callpickupId int32) ApiUpdateCallPickupInterceptorUsersRequest

	// UpdateCallPickupInterceptorUsersExecute executes the request
	UpdateCallPickupInterceptorUsersExecute(r ApiUpdateCallPickupInterceptorUsersRequest) (*http.Response, error)

	/*
		UpdateCallPickupTargetGroups Update call pickup and targets

		**Required ACL:** `confd.callpickups.{callpickup_id}.targets.groups.update` **WARNING** This endpoint remove all targets which are not defined.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callpickupId Call Pickup's ID
		@return ApiUpdateCallPickupTargetGroupsRequest
	*/
	UpdateCallPickupTargetGroups(ctx context.Context, callpickupId int32) ApiUpdateCallPickupTargetGroupsRequest

	// UpdateCallPickupTargetGroupsExecute executes the request
	UpdateCallPickupTargetGroupsExecute(r ApiUpdateCallPickupTargetGroupsRequest) (*http.Response, error)

	/*
		UpdateCallPickupTargetUsers Update call pickup and targets

		**Required ACL:** `confd.callpickups.{callpickup_id}.targets.users.update` **WARNING** This endpoint remove all targets which are not defined.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callpickupId Call Pickup's ID
		@return ApiUpdateCallPickupTargetUsersRequest
	*/
	UpdateCallPickupTargetUsers(ctx context.Context, callpickupId int32) ApiUpdateCallPickupTargetUsersRequest

	// UpdateCallPickupTargetUsersExecute executes the request
	UpdateCallPickupTargetUsersExecute(r ApiUpdateCallPickupTargetUsersRequest) (*http.Response, error)

	/*
		UpdateCallpickup Update call pickup

		**Required ACL:** `confd.callpickups.{callpickup_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param callpickupId Call Pickup's ID
		@return ApiUpdateCallpickupRequest
	*/
	UpdateCallpickup(ctx context.Context, callpickupId int32) ApiUpdateCallpickupRequest

	// UpdateCallpickupExecute executes the request
	UpdateCallpickupExecute(r ApiUpdateCallpickupRequest) (*http.Response, error)
}

// CallpickupsAPIService CallpickupsAPI service
type CallpickupsAPIService service

type ApiCreateCallpickupRequest struct {
	ctx          context.Context
	ApiService   CallpickupsAPI
	body         *CallPickup
	accentTenant *string
}

// Call Pickup to create
func (r ApiCreateCallpickupRequest) Body(body CallPickup) ApiCreateCallpickupRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiCreateCallpickupRequest) AccentTenant(accentTenant string) ApiCreateCallpickupRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiCreateCallpickupRequest) Execute() (*CallPickup, *http.Response, error) {
	return r.ApiService.CreateCallpickupExecute(r)
}

/*
CreateCallpickup Create call pickup

**Required ACL:** `confd.callpickups.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCallpickupRequest
*/
func (a *CallpickupsAPIService) CreateCallpickup(ctx context.Context) ApiCreateCallpickupRequest {
	return ApiCreateCallpickupRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CallPickup
func (a *CallpickupsAPIService) CreateCallpickupExecute(r ApiCreateCallpickupRequest) (*CallPickup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CallPickup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpickupsAPIService.CreateCallpickup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callpickups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCallpickupRequest struct {
	ctx          context.Context
	ApiService   CallpickupsAPI
	callpickupId int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiDeleteCallpickupRequest) AccentTenant(accentTenant string) ApiDeleteCallpickupRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiDeleteCallpickupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCallpickupExecute(r)
}

/*
DeleteCallpickup Delete call pickup

**Required ACL:** `confd.callpickups.{callpickup_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callpickupId Call Pickup's ID
	@return ApiDeleteCallpickupRequest
*/
func (a *CallpickupsAPIService) DeleteCallpickup(ctx context.Context, callpickupId int32) ApiDeleteCallpickupRequest {
	return ApiDeleteCallpickupRequest{
		ApiService:   a,
		ctx:          ctx,
		callpickupId: callpickupId,
	}
}

// Execute executes the request
func (a *CallpickupsAPIService) DeleteCallpickupExecute(r ApiDeleteCallpickupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpickupsAPIService.DeleteCallpickup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callpickups/{callpickup_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"callpickup_id"+"}", url.PathEscape(parameterValueToString(r.callpickupId, "callpickupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCallpickupRequest struct {
	ctx          context.Context
	ApiService   CallpickupsAPI
	callpickupId int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiGetCallpickupRequest) AccentTenant(accentTenant string) ApiGetCallpickupRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiGetCallpickupRequest) Execute() (*CallPickup, *http.Response, error) {
	return r.ApiService.GetCallpickupExecute(r)
}

/*
GetCallpickup Get call pickup

**Required ACL:** `confd.callpickups.{callpickup_id}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callpickupId Call Pickup's ID
	@return ApiGetCallpickupRequest
*/
func (a *CallpickupsAPIService) GetCallpickup(ctx context.Context, callpickupId int32) ApiGetCallpickupRequest {
	return ApiGetCallpickupRequest{
		ApiService:   a,
		ctx:          ctx,
		callpickupId: callpickupId,
	}
}

// Execute executes the request
//
//	@return CallPickup
func (a *CallpickupsAPIService) GetCallpickupExecute(r ApiGetCallpickupRequest) (*CallPickup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CallPickup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpickupsAPIService.GetCallpickup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callpickups/{callpickup_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"callpickup_id"+"}", url.PathEscape(parameterValueToString(r.callpickupId, "callpickupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCallPickupsRequest struct {
	ctx          context.Context
	ApiService   CallpickupsAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiListCallPickupsRequest) AccentTenant(accentTenant string) ApiListCallPickupsRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r ApiListCallPickupsRequest) Recurse(recurse bool) ApiListCallPickupsRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r ApiListCallPickupsRequest) Order(order string) ApiListCallPickupsRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r ApiListCallPickupsRequest) Direction(direction string) ApiListCallPickupsRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r ApiListCallPickupsRequest) Limit(limit int32) ApiListCallPickupsRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r ApiListCallPickupsRequest) Offset(offset int32) ApiListCallPickupsRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r ApiListCallPickupsRequest) Search(search string) ApiListCallPickupsRequest {
	r.search = &search
	return r
}

func (r ApiListCallPickupsRequest) Execute() (*CallPickupItems, *http.Response, error) {
	return r.ApiService.ListCallPickupsExecute(r)
}

/*
ListCallPickups List call pickups

**Required ACL:** `confd.callpickups.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListCallPickupsRequest
*/
func (a *CallpickupsAPIService) ListCallPickups(ctx context.Context) ApiListCallPickupsRequest {
	return ApiListCallPickupsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CallPickupItems
func (a *CallpickupsAPIService) ListCallPickupsExecute(r ApiListCallPickupsRequest) (*CallPickupItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CallPickupItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpickupsAPIService.ListCallPickups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callpickups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCallPickupInterceptorGroupsRequest struct {
	ctx          context.Context
	ApiService   CallpickupsAPI
	body         *GroupsID
	callpickupId int32
	accentTenant *string
}

// Groups to associated
func (r ApiUpdateCallPickupInterceptorGroupsRequest) Body(body GroupsID) ApiUpdateCallPickupInterceptorGroupsRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiUpdateCallPickupInterceptorGroupsRequest) AccentTenant(accentTenant string) ApiUpdateCallPickupInterceptorGroupsRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiUpdateCallPickupInterceptorGroupsRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCallPickupInterceptorGroupsExecute(r)
}

/*
UpdateCallPickupInterceptorGroups Update call pickup and interceptors

**Required ACL:** `confd.callpickups.{callpickup_id}.interceptors.groups.update` **WARNING** This endpoint remove all interceptors which are not defined.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callpickupId Call Pickup's ID
	@return ApiUpdateCallPickupInterceptorGroupsRequest
*/
func (a *CallpickupsAPIService) UpdateCallPickupInterceptorGroups(ctx context.Context, callpickupId int32) ApiUpdateCallPickupInterceptorGroupsRequest {
	return ApiUpdateCallPickupInterceptorGroupsRequest{
		ApiService:   a,
		ctx:          ctx,
		callpickupId: callpickupId,
	}
}

// Execute executes the request
func (a *CallpickupsAPIService) UpdateCallPickupInterceptorGroupsExecute(r ApiUpdateCallPickupInterceptorGroupsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpickupsAPIService.UpdateCallPickupInterceptorGroups")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callpickups/{callpickup_id}/interceptors/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"callpickup_id"+"}", url.PathEscape(parameterValueToString(r.callpickupId, "callpickupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateCallPickupInterceptorUsersRequest struct {
	ctx          context.Context
	ApiService   CallpickupsAPI
	body         *UsersUuid
	callpickupId int32
	accentTenant *string
}

// Users to associated
func (r ApiUpdateCallPickupInterceptorUsersRequest) Body(body UsersUuid) ApiUpdateCallPickupInterceptorUsersRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiUpdateCallPickupInterceptorUsersRequest) AccentTenant(accentTenant string) ApiUpdateCallPickupInterceptorUsersRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiUpdateCallPickupInterceptorUsersRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCallPickupInterceptorUsersExecute(r)
}

/*
UpdateCallPickupInterceptorUsers Update call pickup and interceptors

**Required ACL:** `confd.callpickups.{callpickup_id}.interceptors.users.update` **WARNING** This endpoint remove all interceptors which are not defined.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callpickupId Call Pickup's ID
	@return ApiUpdateCallPickupInterceptorUsersRequest
*/
func (a *CallpickupsAPIService) UpdateCallPickupInterceptorUsers(ctx context.Context, callpickupId int32) ApiUpdateCallPickupInterceptorUsersRequest {
	return ApiUpdateCallPickupInterceptorUsersRequest{
		ApiService:   a,
		ctx:          ctx,
		callpickupId: callpickupId,
	}
}

// Execute executes the request
func (a *CallpickupsAPIService) UpdateCallPickupInterceptorUsersExecute(r ApiUpdateCallPickupInterceptorUsersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpickupsAPIService.UpdateCallPickupInterceptorUsers")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callpickups/{callpickup_id}/interceptors/users"
	localVarPath = strings.Replace(localVarPath, "{"+"callpickup_id"+"}", url.PathEscape(parameterValueToString(r.callpickupId, "callpickupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateCallPickupTargetGroupsRequest struct {
	ctx          context.Context
	ApiService   CallpickupsAPI
	body         *GroupsID
	callpickupId int32
	accentTenant *string
}

// Groups to associated
func (r ApiUpdateCallPickupTargetGroupsRequest) Body(body GroupsID) ApiUpdateCallPickupTargetGroupsRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiUpdateCallPickupTargetGroupsRequest) AccentTenant(accentTenant string) ApiUpdateCallPickupTargetGroupsRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiUpdateCallPickupTargetGroupsRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCallPickupTargetGroupsExecute(r)
}

/*
UpdateCallPickupTargetGroups Update call pickup and targets

**Required ACL:** `confd.callpickups.{callpickup_id}.targets.groups.update` **WARNING** This endpoint remove all targets which are not defined.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callpickupId Call Pickup's ID
	@return ApiUpdateCallPickupTargetGroupsRequest
*/
func (a *CallpickupsAPIService) UpdateCallPickupTargetGroups(ctx context.Context, callpickupId int32) ApiUpdateCallPickupTargetGroupsRequest {
	return ApiUpdateCallPickupTargetGroupsRequest{
		ApiService:   a,
		ctx:          ctx,
		callpickupId: callpickupId,
	}
}

// Execute executes the request
func (a *CallpickupsAPIService) UpdateCallPickupTargetGroupsExecute(r ApiUpdateCallPickupTargetGroupsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpickupsAPIService.UpdateCallPickupTargetGroups")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callpickups/{callpickup_id}/targets/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"callpickup_id"+"}", url.PathEscape(parameterValueToString(r.callpickupId, "callpickupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateCallPickupTargetUsersRequest struct {
	ctx          context.Context
	ApiService   CallpickupsAPI
	body         *UsersUuid
	callpickupId int32
	accentTenant *string
}

// Users to associated
func (r ApiUpdateCallPickupTargetUsersRequest) Body(body UsersUuid) ApiUpdateCallPickupTargetUsersRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiUpdateCallPickupTargetUsersRequest) AccentTenant(accentTenant string) ApiUpdateCallPickupTargetUsersRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiUpdateCallPickupTargetUsersRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCallPickupTargetUsersExecute(r)
}

/*
UpdateCallPickupTargetUsers Update call pickup and targets

**Required ACL:** `confd.callpickups.{callpickup_id}.targets.users.update` **WARNING** This endpoint remove all targets which are not defined.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callpickupId Call Pickup's ID
	@return ApiUpdateCallPickupTargetUsersRequest
*/
func (a *CallpickupsAPIService) UpdateCallPickupTargetUsers(ctx context.Context, callpickupId int32) ApiUpdateCallPickupTargetUsersRequest {
	return ApiUpdateCallPickupTargetUsersRequest{
		ApiService:   a,
		ctx:          ctx,
		callpickupId: callpickupId,
	}
}

// Execute executes the request
func (a *CallpickupsAPIService) UpdateCallPickupTargetUsersExecute(r ApiUpdateCallPickupTargetUsersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpickupsAPIService.UpdateCallPickupTargetUsers")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callpickups/{callpickup_id}/targets/users"
	localVarPath = strings.Replace(localVarPath, "{"+"callpickup_id"+"}", url.PathEscape(parameterValueToString(r.callpickupId, "callpickupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateCallpickupRequest struct {
	ctx          context.Context
	ApiService   CallpickupsAPI
	body         *CallPickup
	callpickupId int32
	accentTenant *string
}

func (r ApiUpdateCallpickupRequest) Body(body CallPickup) ApiUpdateCallpickupRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiUpdateCallpickupRequest) AccentTenant(accentTenant string) ApiUpdateCallpickupRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiUpdateCallpickupRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCallpickupExecute(r)
}

/*
UpdateCallpickup Update call pickup

**Required ACL:** `confd.callpickups.{callpickup_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param callpickupId Call Pickup's ID
	@return ApiUpdateCallpickupRequest
*/
func (a *CallpickupsAPIService) UpdateCallpickup(ctx context.Context, callpickupId int32) ApiUpdateCallpickupRequest {
	return ApiUpdateCallpickupRequest{
		ApiService:   a,
		ctx:          ctx,
		callpickupId: callpickupId,
	}
}

// Execute executes the request
func (a *CallpickupsAPIService) UpdateCallpickupExecute(r ApiUpdateCallpickupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallpickupsAPIService.UpdateCallpickup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/callpickups/{callpickup_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"callpickup_id"+"}", url.PathEscape(parameterValueToString(r.callpickupId, "callpickupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
