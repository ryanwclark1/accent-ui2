/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RegisterIAX type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterIAX{}

// RegisterIAX struct for RegisterIAX
type RegisterIAX struct {
	// The id of the register IAX
	Id *int32 `json:"id,omitempty"`
	// The password to authenticate to the remote_host
	AuthPassword *string `json:"auth_password,omitempty"`
	// The username used by the remote_host for the authentication
	AuthUsername *string `json:"auth_username,omitempty"`
	// The callback context to use for the register
	CallbackContext *string `json:"callback_context,omitempty"`
	// The callback extension to use for the register
	CallbackExtension *string `json:"callback_extension,omitempty"`
	// The register domain
	RemoteHost string `json:"remote_host"`
	// The port of the remote_host
	RemotePort *int32 `json:"remote_port,omitempty"`
}

type _RegisterIAX RegisterIAX

// NewRegisterIAX instantiates a new RegisterIAX object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterIAX(remoteHost string) *RegisterIAX {
	this := RegisterIAX{}
	this.RemoteHost = remoteHost
	return &this
}

// NewRegisterIAXWithDefaults instantiates a new RegisterIAX object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterIAXWithDefaults() *RegisterIAX {
	this := RegisterIAX{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegisterIAX) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIAX) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegisterIAX) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RegisterIAX) SetId(v int32) {
	o.Id = &v
}

// GetAuthPassword returns the AuthPassword field value if set, zero value otherwise.
func (o *RegisterIAX) GetAuthPassword() string {
	if o == nil || IsNil(o.AuthPassword) {
		var ret string
		return ret
	}
	return *o.AuthPassword
}

// GetAuthPasswordOk returns a tuple with the AuthPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIAX) GetAuthPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.AuthPassword) {
		return nil, false
	}
	return o.AuthPassword, true
}

// HasAuthPassword returns a boolean if a field has been set.
func (o *RegisterIAX) HasAuthPassword() bool {
	if o != nil && !IsNil(o.AuthPassword) {
		return true
	}

	return false
}

// SetAuthPassword gets a reference to the given string and assigns it to the AuthPassword field.
func (o *RegisterIAX) SetAuthPassword(v string) {
	o.AuthPassword = &v
}

// GetAuthUsername returns the AuthUsername field value if set, zero value otherwise.
func (o *RegisterIAX) GetAuthUsername() string {
	if o == nil || IsNil(o.AuthUsername) {
		var ret string
		return ret
	}
	return *o.AuthUsername
}

// GetAuthUsernameOk returns a tuple with the AuthUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIAX) GetAuthUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.AuthUsername) {
		return nil, false
	}
	return o.AuthUsername, true
}

// HasAuthUsername returns a boolean if a field has been set.
func (o *RegisterIAX) HasAuthUsername() bool {
	if o != nil && !IsNil(o.AuthUsername) {
		return true
	}

	return false
}

// SetAuthUsername gets a reference to the given string and assigns it to the AuthUsername field.
func (o *RegisterIAX) SetAuthUsername(v string) {
	o.AuthUsername = &v
}

// GetCallbackContext returns the CallbackContext field value if set, zero value otherwise.
func (o *RegisterIAX) GetCallbackContext() string {
	if o == nil || IsNil(o.CallbackContext) {
		var ret string
		return ret
	}
	return *o.CallbackContext
}

// GetCallbackContextOk returns a tuple with the CallbackContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIAX) GetCallbackContextOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackContext) {
		return nil, false
	}
	return o.CallbackContext, true
}

// HasCallbackContext returns a boolean if a field has been set.
func (o *RegisterIAX) HasCallbackContext() bool {
	if o != nil && !IsNil(o.CallbackContext) {
		return true
	}

	return false
}

// SetCallbackContext gets a reference to the given string and assigns it to the CallbackContext field.
func (o *RegisterIAX) SetCallbackContext(v string) {
	o.CallbackContext = &v
}

// GetCallbackExtension returns the CallbackExtension field value if set, zero value otherwise.
func (o *RegisterIAX) GetCallbackExtension() string {
	if o == nil || IsNil(o.CallbackExtension) {
		var ret string
		return ret
	}
	return *o.CallbackExtension
}

// GetCallbackExtensionOk returns a tuple with the CallbackExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIAX) GetCallbackExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackExtension) {
		return nil, false
	}
	return o.CallbackExtension, true
}

// HasCallbackExtension returns a boolean if a field has been set.
func (o *RegisterIAX) HasCallbackExtension() bool {
	if o != nil && !IsNil(o.CallbackExtension) {
		return true
	}

	return false
}

// SetCallbackExtension gets a reference to the given string and assigns it to the CallbackExtension field.
func (o *RegisterIAX) SetCallbackExtension(v string) {
	o.CallbackExtension = &v
}

// GetRemoteHost returns the RemoteHost field value
func (o *RegisterIAX) GetRemoteHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteHost
}

// GetRemoteHostOk returns a tuple with the RemoteHost field value
// and a boolean to check if the value has been set.
func (o *RegisterIAX) GetRemoteHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteHost, true
}

// SetRemoteHost sets field value
func (o *RegisterIAX) SetRemoteHost(v string) {
	o.RemoteHost = v
}

// GetRemotePort returns the RemotePort field value if set, zero value otherwise.
func (o *RegisterIAX) GetRemotePort() int32 {
	if o == nil || IsNil(o.RemotePort) {
		var ret int32
		return ret
	}
	return *o.RemotePort
}

// GetRemotePortOk returns a tuple with the RemotePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIAX) GetRemotePortOk() (*int32, bool) {
	if o == nil || IsNil(o.RemotePort) {
		return nil, false
	}
	return o.RemotePort, true
}

// HasRemotePort returns a boolean if a field has been set.
func (o *RegisterIAX) HasRemotePort() bool {
	if o != nil && !IsNil(o.RemotePort) {
		return true
	}

	return false
}

// SetRemotePort gets a reference to the given int32 and assigns it to the RemotePort field.
func (o *RegisterIAX) SetRemotePort(v int32) {
	o.RemotePort = &v
}

func (o RegisterIAX) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterIAX) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.AuthPassword) {
		toSerialize["auth_password"] = o.AuthPassword
	}
	if !IsNil(o.AuthUsername) {
		toSerialize["auth_username"] = o.AuthUsername
	}
	if !IsNil(o.CallbackContext) {
		toSerialize["callback_context"] = o.CallbackContext
	}
	if !IsNil(o.CallbackExtension) {
		toSerialize["callback_extension"] = o.CallbackExtension
	}
	toSerialize["remote_host"] = o.RemoteHost
	if !IsNil(o.RemotePort) {
		toSerialize["remote_port"] = o.RemotePort
	}
	return toSerialize, nil
}

func (o *RegisterIAX) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"remote_host",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterIAX := _RegisterIAX{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterIAX)

	if err != nil {
		return err
	}

	*o = RegisterIAX(varRegisterIAX)

	return err
}

type NullableRegisterIAX struct {
	value *RegisterIAX
	isSet bool
}

func (v NullableRegisterIAX) Get() *RegisterIAX {
	return v.value
}

func (v *NullableRegisterIAX) Set(val *RegisterIAX) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterIAX) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterIAX) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterIAX(val *RegisterIAX) *NullableRegisterIAX {
	return &NullableRegisterIAX{value: val, isSet: true}
}

func (v NullableRegisterIAX) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterIAX) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
