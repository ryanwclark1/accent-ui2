/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type TrunksAPI interface {

	/*
		AssociateOutcallTrunks Associate outcall and trunks

		**Required ACL:** `confd.outcalls.{outcall_id}.trunks.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param outcallId Outgoing call's ID
		@return TrunksAPIAssociateOutcallTrunksRequest
	*/
	AssociateOutcallTrunks(ctx context.Context, outcallId int32) TrunksAPIAssociateOutcallTrunksRequest

	// AssociateOutcallTrunksExecute executes the request
	AssociateOutcallTrunksExecute(r TrunksAPIAssociateOutcallTrunksRequest) (*http.Response, error)

	/*
		AssociateTrunkEndpointCustom Associate trunk and Custom endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.custom.{custom_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param customId
		@return TrunksAPIAssociateTrunkEndpointCustomRequest
	*/
	AssociateTrunkEndpointCustom(ctx context.Context, trunkId int32, customId int32) TrunksAPIAssociateTrunkEndpointCustomRequest

	// AssociateTrunkEndpointCustomExecute executes the request
	AssociateTrunkEndpointCustomExecute(r TrunksAPIAssociateTrunkEndpointCustomRequest) (*http.Response, error)

	/*
		AssociateTrunkEndpointIax Associate trunk and IAX endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.iax.{iax_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param iaxId
		@return TrunksAPIAssociateTrunkEndpointIaxRequest
	*/
	AssociateTrunkEndpointIax(ctx context.Context, trunkId int32, iaxId int32) TrunksAPIAssociateTrunkEndpointIaxRequest

	// AssociateTrunkEndpointIaxExecute executes the request
	AssociateTrunkEndpointIaxExecute(r TrunksAPIAssociateTrunkEndpointIaxRequest) (*http.Response, error)

	/*
		AssociateTrunkEndpointSip Associate trunk and SIP endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.sip.{sip_uuid}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param sipUuid
		@return TrunksAPIAssociateTrunkEndpointSipRequest
	*/
	AssociateTrunkEndpointSip(ctx context.Context, trunkId int32, sipUuid string) TrunksAPIAssociateTrunkEndpointSipRequest

	// AssociateTrunkEndpointSipExecute executes the request
	AssociateTrunkEndpointSipExecute(r TrunksAPIAssociateTrunkEndpointSipRequest) (*http.Response, error)

	/*
		AssociateTrunkRegisterIax Associate trunk and IAX register

		**Required ACL:** `confd.trunks.{trunk_id}.registers.iax.{iax_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param iaxId
		@return TrunksAPIAssociateTrunkRegisterIaxRequest
	*/
	AssociateTrunkRegisterIax(ctx context.Context, trunkId int32, iaxId int32) TrunksAPIAssociateTrunkRegisterIaxRequest

	// AssociateTrunkRegisterIaxExecute executes the request
	AssociateTrunkRegisterIaxExecute(r TrunksAPIAssociateTrunkRegisterIaxRequest) (*http.Response, error)

	/*
		CreateTrunk Create trunk

		**Required ACL:** `confd.trunks.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return TrunksAPICreateTrunkRequest
	*/
	CreateTrunk(ctx context.Context) TrunksAPICreateTrunkRequest

	// CreateTrunkExecute executes the request
	//  @return Trunk
	CreateTrunkExecute(r TrunksAPICreateTrunkRequest) (*Trunk, *http.Response, error)

	/*
		DeleteTrunk Delete trunk

		**Required ACL:** `confd.trunks.{trunk_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@return TrunksAPIDeleteTrunkRequest
	*/
	DeleteTrunk(ctx context.Context, trunkId int32) TrunksAPIDeleteTrunkRequest

	// DeleteTrunkExecute executes the request
	DeleteTrunkExecute(r TrunksAPIDeleteTrunkRequest) (*http.Response, error)

	/*
		DissociateTrunkEndpointCustom Dissociate trunk and Custom endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.custom.{custom_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param customId
		@return TrunksAPIDissociateTrunkEndpointCustomRequest
	*/
	DissociateTrunkEndpointCustom(ctx context.Context, trunkId int32, customId int32) TrunksAPIDissociateTrunkEndpointCustomRequest

	// DissociateTrunkEndpointCustomExecute executes the request
	DissociateTrunkEndpointCustomExecute(r TrunksAPIDissociateTrunkEndpointCustomRequest) (*http.Response, error)

	/*
		DissociateTrunkEndpointIax Dissociate trunk and IAX endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.iax.{iax_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param iaxId
		@return TrunksAPIDissociateTrunkEndpointIaxRequest
	*/
	DissociateTrunkEndpointIax(ctx context.Context, trunkId int32, iaxId int32) TrunksAPIDissociateTrunkEndpointIaxRequest

	// DissociateTrunkEndpointIaxExecute executes the request
	DissociateTrunkEndpointIaxExecute(r TrunksAPIDissociateTrunkEndpointIaxRequest) (*http.Response, error)

	/*
		DissociateTrunkEndpointSip Dissociate trunk and SIP endpoint

		**Required ACL:** `confd.trunks.{trunk_id}.endpoints.sip.{sip_uuid}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param sipUuid
		@return TrunksAPIDissociateTrunkEndpointSipRequest
	*/
	DissociateTrunkEndpointSip(ctx context.Context, trunkId int32, sipUuid string) TrunksAPIDissociateTrunkEndpointSipRequest

	// DissociateTrunkEndpointSipExecute executes the request
	DissociateTrunkEndpointSipExecute(r TrunksAPIDissociateTrunkEndpointSipRequest) (*http.Response, error)

	/*
		DissociateTrunkRegisterIax Dissociate trunk and IAX register

		**Required ACL:** `confd.trunks.{trunk_id}.registers.iax.{iax_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@param iaxId
		@return TrunksAPIDissociateTrunkRegisterIaxRequest
	*/
	DissociateTrunkRegisterIax(ctx context.Context, trunkId int32, iaxId int32) TrunksAPIDissociateTrunkRegisterIaxRequest

	// DissociateTrunkRegisterIaxExecute executes the request
	DissociateTrunkRegisterIaxExecute(r TrunksAPIDissociateTrunkRegisterIaxRequest) (*http.Response, error)

	/*
		GetTrunk Get trunk

		**Required ACL:** `confd.trunks.{trunk_id}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@return TrunksAPIGetTrunkRequest
	*/
	GetTrunk(ctx context.Context, trunkId int32) TrunksAPIGetTrunkRequest

	// GetTrunkExecute executes the request
	//  @return Trunk
	GetTrunkExecute(r TrunksAPIGetTrunkRequest) (*Trunk, *http.Response, error)

	/*
		ListTrunks List trunks

		**Required ACL:** `confd.trunks.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return TrunksAPIListTrunksRequest
	*/
	ListTrunks(ctx context.Context) TrunksAPIListTrunksRequest

	// ListTrunksExecute executes the request
	//  @return TrunkItems
	ListTrunksExecute(r TrunksAPIListTrunksRequest) (*TrunkItems, *http.Response, error)

	/*
		UpdateTrunk Update trunk

		**Required ACL:** `confd.trunks.{trunk_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param trunkId Trunk's ID
		@return TrunksAPIUpdateTrunkRequest
	*/
	UpdateTrunk(ctx context.Context, trunkId int32) TrunksAPIUpdateTrunkRequest

	// UpdateTrunkExecute executes the request
	UpdateTrunkExecute(r TrunksAPIUpdateTrunkRequest) (*http.Response, error)
}

// TrunksAPIService TrunksAPI service
type TrunksAPIService service

type TrunksAPIAssociateOutcallTrunksRequest struct {
	ctx        context.Context
	ApiService TrunksAPI
	body       *TrunksId
	outcallId  int32
}

// Trunks to associated
func (r TrunksAPIAssociateOutcallTrunksRequest) Body(body TrunksId) TrunksAPIAssociateOutcallTrunksRequest {
	r.body = &body
	return r
}

func (r TrunksAPIAssociateOutcallTrunksRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateOutcallTrunksExecute(r)
}

/*
AssociateOutcallTrunks Associate outcall and trunks

**Required ACL:** `confd.outcalls.{outcall_id}.trunks.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param outcallId Outgoing call's ID
	@return TrunksAPIAssociateOutcallTrunksRequest
*/
func (a *TrunksAPIService) AssociateOutcallTrunks(ctx context.Context, outcallId int32) TrunksAPIAssociateOutcallTrunksRequest {
	return TrunksAPIAssociateOutcallTrunksRequest{
		ApiService: a,
		ctx:        ctx,
		outcallId:  outcallId,
	}
}

// Execute executes the request
func (a *TrunksAPIService) AssociateOutcallTrunksExecute(r TrunksAPIAssociateOutcallTrunksRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrunksAPIService.AssociateOutcallTrunks")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls/{outcall_id}/trunks"
	localVarPath = strings.Replace(localVarPath, "{"+"outcall_id"+"}", url.PathEscape(parameterValueToString(r.outcallId, "outcallId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TrunksAPIAssociateTrunkEndpointCustomRequest struct {
	ctx        context.Context
	ApiService TrunksAPI
	trunkId    int32
	customId   int32
}

func (r TrunksAPIAssociateTrunkEndpointCustomRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateTrunkEndpointCustomExecute(r)
}

/*
AssociateTrunkEndpointCustom Associate trunk and Custom endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.custom.{custom_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param customId
	@return TrunksAPIAssociateTrunkEndpointCustomRequest
*/
func (a *TrunksAPIService) AssociateTrunkEndpointCustom(ctx context.Context, trunkId int32, customId int32) TrunksAPIAssociateTrunkEndpointCustomRequest {
	return TrunksAPIAssociateTrunkEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		customId:   customId,
	}
}

// Execute executes the request
func (a *TrunksAPIService) AssociateTrunkEndpointCustomExecute(r TrunksAPIAssociateTrunkEndpointCustomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrunksAPIService.AssociateTrunkEndpointCustom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TrunksAPIAssociateTrunkEndpointIaxRequest struct {
	ctx        context.Context
	ApiService TrunksAPI
	trunkId    int32
	iaxId      int32
}

func (r TrunksAPIAssociateTrunkEndpointIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateTrunkEndpointIaxExecute(r)
}

/*
AssociateTrunkEndpointIax Associate trunk and IAX endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.iax.{iax_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param iaxId
	@return TrunksAPIAssociateTrunkEndpointIaxRequest
*/
func (a *TrunksAPIService) AssociateTrunkEndpointIax(ctx context.Context, trunkId int32, iaxId int32) TrunksAPIAssociateTrunkEndpointIaxRequest {
	return TrunksAPIAssociateTrunkEndpointIaxRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		iaxId:      iaxId,
	}
}

// Execute executes the request
func (a *TrunksAPIService) AssociateTrunkEndpointIaxExecute(r TrunksAPIAssociateTrunkEndpointIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrunksAPIService.AssociateTrunkEndpointIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TrunksAPIAssociateTrunkEndpointSipRequest struct {
	ctx        context.Context
	ApiService TrunksAPI
	trunkId    int32
	sipUuid    string
}

func (r TrunksAPIAssociateTrunkEndpointSipRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateTrunkEndpointSipExecute(r)
}

/*
AssociateTrunkEndpointSip Associate trunk and SIP endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.sip.{sip_uuid}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param sipUuid
	@return TrunksAPIAssociateTrunkEndpointSipRequest
*/
func (a *TrunksAPIService) AssociateTrunkEndpointSip(ctx context.Context, trunkId int32, sipUuid string) TrunksAPIAssociateTrunkEndpointSipRequest {
	return TrunksAPIAssociateTrunkEndpointSipRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		sipUuid:    sipUuid,
	}
}

// Execute executes the request
func (a *TrunksAPIService) AssociateTrunkEndpointSipExecute(r TrunksAPIAssociateTrunkEndpointSipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrunksAPIService.AssociateTrunkEndpointSip")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/sip/{sip_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sip_uuid"+"}", url.PathEscape(parameterValueToString(r.sipUuid, "sipUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TrunksAPIAssociateTrunkRegisterIaxRequest struct {
	ctx        context.Context
	ApiService TrunksAPI
	trunkId    int32
	iaxId      int32
}

func (r TrunksAPIAssociateTrunkRegisterIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateTrunkRegisterIaxExecute(r)
}

/*
AssociateTrunkRegisterIax Associate trunk and IAX register

**Required ACL:** `confd.trunks.{trunk_id}.registers.iax.{iax_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param iaxId
	@return TrunksAPIAssociateTrunkRegisterIaxRequest
*/
func (a *TrunksAPIService) AssociateTrunkRegisterIax(ctx context.Context, trunkId int32, iaxId int32) TrunksAPIAssociateTrunkRegisterIaxRequest {
	return TrunksAPIAssociateTrunkRegisterIaxRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		iaxId:      iaxId,
	}
}

// Execute executes the request
func (a *TrunksAPIService) AssociateTrunkRegisterIaxExecute(r TrunksAPIAssociateTrunkRegisterIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrunksAPIService.AssociateTrunkRegisterIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/registers/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TrunksAPICreateTrunkRequest struct {
	ctx        context.Context
	ApiService TrunksAPI
	body       *Trunk
}

// Trunk to create
func (r TrunksAPICreateTrunkRequest) Body(body Trunk) TrunksAPICreateTrunkRequest {
	r.body = &body
	return r
}

func (r TrunksAPICreateTrunkRequest) Execute() (*Trunk, *http.Response, error) {
	return r.ApiService.CreateTrunkExecute(r)
}

/*
CreateTrunk Create trunk

**Required ACL:** `confd.trunks.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TrunksAPICreateTrunkRequest
*/
func (a *TrunksAPIService) CreateTrunk(ctx context.Context) TrunksAPICreateTrunkRequest {
	return TrunksAPICreateTrunkRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Trunk
func (a *TrunksAPIService) CreateTrunkExecute(r TrunksAPICreateTrunkRequest) (*Trunk, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Trunk
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrunksAPIService.CreateTrunk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TrunksAPIDeleteTrunkRequest struct {
	ctx          context.Context
	ApiService   TrunksAPI
	trunkId      int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r TrunksAPIDeleteTrunkRequest) AccentTenant(accentTenant string) TrunksAPIDeleteTrunkRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r TrunksAPIDeleteTrunkRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTrunkExecute(r)
}

/*
DeleteTrunk Delete trunk

**Required ACL:** `confd.trunks.{trunk_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@return TrunksAPIDeleteTrunkRequest
*/
func (a *TrunksAPIService) DeleteTrunk(ctx context.Context, trunkId int32) TrunksAPIDeleteTrunkRequest {
	return TrunksAPIDeleteTrunkRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
	}
}

// Execute executes the request
func (a *TrunksAPIService) DeleteTrunkExecute(r TrunksAPIDeleteTrunkRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrunksAPIService.DeleteTrunk")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TrunksAPIDissociateTrunkEndpointCustomRequest struct {
	ctx        context.Context
	ApiService TrunksAPI
	trunkId    int32
	customId   int32
}

func (r TrunksAPIDissociateTrunkEndpointCustomRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateTrunkEndpointCustomExecute(r)
}

/*
DissociateTrunkEndpointCustom Dissociate trunk and Custom endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.custom.{custom_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param customId
	@return TrunksAPIDissociateTrunkEndpointCustomRequest
*/
func (a *TrunksAPIService) DissociateTrunkEndpointCustom(ctx context.Context, trunkId int32, customId int32) TrunksAPIDissociateTrunkEndpointCustomRequest {
	return TrunksAPIDissociateTrunkEndpointCustomRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		customId:   customId,
	}
}

// Execute executes the request
func (a *TrunksAPIService) DissociateTrunkEndpointCustomExecute(r TrunksAPIDissociateTrunkEndpointCustomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrunksAPIService.DissociateTrunkEndpointCustom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/custom/{custom_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"custom_id"+"}", url.PathEscape(parameterValueToString(r.customId, "customId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TrunksAPIDissociateTrunkEndpointIaxRequest struct {
	ctx        context.Context
	ApiService TrunksAPI
	trunkId    int32
	iaxId      int32
}

func (r TrunksAPIDissociateTrunkEndpointIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateTrunkEndpointIaxExecute(r)
}

/*
DissociateTrunkEndpointIax Dissociate trunk and IAX endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.iax.{iax_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param iaxId
	@return TrunksAPIDissociateTrunkEndpointIaxRequest
*/
func (a *TrunksAPIService) DissociateTrunkEndpointIax(ctx context.Context, trunkId int32, iaxId int32) TrunksAPIDissociateTrunkEndpointIaxRequest {
	return TrunksAPIDissociateTrunkEndpointIaxRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		iaxId:      iaxId,
	}
}

// Execute executes the request
func (a *TrunksAPIService) DissociateTrunkEndpointIaxExecute(r TrunksAPIDissociateTrunkEndpointIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrunksAPIService.DissociateTrunkEndpointIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TrunksAPIDissociateTrunkEndpointSipRequest struct {
	ctx        context.Context
	ApiService TrunksAPI
	trunkId    int32
	sipUuid    string
}

func (r TrunksAPIDissociateTrunkEndpointSipRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateTrunkEndpointSipExecute(r)
}

/*
DissociateTrunkEndpointSip Dissociate trunk and SIP endpoint

**Required ACL:** `confd.trunks.{trunk_id}.endpoints.sip.{sip_uuid}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param sipUuid
	@return TrunksAPIDissociateTrunkEndpointSipRequest
*/
func (a *TrunksAPIService) DissociateTrunkEndpointSip(ctx context.Context, trunkId int32, sipUuid string) TrunksAPIDissociateTrunkEndpointSipRequest {
	return TrunksAPIDissociateTrunkEndpointSipRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		sipUuid:    sipUuid,
	}
}

// Execute executes the request
func (a *TrunksAPIService) DissociateTrunkEndpointSipExecute(r TrunksAPIDissociateTrunkEndpointSipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrunksAPIService.DissociateTrunkEndpointSip")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/endpoints/sip/{sip_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sip_uuid"+"}", url.PathEscape(parameterValueToString(r.sipUuid, "sipUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TrunksAPIDissociateTrunkRegisterIaxRequest struct {
	ctx        context.Context
	ApiService TrunksAPI
	trunkId    int32
	iaxId      int32
}

func (r TrunksAPIDissociateTrunkRegisterIaxRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateTrunkRegisterIaxExecute(r)
}

/*
DissociateTrunkRegisterIax Dissociate trunk and IAX register

**Required ACL:** `confd.trunks.{trunk_id}.registers.iax.{iax_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@param iaxId
	@return TrunksAPIDissociateTrunkRegisterIaxRequest
*/
func (a *TrunksAPIService) DissociateTrunkRegisterIax(ctx context.Context, trunkId int32, iaxId int32) TrunksAPIDissociateTrunkRegisterIaxRequest {
	return TrunksAPIDissociateTrunkRegisterIaxRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
		iaxId:      iaxId,
	}
}

// Execute executes the request
func (a *TrunksAPIService) DissociateTrunkRegisterIaxExecute(r TrunksAPIDissociateTrunkRegisterIaxRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrunksAPIService.DissociateTrunkRegisterIax")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}/registers/iax/{iax_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"iax_id"+"}", url.PathEscape(parameterValueToString(r.iaxId, "iaxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TrunksAPIGetTrunkRequest struct {
	ctx          context.Context
	ApiService   TrunksAPI
	trunkId      int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r TrunksAPIGetTrunkRequest) AccentTenant(accentTenant string) TrunksAPIGetTrunkRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r TrunksAPIGetTrunkRequest) Execute() (*Trunk, *http.Response, error) {
	return r.ApiService.GetTrunkExecute(r)
}

/*
GetTrunk Get trunk

**Required ACL:** `confd.trunks.{trunk_id}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@return TrunksAPIGetTrunkRequest
*/
func (a *TrunksAPIService) GetTrunk(ctx context.Context, trunkId int32) TrunksAPIGetTrunkRequest {
	return TrunksAPIGetTrunkRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
	}
}

// Execute executes the request
//
//	@return Trunk
func (a *TrunksAPIService) GetTrunkExecute(r TrunksAPIGetTrunkRequest) (*Trunk, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Trunk
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrunksAPIService.GetTrunk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TrunksAPIListTrunksRequest struct {
	ctx          context.Context
	ApiService   TrunksAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r TrunksAPIListTrunksRequest) AccentTenant(accentTenant string) TrunksAPIListTrunksRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r TrunksAPIListTrunksRequest) Recurse(recurse bool) TrunksAPIListTrunksRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r TrunksAPIListTrunksRequest) Order(order string) TrunksAPIListTrunksRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r TrunksAPIListTrunksRequest) Direction(direction string) TrunksAPIListTrunksRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r TrunksAPIListTrunksRequest) Limit(limit int32) TrunksAPIListTrunksRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r TrunksAPIListTrunksRequest) Offset(offset int32) TrunksAPIListTrunksRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r TrunksAPIListTrunksRequest) Search(search string) TrunksAPIListTrunksRequest {
	r.search = &search
	return r
}

func (r TrunksAPIListTrunksRequest) Execute() (*TrunkItems, *http.Response, error) {
	return r.ApiService.ListTrunksExecute(r)
}

/*
ListTrunks List trunks

**Required ACL:** `confd.trunks.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TrunksAPIListTrunksRequest
*/
func (a *TrunksAPIService) ListTrunks(ctx context.Context) TrunksAPIListTrunksRequest {
	return TrunksAPIListTrunksRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TrunkItems
func (a *TrunksAPIService) ListTrunksExecute(r TrunksAPIListTrunksRequest) (*TrunkItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TrunkItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrunksAPIService.ListTrunks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TrunksAPIUpdateTrunkRequest struct {
	ctx          context.Context
	ApiService   TrunksAPI
	body         *Trunk
	trunkId      int32
	accentTenant *string
}

func (r TrunksAPIUpdateTrunkRequest) Body(body Trunk) TrunksAPIUpdateTrunkRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r TrunksAPIUpdateTrunkRequest) AccentTenant(accentTenant string) TrunksAPIUpdateTrunkRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r TrunksAPIUpdateTrunkRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateTrunkExecute(r)
}

/*
UpdateTrunk Update trunk

**Required ACL:** `confd.trunks.{trunk_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param trunkId Trunk's ID
	@return TrunksAPIUpdateTrunkRequest
*/
func (a *TrunksAPIService) UpdateTrunk(ctx context.Context, trunkId int32) TrunksAPIUpdateTrunkRequest {
	return TrunksAPIUpdateTrunkRequest{
		ApiService: a,
		ctx:        ctx,
		trunkId:    trunkId,
	}
}

// Execute executes the request
func (a *TrunksAPIService) UpdateTrunkExecute(r TrunksAPIUpdateTrunkRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrunksAPIService.UpdateTrunk")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trunks/{trunk_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"trunk_id"+"}", url.PathEscape(parameterValueToString(r.trunkId, "trunkId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
