/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the EndpointIAX type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointIAX{}

// EndpointIAX struct for EndpointIAX
type EndpointIAX struct {
	// IAX Endpoint ID
	Id *int32 `json:"id,omitempty"`
	// IAX name
	Name  *string            `json:"name,omitempty"`
	Trunk *TrunkRelationBase `json:"trunk,omitempty"`
	Line  []LineRelationBase `json:"line,omitempty"`
	// Hosts that are allowed to use this IAX account
	Host *string `json:"host,omitempty"`
	// Advanced configuration: options. Options are appended at the end of a IAX account in the file 'iax.conf' used by asterisk. Please consult the asterisk documentation for further details on available parameters. Because of database limitations, the following options can only be configured once:  * accountcode * adsi * allow * amaflags * auth * callerid * category * cid_number * codecpriority * commented * context * dbsecret * defaultip * deny * encryption * forceencryption * forcejitterbuffer * fullname * immediate * inkeys * jitterbuffer * keyrotate * language * mailbox * mask * maxauthreq * mohinterpret * mohsuggest * outkey * parkinglot * peercontext * permit * port * protocol * qualify * qualifyfreqnoto * qualifyfreqok * qualifysmoothing * regexten * requirecalltoken * secret * sendani * setvar * sourceaddress * timezone * transfer * trunk * username  Any other options may be repeated as many times as needed. Options must have the following form: ``` {   \"options\": [      [\"name1\", \"value1\"],      [\"name2\", \"value2\"]   ] } ```  The resulting configuration in iax.conf will have the following form: ``` [iaxusername] context=default secret=iaxsecret name1=value1 name2=value2 ```
	Options [][]string `json:"options,omitempty"`
	// The UUID of the tenant
	TenantUuid *string `json:"tenant_uuid,omitempty"`
	// Type of IAX account
	Type *string `json:"type,omitempty"`
}

// NewEndpointIAX instantiates a new EndpointIAX object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointIAX() *EndpointIAX {
	this := EndpointIAX{}
	var name string = "autogenerated"
	this.Name = &name
	var host string = "dynamic"
	this.Host = &host
	var type_ string = "friend"
	this.Type = &type_
	return &this
}

// NewEndpointIAXWithDefaults instantiates a new EndpointIAX object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointIAXWithDefaults() *EndpointIAX {
	this := EndpointIAX{}
	var name string = "autogenerated"
	this.Name = &name
	var host string = "dynamic"
	this.Host = &host
	var type_ string = "friend"
	this.Type = &type_
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EndpointIAX) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointIAX) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EndpointIAX) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *EndpointIAX) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EndpointIAX) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointIAX) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EndpointIAX) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EndpointIAX) SetName(v string) {
	o.Name = &v
}

// GetTrunk returns the Trunk field value if set, zero value otherwise.
func (o *EndpointIAX) GetTrunk() TrunkRelationBase {
	if o == nil || IsNil(o.Trunk) {
		var ret TrunkRelationBase
		return ret
	}
	return *o.Trunk
}

// GetTrunkOk returns a tuple with the Trunk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointIAX) GetTrunkOk() (*TrunkRelationBase, bool) {
	if o == nil || IsNil(o.Trunk) {
		return nil, false
	}
	return o.Trunk, true
}

// HasTrunk returns a boolean if a field has been set.
func (o *EndpointIAX) HasTrunk() bool {
	if o != nil && !IsNil(o.Trunk) {
		return true
	}

	return false
}

// SetTrunk gets a reference to the given TrunkRelationBase and assigns it to the Trunk field.
func (o *EndpointIAX) SetTrunk(v TrunkRelationBase) {
	o.Trunk = &v
}

// GetLine returns the Line field value if set, zero value otherwise.
func (o *EndpointIAX) GetLine() []LineRelationBase {
	if o == nil || IsNil(o.Line) {
		var ret []LineRelationBase
		return ret
	}
	return o.Line
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointIAX) GetLineOk() ([]LineRelationBase, bool) {
	if o == nil || IsNil(o.Line) {
		return nil, false
	}
	return o.Line, true
}

// HasLine returns a boolean if a field has been set.
func (o *EndpointIAX) HasLine() bool {
	if o != nil && !IsNil(o.Line) {
		return true
	}

	return false
}

// SetLine gets a reference to the given []LineRelationBase and assigns it to the Line field.
func (o *EndpointIAX) SetLine(v []LineRelationBase) {
	o.Line = v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *EndpointIAX) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointIAX) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *EndpointIAX) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *EndpointIAX) SetHost(v string) {
	o.Host = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *EndpointIAX) GetOptions() [][]string {
	if o == nil || IsNil(o.Options) {
		var ret [][]string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointIAX) GetOptionsOk() ([][]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *EndpointIAX) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given [][]string and assigns it to the Options field.
func (o *EndpointIAX) SetOptions(v [][]string) {
	o.Options = v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *EndpointIAX) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointIAX) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *EndpointIAX) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *EndpointIAX) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EndpointIAX) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointIAX) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EndpointIAX) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EndpointIAX) SetType(v string) {
	o.Type = &v
}

func (o EndpointIAX) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointIAX) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Trunk) {
		toSerialize["trunk"] = o.Trunk
	}
	if !IsNil(o.Line) {
		toSerialize["line"] = o.Line
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableEndpointIAX struct {
	value *EndpointIAX
	isSet bool
}

func (v NullableEndpointIAX) Get() *EndpointIAX {
	return v.value
}

func (v *NullableEndpointIAX) Set(val *EndpointIAX) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointIAX) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointIAX) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointIAX(val *EndpointIAX) *NullableEndpointIAX {
	return &NullableEndpointIAX{value: val, isSet: true}
}

func (v NullableEndpointIAX) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointIAX) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
