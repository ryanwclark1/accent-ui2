/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type OutcallsAPI interface {

	/*
		AssociateOutcallCallpermission Associate outcall and call permission

		**Required ACL:** `confd.outcalls.{outcall_id}.callpermissions.{call_permission_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param outcallId Outgoing call's ID
		@param callpermissionId Call Permission's ID
		@return OutcallsAPIAssociateOutcallCallpermissionRequest
	*/
	AssociateOutcallCallpermission(ctx context.Context, outcallId int32, callpermissionId int32) OutcallsAPIAssociateOutcallCallpermissionRequest

	// AssociateOutcallCallpermissionExecute executes the request
	AssociateOutcallCallpermissionExecute(r OutcallsAPIAssociateOutcallCallpermissionRequest) (*http.Response, error)

	/*
		AssociateOutcallExtension Associate outcall and extension

		**Required ACL:** `confd.outcalls.{outcall_id}.extensions.{extension_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param outcallId Outgoing call's ID
		@param extensionId
		@return OutcallsAPIAssociateOutcallExtensionRequest
	*/
	AssociateOutcallExtension(ctx context.Context, outcallId int32, extensionId int32) OutcallsAPIAssociateOutcallExtensionRequest

	// AssociateOutcallExtensionExecute executes the request
	AssociateOutcallExtensionExecute(r OutcallsAPIAssociateOutcallExtensionRequest) (*http.Response, error)

	/*
		AssociateOutcallSchedule Associate outcall and schedule

		**Required ACL:** `confd.outcalls.{outcall_id}.schedules.{schedule_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param outcallId Outgoing call's ID
		@param scheduleId Schedule's ID
		@return OutcallsAPIAssociateOutcallScheduleRequest
	*/
	AssociateOutcallSchedule(ctx context.Context, outcallId int32, scheduleId int32) OutcallsAPIAssociateOutcallScheduleRequest

	// AssociateOutcallScheduleExecute executes the request
	AssociateOutcallScheduleExecute(r OutcallsAPIAssociateOutcallScheduleRequest) (*http.Response, error)

	/*
		AssociateOutcallTrunks Associate outcall and trunks

		**Required ACL:** `confd.outcalls.{outcall_id}.trunks.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param outcallId Outgoing call's ID
		@return OutcallsAPIAssociateOutcallTrunksRequest
	*/
	AssociateOutcallTrunks(ctx context.Context, outcallId int32) OutcallsAPIAssociateOutcallTrunksRequest

	// AssociateOutcallTrunksExecute executes the request
	AssociateOutcallTrunksExecute(r OutcallsAPIAssociateOutcallTrunksRequest) (*http.Response, error)

	/*
		CreateOutcall Create outgoing call

		**Required ACL:** `confd.outcalls.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return OutcallsAPICreateOutcallRequest
	*/
	CreateOutcall(ctx context.Context) OutcallsAPICreateOutcallRequest

	// CreateOutcallExecute executes the request
	//  @return Outcall
	CreateOutcallExecute(r OutcallsAPICreateOutcallRequest) (*Outcall, *http.Response, error)

	/*
		DeleteOutcall Delete outgoing call

		**Required ACL:** `confd.outcalls.{outcall_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param outcallId Outgoing call's ID
		@return OutcallsAPIDeleteOutcallRequest
	*/
	DeleteOutcall(ctx context.Context, outcallId int32) OutcallsAPIDeleteOutcallRequest

	// DeleteOutcallExecute executes the request
	DeleteOutcallExecute(r OutcallsAPIDeleteOutcallRequest) (*http.Response, error)

	/*
		DissociateOutcallCallpermission Dissociate outcall and call permission

		**Required ACL:** `confd.outcalls.{outcall_id}.callpermissions.{call_permission_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param outcallId Outgoing call's ID
		@param callpermissionId Call Permission's ID
		@return OutcallsAPIDissociateOutcallCallpermissionRequest
	*/
	DissociateOutcallCallpermission(ctx context.Context, outcallId int32, callpermissionId int32) OutcallsAPIDissociateOutcallCallpermissionRequest

	// DissociateOutcallCallpermissionExecute executes the request
	DissociateOutcallCallpermissionExecute(r OutcallsAPIDissociateOutcallCallpermissionRequest) (*http.Response, error)

	/*
		DissociateOutcallExtension Dissociate outcall and extension

		**Required ACL:** `confd.outcalls.{outcall_id}.extensions.{extension_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param outcallId Outgoing call's ID
		@param extensionId
		@return OutcallsAPIDissociateOutcallExtensionRequest
	*/
	DissociateOutcallExtension(ctx context.Context, outcallId int32, extensionId int32) OutcallsAPIDissociateOutcallExtensionRequest

	// DissociateOutcallExtensionExecute executes the request
	DissociateOutcallExtensionExecute(r OutcallsAPIDissociateOutcallExtensionRequest) (*http.Response, error)

	/*
		DissociateOutcallSchedule Dissociate outcall and schedule

		**Required ACL:** `confd.outcalls.{outcall_id}.schedules.{schedule_id}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param outcallId Outgoing call's ID
		@param scheduleId Schedule's ID
		@return OutcallsAPIDissociateOutcallScheduleRequest
	*/
	DissociateOutcallSchedule(ctx context.Context, outcallId int32, scheduleId int32) OutcallsAPIDissociateOutcallScheduleRequest

	// DissociateOutcallScheduleExecute executes the request
	DissociateOutcallScheduleExecute(r OutcallsAPIDissociateOutcallScheduleRequest) (*http.Response, error)

	/*
		GetOutcall Get outgoing call

		**Required ACL:** `confd.outcalls.{outcall_id}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param outcallId Outgoing call's ID
		@return OutcallsAPIGetOutcallRequest
	*/
	GetOutcall(ctx context.Context, outcallId int32) OutcallsAPIGetOutcallRequest

	// GetOutcallExecute executes the request
	//  @return Outcall
	GetOutcallExecute(r OutcallsAPIGetOutcallRequest) (*Outcall, *http.Response, error)

	/*
		ListOutcalls List outgoing calls

		**Required ACL:** `confd.outcalls.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return OutcallsAPIListOutcallsRequest
	*/
	ListOutcalls(ctx context.Context) OutcallsAPIListOutcallsRequest

	// ListOutcallsExecute executes the request
	//  @return OutcallItems
	ListOutcallsExecute(r OutcallsAPIListOutcallsRequest) (*OutcallItems, *http.Response, error)

	/*
		UpdateOutcall Update outgoing call

		**Required ACL:** `confd.outcalls.{outcall_id}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param outcallId Outgoing call's ID
		@return OutcallsAPIUpdateOutcallRequest
	*/
	UpdateOutcall(ctx context.Context, outcallId int32) OutcallsAPIUpdateOutcallRequest

	// UpdateOutcallExecute executes the request
	UpdateOutcallExecute(r OutcallsAPIUpdateOutcallRequest) (*http.Response, error)
}

// OutcallsAPIService OutcallsAPI service
type OutcallsAPIService service

type OutcallsAPIAssociateOutcallCallpermissionRequest struct {
	ctx              context.Context
	ApiService       OutcallsAPI
	outcallId        int32
	callpermissionId int32
	accentTenant     *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r OutcallsAPIAssociateOutcallCallpermissionRequest) AccentTenant(accentTenant string) OutcallsAPIAssociateOutcallCallpermissionRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r OutcallsAPIAssociateOutcallCallpermissionRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateOutcallCallpermissionExecute(r)
}

/*
AssociateOutcallCallpermission Associate outcall and call permission

**Required ACL:** `confd.outcalls.{outcall_id}.callpermissions.{call_permission_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param outcallId Outgoing call's ID
	@param callpermissionId Call Permission's ID
	@return OutcallsAPIAssociateOutcallCallpermissionRequest
*/
func (a *OutcallsAPIService) AssociateOutcallCallpermission(ctx context.Context, outcallId int32, callpermissionId int32) OutcallsAPIAssociateOutcallCallpermissionRequest {
	return OutcallsAPIAssociateOutcallCallpermissionRequest{
		ApiService:       a,
		ctx:              ctx,
		outcallId:        outcallId,
		callpermissionId: callpermissionId,
	}
}

// Execute executes the request
func (a *OutcallsAPIService) AssociateOutcallCallpermissionExecute(r OutcallsAPIAssociateOutcallCallpermissionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutcallsAPIService.AssociateOutcallCallpermission")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls/{outcall_id}/callpermissions/{callpermission_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outcall_id"+"}", url.PathEscape(parameterValueToString(r.outcallId, "outcallId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"callpermission_id"+"}", url.PathEscape(parameterValueToString(r.callpermissionId, "callpermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OutcallsAPIAssociateOutcallExtensionRequest struct {
	ctx         context.Context
	ApiService  OutcallsAPI
	outcallId   int32
	extensionId int32
	body        *OutcallExtension
}

// Outgoing Extension
func (r OutcallsAPIAssociateOutcallExtensionRequest) Body(body OutcallExtension) OutcallsAPIAssociateOutcallExtensionRequest {
	r.body = &body
	return r
}

func (r OutcallsAPIAssociateOutcallExtensionRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateOutcallExtensionExecute(r)
}

/*
AssociateOutcallExtension Associate outcall and extension

**Required ACL:** `confd.outcalls.{outcall_id}.extensions.{extension_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param outcallId Outgoing call's ID
	@param extensionId
	@return OutcallsAPIAssociateOutcallExtensionRequest
*/
func (a *OutcallsAPIService) AssociateOutcallExtension(ctx context.Context, outcallId int32, extensionId int32) OutcallsAPIAssociateOutcallExtensionRequest {
	return OutcallsAPIAssociateOutcallExtensionRequest{
		ApiService:  a,
		ctx:         ctx,
		outcallId:   outcallId,
		extensionId: extensionId,
	}
}

// Execute executes the request
func (a *OutcallsAPIService) AssociateOutcallExtensionExecute(r OutcallsAPIAssociateOutcallExtensionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutcallsAPIService.AssociateOutcallExtension")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls/{outcall_id}/extensions/{extension_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outcall_id"+"}", url.PathEscape(parameterValueToString(r.outcallId, "outcallId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extension_id"+"}", url.PathEscape(parameterValueToString(r.extensionId, "extensionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OutcallsAPIAssociateOutcallScheduleRequest struct {
	ctx          context.Context
	ApiService   OutcallsAPI
	outcallId    int32
	scheduleId   int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r OutcallsAPIAssociateOutcallScheduleRequest) AccentTenant(accentTenant string) OutcallsAPIAssociateOutcallScheduleRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r OutcallsAPIAssociateOutcallScheduleRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateOutcallScheduleExecute(r)
}

/*
AssociateOutcallSchedule Associate outcall and schedule

**Required ACL:** `confd.outcalls.{outcall_id}.schedules.{schedule_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param outcallId Outgoing call's ID
	@param scheduleId Schedule's ID
	@return OutcallsAPIAssociateOutcallScheduleRequest
*/
func (a *OutcallsAPIService) AssociateOutcallSchedule(ctx context.Context, outcallId int32, scheduleId int32) OutcallsAPIAssociateOutcallScheduleRequest {
	return OutcallsAPIAssociateOutcallScheduleRequest{
		ApiService: a,
		ctx:        ctx,
		outcallId:  outcallId,
		scheduleId: scheduleId,
	}
}

// Execute executes the request
func (a *OutcallsAPIService) AssociateOutcallScheduleExecute(r OutcallsAPIAssociateOutcallScheduleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutcallsAPIService.AssociateOutcallSchedule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls/{outcall_id}/schedules/{schedule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outcall_id"+"}", url.PathEscape(parameterValueToString(r.outcallId, "outcallId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"schedule_id"+"}", url.PathEscape(parameterValueToString(r.scheduleId, "scheduleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OutcallsAPIAssociateOutcallTrunksRequest struct {
	ctx        context.Context
	ApiService OutcallsAPI
	body       *TrunksId
	outcallId  int32
}

// Trunks to associated
func (r OutcallsAPIAssociateOutcallTrunksRequest) Body(body TrunksId) OutcallsAPIAssociateOutcallTrunksRequest {
	r.body = &body
	return r
}

func (r OutcallsAPIAssociateOutcallTrunksRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssociateOutcallTrunksExecute(r)
}

/*
AssociateOutcallTrunks Associate outcall and trunks

**Required ACL:** `confd.outcalls.{outcall_id}.trunks.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param outcallId Outgoing call's ID
	@return OutcallsAPIAssociateOutcallTrunksRequest
*/
func (a *OutcallsAPIService) AssociateOutcallTrunks(ctx context.Context, outcallId int32) OutcallsAPIAssociateOutcallTrunksRequest {
	return OutcallsAPIAssociateOutcallTrunksRequest{
		ApiService: a,
		ctx:        ctx,
		outcallId:  outcallId,
	}
}

// Execute executes the request
func (a *OutcallsAPIService) AssociateOutcallTrunksExecute(r OutcallsAPIAssociateOutcallTrunksRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutcallsAPIService.AssociateOutcallTrunks")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls/{outcall_id}/trunks"
	localVarPath = strings.Replace(localVarPath, "{"+"outcall_id"+"}", url.PathEscape(parameterValueToString(r.outcallId, "outcallId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OutcallsAPICreateOutcallRequest struct {
	ctx          context.Context
	ApiService   OutcallsAPI
	body         *Outcall
	accentTenant *string
}

// Outgoing call to create
func (r OutcallsAPICreateOutcallRequest) Body(body Outcall) OutcallsAPICreateOutcallRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r OutcallsAPICreateOutcallRequest) AccentTenant(accentTenant string) OutcallsAPICreateOutcallRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r OutcallsAPICreateOutcallRequest) Execute() (*Outcall, *http.Response, error) {
	return r.ApiService.CreateOutcallExecute(r)
}

/*
CreateOutcall Create outgoing call

**Required ACL:** `confd.outcalls.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return OutcallsAPICreateOutcallRequest
*/
func (a *OutcallsAPIService) CreateOutcall(ctx context.Context) OutcallsAPICreateOutcallRequest {
	return OutcallsAPICreateOutcallRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Outcall
func (a *OutcallsAPIService) CreateOutcallExecute(r OutcallsAPICreateOutcallRequest) (*Outcall, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Outcall
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutcallsAPIService.CreateOutcall")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OutcallsAPIDeleteOutcallRequest struct {
	ctx          context.Context
	ApiService   OutcallsAPI
	outcallId    int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r OutcallsAPIDeleteOutcallRequest) AccentTenant(accentTenant string) OutcallsAPIDeleteOutcallRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r OutcallsAPIDeleteOutcallRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOutcallExecute(r)
}

/*
DeleteOutcall Delete outgoing call

**Required ACL:** `confd.outcalls.{outcall_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param outcallId Outgoing call's ID
	@return OutcallsAPIDeleteOutcallRequest
*/
func (a *OutcallsAPIService) DeleteOutcall(ctx context.Context, outcallId int32) OutcallsAPIDeleteOutcallRequest {
	return OutcallsAPIDeleteOutcallRequest{
		ApiService: a,
		ctx:        ctx,
		outcallId:  outcallId,
	}
}

// Execute executes the request
func (a *OutcallsAPIService) DeleteOutcallExecute(r OutcallsAPIDeleteOutcallRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutcallsAPIService.DeleteOutcall")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls/{outcall_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outcall_id"+"}", url.PathEscape(parameterValueToString(r.outcallId, "outcallId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OutcallsAPIDissociateOutcallCallpermissionRequest struct {
	ctx              context.Context
	ApiService       OutcallsAPI
	outcallId        int32
	callpermissionId int32
	accentTenant     *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r OutcallsAPIDissociateOutcallCallpermissionRequest) AccentTenant(accentTenant string) OutcallsAPIDissociateOutcallCallpermissionRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r OutcallsAPIDissociateOutcallCallpermissionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateOutcallCallpermissionExecute(r)
}

/*
DissociateOutcallCallpermission Dissociate outcall and call permission

**Required ACL:** `confd.outcalls.{outcall_id}.callpermissions.{call_permission_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param outcallId Outgoing call's ID
	@param callpermissionId Call Permission's ID
	@return OutcallsAPIDissociateOutcallCallpermissionRequest
*/
func (a *OutcallsAPIService) DissociateOutcallCallpermission(ctx context.Context, outcallId int32, callpermissionId int32) OutcallsAPIDissociateOutcallCallpermissionRequest {
	return OutcallsAPIDissociateOutcallCallpermissionRequest{
		ApiService:       a,
		ctx:              ctx,
		outcallId:        outcallId,
		callpermissionId: callpermissionId,
	}
}

// Execute executes the request
func (a *OutcallsAPIService) DissociateOutcallCallpermissionExecute(r OutcallsAPIDissociateOutcallCallpermissionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutcallsAPIService.DissociateOutcallCallpermission")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls/{outcall_id}/callpermissions/{callpermission_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outcall_id"+"}", url.PathEscape(parameterValueToString(r.outcallId, "outcallId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"callpermission_id"+"}", url.PathEscape(parameterValueToString(r.callpermissionId, "callpermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OutcallsAPIDissociateOutcallExtensionRequest struct {
	ctx         context.Context
	ApiService  OutcallsAPI
	outcallId   int32
	extensionId int32
}

func (r OutcallsAPIDissociateOutcallExtensionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateOutcallExtensionExecute(r)
}

/*
DissociateOutcallExtension Dissociate outcall and extension

**Required ACL:** `confd.outcalls.{outcall_id}.extensions.{extension_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param outcallId Outgoing call's ID
	@param extensionId
	@return OutcallsAPIDissociateOutcallExtensionRequest
*/
func (a *OutcallsAPIService) DissociateOutcallExtension(ctx context.Context, outcallId int32, extensionId int32) OutcallsAPIDissociateOutcallExtensionRequest {
	return OutcallsAPIDissociateOutcallExtensionRequest{
		ApiService:  a,
		ctx:         ctx,
		outcallId:   outcallId,
		extensionId: extensionId,
	}
}

// Execute executes the request
func (a *OutcallsAPIService) DissociateOutcallExtensionExecute(r OutcallsAPIDissociateOutcallExtensionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutcallsAPIService.DissociateOutcallExtension")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls/{outcall_id}/extensions/{extension_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outcall_id"+"}", url.PathEscape(parameterValueToString(r.outcallId, "outcallId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extension_id"+"}", url.PathEscape(parameterValueToString(r.extensionId, "extensionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OutcallsAPIDissociateOutcallScheduleRequest struct {
	ctx          context.Context
	ApiService   OutcallsAPI
	outcallId    int32
	scheduleId   int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r OutcallsAPIDissociateOutcallScheduleRequest) AccentTenant(accentTenant string) OutcallsAPIDissociateOutcallScheduleRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r OutcallsAPIDissociateOutcallScheduleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DissociateOutcallScheduleExecute(r)
}

/*
DissociateOutcallSchedule Dissociate outcall and schedule

**Required ACL:** `confd.outcalls.{outcall_id}.schedules.{schedule_id}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param outcallId Outgoing call's ID
	@param scheduleId Schedule's ID
	@return OutcallsAPIDissociateOutcallScheduleRequest
*/
func (a *OutcallsAPIService) DissociateOutcallSchedule(ctx context.Context, outcallId int32, scheduleId int32) OutcallsAPIDissociateOutcallScheduleRequest {
	return OutcallsAPIDissociateOutcallScheduleRequest{
		ApiService: a,
		ctx:        ctx,
		outcallId:  outcallId,
		scheduleId: scheduleId,
	}
}

// Execute executes the request
func (a *OutcallsAPIService) DissociateOutcallScheduleExecute(r OutcallsAPIDissociateOutcallScheduleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutcallsAPIService.DissociateOutcallSchedule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls/{outcall_id}/schedules/{schedule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outcall_id"+"}", url.PathEscape(parameterValueToString(r.outcallId, "outcallId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"schedule_id"+"}", url.PathEscape(parameterValueToString(r.scheduleId, "scheduleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OutcallsAPIGetOutcallRequest struct {
	ctx          context.Context
	ApiService   OutcallsAPI
	outcallId    int32
	accentTenant *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r OutcallsAPIGetOutcallRequest) AccentTenant(accentTenant string) OutcallsAPIGetOutcallRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r OutcallsAPIGetOutcallRequest) Execute() (*Outcall, *http.Response, error) {
	return r.ApiService.GetOutcallExecute(r)
}

/*
GetOutcall Get outgoing call

**Required ACL:** `confd.outcalls.{outcall_id}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param outcallId Outgoing call's ID
	@return OutcallsAPIGetOutcallRequest
*/
func (a *OutcallsAPIService) GetOutcall(ctx context.Context, outcallId int32) OutcallsAPIGetOutcallRequest {
	return OutcallsAPIGetOutcallRequest{
		ApiService: a,
		ctx:        ctx,
		outcallId:  outcallId,
	}
}

// Execute executes the request
//
//	@return Outcall
func (a *OutcallsAPIService) GetOutcallExecute(r OutcallsAPIGetOutcallRequest) (*Outcall, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Outcall
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutcallsAPIService.GetOutcall")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls/{outcall_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outcall_id"+"}", url.PathEscape(parameterValueToString(r.outcallId, "outcallId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OutcallsAPIListOutcallsRequest struct {
	ctx          context.Context
	ApiService   OutcallsAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r OutcallsAPIListOutcallsRequest) AccentTenant(accentTenant string) OutcallsAPIListOutcallsRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r OutcallsAPIListOutcallsRequest) Recurse(recurse bool) OutcallsAPIListOutcallsRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r OutcallsAPIListOutcallsRequest) Order(order string) OutcallsAPIListOutcallsRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r OutcallsAPIListOutcallsRequest) Direction(direction string) OutcallsAPIListOutcallsRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r OutcallsAPIListOutcallsRequest) Limit(limit int32) OutcallsAPIListOutcallsRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r OutcallsAPIListOutcallsRequest) Offset(offset int32) OutcallsAPIListOutcallsRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r OutcallsAPIListOutcallsRequest) Search(search string) OutcallsAPIListOutcallsRequest {
	r.search = &search
	return r
}

func (r OutcallsAPIListOutcallsRequest) Execute() (*OutcallItems, *http.Response, error) {
	return r.ApiService.ListOutcallsExecute(r)
}

/*
ListOutcalls List outgoing calls

**Required ACL:** `confd.outcalls.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return OutcallsAPIListOutcallsRequest
*/
func (a *OutcallsAPIService) ListOutcalls(ctx context.Context) OutcallsAPIListOutcallsRequest {
	return OutcallsAPIListOutcallsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return OutcallItems
func (a *OutcallsAPIService) ListOutcallsExecute(r OutcallsAPIListOutcallsRequest) (*OutcallItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OutcallItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutcallsAPIService.ListOutcalls")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OutcallsAPIUpdateOutcallRequest struct {
	ctx          context.Context
	ApiService   OutcallsAPI
	body         *Outcall
	outcallId    int32
	accentTenant *string
}

func (r OutcallsAPIUpdateOutcallRequest) Body(body Outcall) OutcallsAPIUpdateOutcallRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r OutcallsAPIUpdateOutcallRequest) AccentTenant(accentTenant string) OutcallsAPIUpdateOutcallRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r OutcallsAPIUpdateOutcallRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateOutcallExecute(r)
}

/*
UpdateOutcall Update outgoing call

**Required ACL:** `confd.outcalls.{outcall_id}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param outcallId Outgoing call's ID
	@return OutcallsAPIUpdateOutcallRequest
*/
func (a *OutcallsAPIService) UpdateOutcall(ctx context.Context, outcallId int32) OutcallsAPIUpdateOutcallRequest {
	return OutcallsAPIUpdateOutcallRequest{
		ApiService: a,
		ctx:        ctx,
		outcallId:  outcallId,
	}
}

// Execute executes the request
func (a *OutcallsAPIService) UpdateOutcallExecute(r OutcallsAPIUpdateOutcallRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutcallsAPIService.UpdateOutcall")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/outcalls/{outcall_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outcall_id"+"}", url.PathEscape(parameterValueToString(r.outcallId, "outcallId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
