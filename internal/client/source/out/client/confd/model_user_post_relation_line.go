/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserPostRelationLine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPostRelationLine{}

// UserPostRelationLine struct for UserPostRelationLine
type UserPostRelationLine struct {
	// ID of the device associated to the line
	DeviceId *string `json:"device_id,omitempty"`
	// Name to display when calling
	CallerIdName *string `json:"caller_id_name,omitempty"`
	// Number to display when calling
	CallerIdNum *string `json:"caller_id_num,omitempty"`
	// The name of an internal context
	Context string `json:"context"`
	// Line ID
	Id *int32 `json:"id,omitempty"`
	// Line's position on the device
	Position *int32 `json:"position,omitempty"`
	// Code used to provision a device
	ProvisioningCode *string `json:"provisioning_code,omitempty"`
	// Name of the template line used by the device
	Registrar      *string                 `json:"registrar,omitempty"`
	Extensions     []ExtensionRelationBase `json:"extensions,omitempty"`
	EndpointSip    *EndpointSIP            `json:"endpoint_sip,omitempty"`
	EndpointSccp   *EndpointSccp           `json:"endpoint_sccp,omitempty"`
	EndpointCustom *EndpointCustom         `json:"endpoint_custom,omitempty"`
}

type _UserPostRelationLine UserPostRelationLine

// NewUserPostRelationLine instantiates a new UserPostRelationLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPostRelationLine(context string) *UserPostRelationLine {
	this := UserPostRelationLine{}
	this.Context = context
	return &this
}

// NewUserPostRelationLineWithDefaults instantiates a new UserPostRelationLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPostRelationLineWithDefaults() *UserPostRelationLine {
	this := UserPostRelationLine{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *UserPostRelationLine) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationLine) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *UserPostRelationLine) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *UserPostRelationLine) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetCallerIdName returns the CallerIdName field value if set, zero value otherwise.
func (o *UserPostRelationLine) GetCallerIdName() string {
	if o == nil || IsNil(o.CallerIdName) {
		var ret string
		return ret
	}
	return *o.CallerIdName
}

// GetCallerIdNameOk returns a tuple with the CallerIdName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationLine) GetCallerIdNameOk() (*string, bool) {
	if o == nil || IsNil(o.CallerIdName) {
		return nil, false
	}
	return o.CallerIdName, true
}

// HasCallerIdName returns a boolean if a field has been set.
func (o *UserPostRelationLine) HasCallerIdName() bool {
	if o != nil && !IsNil(o.CallerIdName) {
		return true
	}

	return false
}

// SetCallerIdName gets a reference to the given string and assigns it to the CallerIdName field.
func (o *UserPostRelationLine) SetCallerIdName(v string) {
	o.CallerIdName = &v
}

// GetCallerIdNum returns the CallerIdNum field value if set, zero value otherwise.
func (o *UserPostRelationLine) GetCallerIdNum() string {
	if o == nil || IsNil(o.CallerIdNum) {
		var ret string
		return ret
	}
	return *o.CallerIdNum
}

// GetCallerIdNumOk returns a tuple with the CallerIdNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationLine) GetCallerIdNumOk() (*string, bool) {
	if o == nil || IsNil(o.CallerIdNum) {
		return nil, false
	}
	return o.CallerIdNum, true
}

// HasCallerIdNum returns a boolean if a field has been set.
func (o *UserPostRelationLine) HasCallerIdNum() bool {
	if o != nil && !IsNil(o.CallerIdNum) {
		return true
	}

	return false
}

// SetCallerIdNum gets a reference to the given string and assigns it to the CallerIdNum field.
func (o *UserPostRelationLine) SetCallerIdNum(v string) {
	o.CallerIdNum = &v
}

// GetContext returns the Context field value
func (o *UserPostRelationLine) GetContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *UserPostRelationLine) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *UserPostRelationLine) SetContext(v string) {
	o.Context = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserPostRelationLine) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationLine) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserPostRelationLine) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UserPostRelationLine) SetId(v int32) {
	o.Id = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *UserPostRelationLine) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationLine) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *UserPostRelationLine) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *UserPostRelationLine) SetPosition(v int32) {
	o.Position = &v
}

// GetProvisioningCode returns the ProvisioningCode field value if set, zero value otherwise.
func (o *UserPostRelationLine) GetProvisioningCode() string {
	if o == nil || IsNil(o.ProvisioningCode) {
		var ret string
		return ret
	}
	return *o.ProvisioningCode
}

// GetProvisioningCodeOk returns a tuple with the ProvisioningCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationLine) GetProvisioningCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ProvisioningCode) {
		return nil, false
	}
	return o.ProvisioningCode, true
}

// HasProvisioningCode returns a boolean if a field has been set.
func (o *UserPostRelationLine) HasProvisioningCode() bool {
	if o != nil && !IsNil(o.ProvisioningCode) {
		return true
	}

	return false
}

// SetProvisioningCode gets a reference to the given string and assigns it to the ProvisioningCode field.
func (o *UserPostRelationLine) SetProvisioningCode(v string) {
	o.ProvisioningCode = &v
}

// GetRegistrar returns the Registrar field value if set, zero value otherwise.
func (o *UserPostRelationLine) GetRegistrar() string {
	if o == nil || IsNil(o.Registrar) {
		var ret string
		return ret
	}
	return *o.Registrar
}

// GetRegistrarOk returns a tuple with the Registrar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationLine) GetRegistrarOk() (*string, bool) {
	if o == nil || IsNil(o.Registrar) {
		return nil, false
	}
	return o.Registrar, true
}

// HasRegistrar returns a boolean if a field has been set.
func (o *UserPostRelationLine) HasRegistrar() bool {
	if o != nil && !IsNil(o.Registrar) {
		return true
	}

	return false
}

// SetRegistrar gets a reference to the given string and assigns it to the Registrar field.
func (o *UserPostRelationLine) SetRegistrar(v string) {
	o.Registrar = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *UserPostRelationLine) GetExtensions() []ExtensionRelationBase {
	if o == nil || IsNil(o.Extensions) {
		var ret []ExtensionRelationBase
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationLine) GetExtensionsOk() ([]ExtensionRelationBase, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *UserPostRelationLine) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []ExtensionRelationBase and assigns it to the Extensions field.
func (o *UserPostRelationLine) SetExtensions(v []ExtensionRelationBase) {
	o.Extensions = v
}

// GetEndpointSip returns the EndpointSip field value if set, zero value otherwise.
func (o *UserPostRelationLine) GetEndpointSip() EndpointSIP {
	if o == nil || IsNil(o.EndpointSip) {
		var ret EndpointSIP
		return ret
	}
	return *o.EndpointSip
}

// GetEndpointSipOk returns a tuple with the EndpointSip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationLine) GetEndpointSipOk() (*EndpointSIP, bool) {
	if o == nil || IsNil(o.EndpointSip) {
		return nil, false
	}
	return o.EndpointSip, true
}

// HasEndpointSip returns a boolean if a field has been set.
func (o *UserPostRelationLine) HasEndpointSip() bool {
	if o != nil && !IsNil(o.EndpointSip) {
		return true
	}

	return false
}

// SetEndpointSip gets a reference to the given EndpointSIP and assigns it to the EndpointSip field.
func (o *UserPostRelationLine) SetEndpointSip(v EndpointSIP) {
	o.EndpointSip = &v
}

// GetEndpointSccp returns the EndpointSccp field value if set, zero value otherwise.
func (o *UserPostRelationLine) GetEndpointSccp() EndpointSccp {
	if o == nil || IsNil(o.EndpointSccp) {
		var ret EndpointSccp
		return ret
	}
	return *o.EndpointSccp
}

// GetEndpointSccpOk returns a tuple with the EndpointSccp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationLine) GetEndpointSccpOk() (*EndpointSccp, bool) {
	if o == nil || IsNil(o.EndpointSccp) {
		return nil, false
	}
	return o.EndpointSccp, true
}

// HasEndpointSccp returns a boolean if a field has been set.
func (o *UserPostRelationLine) HasEndpointSccp() bool {
	if o != nil && !IsNil(o.EndpointSccp) {
		return true
	}

	return false
}

// SetEndpointSccp gets a reference to the given EndpointSccp and assigns it to the EndpointSccp field.
func (o *UserPostRelationLine) SetEndpointSccp(v EndpointSccp) {
	o.EndpointSccp = &v
}

// GetEndpointCustom returns the EndpointCustom field value if set, zero value otherwise.
func (o *UserPostRelationLine) GetEndpointCustom() EndpointCustom {
	if o == nil || IsNil(o.EndpointCustom) {
		var ret EndpointCustom
		return ret
	}
	return *o.EndpointCustom
}

// GetEndpointCustomOk returns a tuple with the EndpointCustom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRelationLine) GetEndpointCustomOk() (*EndpointCustom, bool) {
	if o == nil || IsNil(o.EndpointCustom) {
		return nil, false
	}
	return o.EndpointCustom, true
}

// HasEndpointCustom returns a boolean if a field has been set.
func (o *UserPostRelationLine) HasEndpointCustom() bool {
	if o != nil && !IsNil(o.EndpointCustom) {
		return true
	}

	return false
}

// SetEndpointCustom gets a reference to the given EndpointCustom and assigns it to the EndpointCustom field.
func (o *UserPostRelationLine) SetEndpointCustom(v EndpointCustom) {
	o.EndpointCustom = &v
}

func (o UserPostRelationLine) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPostRelationLine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceId) {
		toSerialize["device_id"] = o.DeviceId
	}
	if !IsNil(o.CallerIdName) {
		toSerialize["caller_id_name"] = o.CallerIdName
	}
	if !IsNil(o.CallerIdNum) {
		toSerialize["caller_id_num"] = o.CallerIdNum
	}
	toSerialize["context"] = o.Context
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.ProvisioningCode) {
		toSerialize["provisioning_code"] = o.ProvisioningCode
	}
	if !IsNil(o.Registrar) {
		toSerialize["registrar"] = o.Registrar
	}
	if !IsNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	if !IsNil(o.EndpointSip) {
		toSerialize["endpoint_sip"] = o.EndpointSip
	}
	if !IsNil(o.EndpointSccp) {
		toSerialize["endpoint_sccp"] = o.EndpointSccp
	}
	if !IsNil(o.EndpointCustom) {
		toSerialize["endpoint_custom"] = o.EndpointCustom
	}
	return toSerialize, nil
}

func (o *UserPostRelationLine) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserPostRelationLine := _UserPostRelationLine{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserPostRelationLine)

	if err != nil {
		return err
	}

	*o = UserPostRelationLine(varUserPostRelationLine)

	return err
}

type NullableUserPostRelationLine struct {
	value *UserPostRelationLine
	isSet bool
}

func (v NullableUserPostRelationLine) Get() *UserPostRelationLine {
	return v.value
}

func (v *NullableUserPostRelationLine) Set(val *UserPostRelationLine) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPostRelationLine) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPostRelationLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPostRelationLine(val *UserPostRelationLine) *NullableUserPostRelationLine {
	return &NullableUserPostRelationLine{value: val, isSet: true}
}

func (v NullableUserPostRelationLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPostRelationLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
