/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Voicemail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Voicemail{}

// Voicemail struct for Voicemail
type Voicemail struct {
	// Ask for password when accessing the voicemail menu
	AskPassword *bool `json:"ask_password,omitempty"`
	// Attach an audio file of the recorded message when sending an email
	AttachAudio *bool `json:"attach_audio,omitempty"`
	// Voicemail context
	Context string `json:"context"`
	// Delete messages after reception.  This can only be set along with 'email' and 'attach_audio' configured.
	DeleteMessages *bool `json:"delete_messages,omitempty"`
	// Email address. Notifications and audio attachments will be sent to this address
	Email *string `json:"email,omitempty"`
	// Voicemail can be used when it is enabled
	Enabled *bool `json:"enabled,omitempty"`
	// Language used for the voicemail menu prompt
	Language *string `json:"language,omitempty"`
	// Maximum number of messages to store
	MaxMessages *int32 `json:"max_messages,omitempty"`
	// Mailbox number, for example `0001`
	Number string `json:"number"`
	// Advanced configuration options. Options are appended at the end of a  voicemail line in the file 'voicemail.conf' used by asterisk. Please consult the asterisk documentation for further details on available parameters. Options must have the following the form:  ``` {   \"options\": [     [\"name1\", \"value1\"],     [\"name2\", \"value2\"]   ] } ```  The resulting configuration in voicemail.conf will have the following form:  ``` 1000 => ,Firstname Lastname,,,name1=value1|name2=value2 ```
	Options [][]string `json:"options,omitempty"`
	// Email address. Summarized notifications will be sent to this address
	Pager *string `json:"pager,omitempty"`
	// Numeric password used to access the voicemail
	Password *string `json:"password,omitempty"`
	// The UUID of the tenant
	TenantUuid *string `json:"tenant_uuid,omitempty"`
	// Timezone used for announcing at what time a message was recorded
	Timezone *string `json:"timezone,omitempty"`
	// Voicemail ID
	Id *int32 `json:"id,omitempty"`
	// Voicemail name
	Name  *string            `json:"name,omitempty"`
	Users []UserRelationBase `json:"users,omitempty"`
}

type _Voicemail Voicemail

// NewVoicemail instantiates a new Voicemail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVoicemail(context string, number string) *Voicemail {
	this := Voicemail{}
	var askPassword bool = true
	this.AskPassword = &askPassword
	this.Context = context
	var deleteMessages bool = false
	this.DeleteMessages = &deleteMessages
	var enabled bool = true
	this.Enabled = &enabled
	this.Number = number
	var timezone string = "The system default timezone"
	this.Timezone = &timezone
	return &this
}

// NewVoicemailWithDefaults instantiates a new Voicemail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoicemailWithDefaults() *Voicemail {
	this := Voicemail{}
	var askPassword bool = true
	this.AskPassword = &askPassword
	var deleteMessages bool = false
	this.DeleteMessages = &deleteMessages
	var enabled bool = true
	this.Enabled = &enabled
	var timezone string = "The system default timezone"
	this.Timezone = &timezone
	return &this
}

// GetAskPassword returns the AskPassword field value if set, zero value otherwise.
func (o *Voicemail) GetAskPassword() bool {
	if o == nil || IsNil(o.AskPassword) {
		var ret bool
		return ret
	}
	return *o.AskPassword
}

// GetAskPasswordOk returns a tuple with the AskPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetAskPasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.AskPassword) {
		return nil, false
	}
	return o.AskPassword, true
}

// HasAskPassword returns a boolean if a field has been set.
func (o *Voicemail) HasAskPassword() bool {
	if o != nil && !IsNil(o.AskPassword) {
		return true
	}

	return false
}

// SetAskPassword gets a reference to the given bool and assigns it to the AskPassword field.
func (o *Voicemail) SetAskPassword(v bool) {
	o.AskPassword = &v
}

// GetAttachAudio returns the AttachAudio field value if set, zero value otherwise.
func (o *Voicemail) GetAttachAudio() bool {
	if o == nil || IsNil(o.AttachAudio) {
		var ret bool
		return ret
	}
	return *o.AttachAudio
}

// GetAttachAudioOk returns a tuple with the AttachAudio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetAttachAudioOk() (*bool, bool) {
	if o == nil || IsNil(o.AttachAudio) {
		return nil, false
	}
	return o.AttachAudio, true
}

// HasAttachAudio returns a boolean if a field has been set.
func (o *Voicemail) HasAttachAudio() bool {
	if o != nil && !IsNil(o.AttachAudio) {
		return true
	}

	return false
}

// SetAttachAudio gets a reference to the given bool and assigns it to the AttachAudio field.
func (o *Voicemail) SetAttachAudio(v bool) {
	o.AttachAudio = &v
}

// GetContext returns the Context field value
func (o *Voicemail) GetContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *Voicemail) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *Voicemail) SetContext(v string) {
	o.Context = v
}

// GetDeleteMessages returns the DeleteMessages field value if set, zero value otherwise.
func (o *Voicemail) GetDeleteMessages() bool {
	if o == nil || IsNil(o.DeleteMessages) {
		var ret bool
		return ret
	}
	return *o.DeleteMessages
}

// GetDeleteMessagesOk returns a tuple with the DeleteMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetDeleteMessagesOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteMessages) {
		return nil, false
	}
	return o.DeleteMessages, true
}

// HasDeleteMessages returns a boolean if a field has been set.
func (o *Voicemail) HasDeleteMessages() bool {
	if o != nil && !IsNil(o.DeleteMessages) {
		return true
	}

	return false
}

// SetDeleteMessages gets a reference to the given bool and assigns it to the DeleteMessages field.
func (o *Voicemail) SetDeleteMessages(v bool) {
	o.DeleteMessages = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Voicemail) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Voicemail) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Voicemail) SetEmail(v string) {
	o.Email = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Voicemail) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Voicemail) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Voicemail) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Voicemail) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Voicemail) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Voicemail) SetLanguage(v string) {
	o.Language = &v
}

// GetMaxMessages returns the MaxMessages field value if set, zero value otherwise.
func (o *Voicemail) GetMaxMessages() int32 {
	if o == nil || IsNil(o.MaxMessages) {
		var ret int32
		return ret
	}
	return *o.MaxMessages
}

// GetMaxMessagesOk returns a tuple with the MaxMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetMaxMessagesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMessages) {
		return nil, false
	}
	return o.MaxMessages, true
}

// HasMaxMessages returns a boolean if a field has been set.
func (o *Voicemail) HasMaxMessages() bool {
	if o != nil && !IsNil(o.MaxMessages) {
		return true
	}

	return false
}

// SetMaxMessages gets a reference to the given int32 and assigns it to the MaxMessages field.
func (o *Voicemail) SetMaxMessages(v int32) {
	o.MaxMessages = &v
}

// GetNumber returns the Number field value
func (o *Voicemail) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *Voicemail) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Voicemail) SetNumber(v string) {
	o.Number = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Voicemail) GetOptions() [][]string {
	if o == nil || IsNil(o.Options) {
		var ret [][]string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetOptionsOk() ([][]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Voicemail) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given [][]string and assigns it to the Options field.
func (o *Voicemail) SetOptions(v [][]string) {
	o.Options = v
}

// GetPager returns the Pager field value if set, zero value otherwise.
func (o *Voicemail) GetPager() string {
	if o == nil || IsNil(o.Pager) {
		var ret string
		return ret
	}
	return *o.Pager
}

// GetPagerOk returns a tuple with the Pager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetPagerOk() (*string, bool) {
	if o == nil || IsNil(o.Pager) {
		return nil, false
	}
	return o.Pager, true
}

// HasPager returns a boolean if a field has been set.
func (o *Voicemail) HasPager() bool {
	if o != nil && !IsNil(o.Pager) {
		return true
	}

	return false
}

// SetPager gets a reference to the given string and assigns it to the Pager field.
func (o *Voicemail) SetPager(v string) {
	o.Pager = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *Voicemail) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *Voicemail) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *Voicemail) SetPassword(v string) {
	o.Password = &v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *Voicemail) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *Voicemail) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *Voicemail) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *Voicemail) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *Voicemail) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *Voicemail) SetTimezone(v string) {
	o.Timezone = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Voicemail) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Voicemail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Voicemail) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Voicemail) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Voicemail) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Voicemail) SetName(v string) {
	o.Name = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *Voicemail) GetUsers() []UserRelationBase {
	if o == nil || IsNil(o.Users) {
		var ret []UserRelationBase
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Voicemail) GetUsersOk() ([]UserRelationBase, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *Voicemail) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []UserRelationBase and assigns it to the Users field.
func (o *Voicemail) SetUsers(v []UserRelationBase) {
	o.Users = v
}

func (o Voicemail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Voicemail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AskPassword) {
		toSerialize["ask_password"] = o.AskPassword
	}
	if !IsNil(o.AttachAudio) {
		toSerialize["attach_audio"] = o.AttachAudio
	}
	toSerialize["context"] = o.Context
	if !IsNil(o.DeleteMessages) {
		toSerialize["delete_messages"] = o.DeleteMessages
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.MaxMessages) {
		toSerialize["max_messages"] = o.MaxMessages
	}
	toSerialize["number"] = o.Number
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Pager) {
		toSerialize["pager"] = o.Pager
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

func (o *Voicemail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"context",
		"number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVoicemail := _Voicemail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVoicemail)

	if err != nil {
		return err
	}

	*o = Voicemail(varVoicemail)

	return err
}

type NullableVoicemail struct {
	value *Voicemail
	isSet bool
}

func (v NullableVoicemail) Get() *Voicemail {
	return v.value
}

func (v *NullableVoicemail) Set(val *Voicemail) {
	v.value = val
	v.isSet = true
}

func (v NullableVoicemail) IsSet() bool {
	return v.isSet
}

func (v *NullableVoicemail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoicemail(val *Voicemail) *NullableVoicemail {
	return &NullableVoicemail{value: val, isSet: true}
}

func (v NullableVoicemail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoicemail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
