/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the UserImportErrorErrorsInnerDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserImportErrorErrorsInnerDetails{}

// UserImportErrorErrorsInnerDetails struct for UserImportErrorErrorsInnerDetails
type UserImportErrorErrorsInnerDetails struct {
	// Original data that caused the error
	Row map[string]interface{} `json:"row,omitempty"`
	// Line number corresponding to the CSV data
	RowNumber *int32 `json:"row_number,omitempty"`
}

// NewUserImportErrorErrorsInnerDetails instantiates a new UserImportErrorErrorsInnerDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserImportErrorErrorsInnerDetails() *UserImportErrorErrorsInnerDetails {
	this := UserImportErrorErrorsInnerDetails{}
	return &this
}

// NewUserImportErrorErrorsInnerDetailsWithDefaults instantiates a new UserImportErrorErrorsInnerDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserImportErrorErrorsInnerDetailsWithDefaults() *UserImportErrorErrorsInnerDetails {
	this := UserImportErrorErrorsInnerDetails{}
	return &this
}

// GetRow returns the Row field value if set, zero value otherwise.
func (o *UserImportErrorErrorsInnerDetails) GetRow() map[string]interface{} {
	if o == nil || IsNil(o.Row) {
		var ret map[string]interface{}
		return ret
	}
	return o.Row
}

// GetRowOk returns a tuple with the Row field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserImportErrorErrorsInnerDetails) GetRowOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Row) {
		return map[string]interface{}{}, false
	}
	return o.Row, true
}

// HasRow returns a boolean if a field has been set.
func (o *UserImportErrorErrorsInnerDetails) HasRow() bool {
	if o != nil && !IsNil(o.Row) {
		return true
	}

	return false
}

// SetRow gets a reference to the given map[string]interface{} and assigns it to the Row field.
func (o *UserImportErrorErrorsInnerDetails) SetRow(v map[string]interface{}) {
	o.Row = v
}

// GetRowNumber returns the RowNumber field value if set, zero value otherwise.
func (o *UserImportErrorErrorsInnerDetails) GetRowNumber() int32 {
	if o == nil || IsNil(o.RowNumber) {
		var ret int32
		return ret
	}
	return *o.RowNumber
}

// GetRowNumberOk returns a tuple with the RowNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserImportErrorErrorsInnerDetails) GetRowNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.RowNumber) {
		return nil, false
	}
	return o.RowNumber, true
}

// HasRowNumber returns a boolean if a field has been set.
func (o *UserImportErrorErrorsInnerDetails) HasRowNumber() bool {
	if o != nil && !IsNil(o.RowNumber) {
		return true
	}

	return false
}

// SetRowNumber gets a reference to the given int32 and assigns it to the RowNumber field.
func (o *UserImportErrorErrorsInnerDetails) SetRowNumber(v int32) {
	o.RowNumber = &v
}

func (o UserImportErrorErrorsInnerDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserImportErrorErrorsInnerDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Row) {
		toSerialize["row"] = o.Row
	}
	if !IsNil(o.RowNumber) {
		toSerialize["row_number"] = o.RowNumber
	}
	return toSerialize, nil
}

type NullableUserImportErrorErrorsInnerDetails struct {
	value *UserImportErrorErrorsInnerDetails
	isSet bool
}

func (v NullableUserImportErrorErrorsInnerDetails) Get() *UserImportErrorErrorsInnerDetails {
	return v.value
}

func (v *NullableUserImportErrorErrorsInnerDetails) Set(val *UserImportErrorErrorsInnerDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUserImportErrorErrorsInnerDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUserImportErrorErrorsInnerDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserImportErrorErrorsInnerDetails(val *UserImportErrorErrorsInnerDetails) *NullableUserImportErrorErrorsInnerDetails {
	return &NullableUserImportErrorErrorsInnerDetails{value: val, isSet: true}
}

func (v NullableUserImportErrorErrorsInnerDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserImportErrorErrorsInnerDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
