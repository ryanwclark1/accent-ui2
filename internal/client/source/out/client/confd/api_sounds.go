/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type SoundsAPI interface {

	/*
		CreateSounds Create sound category

		**Required ACL:** `confd.sounds.create`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateSoundsRequest
	*/
	CreateSounds(ctx context.Context) ApiCreateSoundsRequest

	// CreateSoundsExecute executes the request
	//  @return Sound
	CreateSoundsExecute(r ApiCreateSoundsRequest) (*Sound, *http.Response, error)

	/*
		DeleteSounds Delete sound category

		**Required ACL:** `confd.sounds.{sound_category}.delete`

	Delete the sound category and associated audio files.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param soundCategory
		@return ApiDeleteSoundsRequest
	*/
	DeleteSounds(ctx context.Context, soundCategory string) ApiDeleteSoundsRequest

	// DeleteSoundsExecute executes the request
	DeleteSoundsExecute(r ApiDeleteSoundsRequest) (*http.Response, error)

	/*
		DeleteSoundsFiles Delete audio file

		**Required ACL:** `confd.sounds.{sound_category}.files.{sound_filename}.delete`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param soundCategory
		@param soundFilename
		@return ApiDeleteSoundsFilesRequest
	*/
	DeleteSoundsFiles(ctx context.Context, soundCategory string, soundFilename string) ApiDeleteSoundsFilesRequest

	// DeleteSoundsFilesExecute executes the request
	DeleteSoundsFilesExecute(r ApiDeleteSoundsFilesRequest) (*http.Response, error)

	/*
		GetSounds Get sound category

		**Required ACL:** `confd.sounds.{sound_category}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param soundCategory
		@return ApiGetSoundsRequest
	*/
	GetSounds(ctx context.Context, soundCategory string) ApiGetSoundsRequest

	// GetSoundsExecute executes the request
	//  @return Sound
	GetSoundsExecute(r ApiGetSoundsRequest) (*Sound, *http.Response, error)

	/*
		GetSoundsFiles Get audio file

		**Required ACL:** `confd.sounds.{sound_category}.files.{sound_filename}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param soundCategory
		@param soundFilename
		@return ApiGetSoundsFilesRequest
	*/
	GetSoundsFiles(ctx context.Context, soundCategory string, soundFilename string) ApiGetSoundsFilesRequest

	// GetSoundsFilesExecute executes the request
	GetSoundsFilesExecute(r ApiGetSoundsFilesRequest) (*http.Response, error)

	/*
		ListSounds List sound categories

		**Required ACL:** `confd.sounds.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListSoundsRequest
	*/
	ListSounds(ctx context.Context) ApiListSoundsRequest

	// ListSoundsExecute executes the request
	//  @return SoundItems
	ListSoundsExecute(r ApiListSoundsRequest) (*SoundItems, *http.Response, error)

	/*
		ListSoundsLanguages List all languages for sounds

		**Required ACL:** `confd.sounds.languages.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListSoundsLanguagesRequest
	*/
	ListSoundsLanguages(ctx context.Context) ApiListSoundsLanguagesRequest

	// ListSoundsLanguagesExecute executes the request
	//  @return SoundLanguageItems
	ListSoundsLanguagesExecute(r ApiListSoundsLanguagesRequest) (*SoundLanguageItems, *http.Response, error)

	/*
		UpdateSoundsFiles Add or update audio file

		**Required ACL:** `confd.sounds.{sound_category}.files.{sound_filename}.update`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param soundCategory
		@param soundFilename
		@return ApiUpdateSoundsFilesRequest
	*/
	UpdateSoundsFiles(ctx context.Context, soundCategory string, soundFilename string) ApiUpdateSoundsFilesRequest

	// UpdateSoundsFilesExecute executes the request
	UpdateSoundsFilesExecute(r ApiUpdateSoundsFilesRequest) (*http.Response, error)
}

// SoundsAPIService SoundsAPI service
type SoundsAPIService service

type ApiCreateSoundsRequest struct {
	ctx          context.Context
	ApiService   SoundsAPI
	body         *Sound
	accentTenant *string
}

// Sound category to create
func (r ApiCreateSoundsRequest) Body(body Sound) ApiCreateSoundsRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiCreateSoundsRequest) AccentTenant(accentTenant string) ApiCreateSoundsRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiCreateSoundsRequest) Execute() (*Sound, *http.Response, error) {
	return r.ApiService.CreateSoundsExecute(r)
}

/*
CreateSounds Create sound category

**Required ACL:** `confd.sounds.create`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateSoundsRequest
*/
func (a *SoundsAPIService) CreateSounds(ctx context.Context) ApiCreateSoundsRequest {
	return ApiCreateSoundsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Sound
func (a *SoundsAPIService) CreateSoundsExecute(r ApiCreateSoundsRequest) (*Sound, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Sound
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SoundsAPIService.CreateSounds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sounds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteSoundsRequest struct {
	ctx           context.Context
	ApiService    SoundsAPI
	soundCategory string
	accentTenant  *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiDeleteSoundsRequest) AccentTenant(accentTenant string) ApiDeleteSoundsRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiDeleteSoundsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSoundsExecute(r)
}

/*
DeleteSounds Delete sound category

**Required ACL:** `confd.sounds.{sound_category}.delete`

Delete the sound category and associated audio files.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param soundCategory
	@return ApiDeleteSoundsRequest
*/
func (a *SoundsAPIService) DeleteSounds(ctx context.Context, soundCategory string) ApiDeleteSoundsRequest {
	return ApiDeleteSoundsRequest{
		ApiService:    a,
		ctx:           ctx,
		soundCategory: soundCategory,
	}
}

// Execute executes the request
func (a *SoundsAPIService) DeleteSoundsExecute(r ApiDeleteSoundsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SoundsAPIService.DeleteSounds")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sounds/{sound_category}"
	localVarPath = strings.Replace(localVarPath, "{"+"sound_category"+"}", url.PathEscape(parameterValueToString(r.soundCategory, "soundCategory")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteSoundsFilesRequest struct {
	ctx           context.Context
	ApiService    SoundsAPI
	soundCategory string
	soundFilename string
	accentTenant  *string
	language      *string
	format        *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiDeleteSoundsFilesRequest) AccentTenant(accentTenant string) ApiDeleteSoundsFilesRequest {
	r.accentTenant = &accentTenant
	return r
}

// Language of the sound
func (r ApiDeleteSoundsFilesRequest) Language(language string) ApiDeleteSoundsFilesRequest {
	r.language = &language
	return r
}

// Format of the sound
func (r ApiDeleteSoundsFilesRequest) Format(format string) ApiDeleteSoundsFilesRequest {
	r.format = &format
	return r
}

func (r ApiDeleteSoundsFilesRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSoundsFilesExecute(r)
}

/*
DeleteSoundsFiles Delete audio file

**Required ACL:** `confd.sounds.{sound_category}.files.{sound_filename}.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param soundCategory
	@param soundFilename
	@return ApiDeleteSoundsFilesRequest
*/
func (a *SoundsAPIService) DeleteSoundsFiles(ctx context.Context, soundCategory string, soundFilename string) ApiDeleteSoundsFilesRequest {
	return ApiDeleteSoundsFilesRequest{
		ApiService:    a,
		ctx:           ctx,
		soundCategory: soundCategory,
		soundFilename: soundFilename,
	}
}

// Execute executes the request
func (a *SoundsAPIService) DeleteSoundsFilesExecute(r ApiDeleteSoundsFilesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SoundsAPIService.DeleteSoundsFiles")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sounds/{sound_category}/files/{sound_filename}"
	localVarPath = strings.Replace(localVarPath, "{"+"sound_category"+"}", url.PathEscape(parameterValueToString(r.soundCategory, "soundCategory")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sound_filename"+"}", url.PathEscape(parameterValueToString(r.soundFilename, "soundFilename")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSoundsRequest struct {
	ctx           context.Context
	ApiService    SoundsAPI
	soundCategory string
	accentTenant  *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiGetSoundsRequest) AccentTenant(accentTenant string) ApiGetSoundsRequest {
	r.accentTenant = &accentTenant
	return r
}

func (r ApiGetSoundsRequest) Execute() (*Sound, *http.Response, error) {
	return r.ApiService.GetSoundsExecute(r)
}

/*
GetSounds Get sound category

**Required ACL:** `confd.sounds.{sound_category}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param soundCategory
	@return ApiGetSoundsRequest
*/
func (a *SoundsAPIService) GetSounds(ctx context.Context, soundCategory string) ApiGetSoundsRequest {
	return ApiGetSoundsRequest{
		ApiService:    a,
		ctx:           ctx,
		soundCategory: soundCategory,
	}
}

// Execute executes the request
//
//	@return Sound
func (a *SoundsAPIService) GetSoundsExecute(r ApiGetSoundsRequest) (*Sound, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Sound
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SoundsAPIService.GetSounds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sounds/{sound_category}"
	localVarPath = strings.Replace(localVarPath, "{"+"sound_category"+"}", url.PathEscape(parameterValueToString(r.soundCategory, "soundCategory")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSoundsFilesRequest struct {
	ctx           context.Context
	ApiService    SoundsAPI
	soundCategory string
	soundFilename string
	accentTenant  *string
	language      *string
	format        *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiGetSoundsFilesRequest) AccentTenant(accentTenant string) ApiGetSoundsFilesRequest {
	r.accentTenant = &accentTenant
	return r
}

// Language of the sound
func (r ApiGetSoundsFilesRequest) Language(language string) ApiGetSoundsFilesRequest {
	r.language = &language
	return r
}

// Format of the sound
func (r ApiGetSoundsFilesRequest) Format(format string) ApiGetSoundsFilesRequest {
	r.format = &format
	return r
}

func (r ApiGetSoundsFilesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetSoundsFilesExecute(r)
}

/*
GetSoundsFiles Get audio file

**Required ACL:** `confd.sounds.{sound_category}.files.{sound_filename}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param soundCategory
	@param soundFilename
	@return ApiGetSoundsFilesRequest
*/
func (a *SoundsAPIService) GetSoundsFiles(ctx context.Context, soundCategory string, soundFilename string) ApiGetSoundsFilesRequest {
	return ApiGetSoundsFilesRequest{
		ApiService:    a,
		ctx:           ctx,
		soundCategory: soundCategory,
		soundFilename: soundFilename,
	}
}

// Execute executes the request
func (a *SoundsAPIService) GetSoundsFilesExecute(r ApiGetSoundsFilesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SoundsAPIService.GetSoundsFiles")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sounds/{sound_category}/files/{sound_filename}"
	localVarPath = strings.Replace(localVarPath, "{"+"sound_category"+"}", url.PathEscape(parameterValueToString(r.soundCategory, "soundCategory")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sound_filename"+"}", url.PathEscape(parameterValueToString(r.soundFilename, "soundFilename")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListSoundsRequest struct {
	ctx          context.Context
	ApiService   SoundsAPI
	accentTenant *string
	recurse      *bool
	order        *string
	direction    *string
	limit        *int32
	offset       *int32
	search       *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiListSoundsRequest) AccentTenant(accentTenant string) ApiListSoundsRequest {
	r.accentTenant = &accentTenant
	return r
}

// Should the query include sub-tenants
func (r ApiListSoundsRequest) Recurse(recurse bool) ApiListSoundsRequest {
	r.recurse = &recurse
	return r
}

// Name of the field to use for sorting the list of items returned.
func (r ApiListSoundsRequest) Order(order string) ApiListSoundsRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r ApiListSoundsRequest) Direction(direction string) ApiListSoundsRequest {
	r.direction = &direction
	return r
}

// Maximum number of items to return in the list
func (r ApiListSoundsRequest) Limit(limit int32) ApiListSoundsRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r ApiListSoundsRequest) Offset(offset int32) ApiListSoundsRequest {
	r.offset = &offset
	return r
}

// Search term for filtering a list of items. Only items with a field containing the search term will be returned.
func (r ApiListSoundsRequest) Search(search string) ApiListSoundsRequest {
	r.search = &search
	return r
}

func (r ApiListSoundsRequest) Execute() (*SoundItems, *http.Response, error) {
	return r.ApiService.ListSoundsExecute(r)
}

/*
ListSounds List sound categories

**Required ACL:** `confd.sounds.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListSoundsRequest
*/
func (a *SoundsAPIService) ListSounds(ctx context.Context) ApiListSoundsRequest {
	return ApiListSoundsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SoundItems
func (a *SoundsAPIService) ListSoundsExecute(r ApiListSoundsRequest) (*SoundItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SoundItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SoundsAPIService.ListSounds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sounds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSoundsLanguagesRequest struct {
	ctx        context.Context
	ApiService SoundsAPI
}

func (r ApiListSoundsLanguagesRequest) Execute() (*SoundLanguageItems, *http.Response, error) {
	return r.ApiService.ListSoundsLanguagesExecute(r)
}

/*
ListSoundsLanguages List all languages for sounds

**Required ACL:** `confd.sounds.languages.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListSoundsLanguagesRequest
*/
func (a *SoundsAPIService) ListSoundsLanguages(ctx context.Context) ApiListSoundsLanguagesRequest {
	return ApiListSoundsLanguagesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SoundLanguageItems
func (a *SoundsAPIService) ListSoundsLanguagesExecute(r ApiListSoundsLanguagesRequest) (*SoundLanguageItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SoundLanguageItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SoundsAPIService.ListSoundsLanguages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sounds/languages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSoundsFilesRequest struct {
	ctx           context.Context
	ApiService    SoundsAPI
	body          *map[string]interface{}
	soundCategory string
	soundFilename string
	accentTenant  *string
	language      *string
	format        *string
}

func (r ApiUpdateSoundsFilesRequest) Body(body map[string]interface{}) ApiUpdateSoundsFilesRequest {
	r.body = &body
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiUpdateSoundsFilesRequest) AccentTenant(accentTenant string) ApiUpdateSoundsFilesRequest {
	r.accentTenant = &accentTenant
	return r
}

// Language of the sound
func (r ApiUpdateSoundsFilesRequest) Language(language string) ApiUpdateSoundsFilesRequest {
	r.language = &language
	return r
}

// Format of the sound
func (r ApiUpdateSoundsFilesRequest) Format(format string) ApiUpdateSoundsFilesRequest {
	r.format = &format
	return r
}

func (r ApiUpdateSoundsFilesRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateSoundsFilesExecute(r)
}

/*
UpdateSoundsFiles Add or update audio file

**Required ACL:** `confd.sounds.{sound_category}.files.{sound_filename}.update`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param soundCategory
	@param soundFilename
	@return ApiUpdateSoundsFilesRequest
*/
func (a *SoundsAPIService) UpdateSoundsFiles(ctx context.Context, soundCategory string, soundFilename string) ApiUpdateSoundsFilesRequest {
	return ApiUpdateSoundsFilesRequest{
		ApiService:    a,
		ctx:           ctx,
		soundCategory: soundCategory,
		soundFilename: soundFilename,
	}
}

// Execute executes the request
func (a *SoundsAPIService) UpdateSoundsFilesExecute(r ApiUpdateSoundsFilesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SoundsAPIService.UpdateSoundsFiles")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sounds/{sound_category}/files/{sound_filename}"
	localVarPath = strings.Replace(localVarPath, "{"+"sound_category"+"}", url.PathEscape(parameterValueToString(r.soundCategory, "soundCategory")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sound_filename"+"}", url.PathEscape(parameterValueToString(r.soundFilename, "soundFilename")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
