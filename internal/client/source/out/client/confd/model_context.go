/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the Context type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Context{}

// Context struct for Context
type Context struct {
	// The id of the context
	Id *int32 `json:"id,omitempty"`
	// The name used by Asterisk
	Name *string `json:"name,omitempty"`
	// The UUID of the context
	Uuid                 *string               `json:"uuid,omitempty"`
	Contexts             []ContextRelationBase `json:"contexts,omitempty"`
	ConferenceRoomRanges []ContextRange        `json:"conference_room_ranges,omitempty"`
	// Additional information about the context
	Description  *string              `json:"description,omitempty"`
	Enabled      *bool                `json:"enabled,omitempty"`
	GroupRanges  []ContextRange       `json:"group_ranges,omitempty"`
	IncallRanges []ContextIncallRange `json:"incall_ranges,omitempty"`
	// The label of the context
	Label       *string        `json:"label,omitempty"`
	QueueRanges []ContextRange `json:"queue_ranges,omitempty"`
	// The UUID of the tenant
	TenantUuid *string        `json:"tenant_uuid,omitempty"`
	Type       *string        `json:"type,omitempty"`
	UserRanges []ContextRange `json:"user_ranges,omitempty"`
}

// NewContext instantiates a new Context object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContext() *Context {
	this := Context{}
	var enabled bool = true
	this.Enabled = &enabled
	var type_ string = "internal"
	this.Type = &type_
	return &this
}

// NewContextWithDefaults instantiates a new Context object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextWithDefaults() *Context {
	this := Context{}
	var enabled bool = true
	this.Enabled = &enabled
	var type_ string = "internal"
	this.Type = &type_
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Context) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Context) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Context) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Context) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Context) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Context) SetName(v string) {
	o.Name = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Context) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Context) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Context) SetUuid(v string) {
	o.Uuid = &v
}

// GetContexts returns the Contexts field value if set, zero value otherwise.
func (o *Context) GetContexts() []ContextRelationBase {
	if o == nil || IsNil(o.Contexts) {
		var ret []ContextRelationBase
		return ret
	}
	return o.Contexts
}

// GetContextsOk returns a tuple with the Contexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetContextsOk() ([]ContextRelationBase, bool) {
	if o == nil || IsNil(o.Contexts) {
		return nil, false
	}
	return o.Contexts, true
}

// HasContexts returns a boolean if a field has been set.
func (o *Context) HasContexts() bool {
	if o != nil && !IsNil(o.Contexts) {
		return true
	}

	return false
}

// SetContexts gets a reference to the given []ContextRelationBase and assigns it to the Contexts field.
func (o *Context) SetContexts(v []ContextRelationBase) {
	o.Contexts = v
}

// GetConferenceRoomRanges returns the ConferenceRoomRanges field value if set, zero value otherwise.
func (o *Context) GetConferenceRoomRanges() []ContextRange {
	if o == nil || IsNil(o.ConferenceRoomRanges) {
		var ret []ContextRange
		return ret
	}
	return o.ConferenceRoomRanges
}

// GetConferenceRoomRangesOk returns a tuple with the ConferenceRoomRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetConferenceRoomRangesOk() ([]ContextRange, bool) {
	if o == nil || IsNil(o.ConferenceRoomRanges) {
		return nil, false
	}
	return o.ConferenceRoomRanges, true
}

// HasConferenceRoomRanges returns a boolean if a field has been set.
func (o *Context) HasConferenceRoomRanges() bool {
	if o != nil && !IsNil(o.ConferenceRoomRanges) {
		return true
	}

	return false
}

// SetConferenceRoomRanges gets a reference to the given []ContextRange and assigns it to the ConferenceRoomRanges field.
func (o *Context) SetConferenceRoomRanges(v []ContextRange) {
	o.ConferenceRoomRanges = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Context) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Context) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Context) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Context) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Context) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Context) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetGroupRanges returns the GroupRanges field value if set, zero value otherwise.
func (o *Context) GetGroupRanges() []ContextRange {
	if o == nil || IsNil(o.GroupRanges) {
		var ret []ContextRange
		return ret
	}
	return o.GroupRanges
}

// GetGroupRangesOk returns a tuple with the GroupRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetGroupRangesOk() ([]ContextRange, bool) {
	if o == nil || IsNil(o.GroupRanges) {
		return nil, false
	}
	return o.GroupRanges, true
}

// HasGroupRanges returns a boolean if a field has been set.
func (o *Context) HasGroupRanges() bool {
	if o != nil && !IsNil(o.GroupRanges) {
		return true
	}

	return false
}

// SetGroupRanges gets a reference to the given []ContextRange and assigns it to the GroupRanges field.
func (o *Context) SetGroupRanges(v []ContextRange) {
	o.GroupRanges = v
}

// GetIncallRanges returns the IncallRanges field value if set, zero value otherwise.
func (o *Context) GetIncallRanges() []ContextIncallRange {
	if o == nil || IsNil(o.IncallRanges) {
		var ret []ContextIncallRange
		return ret
	}
	return o.IncallRanges
}

// GetIncallRangesOk returns a tuple with the IncallRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetIncallRangesOk() ([]ContextIncallRange, bool) {
	if o == nil || IsNil(o.IncallRanges) {
		return nil, false
	}
	return o.IncallRanges, true
}

// HasIncallRanges returns a boolean if a field has been set.
func (o *Context) HasIncallRanges() bool {
	if o != nil && !IsNil(o.IncallRanges) {
		return true
	}

	return false
}

// SetIncallRanges gets a reference to the given []ContextIncallRange and assigns it to the IncallRanges field.
func (o *Context) SetIncallRanges(v []ContextIncallRange) {
	o.IncallRanges = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Context) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Context) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Context) SetLabel(v string) {
	o.Label = &v
}

// GetQueueRanges returns the QueueRanges field value if set, zero value otherwise.
func (o *Context) GetQueueRanges() []ContextRange {
	if o == nil || IsNil(o.QueueRanges) {
		var ret []ContextRange
		return ret
	}
	return o.QueueRanges
}

// GetQueueRangesOk returns a tuple with the QueueRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetQueueRangesOk() ([]ContextRange, bool) {
	if o == nil || IsNil(o.QueueRanges) {
		return nil, false
	}
	return o.QueueRanges, true
}

// HasQueueRanges returns a boolean if a field has been set.
func (o *Context) HasQueueRanges() bool {
	if o != nil && !IsNil(o.QueueRanges) {
		return true
	}

	return false
}

// SetQueueRanges gets a reference to the given []ContextRange and assigns it to the QueueRanges field.
func (o *Context) SetQueueRanges(v []ContextRange) {
	o.QueueRanges = v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *Context) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *Context) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *Context) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Context) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Context) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Context) SetType(v string) {
	o.Type = &v
}

// GetUserRanges returns the UserRanges field value if set, zero value otherwise.
func (o *Context) GetUserRanges() []ContextRange {
	if o == nil || IsNil(o.UserRanges) {
		var ret []ContextRange
		return ret
	}
	return o.UserRanges
}

// GetUserRangesOk returns a tuple with the UserRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetUserRangesOk() ([]ContextRange, bool) {
	if o == nil || IsNil(o.UserRanges) {
		return nil, false
	}
	return o.UserRanges, true
}

// HasUserRanges returns a boolean if a field has been set.
func (o *Context) HasUserRanges() bool {
	if o != nil && !IsNil(o.UserRanges) {
		return true
	}

	return false
}

// SetUserRanges gets a reference to the given []ContextRange and assigns it to the UserRanges field.
func (o *Context) SetUserRanges(v []ContextRange) {
	o.UserRanges = v
}

func (o Context) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Context) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Contexts) {
		toSerialize["contexts"] = o.Contexts
	}
	if !IsNil(o.ConferenceRoomRanges) {
		toSerialize["conference_room_ranges"] = o.ConferenceRoomRanges
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.GroupRanges) {
		toSerialize["group_ranges"] = o.GroupRanges
	}
	if !IsNil(o.IncallRanges) {
		toSerialize["incall_ranges"] = o.IncallRanges
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.QueueRanges) {
		toSerialize["queue_ranges"] = o.QueueRanges
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UserRanges) {
		toSerialize["user_ranges"] = o.UserRanges
	}
	return toSerialize, nil
}

type NullableContext struct {
	value *Context
	isSet bool
}

func (v NullableContext) Get() *Context {
	return v.value
}

func (v *NullableContext) Set(val *Context) {
	v.value = val
	v.isSet = true
}

func (v NullableContext) IsSet() bool {
	return v.isSet
}

func (v *NullableContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContext(val *Context) *NullableContext {
	return &NullableContext{value: val, isSet: true}
}

func (v NullableContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
