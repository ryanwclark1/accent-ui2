/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the Incall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Incall{}

// Incall struct for Incall
type Incall struct {
	// The id of the incoming call
	Id         *int32                  `json:"id,omitempty"`
	Extensions []ExtensionRelationBase `json:"extensions,omitempty"`
	Schedules  []ScheduleRelationBase  `json:"schedules,omitempty"`
	// How the caller_id_name will be treated
	CallerIdMode *string `json:"caller_id_mode,omitempty"`
	// Name to display when calling
	CallerIdName *string `json:"caller_id_name,omitempty"`
	// Additional information about the incoming call
	Description *string          `json:"description,omitempty"`
	Destination *DestinationType `json:"destination,omitempty"`
	// The name of the sound file to be played before redirecting the caller to the destination
	GreetingSound *string `json:"greeting_sound,omitempty"`
	// Name of the subroutine to execute in asterisk before receiving a call
	PreprocessSubroutine *string `json:"preprocess_subroutine,omitempty"`
	// The UUID of the tenant
	TenantUuid *string `json:"tenant_uuid,omitempty"`
}

// NewIncall instantiates a new Incall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncall() *Incall {
	this := Incall{}
	return &this
}

// NewIncallWithDefaults instantiates a new Incall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncallWithDefaults() *Incall {
	this := Incall{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Incall) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incall) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Incall) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Incall) SetId(v int32) {
	o.Id = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *Incall) GetExtensions() []ExtensionRelationBase {
	if o == nil || IsNil(o.Extensions) {
		var ret []ExtensionRelationBase
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incall) GetExtensionsOk() ([]ExtensionRelationBase, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *Incall) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []ExtensionRelationBase and assigns it to the Extensions field.
func (o *Incall) SetExtensions(v []ExtensionRelationBase) {
	o.Extensions = v
}

// GetSchedules returns the Schedules field value if set, zero value otherwise.
func (o *Incall) GetSchedules() []ScheduleRelationBase {
	if o == nil || IsNil(o.Schedules) {
		var ret []ScheduleRelationBase
		return ret
	}
	return o.Schedules
}

// GetSchedulesOk returns a tuple with the Schedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incall) GetSchedulesOk() ([]ScheduleRelationBase, bool) {
	if o == nil || IsNil(o.Schedules) {
		return nil, false
	}
	return o.Schedules, true
}

// HasSchedules returns a boolean if a field has been set.
func (o *Incall) HasSchedules() bool {
	if o != nil && !IsNil(o.Schedules) {
		return true
	}

	return false
}

// SetSchedules gets a reference to the given []ScheduleRelationBase and assigns it to the Schedules field.
func (o *Incall) SetSchedules(v []ScheduleRelationBase) {
	o.Schedules = v
}

// GetCallerIdMode returns the CallerIdMode field value if set, zero value otherwise.
func (o *Incall) GetCallerIdMode() string {
	if o == nil || IsNil(o.CallerIdMode) {
		var ret string
		return ret
	}
	return *o.CallerIdMode
}

// GetCallerIdModeOk returns a tuple with the CallerIdMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incall) GetCallerIdModeOk() (*string, bool) {
	if o == nil || IsNil(o.CallerIdMode) {
		return nil, false
	}
	return o.CallerIdMode, true
}

// HasCallerIdMode returns a boolean if a field has been set.
func (o *Incall) HasCallerIdMode() bool {
	if o != nil && !IsNil(o.CallerIdMode) {
		return true
	}

	return false
}

// SetCallerIdMode gets a reference to the given string and assigns it to the CallerIdMode field.
func (o *Incall) SetCallerIdMode(v string) {
	o.CallerIdMode = &v
}

// GetCallerIdName returns the CallerIdName field value if set, zero value otherwise.
func (o *Incall) GetCallerIdName() string {
	if o == nil || IsNil(o.CallerIdName) {
		var ret string
		return ret
	}
	return *o.CallerIdName
}

// GetCallerIdNameOk returns a tuple with the CallerIdName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incall) GetCallerIdNameOk() (*string, bool) {
	if o == nil || IsNil(o.CallerIdName) {
		return nil, false
	}
	return o.CallerIdName, true
}

// HasCallerIdName returns a boolean if a field has been set.
func (o *Incall) HasCallerIdName() bool {
	if o != nil && !IsNil(o.CallerIdName) {
		return true
	}

	return false
}

// SetCallerIdName gets a reference to the given string and assigns it to the CallerIdName field.
func (o *Incall) SetCallerIdName(v string) {
	o.CallerIdName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Incall) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incall) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Incall) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Incall) SetDescription(v string) {
	o.Description = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *Incall) GetDestination() DestinationType {
	if o == nil || IsNil(o.Destination) {
		var ret DestinationType
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incall) GetDestinationOk() (*DestinationType, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *Incall) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given DestinationType and assigns it to the Destination field.
func (o *Incall) SetDestination(v DestinationType) {
	o.Destination = &v
}

// GetGreetingSound returns the GreetingSound field value if set, zero value otherwise.
func (o *Incall) GetGreetingSound() string {
	if o == nil || IsNil(o.GreetingSound) {
		var ret string
		return ret
	}
	return *o.GreetingSound
}

// GetGreetingSoundOk returns a tuple with the GreetingSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incall) GetGreetingSoundOk() (*string, bool) {
	if o == nil || IsNil(o.GreetingSound) {
		return nil, false
	}
	return o.GreetingSound, true
}

// HasGreetingSound returns a boolean if a field has been set.
func (o *Incall) HasGreetingSound() bool {
	if o != nil && !IsNil(o.GreetingSound) {
		return true
	}

	return false
}

// SetGreetingSound gets a reference to the given string and assigns it to the GreetingSound field.
func (o *Incall) SetGreetingSound(v string) {
	o.GreetingSound = &v
}

// GetPreprocessSubroutine returns the PreprocessSubroutine field value if set, zero value otherwise.
func (o *Incall) GetPreprocessSubroutine() string {
	if o == nil || IsNil(o.PreprocessSubroutine) {
		var ret string
		return ret
	}
	return *o.PreprocessSubroutine
}

// GetPreprocessSubroutineOk returns a tuple with the PreprocessSubroutine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incall) GetPreprocessSubroutineOk() (*string, bool) {
	if o == nil || IsNil(o.PreprocessSubroutine) {
		return nil, false
	}
	return o.PreprocessSubroutine, true
}

// HasPreprocessSubroutine returns a boolean if a field has been set.
func (o *Incall) HasPreprocessSubroutine() bool {
	if o != nil && !IsNil(o.PreprocessSubroutine) {
		return true
	}

	return false
}

// SetPreprocessSubroutine gets a reference to the given string and assigns it to the PreprocessSubroutine field.
func (o *Incall) SetPreprocessSubroutine(v string) {
	o.PreprocessSubroutine = &v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *Incall) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Incall) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *Incall) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *Incall) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

func (o Incall) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Incall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	if !IsNil(o.Schedules) {
		toSerialize["schedules"] = o.Schedules
	}
	if !IsNil(o.CallerIdMode) {
		toSerialize["caller_id_mode"] = o.CallerIdMode
	}
	if !IsNil(o.CallerIdName) {
		toSerialize["caller_id_name"] = o.CallerIdName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.GreetingSound) {
		toSerialize["greeting_sound"] = o.GreetingSound
	}
	if !IsNil(o.PreprocessSubroutine) {
		toSerialize["preprocess_subroutine"] = o.PreprocessSubroutine
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	return toSerialize, nil
}

type NullableIncall struct {
	value *Incall
	isSet bool
}

func (v NullableIncall) Get() *Incall {
	return v.value
}

func (v *NullableIncall) Set(val *Incall) {
	v.value = val
	v.isSet = true
}

func (v NullableIncall) IsSet() bool {
	return v.isSet
}

func (v *NullableIncall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncall(val *Incall) *NullableIncall {
	return &NullableIncall{value: val, isSet: true}
}

func (v NullableIncall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
