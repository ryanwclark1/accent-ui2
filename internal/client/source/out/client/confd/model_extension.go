/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"encoding/json"
)

// checks if the Extension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Extension{}

// Extension struct for Extension
type Extension struct {
	Context *string `json:"context,omitempty"`
	Exten   *string `json:"exten,omitempty"`
	// Extension ID
	Id         *int32                  `json:"id,omitempty"`
	Conference *ConferenceRelationBase `json:"conference,omitempty"`
	Group      *GroupRelationBase      `json:"group,omitempty"`
	Incall     *IncallRelationBase     `json:"incall,omitempty"`
	Lines      []LineRelationBase      `json:"lines,omitempty"`
	Outcall    *OutcallRelationBase    `json:"outcall,omitempty"`
	ParkingLot *ParkingLotRelationBase `json:"parking_lot,omitempty"`
	Queue      *QueueRelationBase      `json:"queue,omitempty"`
	// If True the extension is disabled. Deprecated, use enabled instead
	Commented *bool `json:"commented,omitempty"`
	// If False the extension is disabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The UUID of the tenant
	TenantUuid *string `json:"tenant_uuid,omitempty"`
}

// NewExtension instantiates a new Extension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtension() *Extension {
	this := Extension{}
	return &this
}

// NewExtensionWithDefaults instantiates a new Extension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionWithDefaults() *Extension {
	this := Extension{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *Extension) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *Extension) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *Extension) SetContext(v string) {
	o.Context = &v
}

// GetExten returns the Exten field value if set, zero value otherwise.
func (o *Extension) GetExten() string {
	if o == nil || IsNil(o.Exten) {
		var ret string
		return ret
	}
	return *o.Exten
}

// GetExtenOk returns a tuple with the Exten field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetExtenOk() (*string, bool) {
	if o == nil || IsNil(o.Exten) {
		return nil, false
	}
	return o.Exten, true
}

// HasExten returns a boolean if a field has been set.
func (o *Extension) HasExten() bool {
	if o != nil && !IsNil(o.Exten) {
		return true
	}

	return false
}

// SetExten gets a reference to the given string and assigns it to the Exten field.
func (o *Extension) SetExten(v string) {
	o.Exten = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Extension) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Extension) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Extension) SetId(v int32) {
	o.Id = &v
}

// GetConference returns the Conference field value if set, zero value otherwise.
func (o *Extension) GetConference() ConferenceRelationBase {
	if o == nil || IsNil(o.Conference) {
		var ret ConferenceRelationBase
		return ret
	}
	return *o.Conference
}

// GetConferenceOk returns a tuple with the Conference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetConferenceOk() (*ConferenceRelationBase, bool) {
	if o == nil || IsNil(o.Conference) {
		return nil, false
	}
	return o.Conference, true
}

// HasConference returns a boolean if a field has been set.
func (o *Extension) HasConference() bool {
	if o != nil && !IsNil(o.Conference) {
		return true
	}

	return false
}

// SetConference gets a reference to the given ConferenceRelationBase and assigns it to the Conference field.
func (o *Extension) SetConference(v ConferenceRelationBase) {
	o.Conference = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *Extension) GetGroup() GroupRelationBase {
	if o == nil || IsNil(o.Group) {
		var ret GroupRelationBase
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetGroupOk() (*GroupRelationBase, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *Extension) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given GroupRelationBase and assigns it to the Group field.
func (o *Extension) SetGroup(v GroupRelationBase) {
	o.Group = &v
}

// GetIncall returns the Incall field value if set, zero value otherwise.
func (o *Extension) GetIncall() IncallRelationBase {
	if o == nil || IsNil(o.Incall) {
		var ret IncallRelationBase
		return ret
	}
	return *o.Incall
}

// GetIncallOk returns a tuple with the Incall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetIncallOk() (*IncallRelationBase, bool) {
	if o == nil || IsNil(o.Incall) {
		return nil, false
	}
	return o.Incall, true
}

// HasIncall returns a boolean if a field has been set.
func (o *Extension) HasIncall() bool {
	if o != nil && !IsNil(o.Incall) {
		return true
	}

	return false
}

// SetIncall gets a reference to the given IncallRelationBase and assigns it to the Incall field.
func (o *Extension) SetIncall(v IncallRelationBase) {
	o.Incall = &v
}

// GetLines returns the Lines field value if set, zero value otherwise.
func (o *Extension) GetLines() []LineRelationBase {
	if o == nil || IsNil(o.Lines) {
		var ret []LineRelationBase
		return ret
	}
	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetLinesOk() ([]LineRelationBase, bool) {
	if o == nil || IsNil(o.Lines) {
		return nil, false
	}
	return o.Lines, true
}

// HasLines returns a boolean if a field has been set.
func (o *Extension) HasLines() bool {
	if o != nil && !IsNil(o.Lines) {
		return true
	}

	return false
}

// SetLines gets a reference to the given []LineRelationBase and assigns it to the Lines field.
func (o *Extension) SetLines(v []LineRelationBase) {
	o.Lines = v
}

// GetOutcall returns the Outcall field value if set, zero value otherwise.
func (o *Extension) GetOutcall() OutcallRelationBase {
	if o == nil || IsNil(o.Outcall) {
		var ret OutcallRelationBase
		return ret
	}
	return *o.Outcall
}

// GetOutcallOk returns a tuple with the Outcall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetOutcallOk() (*OutcallRelationBase, bool) {
	if o == nil || IsNil(o.Outcall) {
		return nil, false
	}
	return o.Outcall, true
}

// HasOutcall returns a boolean if a field has been set.
func (o *Extension) HasOutcall() bool {
	if o != nil && !IsNil(o.Outcall) {
		return true
	}

	return false
}

// SetOutcall gets a reference to the given OutcallRelationBase and assigns it to the Outcall field.
func (o *Extension) SetOutcall(v OutcallRelationBase) {
	o.Outcall = &v
}

// GetParkingLot returns the ParkingLot field value if set, zero value otherwise.
func (o *Extension) GetParkingLot() ParkingLotRelationBase {
	if o == nil || IsNil(o.ParkingLot) {
		var ret ParkingLotRelationBase
		return ret
	}
	return *o.ParkingLot
}

// GetParkingLotOk returns a tuple with the ParkingLot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetParkingLotOk() (*ParkingLotRelationBase, bool) {
	if o == nil || IsNil(o.ParkingLot) {
		return nil, false
	}
	return o.ParkingLot, true
}

// HasParkingLot returns a boolean if a field has been set.
func (o *Extension) HasParkingLot() bool {
	if o != nil && !IsNil(o.ParkingLot) {
		return true
	}

	return false
}

// SetParkingLot gets a reference to the given ParkingLotRelationBase and assigns it to the ParkingLot field.
func (o *Extension) SetParkingLot(v ParkingLotRelationBase) {
	o.ParkingLot = &v
}

// GetQueue returns the Queue field value if set, zero value otherwise.
func (o *Extension) GetQueue() QueueRelationBase {
	if o == nil || IsNil(o.Queue) {
		var ret QueueRelationBase
		return ret
	}
	return *o.Queue
}

// GetQueueOk returns a tuple with the Queue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetQueueOk() (*QueueRelationBase, bool) {
	if o == nil || IsNil(o.Queue) {
		return nil, false
	}
	return o.Queue, true
}

// HasQueue returns a boolean if a field has been set.
func (o *Extension) HasQueue() bool {
	if o != nil && !IsNil(o.Queue) {
		return true
	}

	return false
}

// SetQueue gets a reference to the given QueueRelationBase and assigns it to the Queue field.
func (o *Extension) SetQueue(v QueueRelationBase) {
	o.Queue = &v
}

// GetCommented returns the Commented field value if set, zero value otherwise.
func (o *Extension) GetCommented() bool {
	if o == nil || IsNil(o.Commented) {
		var ret bool
		return ret
	}
	return *o.Commented
}

// GetCommentedOk returns a tuple with the Commented field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetCommentedOk() (*bool, bool) {
	if o == nil || IsNil(o.Commented) {
		return nil, false
	}
	return o.Commented, true
}

// HasCommented returns a boolean if a field has been set.
func (o *Extension) HasCommented() bool {
	if o != nil && !IsNil(o.Commented) {
		return true
	}

	return false
}

// SetCommented gets a reference to the given bool and assigns it to the Commented field.
func (o *Extension) SetCommented(v bool) {
	o.Commented = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Extension) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Extension) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Extension) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetTenantUuid returns the TenantUuid field value if set, zero value otherwise.
func (o *Extension) GetTenantUuid() string {
	if o == nil || IsNil(o.TenantUuid) {
		var ret string
		return ret
	}
	return *o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetTenantUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUuid) {
		return nil, false
	}
	return o.TenantUuid, true
}

// HasTenantUuid returns a boolean if a field has been set.
func (o *Extension) HasTenantUuid() bool {
	if o != nil && !IsNil(o.TenantUuid) {
		return true
	}

	return false
}

// SetTenantUuid gets a reference to the given string and assigns it to the TenantUuid field.
func (o *Extension) SetTenantUuid(v string) {
	o.TenantUuid = &v
}

func (o Extension) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Extension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Exten) {
		toSerialize["exten"] = o.Exten
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Conference) {
		toSerialize["conference"] = o.Conference
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Incall) {
		toSerialize["incall"] = o.Incall
	}
	if !IsNil(o.Lines) {
		toSerialize["lines"] = o.Lines
	}
	if !IsNil(o.Outcall) {
		toSerialize["outcall"] = o.Outcall
	}
	if !IsNil(o.ParkingLot) {
		toSerialize["parking_lot"] = o.ParkingLot
	}
	if !IsNil(o.Queue) {
		toSerialize["queue"] = o.Queue
	}
	if !IsNil(o.Commented) {
		toSerialize["commented"] = o.Commented
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.TenantUuid) {
		toSerialize["tenant_uuid"] = o.TenantUuid
	}
	return toSerialize, nil
}

type NullableExtension struct {
	value *Extension
	isSet bool
}

func (v NullableExtension) Get() *Extension {
	return v.value
}

func (v *NullableExtension) Set(val *Extension) {
	v.value = val
	v.isSet = true
}

func (v NullableExtension) IsSet() bool {
	return v.isSet
}

func (v *NullableExtension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtension(val *Extension) *NullableExtension {
	return &NullableExtension{value: val, isSet: true}
}

func (v NullableExtension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
