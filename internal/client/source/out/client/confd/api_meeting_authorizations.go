/*
accent-confd

Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.

API version: 1.1
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type MeetingAuthorizationsAPI interface {

	/*
		CreateGuestMeetingAuthorization Request guest authorization to enter a meeting

		**Required ACL:** none. A single meeting only accepts a maximum amount of 128 authorizations. Authorizations are valid for 24h.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param guestUuid Guest UUID. It must be generated by the guest.
		@param meetingUuid Meeting UUID
		@return ApiCreateGuestMeetingAuthorizationRequest
	*/
	CreateGuestMeetingAuthorization(ctx context.Context, guestUuid string, meetingUuid string) ApiCreateGuestMeetingAuthorizationRequest

	// CreateGuestMeetingAuthorizationExecute executes the request
	//  @return MeetingAuthorization
	CreateGuestMeetingAuthorizationExecute(r ApiCreateGuestMeetingAuthorizationRequest) (*MeetingAuthorization, *http.Response, error)

	/*
		DeleteUserMeetingAuthorization Delete the guest authorization to enter a meeting

		**Required ACL:** confd.users.me.meetings.{meeting_uuid}.authorizations.{authorization_uuid}.read

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param guestUuid Guest UUID. It must be generated by the guest.
		@param meetingUuid Meeting UUID
		@param authorizationUuid Authorization UUID
		@return ApiDeleteUserMeetingAuthorizationRequest
	*/
	DeleteUserMeetingAuthorization(ctx context.Context, guestUuid string, meetingUuid string, authorizationUuid string) ApiDeleteUserMeetingAuthorizationRequest

	// DeleteUserMeetingAuthorizationExecute executes the request
	DeleteUserMeetingAuthorizationExecute(r ApiDeleteUserMeetingAuthorizationRequest) (*http.Response, error)

	/*
		GetGuestMeetingAuthorization Read the guest authorization to enter a meeting

		**Required ACL:** none

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param guestUuid Guest UUID. It must be generated by the guest.
		@param meetingUuid Meeting UUID
		@param authorizationUuid Authorization UUID
		@return ApiGetGuestMeetingAuthorizationRequest
	*/
	GetGuestMeetingAuthorization(ctx context.Context, guestUuid string, meetingUuid string, authorizationUuid string) ApiGetGuestMeetingAuthorizationRequest

	// GetGuestMeetingAuthorizationExecute executes the request
	//  @return MeetingAuthorization
	GetGuestMeetingAuthorizationExecute(r ApiGetGuestMeetingAuthorizationRequest) (*MeetingAuthorization, *http.Response, error)

	/*
		GetUserMeetingAuthorization Read the guest authorization to enter a meeting

		**Required ACL:** confd.users.me.meetings.{meeting_uuid}.authorizations.{authorization_uuid}.read

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param guestUuid Guest UUID. It must be generated by the guest.
		@param meetingUuid Meeting UUID
		@param authorizationUuid Authorization UUID
		@return ApiGetUserMeetingAuthorizationRequest
	*/
	GetUserMeetingAuthorization(ctx context.Context, guestUuid string, meetingUuid string, authorizationUuid string) ApiGetUserMeetingAuthorizationRequest

	// GetUserMeetingAuthorizationExecute executes the request
	//  @return MeetingAuthorization
	GetUserMeetingAuthorizationExecute(r ApiGetUserMeetingAuthorizationRequest) (*MeetingAuthorization, *http.Response, error)

	/*
		ListUserMeetingAuthorizations List all guest authorization requests of a meeting

		**Required ACL:** confd.users.me.meetings.{meeting_uuid}.authorizations.read

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param meetingUuid Meeting UUID
		@return ApiListUserMeetingAuthorizationsRequest
	*/
	ListUserMeetingAuthorizations(ctx context.Context, meetingUuid string) ApiListUserMeetingAuthorizationsRequest

	// ListUserMeetingAuthorizationsExecute executes the request
	//  @return MeetingAuthorizationItems
	ListUserMeetingAuthorizationsExecute(r ApiListUserMeetingAuthorizationsRequest) (*MeetingAuthorizationItems, *http.Response, error)

	/*
		PutUserMeetingAuthorizationAccept Accept a guest authorization request

		**Required ACL:** confd.users.me.meetings.{meeting_uuid}.authorizations.{authorization_uuid}.accept.update

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param meetingUuid Meeting UUID
		@param authorizationUuid Authorization UUID
		@return ApiPutUserMeetingAuthorizationAcceptRequest
	*/
	PutUserMeetingAuthorizationAccept(ctx context.Context, meetingUuid string, authorizationUuid string) ApiPutUserMeetingAuthorizationAcceptRequest

	// PutUserMeetingAuthorizationAcceptExecute executes the request
	//  @return MeetingAuthorization
	PutUserMeetingAuthorizationAcceptExecute(r ApiPutUserMeetingAuthorizationAcceptRequest) (*MeetingAuthorization, *http.Response, error)

	/*
		PutUserMeetingAuthorizationReject Reject a guest authorization request

		**Required ACL:** confd.users.me.meetings.{meeting_uuid}.authorizations.{authorization_uuid}.reject.update

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param meetingUuid Meeting UUID
		@param authorizationUuid Authorization UUID
		@return ApiPutUserMeetingAuthorizationRejectRequest
	*/
	PutUserMeetingAuthorizationReject(ctx context.Context, meetingUuid string, authorizationUuid string) ApiPutUserMeetingAuthorizationRejectRequest

	// PutUserMeetingAuthorizationRejectExecute executes the request
	//  @return MeetingAuthorization
	PutUserMeetingAuthorizationRejectExecute(r ApiPutUserMeetingAuthorizationRejectRequest) (*MeetingAuthorization, *http.Response, error)
}

// MeetingAuthorizationsAPIService MeetingAuthorizationsAPI service
type MeetingAuthorizationsAPIService service

type ApiCreateGuestMeetingAuthorizationRequest struct {
	ctx         context.Context
	ApiService  MeetingAuthorizationsAPI
	body        *MeetingAuthorizationRequest
	guestUuid   string
	meetingUuid string
}

// Details to request authorization
func (r ApiCreateGuestMeetingAuthorizationRequest) Body(body MeetingAuthorizationRequest) ApiCreateGuestMeetingAuthorizationRequest {
	r.body = &body
	return r
}

func (r ApiCreateGuestMeetingAuthorizationRequest) Execute() (*MeetingAuthorization, *http.Response, error) {
	return r.ApiService.CreateGuestMeetingAuthorizationExecute(r)
}

/*
CreateGuestMeetingAuthorization Request guest authorization to enter a meeting

**Required ACL:** none. A single meeting only accepts a maximum amount of 128 authorizations. Authorizations are valid for 24h.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guestUuid Guest UUID. It must be generated by the guest.
	@param meetingUuid Meeting UUID
	@return ApiCreateGuestMeetingAuthorizationRequest
*/
func (a *MeetingAuthorizationsAPIService) CreateGuestMeetingAuthorization(ctx context.Context, guestUuid string, meetingUuid string) ApiCreateGuestMeetingAuthorizationRequest {
	return ApiCreateGuestMeetingAuthorizationRequest{
		ApiService:  a,
		ctx:         ctx,
		guestUuid:   guestUuid,
		meetingUuid: meetingUuid,
	}
}

// Execute executes the request
//
//	@return MeetingAuthorization
func (a *MeetingAuthorizationsAPIService) CreateGuestMeetingAuthorizationExecute(r ApiCreateGuestMeetingAuthorizationRequest) (*MeetingAuthorization, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MeetingAuthorization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeetingAuthorizationsAPIService.CreateGuestMeetingAuthorization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/guests/{guest_uuid}/meetings/{meeting_uuid}/authorizations"
	localVarPath = strings.Replace(localVarPath, "{"+"guest_uuid"+"}", url.PathEscape(parameterValueToString(r.guestUuid, "guestUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"meeting_uuid"+"}", url.PathEscape(parameterValueToString(r.meetingUuid, "meetingUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteUserMeetingAuthorizationRequest struct {
	ctx               context.Context
	ApiService        MeetingAuthorizationsAPI
	guestUuid         string
	meetingUuid       string
	authorizationUuid string
}

func (r ApiDeleteUserMeetingAuthorizationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteUserMeetingAuthorizationExecute(r)
}

/*
DeleteUserMeetingAuthorization Delete the guest authorization to enter a meeting

**Required ACL:** confd.users.me.meetings.{meeting_uuid}.authorizations.{authorization_uuid}.read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guestUuid Guest UUID. It must be generated by the guest.
	@param meetingUuid Meeting UUID
	@param authorizationUuid Authorization UUID
	@return ApiDeleteUserMeetingAuthorizationRequest
*/
func (a *MeetingAuthorizationsAPIService) DeleteUserMeetingAuthorization(ctx context.Context, guestUuid string, meetingUuid string, authorizationUuid string) ApiDeleteUserMeetingAuthorizationRequest {
	return ApiDeleteUserMeetingAuthorizationRequest{
		ApiService:        a,
		ctx:               ctx,
		guestUuid:         guestUuid,
		meetingUuid:       meetingUuid,
		authorizationUuid: authorizationUuid,
	}
}

// Execute executes the request
func (a *MeetingAuthorizationsAPIService) DeleteUserMeetingAuthorizationExecute(r ApiDeleteUserMeetingAuthorizationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeetingAuthorizationsAPIService.DeleteUserMeetingAuthorization")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/me/meetings/{meeting_uuid}/authorizations/{authorization_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guest_uuid"+"}", url.PathEscape(parameterValueToString(r.guestUuid, "guestUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"meeting_uuid"+"}", url.PathEscape(parameterValueToString(r.meetingUuid, "meetingUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorization_uuid"+"}", url.PathEscape(parameterValueToString(r.authorizationUuid, "authorizationUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetGuestMeetingAuthorizationRequest struct {
	ctx               context.Context
	ApiService        MeetingAuthorizationsAPI
	guestUuid         string
	meetingUuid       string
	authorizationUuid string
}

func (r ApiGetGuestMeetingAuthorizationRequest) Execute() (*MeetingAuthorization, *http.Response, error) {
	return r.ApiService.GetGuestMeetingAuthorizationExecute(r)
}

/*
GetGuestMeetingAuthorization Read the guest authorization to enter a meeting

**Required ACL:** none

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guestUuid Guest UUID. It must be generated by the guest.
	@param meetingUuid Meeting UUID
	@param authorizationUuid Authorization UUID
	@return ApiGetGuestMeetingAuthorizationRequest
*/
func (a *MeetingAuthorizationsAPIService) GetGuestMeetingAuthorization(ctx context.Context, guestUuid string, meetingUuid string, authorizationUuid string) ApiGetGuestMeetingAuthorizationRequest {
	return ApiGetGuestMeetingAuthorizationRequest{
		ApiService:        a,
		ctx:               ctx,
		guestUuid:         guestUuid,
		meetingUuid:       meetingUuid,
		authorizationUuid: authorizationUuid,
	}
}

// Execute executes the request
//
//	@return MeetingAuthorization
func (a *MeetingAuthorizationsAPIService) GetGuestMeetingAuthorizationExecute(r ApiGetGuestMeetingAuthorizationRequest) (*MeetingAuthorization, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MeetingAuthorization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeetingAuthorizationsAPIService.GetGuestMeetingAuthorization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/guests/{guest_uuid}/meetings/{meeting_uuid}/authorizations/{authorization_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guest_uuid"+"}", url.PathEscape(parameterValueToString(r.guestUuid, "guestUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"meeting_uuid"+"}", url.PathEscape(parameterValueToString(r.meetingUuid, "meetingUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorization_uuid"+"}", url.PathEscape(parameterValueToString(r.authorizationUuid, "authorizationUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserMeetingAuthorizationRequest struct {
	ctx               context.Context
	ApiService        MeetingAuthorizationsAPI
	guestUuid         string
	meetingUuid       string
	authorizationUuid string
}

func (r ApiGetUserMeetingAuthorizationRequest) Execute() (*MeetingAuthorization, *http.Response, error) {
	return r.ApiService.GetUserMeetingAuthorizationExecute(r)
}

/*
GetUserMeetingAuthorization Read the guest authorization to enter a meeting

**Required ACL:** confd.users.me.meetings.{meeting_uuid}.authorizations.{authorization_uuid}.read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guestUuid Guest UUID. It must be generated by the guest.
	@param meetingUuid Meeting UUID
	@param authorizationUuid Authorization UUID
	@return ApiGetUserMeetingAuthorizationRequest
*/
func (a *MeetingAuthorizationsAPIService) GetUserMeetingAuthorization(ctx context.Context, guestUuid string, meetingUuid string, authorizationUuid string) ApiGetUserMeetingAuthorizationRequest {
	return ApiGetUserMeetingAuthorizationRequest{
		ApiService:        a,
		ctx:               ctx,
		guestUuid:         guestUuid,
		meetingUuid:       meetingUuid,
		authorizationUuid: authorizationUuid,
	}
}

// Execute executes the request
//
//	@return MeetingAuthorization
func (a *MeetingAuthorizationsAPIService) GetUserMeetingAuthorizationExecute(r ApiGetUserMeetingAuthorizationRequest) (*MeetingAuthorization, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MeetingAuthorization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeetingAuthorizationsAPIService.GetUserMeetingAuthorization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/me/meetings/{meeting_uuid}/authorizations/{authorization_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guest_uuid"+"}", url.PathEscape(parameterValueToString(r.guestUuid, "guestUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"meeting_uuid"+"}", url.PathEscape(parameterValueToString(r.meetingUuid, "meetingUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorization_uuid"+"}", url.PathEscape(parameterValueToString(r.authorizationUuid, "authorizationUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUserMeetingAuthorizationsRequest struct {
	ctx         context.Context
	ApiService  MeetingAuthorizationsAPI
	meetingUuid string
}

func (r ApiListUserMeetingAuthorizationsRequest) Execute() (*MeetingAuthorizationItems, *http.Response, error) {
	return r.ApiService.ListUserMeetingAuthorizationsExecute(r)
}

/*
ListUserMeetingAuthorizations List all guest authorization requests of a meeting

**Required ACL:** confd.users.me.meetings.{meeting_uuid}.authorizations.read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param meetingUuid Meeting UUID
	@return ApiListUserMeetingAuthorizationsRequest
*/
func (a *MeetingAuthorizationsAPIService) ListUserMeetingAuthorizations(ctx context.Context, meetingUuid string) ApiListUserMeetingAuthorizationsRequest {
	return ApiListUserMeetingAuthorizationsRequest{
		ApiService:  a,
		ctx:         ctx,
		meetingUuid: meetingUuid,
	}
}

// Execute executes the request
//
//	@return MeetingAuthorizationItems
func (a *MeetingAuthorizationsAPIService) ListUserMeetingAuthorizationsExecute(r ApiListUserMeetingAuthorizationsRequest) (*MeetingAuthorizationItems, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MeetingAuthorizationItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeetingAuthorizationsAPIService.ListUserMeetingAuthorizations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/me/meetings/{meeting_uuid}/authorizations"
	localVarPath = strings.Replace(localVarPath, "{"+"meeting_uuid"+"}", url.PathEscape(parameterValueToString(r.meetingUuid, "meetingUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutUserMeetingAuthorizationAcceptRequest struct {
	ctx               context.Context
	ApiService        MeetingAuthorizationsAPI
	meetingUuid       string
	authorizationUuid string
}

func (r ApiPutUserMeetingAuthorizationAcceptRequest) Execute() (*MeetingAuthorization, *http.Response, error) {
	return r.ApiService.PutUserMeetingAuthorizationAcceptExecute(r)
}

/*
PutUserMeetingAuthorizationAccept Accept a guest authorization request

**Required ACL:** confd.users.me.meetings.{meeting_uuid}.authorizations.{authorization_uuid}.accept.update

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param meetingUuid Meeting UUID
	@param authorizationUuid Authorization UUID
	@return ApiPutUserMeetingAuthorizationAcceptRequest
*/
func (a *MeetingAuthorizationsAPIService) PutUserMeetingAuthorizationAccept(ctx context.Context, meetingUuid string, authorizationUuid string) ApiPutUserMeetingAuthorizationAcceptRequest {
	return ApiPutUserMeetingAuthorizationAcceptRequest{
		ApiService:        a,
		ctx:               ctx,
		meetingUuid:       meetingUuid,
		authorizationUuid: authorizationUuid,
	}
}

// Execute executes the request
//
//	@return MeetingAuthorization
func (a *MeetingAuthorizationsAPIService) PutUserMeetingAuthorizationAcceptExecute(r ApiPutUserMeetingAuthorizationAcceptRequest) (*MeetingAuthorization, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MeetingAuthorization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeetingAuthorizationsAPIService.PutUserMeetingAuthorizationAccept")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/me/meetings/{meeting_uuid}/authorizations/{authorization_uuid}/accept"
	localVarPath = strings.Replace(localVarPath, "{"+"meeting_uuid"+"}", url.PathEscape(parameterValueToString(r.meetingUuid, "meetingUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorization_uuid"+"}", url.PathEscape(parameterValueToString(r.authorizationUuid, "authorizationUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutUserMeetingAuthorizationRejectRequest struct {
	ctx               context.Context
	ApiService        MeetingAuthorizationsAPI
	meetingUuid       string
	authorizationUuid string
}

func (r ApiPutUserMeetingAuthorizationRejectRequest) Execute() (*MeetingAuthorization, *http.Response, error) {
	return r.ApiService.PutUserMeetingAuthorizationRejectExecute(r)
}

/*
PutUserMeetingAuthorizationReject Reject a guest authorization request

**Required ACL:** confd.users.me.meetings.{meeting_uuid}.authorizations.{authorization_uuid}.reject.update

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param meetingUuid Meeting UUID
	@param authorizationUuid Authorization UUID
	@return ApiPutUserMeetingAuthorizationRejectRequest
*/
func (a *MeetingAuthorizationsAPIService) PutUserMeetingAuthorizationReject(ctx context.Context, meetingUuid string, authorizationUuid string) ApiPutUserMeetingAuthorizationRejectRequest {
	return ApiPutUserMeetingAuthorizationRejectRequest{
		ApiService:        a,
		ctx:               ctx,
		meetingUuid:       meetingUuid,
		authorizationUuid: authorizationUuid,
	}
}

// Execute executes the request
//
//	@return MeetingAuthorization
func (a *MeetingAuthorizationsAPIService) PutUserMeetingAuthorizationRejectExecute(r ApiPutUserMeetingAuthorizationRejectRequest) (*MeetingAuthorization, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MeetingAuthorization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeetingAuthorizationsAPIService.PutUserMeetingAuthorizationReject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/me/meetings/{meeting_uuid}/authorizations/{authorization_uuid}/reject"
	localVarPath = strings.Replace(localVarPath, "{"+"meeting_uuid"+"}", url.PathEscape(parameterValueToString(r.meetingUuid, "meetingUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorization_uuid"+"}", url.PathEscape(parameterValueToString(r.authorizationUuid, "authorizationUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
