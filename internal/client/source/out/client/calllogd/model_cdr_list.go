/*
accent-call-logd

Consult call logs from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calllogd

import (
	"encoding/json"
)

// checks if the CDRList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDRList{}

// CDRList struct for CDRList
type CDRList struct {
	Filtered *int32 `json:"filtered,omitempty"`
	Items    []CDR  `json:"items,omitempty"`
	Total    *int32 `json:"total,omitempty"`
}

// NewCDRList instantiates a new CDRList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDRList() *CDRList {
	this := CDRList{}
	return &this
}

// NewCDRListWithDefaults instantiates a new CDRList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDRListWithDefaults() *CDRList {
	this := CDRList{}
	return &this
}

// GetFiltered returns the Filtered field value if set, zero value otherwise.
func (o *CDRList) GetFiltered() int32 {
	if o == nil || IsNil(o.Filtered) {
		var ret int32
		return ret
	}
	return *o.Filtered
}

// GetFilteredOk returns a tuple with the Filtered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDRList) GetFilteredOk() (*int32, bool) {
	if o == nil || IsNil(o.Filtered) {
		return nil, false
	}
	return o.Filtered, true
}

// HasFiltered returns a boolean if a field has been set.
func (o *CDRList) HasFiltered() bool {
	if o != nil && !IsNil(o.Filtered) {
		return true
	}

	return false
}

// SetFiltered gets a reference to the given int32 and assigns it to the Filtered field.
func (o *CDRList) SetFiltered(v int32) {
	o.Filtered = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *CDRList) GetItems() []CDR {
	if o == nil || IsNil(o.Items) {
		var ret []CDR
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDRList) GetItemsOk() ([]CDR, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *CDRList) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []CDR and assigns it to the Items field.
func (o *CDRList) SetItems(v []CDR) {
	o.Items = v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *CDRList) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDRList) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *CDRList) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *CDRList) SetTotal(v int32) {
	o.Total = &v
}

func (o CDRList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDRList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filtered) {
		toSerialize["filtered"] = o.Filtered
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableCDRList struct {
	value *CDRList
	isSet bool
}

func (v NullableCDRList) Get() *CDRList {
	return v.value
}

func (v *NullableCDRList) Set(val *CDRList) {
	v.value = val
	v.isSet = true
}

func (v NullableCDRList) IsSet() bool {
	return v.isSet
}

func (v *NullableCDRList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDRList(val *CDRList) *NullableCDRList {
	return &NullableCDRList{value: val, isSet: true}
}

func (v NullableCDRList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDRList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
