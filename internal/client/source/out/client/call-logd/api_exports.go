/*
accent-call-logd

Consult call logs from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calllogd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

type ExportsAPI interface {

	/*
		CreateCDRRecordingsMediaExport Create an export for the recording media of multiple CDRs

		**Required ACL:** `call-logd.cdr.recordings.media.export.create` This endpoint creates a new export and returns its UUID.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ExportsAPICreateCDRRecordingsMediaExportRequest
	*/
	CreateCDRRecordingsMediaExport(ctx context.Context) ExportsAPICreateCDRRecordingsMediaExportRequest

	// CreateCDRRecordingsMediaExportExecute executes the request
	//  @return CreateCDRRecordingsMediaExport202Response
	CreateCDRRecordingsMediaExportExecute(r ExportsAPICreateCDRRecordingsMediaExportRequest) (*CreateCDRRecordingsMediaExport202Response, *http.Response, error)

	/*
		GetExport Get an export by the given UUID

		**Required ACL:** `call-logd.exports.{export_uuid}.read`

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param exportUuid UUID of the given export
		@return ExportsAPIGetExportRequest
	*/
	GetExport(ctx context.Context, exportUuid string) ExportsAPIGetExportRequest

	// GetExportExecute executes the request
	//  @return Export
	GetExportExecute(r ExportsAPIGetExportRequest) (*Export, *http.Response, error)

	/*
		GetExportDownload Download an export as a ZIP archive by the given UUID

		**Required ACL:** `call-logd.exports.{export_uuid}.download.read` This endpoint allow to use `?token={token_uuid}` and `?tenant={tenant_uuid}` query string to bypass headers

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param exportUuid UUID of the given export
		@return ExportsAPIGetExportDownloadRequest
	*/
	GetExportDownload(ctx context.Context, exportUuid string) ExportsAPIGetExportDownloadRequest

	// GetExportDownloadExecute executes the request
	GetExportDownloadExecute(r ExportsAPIGetExportDownloadRequest) (*http.Response, error)
}

// ExportsAPIService ExportsAPI service
type ExportsAPIService service

type ExportsAPICreateCDRRecordingsMediaExportRequest struct {
	ctx           context.Context
	ApiService    ExportsAPI
	body          *CreateCDRRecordingsMediaExportRequest
	from          *time.Time
	until         *time.Time
	search        *string
	callDirection *string
	number        *string
	tags          *[]string
	userUuid      *[]string
	fromId        *int32
	recurse       *bool
	accentTenant  *string
	email         *string
}

// The CDR IDs list from which to create an export
func (r ExportsAPICreateCDRRecordingsMediaExportRequest) Body(body CreateCDRRecordingsMediaExportRequest) ExportsAPICreateCDRRecordingsMediaExportRequest {
	r.body = &body
	return r
}

// Ignore calls before the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will start at the oldest available call with timezone UTC.
func (r ExportsAPICreateCDRRecordingsMediaExportRequest) From(from time.Time) ExportsAPICreateCDRRecordingsMediaExportRequest {
	r.from = &from
	return r
}

// Ignore calls starting at or after the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will include the current day.
func (r ExportsAPICreateCDRRecordingsMediaExportRequest) Until(until time.Time) ExportsAPICreateCDRRecordingsMediaExportRequest {
	r.until = &until
	return r
}

// Filter list of items
func (r ExportsAPICreateCDRRecordingsMediaExportRequest) Search(search string) ExportsAPICreateCDRRecordingsMediaExportRequest {
	r.search = &search
	return r
}

// Filter list of items
func (r ExportsAPICreateCDRRecordingsMediaExportRequest) CallDirection(callDirection string) ExportsAPICreateCDRRecordingsMediaExportRequest {
	r.callDirection = &callDirection
	return r
}

// Filter by source_extension and destination_extension. A wildcard (underscore) can be used at the start and/or the end of the number.
func (r ExportsAPICreateCDRRecordingsMediaExportRequest) Number(number string) ExportsAPICreateCDRRecordingsMediaExportRequest {
	r.number = &number
	return r
}

// Filter by tags. Each tag MUST be separated by a coma (,). Many tag will perform a logical AND.
func (r ExportsAPICreateCDRRecordingsMediaExportRequest) Tags(tags []string) ExportsAPICreateCDRRecordingsMediaExportRequest {
	r.tags = &tags
	return r
}

// Filter by user_uuid. Many uuid can be specified. Each uuid MUST be separated by a comma (,). Many uuid will perform a logical OR.
func (r ExportsAPICreateCDRRecordingsMediaExportRequest) UserUuid(userUuid []string) ExportsAPICreateCDRRecordingsMediaExportRequest {
	r.userUuid = &userUuid
	return r
}

// Ignore CDR created before the given CDR ID.
func (r ExportsAPICreateCDRRecordingsMediaExportRequest) FromId(fromId int32) ExportsAPICreateCDRRecordingsMediaExportRequest {
	r.fromId = &fromId
	return r
}

// Should the query include sub-tenants
func (r ExportsAPICreateCDRRecordingsMediaExportRequest) Recurse(recurse bool) ExportsAPICreateCDRRecordingsMediaExportRequest {
	r.recurse = &recurse
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ExportsAPICreateCDRRecordingsMediaExportRequest) AccentTenant(accentTenant string) ExportsAPICreateCDRRecordingsMediaExportRequest {
	r.accentTenant = &accentTenant
	return r
}

// E-mail address
func (r ExportsAPICreateCDRRecordingsMediaExportRequest) Email(email string) ExportsAPICreateCDRRecordingsMediaExportRequest {
	r.email = &email
	return r
}

func (r ExportsAPICreateCDRRecordingsMediaExportRequest) Execute() (*CreateCDRRecordingsMediaExport202Response, *http.Response, error) {
	return r.ApiService.CreateCDRRecordingsMediaExportExecute(r)
}

/*
CreateCDRRecordingsMediaExport Create an export for the recording media of multiple CDRs

**Required ACL:** `call-logd.cdr.recordings.media.export.create` This endpoint creates a new export and returns its UUID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ExportsAPICreateCDRRecordingsMediaExportRequest
*/
func (a *ExportsAPIService) CreateCDRRecordingsMediaExport(ctx context.Context) ExportsAPICreateCDRRecordingsMediaExportRequest {
	return ExportsAPICreateCDRRecordingsMediaExportRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateCDRRecordingsMediaExport202Response
func (a *ExportsAPIService) CreateCDRRecordingsMediaExportExecute(r ExportsAPICreateCDRRecordingsMediaExportRequest) (*CreateCDRRecordingsMediaExport202Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateCDRRecordingsMediaExport202Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExportsAPIService.CreateCDRRecordingsMediaExport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdr/recordings/media/export"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	if r.until != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "until", r.until, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.callDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "call_direction", r.callDirection, "")
	}
	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	}
	if r.tags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags", r.tags, "csv")
	}
	if r.userUuid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_uuid", r.userUuid, "csv")
	}
	if r.fromId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_id", r.fromId, "")
	}
	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExportsAPIGetExportRequest struct {
	ctx        context.Context
	ApiService ExportsAPI
	exportUuid string
}

func (r ExportsAPIGetExportRequest) Execute() (*Export, *http.Response, error) {
	return r.ApiService.GetExportExecute(r)
}

/*
GetExport Get an export by the given UUID

**Required ACL:** `call-logd.exports.{export_uuid}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param exportUuid UUID of the given export
	@return ExportsAPIGetExportRequest
*/
func (a *ExportsAPIService) GetExport(ctx context.Context, exportUuid string) ExportsAPIGetExportRequest {
	return ExportsAPIGetExportRequest{
		ApiService: a,
		ctx:        ctx,
		exportUuid: exportUuid,
	}
}

// Execute executes the request
//
//	@return Export
func (a *ExportsAPIService) GetExportExecute(r ExportsAPIGetExportRequest) (*Export, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Export
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExportsAPIService.GetExport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/exports/{export_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"export_uuid"+"}", url.PathEscape(parameterValueToString(r.exportUuid, "exportUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExportsAPIGetExportDownloadRequest struct {
	ctx        context.Context
	ApiService ExportsAPI
	exportUuid string
}

func (r ExportsAPIGetExportDownloadRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetExportDownloadExecute(r)
}

/*
GetExportDownload Download an export as a ZIP archive by the given UUID

**Required ACL:** `call-logd.exports.{export_uuid}.download.read` This endpoint allow to use `?token={token_uuid}` and `?tenant={tenant_uuid}` query string to bypass headers

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param exportUuid UUID of the given export
	@return ExportsAPIGetExportDownloadRequest
*/
func (a *ExportsAPIService) GetExportDownload(ctx context.Context, exportUuid string) ExportsAPIGetExportDownloadRequest {
	return ExportsAPIGetExportDownloadRequest{
		ApiService: a,
		ctx:        ctx,
		exportUuid: exportUuid,
	}
}

// Execute executes the request
func (a *ExportsAPIService) GetExportDownloadExecute(r ExportsAPIGetExportDownloadRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExportsAPIService.GetExportDownload")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/exports/{export_uuid}/download"
	localVarPath = strings.Replace(localVarPath, "{"+"export_uuid"+"}", url.PathEscape(parameterValueToString(r.exportUuid, "exportUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/zip"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
