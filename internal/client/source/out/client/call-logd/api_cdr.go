/*
accent-call-logd

Consult call logs from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package call-logd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


type CdrAPI interface {

	/*
	CreateCDRRecordingsMediaExport Create an export for the recording media of multiple CDRs

	**Required ACL:** `call-logd.cdr.recordings.media.export.create` This endpoint creates a new export and returns its UUID. 

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCDRRecordingsMediaExportRequest
	*/
	CreateCDRRecordingsMediaExport(ctx context.Context) ApiCreateCDRRecordingsMediaExportRequest

	// CreateCDRRecordingsMediaExportExecute executes the request
	//  @return CreateCDRRecordingsMediaExport202Response
	CreateCDRRecordingsMediaExportExecute(r ApiCreateCDRRecordingsMediaExportRequest) (*CreateCDRRecordingsMediaExport202Response, *http.Response, error)

	/*
	DeleteCDRRecordingMedia Delete a recording media

	**Required ACL:** `call-logd.cdr.{cdr_id}.recordings.{recording_uuid}.media.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param cdrId ID of the CDR
	@param recordingUuid UUID of the recording
	@return ApiDeleteCDRRecordingMediaRequest
	*/
	DeleteCDRRecordingMedia(ctx context.Context, cdrId int32, recordingUuid int32) ApiDeleteCDRRecordingMediaRequest

	// DeleteCDRRecordingMediaExecute executes the request
	DeleteCDRRecordingMediaExecute(r ApiDeleteCDRRecordingMediaRequest) (*http.Response, error)

	/*
	DeleteCDRRecordingsMedia Delete multiple CDRs recording media

	**Required ACL:** `call-logd.cdr.recordings.media.delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteCDRRecordingsMediaRequest
	*/
	DeleteCDRRecordingsMedia(ctx context.Context) ApiDeleteCDRRecordingsMediaRequest

	// DeleteCDRRecordingsMediaExecute executes the request
	DeleteCDRRecordingsMediaExecute(r ApiDeleteCDRRecordingsMediaRequest) (*http.Response, error)

	/*
	GetCDR Get a CDR by ID

	**Required ACL:** `call-logd.cdr.{cdr_id}.read`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param cdrId ID of the CDR
	@return ApiGetCDRRequest
	*/
	GetCDR(ctx context.Context, cdrId int32) ApiGetCDRRequest

	// GetCDRExecute executes the request
	//  @return CDR
	GetCDRExecute(r ApiGetCDRRequest) (*CDR, *http.Response, error)

	/*
	GetCDRRecordingMedia Get a recording media

	**Required ACL:** `call-logd.cdr.{cdr_id}.recordings.{recording_uuid}.media.read`
This endpoint allow to use `?token={token_uuid}` and `?tenant={tenant_uuid}` query string to bypass headers 

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param cdrId ID of the CDR
	@param recordingUuid UUID of the recording
	@return ApiGetCDRRecordingMediaRequest
	*/
	GetCDRRecordingMedia(ctx context.Context, cdrId int32, recordingUuid int32) ApiGetCDRRecordingMediaRequest

	// GetCDRRecordingMediaExecute executes the request
	GetCDRRecordingMediaExecute(r ApiGetCDRRecordingMediaRequest) (*http.Response, error)

	/*
	GetCDRs List CDR

	**Required ACL:** `call-logd.cdr.read`
This endpoint allow to use `?token={token_uuid}` and `?tenant={tenant_uuid}` query string to bypass headers 

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCDRsRequest
	*/
	GetCDRs(ctx context.Context) ApiGetCDRsRequest

	// GetCDRsExecute executes the request
	//  @return CDRList
	GetCDRsExecute(r ApiGetCDRsRequest) (*CDRList, *http.Response, error)

	/*
	GetCurrentUserCDR List CDR of the authenticated user

	**Required ACL:** `call-logd.users.me.cdr.read`
This endpoint allow to use `?token={token_uuid}` and `?tenant={tenant_uuid}` query string to bypass headers 

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCurrentUserCDRRequest
	*/
	GetCurrentUserCDR(ctx context.Context) ApiGetCurrentUserCDRRequest

	// GetCurrentUserCDRExecute executes the request
	//  @return CDRList
	GetCurrentUserCDRExecute(r ApiGetCurrentUserCDRRequest) (*CDRList, *http.Response, error)

	/*
	GetUserCDR List CDR of the given user

	**Required ACL:** `call-logd.users.{user_uuid}.cdr.read`
This endpoint allow to use `?token={token_uuid}` and `?tenant={tenant_uuid}` query string to bypass headers 

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userUuid UUID of the given user
	@return ApiGetUserCDRRequest
	*/
	GetUserCDR(ctx context.Context, userUuid string) ApiGetUserCDRRequest

	// GetUserCDRExecute executes the request
	//  @return CDRList
	GetUserCDRExecute(r ApiGetUserCDRRequest) (*CDRList, *http.Response, error)
}

// CdrAPIService CdrAPI service
type CdrAPIService service

type ApiCreateCDRRecordingsMediaExportRequest struct {
	ctx context.Context
	ApiService CdrAPI
	body *CreateCDRRecordingsMediaExportRequest
	from *time.Time
	until *time.Time
	search *string
	callDirection *string
	number *string
	tags *[]string
	userUuid *[]string
	fromId *int32
	recurse *bool
	accentTenant *string
	email *string
}

// The CDR IDs list from which to create an export
func (r ApiCreateCDRRecordingsMediaExportRequest) Body(body CreateCDRRecordingsMediaExportRequest) ApiCreateCDRRecordingsMediaExportRequest {
	r.body = &body
	return r
}

// Ignore calls before the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will start at the oldest available call with timezone UTC. 
func (r ApiCreateCDRRecordingsMediaExportRequest) From(from time.Time) ApiCreateCDRRecordingsMediaExportRequest {
	r.from = &from
	return r
}

// Ignore calls starting at or after the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will include the current day. 
func (r ApiCreateCDRRecordingsMediaExportRequest) Until(until time.Time) ApiCreateCDRRecordingsMediaExportRequest {
	r.until = &until
	return r
}

// Filter list of items
func (r ApiCreateCDRRecordingsMediaExportRequest) Search(search string) ApiCreateCDRRecordingsMediaExportRequest {
	r.search = &search
	return r
}

// Filter list of items
func (r ApiCreateCDRRecordingsMediaExportRequest) CallDirection(callDirection string) ApiCreateCDRRecordingsMediaExportRequest {
	r.callDirection = &callDirection
	return r
}

// Filter by source_extension and destination_extension. A wildcard (underscore) can be used at the start and/or the end of the number.
func (r ApiCreateCDRRecordingsMediaExportRequest) Number(number string) ApiCreateCDRRecordingsMediaExportRequest {
	r.number = &number
	return r
}

// Filter by tags. Each tag MUST be separated by a coma (,). Many tag will perform a logical AND.
func (r ApiCreateCDRRecordingsMediaExportRequest) Tags(tags []string) ApiCreateCDRRecordingsMediaExportRequest {
	r.tags = &tags
	return r
}

// Filter by user_uuid. Many uuid can be specified. Each uuid MUST be separated by a comma (,). Many uuid will perform a logical OR.
func (r ApiCreateCDRRecordingsMediaExportRequest) UserUuid(userUuid []string) ApiCreateCDRRecordingsMediaExportRequest {
	r.userUuid = &userUuid
	return r
}

// Ignore CDR created before the given CDR ID.
func (r ApiCreateCDRRecordingsMediaExportRequest) FromId(fromId int32) ApiCreateCDRRecordingsMediaExportRequest {
	r.fromId = &fromId
	return r
}

// Should the query include sub-tenants
func (r ApiCreateCDRRecordingsMediaExportRequest) Recurse(recurse bool) ApiCreateCDRRecordingsMediaExportRequest {
	r.recurse = &recurse
	return r
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiCreateCDRRecordingsMediaExportRequest) AccentTenant(accentTenant string) ApiCreateCDRRecordingsMediaExportRequest {
	r.accentTenant = &accentTenant
	return r
}

// E-mail address
func (r ApiCreateCDRRecordingsMediaExportRequest) Email(email string) ApiCreateCDRRecordingsMediaExportRequest {
	r.email = &email
	return r
}

func (r ApiCreateCDRRecordingsMediaExportRequest) Execute() (*CreateCDRRecordingsMediaExport202Response, *http.Response, error) {
	return r.ApiService.CreateCDRRecordingsMediaExportExecute(r)
}

/*
CreateCDRRecordingsMediaExport Create an export for the recording media of multiple CDRs

**Required ACL:** `call-logd.cdr.recordings.media.export.create` This endpoint creates a new export and returns its UUID. 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCDRRecordingsMediaExportRequest
*/
func (a *CdrAPIService) CreateCDRRecordingsMediaExport(ctx context.Context) ApiCreateCDRRecordingsMediaExportRequest {
	return ApiCreateCDRRecordingsMediaExportRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateCDRRecordingsMediaExport202Response
func (a *CdrAPIService) CreateCDRRecordingsMediaExportExecute(r ApiCreateCDRRecordingsMediaExportRequest) (*CreateCDRRecordingsMediaExport202Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateCDRRecordingsMediaExport202Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CdrAPIService.CreateCDRRecordingsMediaExport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdr/recordings/media/export"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	if r.until != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "until", r.until, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.callDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "call_direction", r.callDirection, "")
	}
	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	}
	if r.tags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags", r.tags, "csv")
	}
	if r.userUuid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_uuid", r.userUuid, "csv")
	}
	if r.fromId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_id", r.fromId, "")
	}
	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCDRRecordingMediaRequest struct {
	ctx context.Context
	ApiService CdrAPI
	cdrId int32
	recordingUuid int32
}

func (r ApiDeleteCDRRecordingMediaRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCDRRecordingMediaExecute(r)
}

/*
DeleteCDRRecordingMedia Delete a recording media

**Required ACL:** `call-logd.cdr.{cdr_id}.recordings.{recording_uuid}.media.delete`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cdrId ID of the CDR
 @param recordingUuid UUID of the recording
 @return ApiDeleteCDRRecordingMediaRequest
*/
func (a *CdrAPIService) DeleteCDRRecordingMedia(ctx context.Context, cdrId int32, recordingUuid int32) ApiDeleteCDRRecordingMediaRequest {
	return ApiDeleteCDRRecordingMediaRequest{
		ApiService: a,
		ctx: ctx,
		cdrId: cdrId,
		recordingUuid: recordingUuid,
	}
}

// Execute executes the request
func (a *CdrAPIService) DeleteCDRRecordingMediaExecute(r ApiDeleteCDRRecordingMediaRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CdrAPIService.DeleteCDRRecordingMedia")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdr/{cdr_id}/recordings/{recording_uuid}/media"
	localVarPath = strings.Replace(localVarPath, "{"+"cdr_id"+"}", url.PathEscape(parameterValueToString(r.cdrId, "cdrId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recording_uuid"+"}", url.PathEscape(parameterValueToString(r.recordingUuid, "recordingUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteCDRRecordingsMediaRequest struct {
	ctx context.Context
	ApiService CdrAPI
	body *DeleteCDRRecordingsMediaRequest
}

// The CDR IDs list from which to delete recording media
func (r ApiDeleteCDRRecordingsMediaRequest) Body(body DeleteCDRRecordingsMediaRequest) ApiDeleteCDRRecordingsMediaRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCDRRecordingsMediaRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCDRRecordingsMediaExecute(r)
}

/*
DeleteCDRRecordingsMedia Delete multiple CDRs recording media

**Required ACL:** `call-logd.cdr.recordings.media.delete`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteCDRRecordingsMediaRequest
*/
func (a *CdrAPIService) DeleteCDRRecordingsMedia(ctx context.Context) ApiDeleteCDRRecordingsMediaRequest {
	return ApiDeleteCDRRecordingsMediaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CdrAPIService) DeleteCDRRecordingsMediaExecute(r ApiDeleteCDRRecordingsMediaRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CdrAPIService.DeleteCDRRecordingsMedia")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdr/recordings/media"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCDRRequest struct {
	ctx context.Context
	ApiService CdrAPI
	cdrId int32
}

func (r ApiGetCDRRequest) Execute() (*CDR, *http.Response, error) {
	return r.ApiService.GetCDRExecute(r)
}

/*
GetCDR Get a CDR by ID

**Required ACL:** `call-logd.cdr.{cdr_id}.read`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cdrId ID of the CDR
 @return ApiGetCDRRequest
*/
func (a *CdrAPIService) GetCDR(ctx context.Context, cdrId int32) ApiGetCDRRequest {
	return ApiGetCDRRequest{
		ApiService: a,
		ctx: ctx,
		cdrId: cdrId,
	}
}

// Execute executes the request
//  @return CDR
func (a *CdrAPIService) GetCDRExecute(r ApiGetCDRRequest) (*CDR, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CDR
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CdrAPIService.GetCDR")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdr/{cdr_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"cdr_id"+"}", url.PathEscape(parameterValueToString(r.cdrId, "cdrId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCDRRecordingMediaRequest struct {
	ctx context.Context
	ApiService CdrAPI
	cdrId int32
	recordingUuid int32
}

func (r ApiGetCDRRecordingMediaRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetCDRRecordingMediaExecute(r)
}

/*
GetCDRRecordingMedia Get a recording media

**Required ACL:** `call-logd.cdr.{cdr_id}.recordings.{recording_uuid}.media.read`
This endpoint allow to use `?token={token_uuid}` and `?tenant={tenant_uuid}` query string to bypass headers 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cdrId ID of the CDR
 @param recordingUuid UUID of the recording
 @return ApiGetCDRRecordingMediaRequest
*/
func (a *CdrAPIService) GetCDRRecordingMedia(ctx context.Context, cdrId int32, recordingUuid int32) ApiGetCDRRecordingMediaRequest {
	return ApiGetCDRRecordingMediaRequest{
		ApiService: a,
		ctx: ctx,
		cdrId: cdrId,
		recordingUuid: recordingUuid,
	}
}

// Execute executes the request
func (a *CdrAPIService) GetCDRRecordingMediaExecute(r ApiGetCDRRecordingMediaRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CdrAPIService.GetCDRRecordingMedia")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdr/{cdr_id}/recordings/{recording_uuid}/media"
	localVarPath = strings.Replace(localVarPath, "{"+"cdr_id"+"}", url.PathEscape(parameterValueToString(r.cdrId, "cdrId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recording_uuid"+"}", url.PathEscape(parameterValueToString(r.recordingUuid, "recordingUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"audio/wav"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCDRsRequest struct {
	ctx context.Context
	ApiService CdrAPI
	accentTenant *string
	from *time.Time
	until *time.Time
	limit *int32
	offset *int32
	order *string
	direction *string
	search *string
	callDirection *string
	number *string
	tags *[]string
	userUuid *[]string
	fromId *int32
	recurse *bool
	distinct *string
	recorded *bool
	format *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiGetCDRsRequest) AccentTenant(accentTenant string) ApiGetCDRsRequest {
	r.accentTenant = &accentTenant
	return r
}

// Ignore calls before the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will start at the oldest available call with timezone UTC. 
func (r ApiGetCDRsRequest) From(from time.Time) ApiGetCDRsRequest {
	r.from = &from
	return r
}

// Ignore calls starting at or after the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will include the current day. 
func (r ApiGetCDRsRequest) Until(until time.Time) ApiGetCDRsRequest {
	r.until = &until
	return r
}

// Maximum number of items to return in the list. Default to 1000 if not specified.
func (r ApiGetCDRsRequest) Limit(limit int32) ApiGetCDRsRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r ApiGetCDRsRequest) Offset(offset int32) ApiGetCDRsRequest {
	r.offset = &offset
	return r
}

// Name of the field to use for sorting the list of items returned. Unsupported values: &#x60;&#x60;end&#x60;&#x60;.
func (r ApiGetCDRsRequest) Order(order string) ApiGetCDRsRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r ApiGetCDRsRequest) Direction(direction string) ApiGetCDRsRequest {
	r.direction = &direction
	return r
}

// Filter list of items
func (r ApiGetCDRsRequest) Search(search string) ApiGetCDRsRequest {
	r.search = &search
	return r
}

// Filter list of items
func (r ApiGetCDRsRequest) CallDirection(callDirection string) ApiGetCDRsRequest {
	r.callDirection = &callDirection
	return r
}

// Filter by source_extension and destination_extension. A wildcard (underscore) can be used at the start and/or the end of the number.
func (r ApiGetCDRsRequest) Number(number string) ApiGetCDRsRequest {
	r.number = &number
	return r
}

// Filter by tags. Each tag MUST be separated by a coma (,). Many tag will perform a logical AND.
func (r ApiGetCDRsRequest) Tags(tags []string) ApiGetCDRsRequest {
	r.tags = &tags
	return r
}

// Filter by user_uuid. Many uuid can be specified. Each uuid MUST be separated by a comma (,). Many uuid will perform a logical OR.
func (r ApiGetCDRsRequest) UserUuid(userUuid []string) ApiGetCDRsRequest {
	r.userUuid = &userUuid
	return r
}

// Ignore CDR created before the given CDR ID.
func (r ApiGetCDRsRequest) FromId(fromId int32) ApiGetCDRsRequest {
	r.fromId = &fromId
	return r
}

// Should the query include sub-tenants
func (r ApiGetCDRsRequest) Recurse(recurse bool) ApiGetCDRsRequest {
	r.recurse = &recurse
	return r
}

// Will only return one result for the selected field
func (r ApiGetCDRsRequest) Distinct(distinct string) ApiGetCDRsRequest {
	r.distinct = &distinct
	return r
}

// Filter by recorded status.
func (r ApiGetCDRsRequest) Recorded(recorded bool) ApiGetCDRsRequest {
	r.recorded = &recorded
	return r
}

// Overrides the Content-Type header. This is used to be able to have a downloadable link. Allowed values are \&quot;csv\&quot; and \&quot;json\&quot;
func (r ApiGetCDRsRequest) Format(format string) ApiGetCDRsRequest {
	r.format = &format
	return r
}

func (r ApiGetCDRsRequest) Execute() (*CDRList, *http.Response, error) {
	return r.ApiService.GetCDRsExecute(r)
}

/*
GetCDRs List CDR

**Required ACL:** `call-logd.cdr.read`
This endpoint allow to use `?token={token_uuid}` and `?tenant={tenant_uuid}` query string to bypass headers 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCDRsRequest
*/
func (a *CdrAPIService) GetCDRs(ctx context.Context) ApiGetCDRsRequest {
	return ApiGetCDRsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CDRList
func (a *CdrAPIService) GetCDRsExecute(r ApiGetCDRsRequest) (*CDRList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CDRList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CdrAPIService.GetCDRs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	if r.until != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "until", r.until, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.callDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "call_direction", r.callDirection, "")
	}
	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	}
	if r.tags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags", r.tags, "csv")
	}
	if r.userUuid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_uuid", r.userUuid, "csv")
	}
	if r.fromId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_id", r.fromId, "")
	}
	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "")
	} else {
		var defaultValue bool = false
		r.recurse = &defaultValue
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "")
	}
	if r.recorded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recorded", r.recorded, "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCurrentUserCDRRequest struct {
	ctx context.Context
	ApiService CdrAPI
	from *time.Time
	until *time.Time
	limit *int32
	offset *int32
	order *string
	direction *string
	search *string
	callDirection *string
	number *string
	fromId *int32
	userUuid *[]string
	distinct *string
	recorded *bool
	format *string
}

// Ignore calls before the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will start at the oldest available call with timezone UTC. 
func (r ApiGetCurrentUserCDRRequest) From(from time.Time) ApiGetCurrentUserCDRRequest {
	r.from = &from
	return r
}

// Ignore calls starting at or after the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will include the current day. 
func (r ApiGetCurrentUserCDRRequest) Until(until time.Time) ApiGetCurrentUserCDRRequest {
	r.until = &until
	return r
}

// Maximum number of items to return in the list. Default to 1000 if not specified.
func (r ApiGetCurrentUserCDRRequest) Limit(limit int32) ApiGetCurrentUserCDRRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r ApiGetCurrentUserCDRRequest) Offset(offset int32) ApiGetCurrentUserCDRRequest {
	r.offset = &offset
	return r
}

// Name of the field to use for sorting the list of items returned. Unsupported values: &#x60;&#x60;end&#x60;&#x60;.
func (r ApiGetCurrentUserCDRRequest) Order(order string) ApiGetCurrentUserCDRRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r ApiGetCurrentUserCDRRequest) Direction(direction string) ApiGetCurrentUserCDRRequest {
	r.direction = &direction
	return r
}

// Filter list of items
func (r ApiGetCurrentUserCDRRequest) Search(search string) ApiGetCurrentUserCDRRequest {
	r.search = &search
	return r
}

// Filter list of items
func (r ApiGetCurrentUserCDRRequest) CallDirection(callDirection string) ApiGetCurrentUserCDRRequest {
	r.callDirection = &callDirection
	return r
}

// Filter by source_extension and destination_extension. A wildcard (underscore) can be used at the start and/or the end of the number.
func (r ApiGetCurrentUserCDRRequest) Number(number string) ApiGetCurrentUserCDRRequest {
	r.number = &number
	return r
}

// Ignore CDR created before the given CDR ID.
func (r ApiGetCurrentUserCDRRequest) FromId(fromId int32) ApiGetCurrentUserCDRRequest {
	r.fromId = &fromId
	return r
}

// Filter by user_uuid. Many uuid can be specified. Each uuid MUST be separated by a comma (,). Many uuid will perform a logical OR.
func (r ApiGetCurrentUserCDRRequest) UserUuid(userUuid []string) ApiGetCurrentUserCDRRequest {
	r.userUuid = &userUuid
	return r
}

// Will only return one result for the selected field
func (r ApiGetCurrentUserCDRRequest) Distinct(distinct string) ApiGetCurrentUserCDRRequest {
	r.distinct = &distinct
	return r
}

// Filter by recorded status.
func (r ApiGetCurrentUserCDRRequest) Recorded(recorded bool) ApiGetCurrentUserCDRRequest {
	r.recorded = &recorded
	return r
}

// Overrides the Content-Type header. This is used to be able to have a downloadable link. Allowed values are \&quot;csv\&quot; and \&quot;json\&quot;
func (r ApiGetCurrentUserCDRRequest) Format(format string) ApiGetCurrentUserCDRRequest {
	r.format = &format
	return r
}

func (r ApiGetCurrentUserCDRRequest) Execute() (*CDRList, *http.Response, error) {
	return r.ApiService.GetCurrentUserCDRExecute(r)
}

/*
GetCurrentUserCDR List CDR of the authenticated user

**Required ACL:** `call-logd.users.me.cdr.read`
This endpoint allow to use `?token={token_uuid}` and `?tenant={tenant_uuid}` query string to bypass headers 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCurrentUserCDRRequest
*/
func (a *CdrAPIService) GetCurrentUserCDR(ctx context.Context) ApiGetCurrentUserCDRRequest {
	return ApiGetCurrentUserCDRRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CDRList
func (a *CdrAPIService) GetCurrentUserCDRExecute(r ApiGetCurrentUserCDRRequest) (*CDRList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CDRList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CdrAPIService.GetCurrentUserCDR")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/me/cdr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	if r.until != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "until", r.until, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.callDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "call_direction", r.callDirection, "")
	}
	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	}
	if r.fromId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_id", r.fromId, "")
	}
	if r.userUuid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_uuid", r.userUuid, "csv")
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "")
	}
	if r.recorded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recorded", r.recorded, "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserCDRRequest struct {
	ctx context.Context
	ApiService CdrAPI
	userUuid string
	from *time.Time
	until *time.Time
	limit *int32
	offset *int32
	order *string
	direction *string
	search *string
	callDirection *string
	number *string
	fromId *int32
	distinct *string
	recorded *bool
	format *string
}

// Ignore calls before the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will start at the oldest available call with timezone UTC. 
func (r ApiGetUserCDRRequest) From(from time.Time) ApiGetUserCDRRequest {
	r.from = &from
	return r
}

// Ignore calls starting at or after the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will include the current day. 
func (r ApiGetUserCDRRequest) Until(until time.Time) ApiGetUserCDRRequest {
	r.until = &until
	return r
}

// Maximum number of items to return in the list. Default to 1000 if not specified.
func (r ApiGetUserCDRRequest) Limit(limit int32) ApiGetUserCDRRequest {
	r.limit = &limit
	return r
}

// Number of items to skip over in the list. Useful for pagination.
func (r ApiGetUserCDRRequest) Offset(offset int32) ApiGetUserCDRRequest {
	r.offset = &offset
	return r
}

// Name of the field to use for sorting the list of items returned. Unsupported values: &#x60;&#x60;end&#x60;&#x60;.
func (r ApiGetUserCDRRequest) Order(order string) ApiGetUserCDRRequest {
	r.order = &order
	return r
}

// Sort list of items in &#39;asc&#39; (ascending) or &#39;desc&#39; (descending) order
func (r ApiGetUserCDRRequest) Direction(direction string) ApiGetUserCDRRequest {
	r.direction = &direction
	return r
}

// Filter list of items
func (r ApiGetUserCDRRequest) Search(search string) ApiGetUserCDRRequest {
	r.search = &search
	return r
}

// Filter list of items
func (r ApiGetUserCDRRequest) CallDirection(callDirection string) ApiGetUserCDRRequest {
	r.callDirection = &callDirection
	return r
}

// Filter by source_extension and destination_extension. A wildcard (underscore) can be used at the start and/or the end of the number.
func (r ApiGetUserCDRRequest) Number(number string) ApiGetUserCDRRequest {
	r.number = &number
	return r
}

// Ignore CDR created before the given CDR ID.
func (r ApiGetUserCDRRequest) FromId(fromId int32) ApiGetUserCDRRequest {
	r.fromId = &fromId
	return r
}

// Will only return one result for the selected field
func (r ApiGetUserCDRRequest) Distinct(distinct string) ApiGetUserCDRRequest {
	r.distinct = &distinct
	return r
}

// Filter by recorded status.
func (r ApiGetUserCDRRequest) Recorded(recorded bool) ApiGetUserCDRRequest {
	r.recorded = &recorded
	return r
}

// Overrides the Content-Type header. This is used to be able to have a downloadable link. Allowed values are \&quot;csv\&quot; and \&quot;json\&quot;
func (r ApiGetUserCDRRequest) Format(format string) ApiGetUserCDRRequest {
	r.format = &format
	return r
}

func (r ApiGetUserCDRRequest) Execute() (*CDRList, *http.Response, error) {
	return r.ApiService.GetUserCDRExecute(r)
}

/*
GetUserCDR List CDR of the given user

**Required ACL:** `call-logd.users.{user_uuid}.cdr.read`
This endpoint allow to use `?token={token_uuid}` and `?tenant={tenant_uuid}` query string to bypass headers 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userUuid UUID of the given user
 @return ApiGetUserCDRRequest
*/
func (a *CdrAPIService) GetUserCDR(ctx context.Context, userUuid string) ApiGetUserCDRRequest {
	return ApiGetUserCDRRequest{
		ApiService: a,
		ctx: ctx,
		userUuid: userUuid,
	}
}

// Execute executes the request
//  @return CDRList
func (a *CdrAPIService) GetUserCDRExecute(r ApiGetUserCDRRequest) (*CDRList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CDRList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CdrAPIService.GetUserCDR")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_uuid}/cdr"
	localVarPath = strings.Replace(localVarPath, "{"+"user_uuid"+"}", url.PathEscape(parameterValueToString(r.userUuid, "userUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	if r.until != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "until", r.until, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.callDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "call_direction", r.callDirection, "")
	}
	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	}
	if r.fromId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_id", r.fromId, "")
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "")
	}
	if r.recorded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recorded", r.recorded, "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
