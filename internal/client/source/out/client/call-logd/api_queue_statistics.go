/*
accent-call-logd

Consult call logs from a REST API

API version: 1.0.0
Contact: help@accentvoice.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package call-logd

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


type QueueStatisticsAPI interface {

	/*
	GetQueueQoSStatistics QoS statistics for a specific queue

	**Required ACL:** `call-logd.queues.statistics.{queue_id}.qos.read`
QoS thresholds implicitly include a starting 0 and ending to infinite (null).
Statistics for a queue are aggregated by the `interval` query parameter, or if not
specified or empty, as a unique result over the period. The period is specified by the
`from` and `until` query parameters. The last result returned by this route is always the
aggregation of all calls over the whole specified period.
**Notice**: Statistics are generated every 6 hours 

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param queueId ID of the queue.
	@return ApiGetQueueQoSStatisticsRequest
	*/
	GetQueueQoSStatistics(ctx context.Context, queueId int32) ApiGetQueueQoSStatisticsRequest

	// GetQueueQoSStatisticsExecute executes the request
	//  @return QueueQoSStatistics
	GetQueueQoSStatisticsExecute(r ApiGetQueueQoSStatisticsRequest) (*QueueQoSStatistics, *http.Response, error)

	/*
	GetQueueStatistics Statistics for a specific queue

	**Required ACL:** `call-logd.queues.statistics.{queue_id}.read` Statistics for a queue are aggregated by the `interval` query parameter, or if not
specified or empty, as a unique result over the period. The period is specified by the
`from` and `until` query parameters. The last result returned by this route is always the
aggregation of all calls over the whole specified period.
**Notice**: Statistics are generated every 6 hours 

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param queueId ID of the queue.
	@return ApiGetQueueStatisticsRequest
	*/
	GetQueueStatistics(ctx context.Context, queueId int32) ApiGetQueueStatisticsRequest

	// GetQueueStatisticsExecute executes the request
	//  @return QueueStatistics
	GetQueueStatisticsExecute(r ApiGetQueueStatisticsRequest) (*QueueStatistics, *http.Response, error)

	/*
	GetQueuesStatistics Statistics for all queues

	**Required ACL:** `call-logd.queues.statistics.read`
Statistics are aggregated by queues over the period specified by the `from` and `until` query parameters.
**Notice**: Statistics are generated every 6 hours 

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetQueuesStatisticsRequest
	*/
	GetQueuesStatistics(ctx context.Context) ApiGetQueuesStatisticsRequest

	// GetQueuesStatisticsExecute executes the request
	//  @return QueuesStatistics
	GetQueuesStatisticsExecute(r ApiGetQueuesStatisticsRequest) (*QueuesStatistics, *http.Response, error)
}

// QueueStatisticsAPIService QueueStatisticsAPI service
type QueueStatisticsAPIService service

type ApiGetQueueQoSStatisticsRequest struct {
	ctx context.Context
	ApiService QueueStatisticsAPI
	queueId int32
	accentTenant *string
	from *time.Time
	until *time.Time
	interval *string
	qosThresholds *[]int32
	dayStartTime *string
	dayEndTime *string
	weekDays *[]int32
	timezone *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiGetQueueQoSStatisticsRequest) AccentTenant(accentTenant string) ApiGetQueueQoSStatisticsRequest {
	r.accentTenant = &accentTenant
	return r
}

// Ignore calls before the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will start at the oldest available call with timezone UTC. 
func (r ApiGetQueueQoSStatisticsRequest) From(from time.Time) ApiGetQueueQoSStatisticsRequest {
	r.from = &from
	return r
}

// Ignore calls starting at or after the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will include the current day. 
func (r ApiGetQueueQoSStatisticsRequest) Until(until time.Time) ApiGetQueueQoSStatisticsRequest {
	r.until = &until
	return r
}

// Aggregation interval. An empty value means no interval, so an aggregation on all values.
func (r ApiGetQueueQoSStatisticsRequest) Interval(interval string) ApiGetQueueQoSStatisticsRequest {
	r.interval = &interval
	return r
}

// The steps of quality of service times used for the interval generation.
func (r ApiGetQueueQoSStatisticsRequest) QosThresholds(qosThresholds []int32) ApiGetQueueQoSStatisticsRequest {
	r.qosThresholds = &qosThresholds
	return r
}

// The time at which a day starts, inclusively. Accepted format is &#x60;HH:MM&#x60;, minutes are ignored.
func (r ApiGetQueueQoSStatisticsRequest) DayStartTime(dayStartTime string) ApiGetQueueQoSStatisticsRequest {
	r.dayStartTime = &dayStartTime
	return r
}

// The time at which a day ends, inclusively. Accepted format is &#x60;HH:MM&#x60;, minutes are ignored.
func (r ApiGetQueueQoSStatisticsRequest) DayEndTime(dayEndTime string) ApiGetQueueQoSStatisticsRequest {
	r.dayEndTime = &dayEndTime
	return r
}

// The days of the week that should be included. A week starts on Monday (1) and ends on Sunday (7).
func (r ApiGetQueueQoSStatisticsRequest) WeekDays(weekDays []int32) ApiGetQueueQoSStatisticsRequest {
	r.weekDays = &weekDays
	return r
}

// Name of the timezone to use for dates and times. Example: America/New_York. Valid timezones are defined by the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Tz_database\&quot;&gt;Time Zone Database&lt;/a&gt; version installed on the server. 
func (r ApiGetQueueQoSStatisticsRequest) Timezone(timezone string) ApiGetQueueQoSStatisticsRequest {
	r.timezone = &timezone
	return r
}

func (r ApiGetQueueQoSStatisticsRequest) Execute() (*QueueQoSStatistics, *http.Response, error) {
	return r.ApiService.GetQueueQoSStatisticsExecute(r)
}

/*
GetQueueQoSStatistics QoS statistics for a specific queue

**Required ACL:** `call-logd.queues.statistics.{queue_id}.qos.read`
QoS thresholds implicitly include a starting 0 and ending to infinite (null).
Statistics for a queue are aggregated by the `interval` query parameter, or if not
specified or empty, as a unique result over the period. The period is specified by the
`from` and `until` query parameters. The last result returned by this route is always the
aggregation of all calls over the whole specified period.
**Notice**: Statistics are generated every 6 hours 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param queueId ID of the queue.
 @return ApiGetQueueQoSStatisticsRequest
*/
func (a *QueueStatisticsAPIService) GetQueueQoSStatistics(ctx context.Context, queueId int32) ApiGetQueueQoSStatisticsRequest {
	return ApiGetQueueQoSStatisticsRequest{
		ApiService: a,
		ctx: ctx,
		queueId: queueId,
	}
}

// Execute executes the request
//  @return QueueQoSStatistics
func (a *QueueStatisticsAPIService) GetQueueQoSStatisticsExecute(r ApiGetQueueQoSStatisticsRequest) (*QueueQoSStatistics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueueQoSStatistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueueStatisticsAPIService.GetQueueQoSStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/queues/{queue_id}/statistics/qos"
	localVarPath = strings.Replace(localVarPath, "{"+"queue_id"+"}", url.PathEscape(parameterValueToString(r.queueId, "queueId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	if r.until != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "until", r.until, "")
	}
	if r.interval != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interval", r.interval, "")
	}
	if r.qosThresholds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "qos_thresholds", r.qosThresholds, "csv")
	}
	if r.dayStartTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "day_start_time", r.dayStartTime, "")
	}
	if r.dayEndTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "day_end_time", r.dayEndTime, "")
	}
	if r.weekDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "week_days", r.weekDays, "csv")
	} else {
		var defaultValue []int32 = [1,2,3,4,5,6,7]
		r.weekDays = &defaultValue
	}
	if r.timezone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timezone", r.timezone, "")
	} else {
		var defaultValue string = "UTC"
		r.timezone = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetQueueStatisticsRequest struct {
	ctx context.Context
	ApiService QueueStatisticsAPI
	queueId int32
	accentTenant *string
	from *time.Time
	until *time.Time
	interval *string
	qosThreshold *int32
	dayStartTime *string
	dayEndTime *string
	weekDays *[]int32
	timezone *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiGetQueueStatisticsRequest) AccentTenant(accentTenant string) ApiGetQueueStatisticsRequest {
	r.accentTenant = &accentTenant
	return r
}

// Ignore calls before the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will start at the oldest available call with timezone UTC. 
func (r ApiGetQueueStatisticsRequest) From(from time.Time) ApiGetQueueStatisticsRequest {
	r.from = &from
	return r
}

// Ignore calls starting at or after the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will include the current day. 
func (r ApiGetQueueStatisticsRequest) Until(until time.Time) ApiGetQueueStatisticsRequest {
	r.until = &until
	return r
}

// Aggregation interval. An empty value means no interval, so an aggregation on all values.
func (r ApiGetQueueStatisticsRequest) Interval(interval string) ApiGetQueueStatisticsRequest {
	r.interval = &interval
	return r
}

// The number of seconds representing a good quality of service.
func (r ApiGetQueueStatisticsRequest) QosThreshold(qosThreshold int32) ApiGetQueueStatisticsRequest {
	r.qosThreshold = &qosThreshold
	return r
}

// The time at which a day starts, inclusively. Accepted format is &#x60;HH:MM&#x60;, minutes are ignored.
func (r ApiGetQueueStatisticsRequest) DayStartTime(dayStartTime string) ApiGetQueueStatisticsRequest {
	r.dayStartTime = &dayStartTime
	return r
}

// The time at which a day ends, inclusively. Accepted format is &#x60;HH:MM&#x60;, minutes are ignored.
func (r ApiGetQueueStatisticsRequest) DayEndTime(dayEndTime string) ApiGetQueueStatisticsRequest {
	r.dayEndTime = &dayEndTime
	return r
}

// The days of the week that should be included. A week starts on Monday (1) and ends on Sunday (7).
func (r ApiGetQueueStatisticsRequest) WeekDays(weekDays []int32) ApiGetQueueStatisticsRequest {
	r.weekDays = &weekDays
	return r
}

// Name of the timezone to use for dates and times. Example: America/New_York. Valid timezones are defined by the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Tz_database\&quot;&gt;Time Zone Database&lt;/a&gt; version installed on the server. 
func (r ApiGetQueueStatisticsRequest) Timezone(timezone string) ApiGetQueueStatisticsRequest {
	r.timezone = &timezone
	return r
}

func (r ApiGetQueueStatisticsRequest) Execute() (*QueueStatistics, *http.Response, error) {
	return r.ApiService.GetQueueStatisticsExecute(r)
}

/*
GetQueueStatistics Statistics for a specific queue

**Required ACL:** `call-logd.queues.statistics.{queue_id}.read` Statistics for a queue are aggregated by the `interval` query parameter, or if not
specified or empty, as a unique result over the period. The period is specified by the
`from` and `until` query parameters. The last result returned by this route is always the
aggregation of all calls over the whole specified period.
**Notice**: Statistics are generated every 6 hours 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param queueId ID of the queue.
 @return ApiGetQueueStatisticsRequest
*/
func (a *QueueStatisticsAPIService) GetQueueStatistics(ctx context.Context, queueId int32) ApiGetQueueStatisticsRequest {
	return ApiGetQueueStatisticsRequest{
		ApiService: a,
		ctx: ctx,
		queueId: queueId,
	}
}

// Execute executes the request
//  @return QueueStatistics
func (a *QueueStatisticsAPIService) GetQueueStatisticsExecute(r ApiGetQueueStatisticsRequest) (*QueueStatistics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueueStatistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueueStatisticsAPIService.GetQueueStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/queues/{queue_id}/statistics"
	localVarPath = strings.Replace(localVarPath, "{"+"queue_id"+"}", url.PathEscape(parameterValueToString(r.queueId, "queueId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	if r.until != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "until", r.until, "")
	}
	if r.interval != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interval", r.interval, "")
	}
	if r.qosThreshold != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "qos_threshold", r.qosThreshold, "")
	}
	if r.dayStartTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "day_start_time", r.dayStartTime, "")
	}
	if r.dayEndTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "day_end_time", r.dayEndTime, "")
	}
	if r.weekDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "week_days", r.weekDays, "csv")
	} else {
		var defaultValue []int32 = [1,2,3,4,5,6,7]
		r.weekDays = &defaultValue
	}
	if r.timezone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timezone", r.timezone, "")
	} else {
		var defaultValue string = "UTC"
		r.timezone = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetQueuesStatisticsRequest struct {
	ctx context.Context
	ApiService QueueStatisticsAPI
	accentTenant *string
	from *time.Time
	until *time.Time
	qosThreshold *int32
	dayStartTime *string
	dayEndTime *string
	weekDays *[]int32
	timezone *string
}

// The tenant&#39;s UUID, defining the ownership of a given resource.
func (r ApiGetQueuesStatisticsRequest) AccentTenant(accentTenant string) ApiGetQueuesStatisticsRequest {
	r.accentTenant = &accentTenant
	return r
}

// Ignore calls before the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will start at the oldest available call with timezone UTC. 
func (r ApiGetQueuesStatisticsRequest) From(from time.Time) ApiGetQueuesStatisticsRequest {
	r.from = &from
	return r
}

// Ignore calls starting at or after the given date. Format is &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO-8601&lt;/a&gt;. Timezone will be converted according to the &#x60;timezone&#x60; parameter. If missing, the statistics will include the current day. 
func (r ApiGetQueuesStatisticsRequest) Until(until time.Time) ApiGetQueuesStatisticsRequest {
	r.until = &until
	return r
}

// The number of seconds representing a good quality of service.
func (r ApiGetQueuesStatisticsRequest) QosThreshold(qosThreshold int32) ApiGetQueuesStatisticsRequest {
	r.qosThreshold = &qosThreshold
	return r
}

// The time at which a day starts, inclusively. Accepted format is &#x60;HH:MM&#x60;, minutes are ignored.
func (r ApiGetQueuesStatisticsRequest) DayStartTime(dayStartTime string) ApiGetQueuesStatisticsRequest {
	r.dayStartTime = &dayStartTime
	return r
}

// The time at which a day ends, inclusively. Accepted format is &#x60;HH:MM&#x60;, minutes are ignored.
func (r ApiGetQueuesStatisticsRequest) DayEndTime(dayEndTime string) ApiGetQueuesStatisticsRequest {
	r.dayEndTime = &dayEndTime
	return r
}

// The days of the week that should be included. A week starts on Monday (1) and ends on Sunday (7).
func (r ApiGetQueuesStatisticsRequest) WeekDays(weekDays []int32) ApiGetQueuesStatisticsRequest {
	r.weekDays = &weekDays
	return r
}

// Name of the timezone to use for dates and times. Example: America/New_York. Valid timezones are defined by the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Tz_database\&quot;&gt;Time Zone Database&lt;/a&gt; version installed on the server. 
func (r ApiGetQueuesStatisticsRequest) Timezone(timezone string) ApiGetQueuesStatisticsRequest {
	r.timezone = &timezone
	return r
}

func (r ApiGetQueuesStatisticsRequest) Execute() (*QueuesStatistics, *http.Response, error) {
	return r.ApiService.GetQueuesStatisticsExecute(r)
}

/*
GetQueuesStatistics Statistics for all queues

**Required ACL:** `call-logd.queues.statistics.read`
Statistics are aggregated by queues over the period specified by the `from` and `until` query parameters.
**Notice**: Statistics are generated every 6 hours 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetQueuesStatisticsRequest
*/
func (a *QueueStatisticsAPIService) GetQueuesStatistics(ctx context.Context) ApiGetQueuesStatisticsRequest {
	return ApiGetQueuesStatisticsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueuesStatistics
func (a *QueueStatisticsAPIService) GetQueuesStatisticsExecute(r ApiGetQueuesStatisticsRequest) (*QueuesStatistics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueuesStatistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueueStatisticsAPIService.GetQueuesStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/queues/statistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	if r.until != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "until", r.until, "")
	}
	if r.qosThreshold != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "qos_threshold", r.qosThreshold, "")
	}
	if r.dayStartTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "day_start_time", r.dayStartTime, "")
	}
	if r.dayEndTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "day_end_time", r.dayEndTime, "")
	}
	if r.weekDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "week_days", r.weekDays, "csv")
	} else {
		var defaultValue []int32 = [1,2,3,4,5,6,7]
		r.weekDays = &defaultValue
	}
	if r.timezone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timezone", r.timezone, "")
	} else {
		var defaultValue string = "UTC"
		r.timezone = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accentTenant != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accent-Tenant", r.accentTenant, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accent_auth_token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
