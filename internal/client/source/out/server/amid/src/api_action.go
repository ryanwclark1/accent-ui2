/*
 * accent-amid
 *
 * Send AMI actions to Asterisk, providing token based authentication.
 *
 * API version: 0.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amidserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// ActionAPIController binds http requests to an api service and writes the service results to the http response
type ActionAPIController struct {
	service      ActionAPIServicer
	errorHandler ErrorHandler
}

// ActionAPIOption for how the controller is set up.
type ActionAPIOption func(*ActionAPIController)

// WithActionAPIErrorHandler inject ErrorHandler into controller
func WithActionAPIErrorHandler(h ErrorHandler) ActionAPIOption {
	return func(c *ActionAPIController) {
		c.errorHandler = h
	}
}

// NewActionAPIController creates a default api controller
func NewActionAPIController(s ActionAPIServicer, opts ...ActionAPIOption) Router {
	controller := &ActionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ActionAPIController
func (c *ActionAPIController) Routes() Routes {
	return Routes{
		"ActionAsteriskManager": Route{
			strings.ToUpper("Post"),
			"/1.0/action/{action}",
			c.ActionAsteriskManager,
		},
	}
}

// ActionAsteriskManager - AMI action
func (c *ActionAPIController) ActionAsteriskManager(w http.ResponseWriter, r *http.Request) {
	actionParam := chi.URLParam(r, "action")
	if actionParam == "" {
		c.errorHandler(w, r, &RequiredError{"action"}, nil)
		return
	}
	actionArgumentsParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&actionArgumentsParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ActionAsteriskManager(r.Context(), actionParam, actionArgumentsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
