/*
 * accent-amid
 *
 * Send AMI actions to Asterisk, providing token based authentication.
 *
 * API version: 0.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package amidserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// CommandAPIController binds http requests to an api service and writes the service results to the http response
type CommandAPIController struct {
	service      CommandAPIServicer
	errorHandler ErrorHandler
}

// CommandAPIOption for how the controller is set up.
type CommandAPIOption func(*CommandAPIController)

// WithCommandAPIErrorHandler inject ErrorHandler into controller
func WithCommandAPIErrorHandler(h ErrorHandler) CommandAPIOption {
	return func(c *CommandAPIController) {
		c.errorHandler = h
	}
}

// NewCommandAPIController creates a default api controller
func NewCommandAPIController(s CommandAPIServicer, opts ...CommandAPIOption) Router {
	controller := &CommandAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CommandAPIController
func (c *CommandAPIController) Routes() Routes {
	return Routes{
		"CommandAsteriskManager": Route{
			strings.ToUpper("Post"),
			"/1.0/action/Command",
			c.CommandAsteriskManager,
		},
	}
}

// CommandAsteriskManager - AMI command
func (c *CommandAPIController) CommandAsteriskManager(w http.ResponseWriter, r *http.Request) {
	commandParam := Command{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&commandParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCommandRequired(commandParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCommandConstraints(commandParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CommandAsteriskManager(r.Context(), commandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
