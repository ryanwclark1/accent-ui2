/*
 * accent-setupd
 *
 * Initialize Accent Engine from a REST API
 *
 * API version: 1.0.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package setupdserver

type SetupRequest struct {

	// The UUID identifying this instance on Nestbox. The engine_instance_uuid should only be specified if the instance has already been registered on the specified Nestbox. Omitting this field for an instance that is already registered will create a duplicate entry on the Nestbox.
	EngineInstanceUuid string `json:"engine_instance_uuid,omitempty"`

	// IP address of the engine
	EngineInternalAddress string `json:"engine_internal_address,omitempty"`

	// The interface language for the Accent Engine (either `en_US` or `fr_FR`)
	EngineLanguage string `json:"engine_language"`

	// Whether the GNU GPLv3 license is accepted
	EngineLicense bool `json:"engine_license"`

	// Password of the first administrator ``root`` on the engine
	EnginePassword string `json:"engine_password"`

	// Enable ICE support. This is required for WebRTC. A STUN server must be defined in the `engine_rtp_stunaddr` field when using `engine_rtp_icesupport=true`.
	EngineRtpIcesupport bool `json:"engine_rtp_icesupport,omitempty"`

	// The address of the STUN server to use for WebRTC
	EngineRtpStunaddr string `json:"engine_rtp_stunaddr,omitempty"`

	// Host used by Nestbox to contact the engine
	NestboxEngineHost string `json:"nestbox_engine_host,omitempty"`

	// Port used by Nestbox to contact the engine
	NestboxEnginePort int32 `json:"nestbox_engine_port,omitempty"`

	// Host of the Nestbox where the engine will register. Specifying this key will make nestbox and `engine_internal_address` keys mandatory. Accent will be connected to the specified Nestbox instance.
	NestboxHost string `json:"nestbox_host,omitempty"`

	// Name of the engine in Nestbox
	NestboxInstanceName string `json:"nestbox_instance_name,omitempty"`

	// Port of the Nestbox where the engine will register
	NestboxPort int32 `json:"nestbox_port,omitempty"`

	// Nestbox username used to register the engine
	NestboxServiceId string `json:"nestbox_service_id,omitempty"`

	// Nestbox password used to register the engine
	NestboxServiceKey string `json:"nestbox_service_key,omitempty"`

	// Should the certificate used for HTTPS be verified? The setup will abort if the certificate fails the verification.
	NestboxVerifyCertificate bool `json:"nestbox_verify_certificate,omitempty"`
}

// AssertSetupRequestRequired checks if the required fields are not zero-ed
func AssertSetupRequestRequired(obj SetupRequest) error {
	elements := map[string]interface{}{
		"engine_language": obj.EngineLanguage,
		"engine_license":  obj.EngineLicense,
		"engine_password": obj.EnginePassword,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertSetupRequestConstraints checks if the values respects the defined constraints
func AssertSetupRequestConstraints(obj SetupRequest) error {
	return nil
}
