openapi: 3.0.1
info:
  contact:
    email: help@accentvoice.io
    name: Accent Team
    url: https://accentvoice.io/
  description: Control your message and presence from a REST API
  title: accent-chatd
  version: 1.0.0
  x-logo:
    altText: Accent Logo
    backgroundColor: '#FAFAFA'
    url: https://accentvoice.io/images/logo-black.svg
servers:
- url: http://api.accentvoice.io/1.0
- url: https://api.accentvoice.io/1.0
security:
- accent_auth_token: []
paths:
  /config:
    get:
      description: '**Required ACL:** `chatd.config.read`'
      operationId: getConfig
      responses:
        "200":
          content: {}
          description: The configuration of the service
      summary: Show the current configuration
      tags:
      - config
  /status:
    get:
      description: '**Required ACL:** `chatd.status.read`'
      operationId: getStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusSummary'
          description: The internal infos of accent-chatd
      summary: Print infos about internal status of accent-chatd
      tags:
      - status
  /users/me/rooms:
    get:
      description: '**Required ACL:** `chatd.users.me.rooms.read`'
      operationId: get_room
      parameters:
      - description: "Filter by user_uuid. Many uuid can be specified. A logical AND\
          \ is used for filtering. Each uuid MUST be separated by a comma (,)."
        explode: false
        in: query
        name: user_uuid
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rooms'
          description: Room
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: The resource requested was not found on the server
      summary: Get room
      tags:
      - rooms
    post:
      description: |
        **Required ACL:** `chatd.users.me.rooms.create` **Warning**: **>=22.16**: If a room with the same participants exists, it will be returned instead of creating new one. In this case, no other parameter will be taken into account and the return code will be 201. This behaviour will disappear in the future and a 409 error will be raised.
      operationId: create_room
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
        description: room to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: Room created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Invalid request
      summary: Create room
      tags:
      - rooms
      x-codegen-request-body-name: body
  /users/me/rooms/messages:
    get:
      description: '**Required ACL:** `chatd.users.me.rooms.messages.read`'
      operationId: list_rooms_messages
      parameters:
      - description: Sort list of items in 'asc' (ascending) or 'desc' (descending)
          order
        in: query
        name: direction
        schema:
          enum:
          - asc
          - desc
          type: string
      - description: Maximum number of items to return in the list
        in: query
        name: limit
        schema:
          type: integer
      - description: Name of the field to use for sorting the list of items returned.
        in: query
        name: order
        schema:
          type: string
      - description: Number of items to skip over in the list. Useful for pagination.
        in: query
        name: offset
        schema:
          type: integer
      - description: Search term for filtering a list of items. Only items with a
          field containing the search term will be returned.
        in: query
        name: search
        schema:
          type: string
      - description: Distinct list results by field. Always picks the latest entry.
          Required if `search` is not specified.
        in: query
        name: distinct
        schema:
          enum:
          - room_uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
          description: Messages
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Invalid request
      summary: List rooms messages
      tags:
      - rooms
      - messages
  /users/me/rooms/{room_uuid}/messages:
    get:
      description: "**Required ACL:** `chatd.users.me.rooms.{room_uuid}.messages.read`"
      operationId: list_room_message
      parameters:
      - description: The UUID of the room
        in: path
        name: room_uuid
        required: true
        schema:
          type: string
      - description: "The date and time from which to retrieve messages. Example:\
          \ 2019-06-12T10:00:00.000+00:00"
        in: query
        name: from_date
        schema:
          format: date-time
          type: string
      - description: Sort list of items in 'asc' (ascending) or 'desc' (descending)
          order
        in: query
        name: direction
        schema:
          enum:
          - asc
          - desc
          type: string
      - description: Maximum number of items to return in the list
        in: query
        name: limit
        schema:
          type: integer
      - description: Name of the field to use for sorting the list of items returned.
        in: query
        name: order
        schema:
          type: string
      - description: Number of items to skip over in the list. Useful for pagination.
        in: query
        name: offset
        schema:
          type: integer
      - description: Search term for filtering a list of items. Only items with a
          field containing the search term will be returned. Required if `distinct`
          is not specified.
        in: query
        name: search
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
          description: Messages
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: The resource requested was not found on the server
      summary: List room messages
      tags:
      - rooms
      - messages
    post:
      description: "**Required ACL:** `chatd.users.me.rooms.{room_uuid}.messages.create`"
      operationId: create_room_message
      parameters:
      - description: The UUID of the room
        in: path
        name: room_uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMessagePOST'
        description: message to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: Message created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: The resource requested was not found on the server
      summary: Create room messages
      tags:
      - rooms
      - messages
      x-codegen-request-body-name: body
  /users/presences:
    get:
      description: '**Required ACL:** `chatd.users.presences.read`'
      operationId: list_presences
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      - description: Should the query include sub-tenants
        in: query
        name: recurse
        schema:
          default: false
          type: boolean
      - description: "Filter by user_uuid. Many uuid can be specified. A logical AND\
          \ is used for filtering. Each uuid MUST be separated by a comma (,)."
        explode: false
        in: query
        name: user_uuid
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresenceList'
          description: Presences list
      summary: List presences
      tags:
      - presences
  /users/{user_uuid}/presences:
    get:
      description: "**Required ACL:** `chatd.users.{user_uuid}.presences.read`"
      operationId: get_user_presence
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      - description: The UUID of the user
        in: path
        name: user_uuid
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Presence'
          description: Presence
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: The resource requested was not found on the server
      summary: Get user presence
      tags:
      - presences
    put:
      description: "**Required ACL:** `chatd.users.{user_uuid}.presences.update`"
      operationId: update_user_presence
      parameters:
      - description: "The tenant's UUID, defining the ownership of a given resource."
        in: header
        name: Accent-Tenant
        schema:
          type: string
      - description: The UUID of the user
        in: path
        name: user_uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Presence'
        required: true
      responses:
        "204":
          content: {}
          description: Resource was updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: The resource requested was not found on the server
      summary: Update user presence
      tags:
      - presences
      x-codegen-request-body-name: body
  /users/{user_uuid}/teams/presence:
    post:
      operationId: update_teams_presence
      parameters:
      - description: The UUID of the user
        in: path
        name: user_uuid
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/responses/ResourceUpdated'
          description: Microsoft Teams presence information has been received
        "404":
          content:
            application/json:
              schema:
                $ref: '#/responses/NotFoundError'
          description: The resource requested was not found on the server
      summary: Receive presence information from Microsoft Teams
      tags:
      - microsoft
components:
  parameters:
    direction:
      description: Sort list of items in 'asc' (ascending) or 'desc' (descending)
        order
      in: query
      name: direction
      schema:
        enum:
        - asc
        - desc
        type: string
    distinct:
      description: Distinct list results by field. Always picks the latest entry.
        Required if `search` is not specified.
      in: query
      name: distinct
      schema:
        enum:
        - room_uuid
        type: string
    from_date:
      description: "The date and time from which to retrieve messages. Example: 2019-06-12T10:00:00.000+00:00"
      in: query
      name: from_date
      schema:
        format: date-time
        type: string
    limit:
      description: Maximum number of items to return in the list
      in: query
      name: limit
      schema:
        type: integer
    offset:
      description: Number of items to skip over in the list. Useful for pagination.
      in: query
      name: offset
      schema:
        type: integer
    order:
      description: Name of the field to use for sorting the list of items returned.
      in: query
      name: order
      schema:
        type: string
    recurse:
      description: Should the query include sub-tenants
      in: query
      name: recurse
      schema:
        default: false
        type: boolean
    room_uuid:
      description: The UUID of the room
      in: path
      name: room_uuid
      required: true
      schema:
        type: string
    search:
      description: Search term for filtering a list of items. Only items with a field
        containing the search term will be returned. Required if `distinct` is not
        specified.
      in: query
      name: search
      schema:
        type: string
    search_distinct:
      description: Search term for filtering a list of items. Only items with a field
        containing the search term will be returned.
      in: query
      name: search
      schema:
        type: string
    tenant_uuid:
      description: "The tenant's UUID, defining the ownership of a given resource."
      in: header
      name: Accent-Tenant
      schema:
        type: string
    user_uuid:
      description: The UUID of the user
      in: path
      name: user_uuid
      required: true
      schema:
        type: string
    user_uuid_query:
      description: "Filter by user_uuid. Many uuid can be specified. A logical AND\
        \ is used for filtering. Each uuid MUST be separated by a comma (,)."
      explode: false
      in: query
      name: user_uuid
      schema:
        items:
          type: string
        type: array
      style: form
  responses:
    AnotherServiceUnavailable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: "Another service is unavailable (e.g. accent-auth, accent-confd,\
        \ ...)"
    InvalidRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
      description: Invalid request
    NotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
      description: The resource requested was not found on the server
    ResourceUpdated:
      content: {}
      description: Resource was updated successfully
  schemas:
    APIError:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          resource:
            description: Resource name of the error
            type: string
        type: object
      example:
        error_id: error_id
        resource: resource
        details: "{}"
        message: message
        timestamp: 1.4658129805029452
    ComponentWithStatus:
      example:
        status: null
      properties:
        status:
          $ref: '#/components/schemas/StatusValue'
      type: object
    Error:
      description: Error message for the client
      properties:
        details:
          description: Additional information about the error. The keys are specific
            to each error.
          properties: {}
          type: object
        error_id:
          description: Identifier of the type of error. It is more precise than the
            HTTP status code.
          type: string
        message:
          description: Human readable explanation of the error
          type: string
        timestamp:
          description: Time when the error occured
          format: timestamp
          type: number
      title: Error
      type: object
    Line:
      example:
        id: 6
        state: available
      properties:
        id:
          readOnly: true
          type: integer
        state:
          description: The current state of the line.
          enum:
          - available
          - holding
          - ringing
          - progressing
          - talking
          - unavailable
          readOnly: true
          type: string
      type: object
    Message:
      example:
        user_uuid: user_uuid
        tenant_uuid: tenant_uuid
        alias: alias
        created_at: created_at
        uuid: uuid
        accent_uuid: accent_uuid
        content: content
        room:
          uuid: uuid
      properties:
        alias:
          description: Alias/nickname of the sender
          type: string
        content:
          description: The content of the message
          type: string
        created_at:
          description: The date of the message's creation
          readOnly: true
          type: string
        room:
          $ref: '#/components/schemas/RoomRelationBase'
        tenant_uuid:
          description: tenant uuid of the sender
          type: string
        user_uuid:
          description: user uuid of the sender
          type: string
        uuid:
          description: The UUID of the message
          readOnly: true
          type: string
        accent_uuid:
          description: accent uuid of the sender
          type: string
      type: object
    Messages:
      example:
        total: 6
        filtered: 0
        items:
        - user_uuid: user_uuid
          tenant_uuid: tenant_uuid
          alias: alias
          created_at: created_at
          uuid: uuid
          accent_uuid: accent_uuid
          content: content
          room:
            uuid: uuid
        - user_uuid: user_uuid
          tenant_uuid: tenant_uuid
          alias: alias
          created_at: created_at
          uuid: uuid
          accent_uuid: accent_uuid
          content: content
          room:
            uuid: uuid
      properties:
        filtered:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/Message'
          type: array
        total:
          type: integer
      title: UserItems
      type: object
    Presence:
      example:
        connected: true
        last_activity: last_activity
        tenant_uuid: tenant_uuid
        mobile: true
        do_not_disturb: true
        state: available
        lines:
        - id: 6
          state: available
        - id: 6
          state: available
        line_state: available
        uuid: uuid
        status: status
      properties:
        connected:
          description: If the user has active connections.
          readOnly: true
          type: boolean
        do_not_disturb:
          description: The "do not disturb" status of the user.
          readOnly: true
          type: boolean
        last_activity:
          description: The date time in UTC of the user's last activity. The value
            is updated when the user changes his state explicitly. The value is NULL
            for new user.
          readOnly: true
          type: string
        line_state:
          description: "The current state of the most prioritize state line. The prioritization\
            \ of each state is the following: ringing > progressing > holding > talking\
            \ > available > unavailable"
          enum:
          - available
          - holding
          - ringing
          - progressing
          - talking
          - unavailable
          readOnly: true
          type: string
        lines:
          items:
            $ref: '#/components/schemas/Line'
          readOnly: true
          type: array
        mobile:
          description: |
            If the user uses a mobile application and can be considered reachable.

            mobile will be true in the following situations

            * The user has a mobile refresh token
            * The user has a mobile session
          readOnly: true
          type: boolean
        state:
          description: The presence state of the user.
          enum:
          - available
          - away
          - unavailable
          - invisible
          type: string
        status:
          description: An extended description of the user presence.
          type: string
        tenant_uuid:
          description: The UUID of the tenant of the user
          readOnly: true
          type: string
        uuid:
          description: The UUID of the user
          readOnly: true
          type: string
      required:
      - state
      title: Presence
      type: object
    PresenceList:
      example:
        total: 1
        filtered: 0
        items:
        - connected: true
          last_activity: last_activity
          tenant_uuid: tenant_uuid
          mobile: true
          do_not_disturb: true
          state: available
          lines:
          - id: 6
            state: available
          - id: 6
            state: available
          line_state: available
          uuid: uuid
          status: status
        - connected: true
          last_activity: last_activity
          tenant_uuid: tenant_uuid
          mobile: true
          do_not_disturb: true
          state: available
          lines:
          - id: 6
            state: available
          - id: 6
            state: available
          line_state: available
          uuid: uuid
          status: status
      properties:
        filtered:
          description: The number of result matching the searched terms
          type: integer
        items:
          items:
            $ref: '#/components/schemas/Presence'
          type: array
        total:
          description: The number of results without filter
          type: integer
      title: PresenceList
      type: object
    Room:
      allOf:
      - $ref: '#/components/schemas/RoomRelationBase'
      - properties:
          name:
            description: The name of the room
            type: string
          users:
            items:
              $ref: '#/components/schemas/RoomUser'
            maxItems: 100
            type: array
        required:
        - users
        type: object
      example:
        name: name
        uuid: uuid
        users:
        - tenant_uuid: tenant_uuid
          uuid: uuid
          accent_uuid: accent_uuid
        - tenant_uuid: tenant_uuid
          uuid: uuid
          accent_uuid: accent_uuid
        - tenant_uuid: tenant_uuid
          uuid: uuid
          accent_uuid: accent_uuid
        - tenant_uuid: tenant_uuid
          uuid: uuid
          accent_uuid: accent_uuid
        - tenant_uuid: tenant_uuid
          uuid: uuid
          accent_uuid: accent_uuid
      title: Room
    RoomRelationBase:
      example:
        uuid: uuid
      properties:
        uuid:
          description: The UUID of the room
          readOnly: true
          type: string
      type: object
    RoomUser:
      example:
        tenant_uuid: tenant_uuid
        uuid: uuid
        accent_uuid: accent_uuid
      properties:
        tenant_uuid:
          description: The tenant of the user_uuid. Default to the same tenant as
            the token owner
          type: string
        uuid:
          type: string
        accent_uuid:
          description: The accent of the tenant_uuid. Default to the same accent as
            the token owner
          type: string
      required:
      - uuid
      type: object
    Rooms:
      example:
        total: 6
        filtered: 0
        items:
        - name: name
          uuid: uuid
          users:
          - tenant_uuid: tenant_uuid
            uuid: uuid
            accent_uuid: accent_uuid
          - tenant_uuid: tenant_uuid
            uuid: uuid
            accent_uuid: accent_uuid
          - tenant_uuid: tenant_uuid
            uuid: uuid
            accent_uuid: accent_uuid
          - tenant_uuid: tenant_uuid
            uuid: uuid
            accent_uuid: accent_uuid
          - tenant_uuid: tenant_uuid
            uuid: uuid
            accent_uuid: accent_uuid
        - name: name
          uuid: uuid
          users:
          - tenant_uuid: tenant_uuid
            uuid: uuid
            accent_uuid: accent_uuid
          - tenant_uuid: tenant_uuid
            uuid: uuid
            accent_uuid: accent_uuid
          - tenant_uuid: tenant_uuid
            uuid: uuid
            accent_uuid: accent_uuid
          - tenant_uuid: tenant_uuid
            uuid: uuid
            accent_uuid: accent_uuid
          - tenant_uuid: tenant_uuid
            uuid: uuid
            accent_uuid: accent_uuid
      properties:
        filtered:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/Room'
          type: array
        total:
          type: integer
      title: Rooms
      type: object
    StatusSummary:
      example:
        master_tenant:
          status: null
        presence_initialization:
          status: null
        bus_consumer:
          status: null
        rest_api:
          status: null
      properties:
        bus_consumer:
          $ref: '#/components/schemas/ComponentWithStatus'
        master_tenant:
          $ref: '#/components/schemas/ComponentWithStatus'
        presence_initialization:
          $ref: '#/components/schemas/ComponentWithStatus'
        rest_api:
          $ref: '#/components/schemas/ComponentWithStatus'
      type: object
    StatusValue:
      enum:
      - fail
      - ok
      type: string
    UserMessagePOST:
      properties:
        alias:
          description: Alias/nickname of the sender
          type: string
        content:
          description: The content of the message
          type: string
      required:
      - alias
      - content
      type: object
  securitySchemes:
    accent_auth_token:
      in: header
      name: X-Auth-Token
      type: apiKey
x-accent-name: chatd
x-accent-port: 9304
x-original-swagger-version: "2.0"
