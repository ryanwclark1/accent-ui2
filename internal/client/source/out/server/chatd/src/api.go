/*
 * accent-chatd
 *
 * Control your message and presence from a REST API
 *
 * API version: 1.0.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package chatdserver

import (
	"context"
	"net/http"
	"time"
	"time"
)



// ConfigAPIRouter defines the required methods for binding the api requests to a responses for the ConfigAPI
// The ConfigAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ConfigAPIServicer to perform the required actions, then write the service results to the http response.
type ConfigAPIRouter interface { 
	GetConfig(http.ResponseWriter, *http.Request)
}
// MessagesAPIRouter defines the required methods for binding the api requests to a responses for the MessagesAPI
// The MessagesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MessagesAPIServicer to perform the required actions, then write the service results to the http response.
type MessagesAPIRouter interface { 
	CreateRoomMessage(http.ResponseWriter, *http.Request)
	ListRoomMessage(http.ResponseWriter, *http.Request)
	ListRoomsMessages(http.ResponseWriter, *http.Request)
}
// MicrosoftAPIRouter defines the required methods for binding the api requests to a responses for the MicrosoftAPI
// The MicrosoftAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MicrosoftAPIServicer to perform the required actions, then write the service results to the http response.
type MicrosoftAPIRouter interface { 
	UpdateTeamsPresence(http.ResponseWriter, *http.Request)
}
// PresencesAPIRouter defines the required methods for binding the api requests to a responses for the PresencesAPI
// The PresencesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PresencesAPIServicer to perform the required actions, then write the service results to the http response.
type PresencesAPIRouter interface { 
	GetUserPresence(http.ResponseWriter, *http.Request)
	ListPresences(http.ResponseWriter, *http.Request)
	UpdateUserPresence(http.ResponseWriter, *http.Request)
}
// RoomsAPIRouter defines the required methods for binding the api requests to a responses for the RoomsAPI
// The RoomsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a RoomsAPIServicer to perform the required actions, then write the service results to the http response.
type RoomsAPIRouter interface { 
	CreateRoom(http.ResponseWriter, *http.Request)
	CreateRoomMessage(http.ResponseWriter, *http.Request)
	GetRoom(http.ResponseWriter, *http.Request)
	ListRoomMessage(http.ResponseWriter, *http.Request)
	ListRoomsMessages(http.ResponseWriter, *http.Request)
}
// StatusAPIRouter defines the required methods for binding the api requests to a responses for the StatusAPI
// The StatusAPIRouter implementation should parse necessary information from the http request,
// pass the data to a StatusAPIServicer to perform the required actions, then write the service results to the http response.
type StatusAPIRouter interface { 
	GetStatus(http.ResponseWriter, *http.Request)
}


// ConfigAPIServicer defines the api actions for the ConfigAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ConfigAPIServicer interface { 
	GetConfig(context.Context) (ImplResponse, error)
}


// MessagesAPIServicer defines the api actions for the MessagesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MessagesAPIServicer interface { 
	CreateRoomMessage(context.Context, string, UserMessagePost) (ImplResponse, error)
	ListRoomMessage(context.Context, string, time.Time, string, int32, string, int32, string) (ImplResponse, error)
	ListRoomsMessages(context.Context, string, int32, string, int32, string, string) (ImplResponse, error)
}


// MicrosoftAPIServicer defines the api actions for the MicrosoftAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MicrosoftAPIServicer interface { 
	UpdateTeamsPresence(context.Context, string) (ImplResponse, error)
}


// PresencesAPIServicer defines the api actions for the PresencesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PresencesAPIServicer interface { 
	GetUserPresence(context.Context, string, string) (ImplResponse, error)
	ListPresences(context.Context, string, bool, []string) (ImplResponse, error)
	UpdateUserPresence(context.Context, string, Presence, string) (ImplResponse, error)
}


// RoomsAPIServicer defines the api actions for the RoomsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RoomsAPIServicer interface { 
	CreateRoom(context.Context, Room) (ImplResponse, error)
	CreateRoomMessage(context.Context, string, UserMessagePost) (ImplResponse, error)
	GetRoom(context.Context, []string) (ImplResponse, error)
	ListRoomMessage(context.Context, string, time.Time, string, int32, string, int32, string) (ImplResponse, error)
	ListRoomsMessages(context.Context, string, int32, string, int32, string, string) (ImplResponse, error)
}


// StatusAPIServicer defines the api actions for the StatusAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StatusAPIServicer interface { 
	GetStatus(context.Context) (ImplResponse, error)
}
