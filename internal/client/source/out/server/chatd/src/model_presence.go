/*
 * accent-chatd
 *
 * Control your message and presence from a REST API
 *
 * API version: 1.0.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package chatdserver

type Presence struct {

	// If the user has active connections.
	Connected bool `json:"connected,omitempty"`

	// The \"do not disturb\" status of the user.
	DoNotDisturb bool `json:"do_not_disturb,omitempty"`

	// The date time in UTC of the user's last activity. The value is updated when the user changes his state explicitly. The value is NULL for new user.
	LastActivity string `json:"last_activity,omitempty"`

	// The current state of the most prioritize state line. The prioritization of each state is the following: ringing > progressing > holding > talking > available > unavailable
	LineState string `json:"line_state,omitempty"`

	Lines []Line `json:"lines,omitempty"`

	// If the user uses a mobile application and can be considered reachable.  mobile will be true in the following situations  * The user has a mobile refresh token * The user has a mobile session
	Mobile bool `json:"mobile,omitempty"`

	// The presence state of the user.
	State string `json:"state"`

	// An extended description of the user presence.
	Status string `json:"status,omitempty"`

	// The UUID of the tenant of the user
	TenantUuid string `json:"tenant_uuid,omitempty"`

	// The UUID of the user
	Uuid string `json:"uuid,omitempty"`
}

// AssertPresenceRequired checks if the required fields are not zero-ed
func AssertPresenceRequired(obj Presence) error {
	elements := map[string]interface{}{
		"state": obj.State,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Lines {
		if err := AssertLineRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertPresenceConstraints checks if the values respects the defined constraints
func AssertPresenceConstraints(obj Presence) error {
	return nil
}
