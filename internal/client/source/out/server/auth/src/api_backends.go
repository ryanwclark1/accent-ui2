/*
 * accent-auth
 *
 * Accent's authentication service
 *
 * API version: 0.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package authserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// BackendsAPIController binds http requests to an api service and writes the service results to the http response
type BackendsAPIController struct {
	service      BackendsAPIServicer
	errorHandler ErrorHandler
}

// BackendsAPIOption for how the controller is set up.
type BackendsAPIOption func(*BackendsAPIController)

// WithBackendsAPIErrorHandler inject ErrorHandler into controller
func WithBackendsAPIErrorHandler(h ErrorHandler) BackendsAPIOption {
	return func(c *BackendsAPIController) {
		c.errorHandler = h
	}
}

// NewBackendsAPIController creates a default api controller
func NewBackendsAPIController(s BackendsAPIServicer, opts ...BackendsAPIOption) Router {
	controller := &BackendsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BackendsAPIController
func (c *BackendsAPIController) Routes() Routes {
	return Routes{
		"DeleteLDAPBackendConfig": Route{
			strings.ToUpper("Delete"),
			"/0.1/backends/ldap",
			c.DeleteLDAPBackendConfig,
		},
		"GetBackends": Route{
			strings.ToUpper("Get"),
			"/0.1/backends",
			c.GetBackends,
		},
		"GetLDAPBackendConfig": Route{
			strings.ToUpper("Get"),
			"/0.1/backends/ldap",
			c.GetLDAPBackendConfig,
		},
		"UpdateLDAPBackendConfig": Route{
			strings.ToUpper("Put"),
			"/0.1/backends/ldap",
			c.UpdateLDAPBackendConfig,
		},
	}
}

// DeleteLDAPBackendConfig - Delete current tenant's LDAP backend configuration
func (c *BackendsAPIController) DeleteLDAPBackendConfig(w http.ResponseWriter, r *http.Request) {
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteLDAPBackendConfig(r.Context(), accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBackends - Get list of activated backends
func (c *BackendsAPIController) GetBackends(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetBackends(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLDAPBackendConfig - Get current tenant's LDAP backend configuration. If there is no configuration, all the fields will be `null`.
func (c *BackendsAPIController) GetLDAPBackendConfig(w http.ResponseWriter, r *http.Request) {
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetLDAPBackendConfig(r.Context(), accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateLDAPBackendConfig - Update current tenant's LDAP backend configuration
func (c *BackendsAPIController) UpdateLDAPBackendConfig(w http.ResponseWriter, r *http.Request) {
	bodyParam := LdapBackendConfigEdit{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLdapBackendConfigEditRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLdapBackendConfigEditConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateLDAPBackendConfig(r.Context(), bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
