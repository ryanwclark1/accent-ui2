/*
 * accent-auth
 *
 * Accent's authentication service
 *
 * API version: 0.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package authserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// TokenAPIController binds http requests to an api service and writes the service results to the http response
type TokenAPIController struct {
	service      TokenAPIServicer
	errorHandler ErrorHandler
}

// TokenAPIOption for how the controller is set up.
type TokenAPIOption func(*TokenAPIController)

// WithTokenAPIErrorHandler inject ErrorHandler into controller
func WithTokenAPIErrorHandler(h ErrorHandler) TokenAPIOption {
	return func(c *TokenAPIController) {
		c.errorHandler = h
	}
}

// NewTokenAPIController creates a default api controller
func NewTokenAPIController(s TokenAPIServicer, opts ...TokenAPIOption) Router {
	controller := &TokenAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TokenAPIController
func (c *TokenAPIController) Routes() Routes {
	return Routes{
		"CheckTokenContext": Route{
			strings.ToUpper("Head"),
			"/0.1/token/{token}",
			c.CheckTokenContext,
		},
		"CheckTokenScopes": Route{
			strings.ToUpper("Post"),
			"/0.1/token/{token}/scopes/check",
			c.CheckTokenScopes,
		},
		"CreateToken": Route{
			strings.ToUpper("Post"),
			"/0.1/token",
			c.CreateToken,
		},
		"DeleteRefreshTokens": Route{
			strings.ToUpper("Delete"),
			"/0.1/users/{user_uuid_or_me}/tokens/{client_id}",
			c.DeleteRefreshTokens,
		},
		"GetToken": Route{
			strings.ToUpper("Get"),
			"/0.1/token/{token}",
			c.GetToken,
		},
		"GetTokens": Route{
			strings.ToUpper("Get"),
			"/0.1/tokens",
			c.GetTokens,
		},
		"GetUserTokens": Route{
			strings.ToUpper("Get"),
			"/0.1/users/{user_uuid_or_me}/tokens",
			c.GetUserTokens,
		},
		"RevokeToken": Route{
			strings.ToUpper("Delete"),
			"/0.1/token/{token}",
			c.RevokeToken,
		},
	}
}

// CheckTokenContext - Checks if a token is valid
func (c *TokenAPIController) CheckTokenContext(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	tokenParam := chi.URLParam(r, "token")
	if tokenParam == "" {
		c.errorHandler(w, r, &RequiredError{"token"}, nil)
		return
	}
	var scopeParam string
	if query.Has("scope") {
		param := query.Get("scope")

		scopeParam = param
	} else {
	}
	var tenantParam string
	if query.Has("tenant") {
		param := query.Get("tenant")

		tenantParam = param
	} else {
	}
	result, err := c.service.CheckTokenContext(r.Context(), tokenParam, scopeParam, tenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CheckTokenScopes - Check a token against scopes
func (c *TokenAPIController) CheckTokenScopes(w http.ResponseWriter, r *http.Request) {
	tokenParam := chi.URLParam(r, "token")
	if tokenParam == "" {
		c.errorHandler(w, r, &RequiredError{"token"}, nil)
		return
	}
	bodyParam := ScopeCheckRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertScopeCheckRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertScopeCheckRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CheckTokenScopes(r.Context(), tokenParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateToken - Creates a token
func (c *TokenAPIController) CreateToken(w http.ResponseWriter, r *http.Request) {
	accentSessionTypeParam := r.Header.Get("Accent-Session-Type")
	bodyParam := CreateTokenRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateTokenRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateTokenRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateToken(r.Context(), accentSessionTypeParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteRefreshTokens - Delete a user's refresh token
func (c *TokenAPIController) DeleteRefreshTokens(w http.ResponseWriter, r *http.Request) {
	userUuidOrMeParam := chi.URLParam(r, "user_uuid_or_me")
	if userUuidOrMeParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid_or_me"}, nil)
		return
	}
	clientIdParam := chi.URLParam(r, "client_id")
	if clientIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"client_id"}, nil)
		return
	}
	result, err := c.service.DeleteRefreshTokens(r.Context(), userUuidOrMeParam, clientIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetToken - Retrieves token data
func (c *TokenAPIController) GetToken(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	tokenParam := chi.URLParam(r, "token")
	if tokenParam == "" {
		c.errorHandler(w, r, &RequiredError{"token"}, nil)
		return
	}
	var scopeParam string
	if query.Has("scope") {
		param := query.Get("scope")

		scopeParam = param
	} else {
	}
	var tenantParam string
	if query.Has("tenant") {
		param := query.Get("tenant")

		tenantParam = param
	} else {
	}
	result, err := c.service.GetToken(r.Context(), tokenParam, scopeParam, tenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetTokens - Retrieve a list of refresh tokens that have been created on the system
func (c *TokenAPIController) GetTokens(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var recurseParam bool
	if query.Has("recurse") {
		param, err := parseBoolParameter(
			query.Get("recurse"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recurseParam = param
	} else {
		var param bool = false
		recurseParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.GetTokens(r.Context(), accentTenantParam, recurseParam, orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserTokens - Retrieve a user's refresh token list
func (c *TokenAPIController) GetUserTokens(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userUuidOrMeParam := chi.URLParam(r, "user_uuid_or_me")
	if userUuidOrMeParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid_or_me"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.GetUserTokens(r.Context(), userUuidOrMeParam, accentTenantParam, orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// RevokeToken - Revoke a token
func (c *TokenAPIController) RevokeToken(w http.ResponseWriter, r *http.Request) {
	tokenParam := chi.URLParam(r, "token")
	if tokenParam == "" {
		c.errorHandler(w, r, &RequiredError{"token"}, nil)
		return
	}
	result, err := c.service.RevokeToken(r.Context(), tokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
