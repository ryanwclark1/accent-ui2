/*
 * accent-auth
 *
 * Accent's authentication service
 *
 * API version: 0.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package authserver

import (
	"errors"
)

type LdapBackendConfig struct {

	// The DN to use to bind the `accent-auth` service to the LDAP server. If unspecified, `accent-auth` will not bind with a service user but only with the final user account. For this to work though, your users will need to have the right to read their own information, particularly their email address.
	BindDn string `json:"bind_dn,omitempty"`

	// The host or IP address of the LDAP server.
	Host string `json:"host"`

	// The port on which to connect to the LDAP server.
	Port int32 `json:"port"`

	// The layer of security to use for the connection.
	ProtocolSecurity string `json:"protocol_security,omitempty"`

	// LDAP protocol version to use
	ProtocolVersion int32 `json:"protocol_version,omitempty"`

	// Filters for finding a user DN given a service bind is used. Available variables are `username`, `user_login_attribute` and `user_email_attribute`. These variables come from the fields of the same name from the API.
	SearchFilters string `json:"search_filters,omitempty"`

	TenantUuid string `json:"tenant_uuid,omitempty"`

	// The base DN in which users are located
	UserBaseDn string `json:"user_base_dn"`

	// The attribute of the email address in the LDAP schema.
	UserEmailAttribute string `json:"user_email_attribute"`

	// The attribute that identifies users. It will be prepended to the `user_base_dn`.
	UserLoginAttribute string `json:"user_login_attribute"`
}

// AssertLdapBackendConfigRequired checks if the required fields are not zero-ed
func AssertLdapBackendConfigRequired(obj LdapBackendConfig) error {
	elements := map[string]interface{}{
		"host":                 obj.Host,
		"port":                 obj.Port,
		"user_base_dn":         obj.UserBaseDn,
		"user_email_attribute": obj.UserEmailAttribute,
		"user_login_attribute": obj.UserLoginAttribute,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertLdapBackendConfigConstraints checks if the values respects the defined constraints
func AssertLdapBackendConfigConstraints(obj LdapBackendConfig) error {
	if obj.ProtocolVersion < 2 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.ProtocolVersion > 3 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
