/*
 * accent-auth
 *
 * Accent's authentication service
 *
 * API version: 0.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package authserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// SessionsAPIController binds http requests to an api service and writes the service results to the http response
type SessionsAPIController struct {
	service      SessionsAPIServicer
	errorHandler ErrorHandler
}

// SessionsAPIOption for how the controller is set up.
type SessionsAPIOption func(*SessionsAPIController)

// WithSessionsAPIErrorHandler inject ErrorHandler into controller
func WithSessionsAPIErrorHandler(h ErrorHandler) SessionsAPIOption {
	return func(c *SessionsAPIController) {
		c.errorHandler = h
	}
}

// NewSessionsAPIController creates a default api controller
func NewSessionsAPIController(s SessionsAPIServicer, opts ...SessionsAPIOption) Router {
	controller := &SessionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SessionsAPIController
func (c *SessionsAPIController) Routes() Routes {
	return Routes{
		"DeleteSession": Route{
			strings.ToUpper("Delete"),
			"/0.1/sessions/{session_uuid}",
			c.DeleteSession,
		},
		"GetSessions": Route{
			strings.ToUpper("Get"),
			"/0.1/sessions",
			c.GetSessions,
		},
		"GetUserSessions": Route{
			strings.ToUpper("Get"),
			"/0.1/users/{user_uuid}/sessions",
			c.GetUserSessions,
		},
		"UserDeleteSession": Route{
			strings.ToUpper("Delete"),
			"/0.1/users/{user_uuid}/sessions/{session_uuid}",
			c.UserDeleteSession,
		},
	}
}

// DeleteSession - Delete a session
func (c *SessionsAPIController) DeleteSession(w http.ResponseWriter, r *http.Request) {
	sessionUuidParam := chi.URLParam(r, "session_uuid")
	if sessionUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"session_uuid"}, nil)
		return
	}
	result, err := c.service.DeleteSession(r.Context(), sessionUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetSessions - List sessions
func (c *SessionsAPIController) GetSessions(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var recurseParam bool
	if query.Has("recurse") {
		param, err := parseBoolParameter(
			query.Get("recurse"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recurseParam = param
	} else {
		var param bool = false
		recurseParam = param
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	result, err := c.service.GetSessions(r.Context(), accentTenantParam, recurseParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserSessions - Retrieves the list of sessions associated to a user
func (c *SessionsAPIController) GetUserSessions(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	result, err := c.service.GetUserSessions(r.Context(), userUuidParam, accentTenantParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UserDeleteSession - Delete a session
func (c *SessionsAPIController) UserDeleteSession(w http.ResponseWriter, r *http.Request) {
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	sessionUuidParam := chi.URLParam(r, "session_uuid")
	if sessionUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"session_uuid"}, nil)
		return
	}
	result, err := c.service.UserDeleteSession(r.Context(), userUuidParam, sessionUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
