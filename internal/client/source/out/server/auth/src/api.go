/*
 * accent-auth
 *
 * Accent's authentication service
 *
 * API version: 0.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package authserver

import (
	"context"
	"net/http"
)



// AdminAPIRouter defines the required methods for binding the api requests to a responses for the AdminAPI
// The AdminAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AdminAPIServicer to perform the required actions, then write the service results to the http response.
type AdminAPIRouter interface { 
	UpdateAllUserEmails(http.ResponseWriter, *http.Request)
}
// BackendsAPIRouter defines the required methods for binding the api requests to a responses for the BackendsAPI
// The BackendsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a BackendsAPIServicer to perform the required actions, then write the service results to the http response.
type BackendsAPIRouter interface { 
	DeleteLDAPBackendConfig(http.ResponseWriter, *http.Request)
	GetBackends(http.ResponseWriter, *http.Request)
	GetLDAPBackendConfig(http.ResponseWriter, *http.Request)
	UpdateLDAPBackendConfig(http.ResponseWriter, *http.Request)
}
// ConfigAPIRouter defines the required methods for binding the api requests to a responses for the ConfigAPI
// The ConfigAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ConfigAPIServicer to perform the required actions, then write the service results to the http response.
type ConfigAPIRouter interface { 
	GetConfig(http.ResponseWriter, *http.Request)
	PatchConfig(http.ResponseWriter, *http.Request)
}
// EmailsAPIRouter defines the required methods for binding the api requests to a responses for the EmailsAPI
// The EmailsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EmailsAPIServicer to perform the required actions, then write the service results to the http response.
type EmailsAPIRouter interface { 
	GetEmailConfirm(http.ResponseWriter, *http.Request)
	GetNewEmailConfirmation(http.ResponseWriter, *http.Request)
	PutEmailConfirm(http.ResponseWriter, *http.Request)
	UpdateAllUserEmails(http.ResponseWriter, *http.Request)
	UpdateUserEmails(http.ResponseWriter, *http.Request)
}
// ExternalAPIRouter defines the required methods for binding the api requests to a responses for the ExternalAPI
// The ExternalAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ExternalAPIServicer to perform the required actions, then write the service results to the http response.
type ExternalAPIRouter interface { 
	DeleteExternalAuthConfig(http.ResponseWriter, *http.Request)
	GetExternalAuthConfig(http.ResponseWriter, *http.Request)
	GetExternalAuthUsers(http.ResponseWriter, *http.Request)
	GetUserExternalAuth(http.ResponseWriter, *http.Request)
	PostExternalAuthConfig(http.ResponseWriter, *http.Request)
	UpdateExternalAuthConfig(http.ResponseWriter, *http.Request)
}
// GroupsAPIRouter defines the required methods for binding the api requests to a responses for the GroupsAPI
// The GroupsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a GroupsAPIServicer to perform the required actions, then write the service results to the http response.
type GroupsAPIRouter interface { 
	AddGroupPolicy(http.ResponseWriter, *http.Request)
	AddGroupUser(http.ResponseWriter, *http.Request)
	DeleteGroup(http.ResponseWriter, *http.Request)
	DeleteGroupPolicy(http.ResponseWriter, *http.Request)
	EditGroup(http.ResponseWriter, *http.Request)
	GetGroup(http.ResponseWriter, *http.Request)
	GetGroupPolicies(http.ResponseWriter, *http.Request)
	GetGroupUsers(http.ResponseWriter, *http.Request)
	RemoveGroupUser(http.ResponseWriter, *http.Request)
}
// PoliciesAPIRouter defines the required methods for binding the api requests to a responses for the PoliciesAPI
// The PoliciesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PoliciesAPIServicer to perform the required actions, then write the service results to the http response.
type PoliciesAPIRouter interface { 
	AddGroupPolicy(http.ResponseWriter, *http.Request)
	AddPolicyAccess(http.ResponseWriter, *http.Request)
	AddUserPolicy(http.ResponseWriter, *http.Request)
	CreatePolicies(http.ResponseWriter, *http.Request)
	DeleteGroupPolicy(http.ResponseWriter, *http.Request)
	DeletePolicy(http.ResponseWriter, *http.Request)
	DeletePolicyAccess(http.ResponseWriter, *http.Request)
	DeleteUserPolicy(http.ResponseWriter, *http.Request)
	EditPolicy(http.ResponseWriter, *http.Request)
	GetPolicies(http.ResponseWriter, *http.Request)
	GetPolicy(http.ResponseWriter, *http.Request)
	GetUserPolicies(http.ResponseWriter, *http.Request)
}
// SessionsAPIRouter defines the required methods for binding the api requests to a responses for the SessionsAPI
// The SessionsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SessionsAPIServicer to perform the required actions, then write the service results to the http response.
type SessionsAPIRouter interface { 
	DeleteSession(http.ResponseWriter, *http.Request)
	GetSessions(http.ResponseWriter, *http.Request)
	GetUserSessions(http.ResponseWriter, *http.Request)
	UserDeleteSession(http.ResponseWriter, *http.Request)
}
// StatusAPIRouter defines the required methods for binding the api requests to a responses for the StatusAPI
// The StatusAPIRouter implementation should parse necessary information from the http request,
// pass the data to a StatusAPIServicer to perform the required actions, then write the service results to the http response.
type StatusAPIRouter interface { 
	CheckStatus(http.ResponseWriter, *http.Request)
}
// TenantsAPIRouter defines the required methods for binding the api requests to a responses for the TenantsAPI
// The TenantsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TenantsAPIServicer to perform the required actions, then write the service results to the http response.
type TenantsAPIRouter interface { 
	CreateTenant(http.ResponseWriter, *http.Request)
	DeleteTenant(http.ResponseWriter, *http.Request)
	GetTenant(http.ResponseWriter, *http.Request)
	GetTenants(http.ResponseWriter, *http.Request)
	UpdateTenant(http.ResponseWriter, *http.Request)
}
// TokenAPIRouter defines the required methods for binding the api requests to a responses for the TokenAPI
// The TokenAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TokenAPIServicer to perform the required actions, then write the service results to the http response.
type TokenAPIRouter interface { 
	CheckTokenContext(http.ResponseWriter, *http.Request)
	CheckTokenScopes(http.ResponseWriter, *http.Request)
	CreateToken(http.ResponseWriter, *http.Request)
	DeleteRefreshTokens(http.ResponseWriter, *http.Request)
	GetToken(http.ResponseWriter, *http.Request)
	GetTokens(http.ResponseWriter, *http.Request)
	GetUserTokens(http.ResponseWriter, *http.Request)
	RevokeToken(http.ResponseWriter, *http.Request)
}
// UsersAPIRouter defines the required methods for binding the api requests to a responses for the UsersAPI
// The UsersAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UsersAPIServicer to perform the required actions, then write the service results to the http response.
type UsersAPIRouter interface { 
	AddGroupUser(http.ResponseWriter, *http.Request)
	AddUserPolicy(http.ResponseWriter, *http.Request)
	ChangeUserPassword(http.ResponseWriter, *http.Request)
	CreateUser(http.ResponseWriter, *http.Request)
	DeleteRefreshTokens(http.ResponseWriter, *http.Request)
	DeleteUser(http.ResponseWriter, *http.Request)
	DeleteUserPolicy(http.ResponseWriter, *http.Request)
	GetNewEmailConfirmation(http.ResponseWriter, *http.Request)
	GetUser(http.ResponseWriter, *http.Request)
	GetUserExternalAuth(http.ResponseWriter, *http.Request)
	GetUserGroups(http.ResponseWriter, *http.Request)
	GetUserPolicies(http.ResponseWriter, *http.Request)
	GetUserSessions(http.ResponseWriter, *http.Request)
	GetUserTokens(http.ResponseWriter, *http.Request)
	GetUsers(http.ResponseWriter, *http.Request)
	RegisterUser(http.ResponseWriter, *http.Request)
	RemoveGroupUser(http.ResponseWriter, *http.Request)
	ResetPassword(http.ResponseWriter, *http.Request)
	ResetPasswordChange(http.ResponseWriter, *http.Request)
	UpdateAllUserEmails(http.ResponseWriter, *http.Request)
	UpdateUser(http.ResponseWriter, *http.Request)
	UpdateUserEmails(http.ResponseWriter, *http.Request)
	UserDeleteSession(http.ResponseWriter, *http.Request)
}


// AdminAPIServicer defines the api actions for the AdminAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AdminAPIServicer interface { 
	UpdateAllUserEmails(context.Context, string, AdminUserEmailList) (ImplResponse, error)
}


// BackendsAPIServicer defines the api actions for the BackendsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BackendsAPIServicer interface { 
	DeleteLDAPBackendConfig(context.Context, string) (ImplResponse, error)
	GetBackends(context.Context) (ImplResponse, error)
	GetLDAPBackendConfig(context.Context, string) (ImplResponse, error)
	UpdateLDAPBackendConfig(context.Context, LdapBackendConfigEdit, string) (ImplResponse, error)
}


// ConfigAPIServicer defines the api actions for the ConfigAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ConfigAPIServicer interface { 
	GetConfig(context.Context) (ImplResponse, error)
	PatchConfig(context.Context, []ConfigPatchItem) (ImplResponse, error)
}


// EmailsAPIServicer defines the api actions for the EmailsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EmailsAPIServicer interface { 
	GetEmailConfirm(context.Context, string, string) (ImplResponse, error)
	GetNewEmailConfirmation(context.Context, string, string) (ImplResponse, error)
	PutEmailConfirm(context.Context, string) (ImplResponse, error)
	UpdateAllUserEmails(context.Context, string, AdminUserEmailList) (ImplResponse, error)
	UpdateUserEmails(context.Context, string, UserEmailList) (ImplResponse, error)
}


// ExternalAPIServicer defines the api actions for the ExternalAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ExternalAPIServicer interface { 
	DeleteExternalAuthConfig(context.Context, string, string) (ImplResponse, error)
	GetExternalAuthConfig(context.Context, string, string) (ImplResponse, error)
	GetExternalAuthUsers(context.Context, string, string, bool, int32, int32) (ImplResponse, error)
	GetUserExternalAuth(context.Context, string, string, string, int32, int32, string) (ImplResponse, error)
	PostExternalAuthConfig(context.Context, string, ExternalConfig, string) (ImplResponse, error)
	UpdateExternalAuthConfig(context.Context, string, ExternalConfig, string) (ImplResponse, error)
}


// GroupsAPIServicer defines the api actions for the GroupsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type GroupsAPIServicer interface { 
	AddGroupPolicy(context.Context, string, string) (ImplResponse, error)
	AddGroupUser(context.Context, string, string) (ImplResponse, error)
	DeleteGroup(context.Context, string, string) (ImplResponse, error)
	DeleteGroupPolicy(context.Context, string, string) (ImplResponse, error)
	EditGroup(context.Context, string, GroupPut, string) (ImplResponse, error)
	GetGroup(context.Context, string, string) (ImplResponse, error)
	GetGroupPolicies(context.Context, string, string, string, int32, int32, string) (ImplResponse, error)
	GetGroupUsers(context.Context, string, string, string, int32, int32, string) (ImplResponse, error)
	RemoveGroupUser(context.Context, string, string) (ImplResponse, error)
}


// PoliciesAPIServicer defines the api actions for the PoliciesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PoliciesAPIServicer interface { 
	AddGroupPolicy(context.Context, string, string) (ImplResponse, error)
	AddPolicyAccess(context.Context, string, string, string) (ImplResponse, error)
	AddUserPolicy(context.Context, string, string) (ImplResponse, error)
	CreatePolicies(context.Context, Policy, string) (ImplResponse, error)
	DeleteGroupPolicy(context.Context, string, string) (ImplResponse, error)
	DeletePolicy(context.Context, string, string) (ImplResponse, error)
	DeletePolicyAccess(context.Context, string, string, string) (ImplResponse, error)
	DeleteUserPolicy(context.Context, string, string) (ImplResponse, error)
	EditPolicy(context.Context, string, Policy, string) (ImplResponse, error)
	GetPolicies(context.Context, string, string, int32, int32, string, string, bool) (ImplResponse, error)
	GetPolicy(context.Context, string, string) (ImplResponse, error)
	GetUserPolicies(context.Context, string, string, string, int32, int32, string) (ImplResponse, error)
}


// SessionsAPIServicer defines the api actions for the SessionsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SessionsAPIServicer interface { 
	DeleteSession(context.Context, string) (ImplResponse, error)
	GetSessions(context.Context, string, bool, int32, int32) (ImplResponse, error)
	GetUserSessions(context.Context, string, string, int32, int32) (ImplResponse, error)
	UserDeleteSession(context.Context, string, string) (ImplResponse, error)
}


// StatusAPIServicer defines the api actions for the StatusAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StatusAPIServicer interface { 
	CheckStatus(context.Context) (ImplResponse, error)
}


// TenantsAPIServicer defines the api actions for the TenantsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TenantsAPIServicer interface { 
	CreateTenant(context.Context, string, TenantCreate) (ImplResponse, error)
	DeleteTenant(context.Context, string) (ImplResponse, error)
	GetTenant(context.Context, string) (ImplResponse, error)
	GetTenants(context.Context, string, string, int32, int32, string, string) (ImplResponse, error)
	UpdateTenant(context.Context, string, TenantEdit) (ImplResponse, error)
}


// TokenAPIServicer defines the api actions for the TokenAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TokenAPIServicer interface { 
	CheckTokenContext(context.Context, string, string, string) (ImplResponse, error)
	CheckTokenScopes(context.Context, string, ScopeCheckRequest) (ImplResponse, error)
	CreateToken(context.Context, string, CreateTokenRequest) (ImplResponse, error)
	DeleteRefreshTokens(context.Context, string, string) (ImplResponse, error)
	GetToken(context.Context, string, string, string) (ImplResponse, error)
	GetTokens(context.Context, string, bool, string, string, int32, int32, string) (ImplResponse, error)
	GetUserTokens(context.Context, string, string, string, string, int32, int32, string) (ImplResponse, error)
	RevokeToken(context.Context, string) (ImplResponse, error)
}


// UsersAPIServicer defines the api actions for the UsersAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UsersAPIServicer interface { 
	AddGroupUser(context.Context, string, string) (ImplResponse, error)
	AddUserPolicy(context.Context, string, string) (ImplResponse, error)
	ChangeUserPassword(context.Context, string, PasswordChange) (ImplResponse, error)
	CreateUser(context.Context, string, UserCreate) (ImplResponse, error)
	DeleteRefreshTokens(context.Context, string, string) (ImplResponse, error)
	DeleteUser(context.Context, string) (ImplResponse, error)
	DeleteUserPolicy(context.Context, string, string) (ImplResponse, error)
	GetNewEmailConfirmation(context.Context, string, string) (ImplResponse, error)
	GetUser(context.Context, string) (ImplResponse, error)
	GetUserExternalAuth(context.Context, string, string, string, int32, int32, string) (ImplResponse, error)
	GetUserGroups(context.Context, string, string, string, int32, int32, string) (ImplResponse, error)
	GetUserPolicies(context.Context, string, string, string, int32, int32, string) (ImplResponse, error)
	GetUserSessions(context.Context, string, string, int32, int32) (ImplResponse, error)
	GetUserTokens(context.Context, string, string, string, string, int32, int32, string) (ImplResponse, error)
	GetUsers(context.Context, string, string, int32, int32, string, string, bool, string, string, string, string) (ImplResponse, error)
	RegisterUser(context.Context, UserRegister) (ImplResponse, error)
	RemoveGroupUser(context.Context, string, string) (ImplResponse, error)
	ResetPassword(context.Context, string, string, string) (ImplResponse, error)
	ResetPasswordChange(context.Context, string, PostPasswordReset) (ImplResponse, error)
	UpdateAllUserEmails(context.Context, string, AdminUserEmailList) (ImplResponse, error)
	UpdateUser(context.Context, string, UserEdit) (ImplResponse, error)
	UpdateUserEmails(context.Context, string, UserEmailList) (ImplResponse, error)
	UserDeleteSession(context.Context, string, string) (ImplResponse, error)
}
