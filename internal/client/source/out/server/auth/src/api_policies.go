/*
 * accent-auth
 *
 * Accent's authentication service
 *
 * API version: 0.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package authserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// PoliciesAPIController binds http requests to an api service and writes the service results to the http response
type PoliciesAPIController struct {
	service      PoliciesAPIServicer
	errorHandler ErrorHandler
}

// PoliciesAPIOption for how the controller is set up.
type PoliciesAPIOption func(*PoliciesAPIController)

// WithPoliciesAPIErrorHandler inject ErrorHandler into controller
func WithPoliciesAPIErrorHandler(h ErrorHandler) PoliciesAPIOption {
	return func(c *PoliciesAPIController) {
		c.errorHandler = h
	}
}

// NewPoliciesAPIController creates a default api controller
func NewPoliciesAPIController(s PoliciesAPIServicer, opts ...PoliciesAPIOption) Router {
	controller := &PoliciesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PoliciesAPIController
func (c *PoliciesAPIController) Routes() Routes {
	return Routes{
		"AddGroupPolicy": Route{
			strings.ToUpper("Put"),
			"/0.1/groups/{group_uuid}/policies/{policy_uuid}",
			c.AddGroupPolicy,
		},
		"AddPolicyAccess": Route{
			strings.ToUpper("Put"),
			"/0.1/policies/{policy_uuid}/acl/{access}",
			c.AddPolicyAccess,
		},
		"AddUserPolicy": Route{
			strings.ToUpper("Put"),
			"/0.1/users/{user_uuid}/policies/{policy_uuid}",
			c.AddUserPolicy,
		},
		"CreatePolicies": Route{
			strings.ToUpper("Post"),
			"/0.1/policies",
			c.CreatePolicies,
		},
		"DeleteGroupPolicy": Route{
			strings.ToUpper("Delete"),
			"/0.1/groups/{group_uuid}/policies/{policy_uuid}",
			c.DeleteGroupPolicy,
		},
		"DeletePolicy": Route{
			strings.ToUpper("Delete"),
			"/0.1/policies/{policy_uuid}",
			c.DeletePolicy,
		},
		"DeletePolicyAccess": Route{
			strings.ToUpper("Delete"),
			"/0.1/policies/{policy_uuid}/acl/{access}",
			c.DeletePolicyAccess,
		},
		"DeleteUserPolicy": Route{
			strings.ToUpper("Delete"),
			"/0.1/users/{user_uuid}/policies/{policy_uuid}",
			c.DeleteUserPolicy,
		},
		"EditPolicy": Route{
			strings.ToUpper("Put"),
			"/0.1/policies/{policy_uuid}",
			c.EditPolicy,
		},
		"GetPolicies": Route{
			strings.ToUpper("Get"),
			"/0.1/policies",
			c.GetPolicies,
		},
		"GetPolicy": Route{
			strings.ToUpper("Get"),
			"/0.1/policies/{policy_uuid}",
			c.GetPolicy,
		},
		"GetUserPolicies": Route{
			strings.ToUpper("Get"),
			"/0.1/users/{user_uuid}/policies",
			c.GetUserPolicies,
		},
	}
}

// AddGroupPolicy - Associate a group to a policy
func (c *PoliciesAPIController) AddGroupPolicy(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	policyUuidParam := chi.URLParam(r, "policy_uuid")
	if policyUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"policy_uuid"}, nil)
		return
	}
	result, err := c.service.AddGroupPolicy(r.Context(), groupUuidParam, policyUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddPolicyAccess - Associate an access to a policy
func (c *PoliciesAPIController) AddPolicyAccess(w http.ResponseWriter, r *http.Request) {
	policyUuidParam := chi.URLParam(r, "policy_uuid")
	if policyUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"policy_uuid"}, nil)
		return
	}
	accessParam := chi.URLParam(r, "access")
	if accessParam == "" {
		c.errorHandler(w, r, &RequiredError{"access"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.AddPolicyAccess(r.Context(), policyUuidParam, accessParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddUserPolicy - Associate a policy to a user
func (c *PoliciesAPIController) AddUserPolicy(w http.ResponseWriter, r *http.Request) {
	policyUuidParam := chi.URLParam(r, "policy_uuid")
	if policyUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"policy_uuid"}, nil)
		return
	}
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	result, err := c.service.AddUserPolicy(r.Context(), policyUuidParam, userUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreatePolicies - Create a new ACL policy
func (c *PoliciesAPIController) CreatePolicies(w http.ResponseWriter, r *http.Request) {
	bodyParam := Policy{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPolicyRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPolicyConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.CreatePolicies(r.Context(), bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteGroupPolicy - Dissociate a policy from a group
func (c *PoliciesAPIController) DeleteGroupPolicy(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	policyUuidParam := chi.URLParam(r, "policy_uuid")
	if policyUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"policy_uuid"}, nil)
		return
	}
	result, err := c.service.DeleteGroupPolicy(r.Context(), groupUuidParam, policyUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePolicy - Delete a policy
func (c *PoliciesAPIController) DeletePolicy(w http.ResponseWriter, r *http.Request) {
	policyUuidParam := chi.URLParam(r, "policy_uuid")
	if policyUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"policy_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeletePolicy(r.Context(), policyUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePolicyAccess - Dissociate an access from a policy
func (c *PoliciesAPIController) DeletePolicyAccess(w http.ResponseWriter, r *http.Request) {
	policyUuidParam := chi.URLParam(r, "policy_uuid")
	if policyUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"policy_uuid"}, nil)
		return
	}
	accessParam := chi.URLParam(r, "access")
	if accessParam == "" {
		c.errorHandler(w, r, &RequiredError{"access"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeletePolicyAccess(r.Context(), policyUuidParam, accessParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteUserPolicy - Dissociate a policy from a user
func (c *PoliciesAPIController) DeleteUserPolicy(w http.ResponseWriter, r *http.Request) {
	policyUuidParam := chi.URLParam(r, "policy_uuid")
	if policyUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"policy_uuid"}, nil)
		return
	}
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	result, err := c.service.DeleteUserPolicy(r.Context(), policyUuidParam, userUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EditPolicy - Modify an ACL policy
func (c *PoliciesAPIController) EditPolicy(w http.ResponseWriter, r *http.Request) {
	policyUuidParam := chi.URLParam(r, "policy_uuid")
	if policyUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"policy_uuid"}, nil)
		return
	}
	bodyParam := Policy{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPolicyRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPolicyConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.EditPolicy(r.Context(), policyUuidParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPolicies - List ACL policies
func (c *PoliciesAPIController) GetPolicies(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var recurseParam bool
	if query.Has("recurse") {
		param, err := parseBoolParameter(
			query.Get("recurse"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recurseParam = param
	} else {
		var param bool = false
		recurseParam = param
	}
	result, err := c.service.GetPolicies(r.Context(), orderParam, directionParam, limitParam, offsetParam, searchParam, accentTenantParam, recurseParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPolicy - Retrieves the details of a policy
func (c *PoliciesAPIController) GetPolicy(w http.ResponseWriter, r *http.Request) {
	policyUuidParam := chi.URLParam(r, "policy_uuid")
	if policyUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"policy_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetPolicy(r.Context(), policyUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserPolicies - Retrieves the list of policies associated to a user
func (c *PoliciesAPIController) GetUserPolicies(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.GetUserPolicies(r.Context(), userUuidParam, orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
