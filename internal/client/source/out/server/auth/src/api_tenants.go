/*
 * accent-auth
 *
 * Accent's authentication service
 *
 * API version: 0.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package authserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// TenantsAPIController binds http requests to an api service and writes the service results to the http response
type TenantsAPIController struct {
	service      TenantsAPIServicer
	errorHandler ErrorHandler
}

// TenantsAPIOption for how the controller is set up.
type TenantsAPIOption func(*TenantsAPIController)

// WithTenantsAPIErrorHandler inject ErrorHandler into controller
func WithTenantsAPIErrorHandler(h ErrorHandler) TenantsAPIOption {
	return func(c *TenantsAPIController) {
		c.errorHandler = h
	}
}

// NewTenantsAPIController creates a default api controller
func NewTenantsAPIController(s TenantsAPIServicer, opts ...TenantsAPIOption) Router {
	controller := &TenantsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TenantsAPIController
func (c *TenantsAPIController) Routes() Routes {
	return Routes{
		"CreateTenant": Route{
			strings.ToUpper("Post"),
			"/0.1/tenants",
			c.CreateTenant,
		},
		"DeleteTenant": Route{
			strings.ToUpper("Delete"),
			"/0.1/tenants/{tenant_uuid}",
			c.DeleteTenant,
		},
		"GetTenant": Route{
			strings.ToUpper("Get"),
			"/0.1/tenants/{tenant_uuid}",
			c.GetTenant,
		},
		"GetTenants": Route{
			strings.ToUpper("Get"),
			"/0.1/tenants",
			c.GetTenants,
		},
		"UpdateTenant": Route{
			strings.ToUpper("Put"),
			"/0.1/tenants/{tenant_uuid}",
			c.UpdateTenant,
		},
	}
}

// CreateTenant - Creates a new tenant
func (c *TenantsAPIController) CreateTenant(w http.ResponseWriter, r *http.Request) {
	accentTenantParam := r.Header.Get("Accent-Tenant")
	bodyParam := TenantCreate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTenantCreateRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTenantCreateConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateTenant(r.Context(), accentTenantParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteTenant - Delete a tenant
func (c *TenantsAPIController) DeleteTenant(w http.ResponseWriter, r *http.Request) {
	tenantUuidParam := chi.URLParam(r, "tenant_uuid")
	if tenantUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"tenant_uuid"}, nil)
		return
	}
	result, err := c.service.DeleteTenant(r.Context(), tenantUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetTenant - Retrieves the details of a tenant
func (c *TenantsAPIController) GetTenant(w http.ResponseWriter, r *http.Request) {
	tenantUuidParam := chi.URLParam(r, "tenant_uuid")
	if tenantUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"tenant_uuid"}, nil)
		return
	}
	result, err := c.service.GetTenant(r.Context(), tenantUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetTenants - Retrieves the list of tenants
func (c *TenantsAPIController) GetTenants(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetTenants(r.Context(), orderParam, directionParam, limitParam, offsetParam, searchParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateTenant - Modify a tenant
func (c *TenantsAPIController) UpdateTenant(w http.ResponseWriter, r *http.Request) {
	tenantUuidParam := chi.URLParam(r, "tenant_uuid")
	if tenantUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"tenant_uuid"}, nil)
		return
	}
	bodyParam := TenantEdit{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTenantEditRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTenantEditConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateTenant(r.Context(), tenantUuidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
