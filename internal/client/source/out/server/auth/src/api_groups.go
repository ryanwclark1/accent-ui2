/*
 * accent-auth
 *
 * Accent's authentication service
 *
 * API version: 0.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package authserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// GroupsAPIController binds http requests to an api service and writes the service results to the http response
type GroupsAPIController struct {
	service      GroupsAPIServicer
	errorHandler ErrorHandler
}

// GroupsAPIOption for how the controller is set up.
type GroupsAPIOption func(*GroupsAPIController)

// WithGroupsAPIErrorHandler inject ErrorHandler into controller
func WithGroupsAPIErrorHandler(h ErrorHandler) GroupsAPIOption {
	return func(c *GroupsAPIController) {
		c.errorHandler = h
	}
}

// NewGroupsAPIController creates a default api controller
func NewGroupsAPIController(s GroupsAPIServicer, opts ...GroupsAPIOption) Router {
	controller := &GroupsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GroupsAPIController
func (c *GroupsAPIController) Routes() Routes {
	return Routes{
		"AddGroupPolicy": Route{
			strings.ToUpper("Put"),
			"/0.1/groups/{group_uuid}/policies/{policy_uuid}",
			c.AddGroupPolicy,
		},
		"AddGroupUser": Route{
			strings.ToUpper("Put"),
			"/0.1/groups/{group_uuid}/users/{user_uuid}",
			c.AddGroupUser,
		},
		"DeleteGroup": Route{
			strings.ToUpper("Delete"),
			"/0.1/groups/{group_uuid}",
			c.DeleteGroup,
		},
		"DeleteGroupPolicy": Route{
			strings.ToUpper("Delete"),
			"/0.1/groups/{group_uuid}/policies/{policy_uuid}",
			c.DeleteGroupPolicy,
		},
		"EditGroup": Route{
			strings.ToUpper("Put"),
			"/0.1/groups/{group_uuid}",
			c.EditGroup,
		},
		"GetGroup": Route{
			strings.ToUpper("Get"),
			"/0.1/groups/{group_uuid}",
			c.GetGroup,
		},
		"GetGroupPolicies": Route{
			strings.ToUpper("Get"),
			"/0.1/groups/{group_uuid}/policies",
			c.GetGroupPolicies,
		},
		"GetGroupUsers": Route{
			strings.ToUpper("Get"),
			"/0.1/groups/{group_uuid}/users",
			c.GetGroupUsers,
		},
		"RemoveGroupUser": Route{
			strings.ToUpper("Delete"),
			"/0.1/groups/{group_uuid}/users/{user_uuid}",
			c.RemoveGroupUser,
		},
	}
}

// AddGroupPolicy - Associate a group to a policy
func (c *GroupsAPIController) AddGroupPolicy(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	policyUuidParam := chi.URLParam(r, "policy_uuid")
	if policyUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"policy_uuid"}, nil)
		return
	}
	result, err := c.service.AddGroupPolicy(r.Context(), groupUuidParam, policyUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddGroupUser - Associate a group to a user
func (c *GroupsAPIController) AddGroupUser(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	result, err := c.service.AddGroupUser(r.Context(), groupUuidParam, userUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteGroup - Delete a group
func (c *GroupsAPIController) DeleteGroup(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteGroup(r.Context(), groupUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteGroupPolicy - Dissociate a policy from a group
func (c *GroupsAPIController) DeleteGroupPolicy(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	policyUuidParam := chi.URLParam(r, "policy_uuid")
	if policyUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"policy_uuid"}, nil)
		return
	}
	result, err := c.service.DeleteGroupPolicy(r.Context(), groupUuidParam, policyUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EditGroup - Modify a group
func (c *GroupsAPIController) EditGroup(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	bodyParam := GroupPut{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGroupPutRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGroupPutConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.EditGroup(r.Context(), groupUuidParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGroup - Retrieves the details of a group
func (c *GroupsAPIController) GetGroup(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetGroup(r.Context(), groupUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGroupPolicies - Retrieves the list of policies associated to a group
func (c *GroupsAPIController) GetGroupPolicies(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.GetGroupPolicies(r.Context(), groupUuidParam, orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGroupUsers - Retrieves the list of users associated to a group
func (c *GroupsAPIController) GetGroupUsers(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.GetGroupUsers(r.Context(), groupUuidParam, orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveGroupUser - Dissociate a user from a group
func (c *GroupsAPIController) RemoveGroupUser(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	result, err := c.service.RemoveGroupUser(r.Context(), groupUuidParam, userUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
