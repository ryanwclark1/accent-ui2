/*
 * accent-auth
 *
 * Accent's authentication service
 *
 * API version: 0.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package authserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// ConfigAPIController binds http requests to an api service and writes the service results to the http response
type ConfigAPIController struct {
	service      ConfigAPIServicer
	errorHandler ErrorHandler
}

// ConfigAPIOption for how the controller is set up.
type ConfigAPIOption func(*ConfigAPIController)

// WithConfigAPIErrorHandler inject ErrorHandler into controller
func WithConfigAPIErrorHandler(h ErrorHandler) ConfigAPIOption {
	return func(c *ConfigAPIController) {
		c.errorHandler = h
	}
}

// NewConfigAPIController creates a default api controller
func NewConfigAPIController(s ConfigAPIServicer, opts ...ConfigAPIOption) Router {
	controller := &ConfigAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ConfigAPIController
func (c *ConfigAPIController) Routes() Routes {
	return Routes{
		"GetConfig": Route{
			strings.ToUpper("Get"),
			"/0.1/config",
			c.GetConfig,
		},
		"PatchConfig": Route{
			strings.ToUpper("Patch"),
			"/0.1/config",
			c.PatchConfig,
		},
	}
}

// GetConfig - Show the current configuration
func (c *ConfigAPIController) GetConfig(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetConfig(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PatchConfig - Update the current configuration.
func (c *ConfigAPIController) PatchConfig(w http.ResponseWriter, r *http.Request) {
	configPatchParam := []ConfigPatchItem{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&configPatchParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range configPatchParam {
		if err := AssertConfigPatchItemRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PatchConfig(r.Context(), configPatchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
