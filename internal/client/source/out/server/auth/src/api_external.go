/*
 * accent-auth
 *
 * Accent's authentication service
 *
 * API version: 0.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package authserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// ExternalAPIController binds http requests to an api service and writes the service results to the http response
type ExternalAPIController struct {
	service      ExternalAPIServicer
	errorHandler ErrorHandler
}

// ExternalAPIOption for how the controller is set up.
type ExternalAPIOption func(*ExternalAPIController)

// WithExternalAPIErrorHandler inject ErrorHandler into controller
func WithExternalAPIErrorHandler(h ErrorHandler) ExternalAPIOption {
	return func(c *ExternalAPIController) {
		c.errorHandler = h
	}
}

// NewExternalAPIController creates a default api controller
func NewExternalAPIController(s ExternalAPIServicer, opts ...ExternalAPIOption) Router {
	controller := &ExternalAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ExternalAPIController
func (c *ExternalAPIController) Routes() Routes {
	return Routes{
		"DeleteExternalAuthConfig": Route{
			strings.ToUpper("Delete"),
			"/0.1/external/{auth_type}/config",
			c.DeleteExternalAuthConfig,
		},
		"GetExternalAuthConfig": Route{
			strings.ToUpper("Get"),
			"/0.1/external/{auth_type}/config",
			c.GetExternalAuthConfig,
		},
		"GetExternalAuthUsers": Route{
			strings.ToUpper("Get"),
			"/0.1/external/{auth_type}/users",
			c.GetExternalAuthUsers,
		},
		"GetUserExternalAuth": Route{
			strings.ToUpper("Get"),
			"/0.1/users/{user_uuid}/external",
			c.GetUserExternalAuth,
		},
		"PostExternalAuthConfig": Route{
			strings.ToUpper("Post"),
			"/0.1/external/{auth_type}/config",
			c.PostExternalAuthConfig,
		},
		"UpdateExternalAuthConfig": Route{
			strings.ToUpper("Put"),
			"/0.1/external/{auth_type}/config",
			c.UpdateExternalAuthConfig,
		},
	}
}

// DeleteExternalAuthConfig - Delete the client id and client secret
func (c *ExternalAPIController) DeleteExternalAuthConfig(w http.ResponseWriter, r *http.Request) {
	authTypeParam := chi.URLParam(r, "auth_type")
	if authTypeParam == "" {
		c.errorHandler(w, r, &RequiredError{"auth_type"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteExternalAuthConfig(r.Context(), authTypeParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetExternalAuthConfig - Retrieve the client id and client secret
func (c *ExternalAPIController) GetExternalAuthConfig(w http.ResponseWriter, r *http.Request) {
	authTypeParam := chi.URLParam(r, "auth_type")
	if authTypeParam == "" {
		c.errorHandler(w, r, &RequiredError{"auth_type"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetExternalAuthConfig(r.Context(), authTypeParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetExternalAuthUsers - Retrieves the list of connected users to this external source
func (c *ExternalAPIController) GetExternalAuthUsers(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	authTypeParam := chi.URLParam(r, "auth_type")
	if authTypeParam == "" {
		c.errorHandler(w, r, &RequiredError{"auth_type"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var recurseParam bool
	if query.Has("recurse") {
		param, err := parseBoolParameter(
			query.Get("recurse"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recurseParam = param
	} else {
		var param bool = false
		recurseParam = param
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	result, err := c.service.GetExternalAuthUsers(r.Context(), authTypeParam, accentTenantParam, recurseParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserExternalAuth - Retrieves the list of the users external auth data
func (c *ExternalAPIController) GetUserExternalAuth(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.GetUserExternalAuth(r.Context(), userUuidParam, orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PostExternalAuthConfig - Add configuration for the given auth_type
func (c *ExternalAPIController) PostExternalAuthConfig(w http.ResponseWriter, r *http.Request) {
	authTypeParam := chi.URLParam(r, "auth_type")
	if authTypeParam == "" {
		c.errorHandler(w, r, &RequiredError{"auth_type"}, nil)
		return
	}
	configParam := ExternalConfig{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&configParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertExternalConfigRequired(configParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertExternalConfigConstraints(configParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.PostExternalAuthConfig(r.Context(), authTypeParam, configParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateExternalAuthConfig - Update configuration for the given auth_type
func (c *ExternalAPIController) UpdateExternalAuthConfig(w http.ResponseWriter, r *http.Request) {
	authTypeParam := chi.URLParam(r, "auth_type")
	if authTypeParam == "" {
		c.errorHandler(w, r, &RequiredError{"auth_type"}, nil)
		return
	}
	configParam := ExternalConfig{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&configParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertExternalConfigRequired(configParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertExternalConfigConstraints(configParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateExternalAuthConfig(r.Context(), authTypeParam, configParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
