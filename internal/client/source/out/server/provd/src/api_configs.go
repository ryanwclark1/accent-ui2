/*
 * accent-provd
 *
 * Provisioning application REST API
 *
 * API version: 0.2
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package provdserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// ConfigsAPIController binds http requests to an api service and writes the service results to the http response
type ConfigsAPIController struct {
	service      ConfigsAPIServicer
	errorHandler ErrorHandler
}

// ConfigsAPIOption for how the controller is set up.
type ConfigsAPIOption func(*ConfigsAPIController)

// WithConfigsAPIErrorHandler inject ErrorHandler into controller
func WithConfigsAPIErrorHandler(h ErrorHandler) ConfigsAPIOption {
	return func(c *ConfigsAPIController) {
		c.errorHandler = h
	}
}

// NewConfigsAPIController creates a default api controller
func NewConfigsAPIController(s ConfigsAPIServicer, opts ...ConfigsAPIOption) Router {
	controller := &ConfigsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ConfigsAPIController
func (c *ConfigsAPIController) Routes() Routes {
	return Routes{
		"DeleteCfgMgrConfigsConfigId": Route{
			strings.ToUpper("Delete"),
			"/0.2/cfg_mgr/configs/{config_id}",
			c.DeleteCfgMgrConfigsConfigId,
		},
		"GetCfgMgr": Route{
			strings.ToUpper("Get"),
			"/0.2/cfg_mgr",
			c.GetCfgMgr,
		},
		"GetCfgMgrConfig": Route{
			strings.ToUpper("Get"),
			"/0.2/cfg_mgr/configs/{config_id}",
			c.GetCfgMgrConfig,
		},
		"GetCfgMgrConfigs": Route{
			strings.ToUpper("Get"),
			"/0.2/cfg_mgr/configs",
			c.GetCfgMgrConfigs,
		},
		"GetCfgMgrRawConfig": Route{
			strings.ToUpper("Get"),
			"/0.2/cfg_mgr/configs/{config_id}/raw",
			c.GetCfgMgrRawConfig,
		},
		"PostCfgMgrAutocreate": Route{
			strings.ToUpper("Post"),
			"/0.2/cfg_mgr/autocreate",
			c.PostCfgMgrAutocreate,
		},
		"PostCfgMgrConfigs": Route{
			strings.ToUpper("Post"),
			"/0.2/cfg_mgr/configs",
			c.PostCfgMgrConfigs,
		},
		"PutCfgMgrConfig": Route{
			strings.ToUpper("Put"),
			"/0.2/cfg_mgr/configs/{config_id}",
			c.PutCfgMgrConfig,
		},
	}
}

// DeleteCfgMgrConfigsConfigId - Delete a configuration
func (c *ConfigsAPIController) DeleteCfgMgrConfigsConfigId(w http.ResponseWriter, r *http.Request) {
	configIdParam := chi.URLParam(r, "config_id")
	if configIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"config_id"}, nil)
		return
	}
	result, err := c.service.DeleteCfgMgrConfigsConfigId(r.Context(), configIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetCfgMgr - Get the Config Manager resource
func (c *ConfigsAPIController) GetCfgMgr(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCfgMgr(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetCfgMgrConfig - Get a configuration
func (c *ConfigsAPIController) GetCfgMgrConfig(w http.ResponseWriter, r *http.Request) {
	configIdParam := chi.URLParam(r, "config_id")
	if configIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"config_id"}, nil)
		return
	}
	result, err := c.service.GetCfgMgrConfig(r.Context(), configIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetCfgMgrConfigs - List and find configurations
func (c *ConfigsAPIController) GetCfgMgrConfigs(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var qParam string
	if query.Has("q") {
		param := query.Get("q")

		qParam = param
	} else {
	}
	var fieldsParam string
	if query.Has("fields") {
		param := query.Get("fields")

		fieldsParam = param
	} else {
	}
	var skipParam int32
	if query.Has("skip") {
		param, err := parseNumericParameter[int32](
			query.Get("skip"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		skipParam = param
	} else {
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	var sortOrdParam string
	if query.Has("sort_ord") {
		param := query.Get("sort_ord")

		sortOrdParam = param
	} else {
	}
	result, err := c.service.GetCfgMgrConfigs(r.Context(), qParam, fieldsParam, skipParam, sortParam, sortOrdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetCfgMgrRawConfig - Get a raw configuration
func (c *ConfigsAPIController) GetCfgMgrRawConfig(w http.ResponseWriter, r *http.Request) {
	configIdParam := chi.URLParam(r, "config_id")
	if configIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"config_id"}, nil)
		return
	}
	result, err := c.service.GetCfgMgrRawConfig(r.Context(), configIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PostCfgMgrAutocreate - Create an autocreate configuration
func (c *ConfigsAPIController) PostCfgMgrAutocreate(w http.ResponseWriter, r *http.Request) {
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.PostCfgMgrAutocreate(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PostCfgMgrConfigs - Create a configuration
func (c *ConfigsAPIController) PostCfgMgrConfigs(w http.ResponseWriter, r *http.Request) {
	bodyParam := ConfigObject{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfigObjectRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConfigObjectConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostCfgMgrConfigs(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PutCfgMgrConfig - Update a configuration
func (c *ConfigsAPIController) PutCfgMgrConfig(w http.ResponseWriter, r *http.Request) {
	configIdParam := chi.URLParam(r, "config_id")
	if configIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"config_id"}, nil)
		return
	}
	bodyParam := ConfigObject{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfigObjectRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConfigObjectConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutCfgMgrConfig(r.Context(), configIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
