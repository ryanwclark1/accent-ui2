/*
 * accent-provd
 *
 * Provisioning application REST API
 *
 * API version: 0.2
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package provdserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// PluginsAPIController binds http requests to an api service and writes the service results to the http response
type PluginsAPIController struct {
	service      PluginsAPIServicer
	errorHandler ErrorHandler
}

// PluginsAPIOption for how the controller is set up.
type PluginsAPIOption func(*PluginsAPIController)

// WithPluginsAPIErrorHandler inject ErrorHandler into controller
func WithPluginsAPIErrorHandler(h ErrorHandler) PluginsAPIOption {
	return func(c *PluginsAPIController) {
		c.errorHandler = h
	}
}

// NewPluginsAPIController creates a default api controller
func NewPluginsAPIController(s PluginsAPIServicer, opts ...PluginsAPIOption) Router {
	controller := &PluginsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PluginsAPIController
func (c *PluginsAPIController) Routes() Routes {
	return Routes{
		"DeletePgMgrInstall": Route{
			strings.ToUpper("Delete"),
			"/0.2/pg_mgr/install/install/{operation_id}",
			c.DeletePgMgrInstall,
		},
		"DeletePgMgrInstallMonitor": Route{
			strings.ToUpper("Delete"),
			"/0.2/pg_mgr/plugins/{plugin_id}/install/install/{operation_id}",
			c.DeletePgMgrInstallMonitor,
		},
		"DeletePgMgrMonitor": Route{
			strings.ToUpper("Delete"),
			"/0.2/pg_mgr/install/update/{operation_id}",
			c.DeletePgMgrMonitor,
		},
		"DeletePgMgrPluginUpgradeMonitor": Route{
			strings.ToUpper("Delete"),
			"/0.2/pg_mgr/plugins/{plugin_id}/install/upgrade/{operation_id}",
			c.DeletePgMgrPluginUpgradeMonitor,
		},
		"DeletePgMgrUpgradeMonitor": Route{
			strings.ToUpper("Delete"),
			"/0.2/pg_mgr/install/upgrade/{operation_id}",
			c.DeletePgMgrUpgradeMonitor,
		},
		"GetPgMgr": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr",
			c.GetPgMgr,
		},
		"GetPgMgrInstall": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr/install",
			c.GetPgMgrInstall,
		},
		"GetPgMgrInstallStatus": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr/install/install/{operation_id}",
			c.GetPgMgrInstallStatus,
		},
		"GetPgMgrInstallable": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr/install/installable",
			c.GetPgMgrInstallable,
		},
		"GetPgMgrInstallableList": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr/plugins/{plugin_id}/install/installable",
			c.GetPgMgrInstallableList,
		},
		"GetPgMgrInstalled": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr/install/installed",
			c.GetPgMgrInstalled,
		},
		"GetPgMgrInstalledList": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr/plugins/{plugin_id}/install/installed",
			c.GetPgMgrInstalledList,
		},
		"GetPgMgrPlugin": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr/plugins/{plugin_id}",
			c.GetPgMgrPlugin,
		},
		"GetPgMgrPluginInfo": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr/plugins/{plugin_id}/info",
			c.GetPgMgrPluginInfo,
		},
		"GetPgMgrPluginInstall": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr/plugins/{plugin_id}/install",
			c.GetPgMgrPluginInstall,
		},
		"GetPgMgrPluginInstallStatus": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr/plugins/{plugin_id}/install/install/{operation_id}",
			c.GetPgMgrPluginInstallStatus,
		},
		"GetPgMgrPluginUpgradeStatus": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr/plugins/{plugin_id}/install/upgrade/{operation_id}",
			c.GetPgMgrPluginUpgradeStatus,
		},
		"GetPgMgrPlugins": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr/plugins",
			c.GetPgMgrPlugins,
		},
		"GetPgMgrUpdateStatus": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr/install/update/{operation_id}",
			c.GetPgMgrUpdateStatus,
		},
		"GetPgMgrUpgradeStatus": Route{
			strings.ToUpper("Get"),
			"/0.2/pg_mgr/install/upgrade/{operation_id}",
			c.GetPgMgrUpgradeStatus,
		},
		"PostPgMgrInstallPlugin": Route{
			strings.ToUpper("Post"),
			"/0.2/pg_mgr/install/install",
			c.PostPgMgrInstallPlugin,
		},
		"PostPgMgrPluginInstallPlugin": Route{
			strings.ToUpper("Post"),
			"/0.2/pg_mgr/plugins/{plugin_id}/install/install",
			c.PostPgMgrPluginInstallPlugin,
		},
		"PostPgMgrPluginUninstallPlugin": Route{
			strings.ToUpper("Post"),
			"/0.2/pg_mgr/plugins/{plugin_id}/install/uninstall",
			c.PostPgMgrPluginUninstallPlugin,
		},
		"PostPgMgrReload": Route{
			strings.ToUpper("Post"),
			"/0.2/pg_mgr/reload",
			c.PostPgMgrReload,
		},
		"PostPgMgrUninstallPlugin": Route{
			strings.ToUpper("Post"),
			"/0.2/pg_mgr/install/uninstall",
			c.PostPgMgrUninstallPlugin,
		},
		"PostPgMgrUpdateList": Route{
			strings.ToUpper("Post"),
			"/0.2/pg_mgr/install/update",
			c.PostPgMgrUpdateList,
		},
		"PostPgMgrUpgradePlugin": Route{
			strings.ToUpper("Post"),
			"/0.2/pg_mgr/install/upgrade",
			c.PostPgMgrUpgradePlugin,
		},
	}
}

// DeletePgMgrInstall - Delete the Operation In Progress
func (c *PluginsAPIController) DeletePgMgrInstall(w http.ResponseWriter, r *http.Request) {
	operationIdParam := chi.URLParam(r, "operation_id")
	if operationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"operation_id"}, nil)
		return
	}
	result, err := c.service.DeletePgMgrInstall(r.Context(), operationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeletePgMgrInstallMonitor - Delete the Operation In Progress
func (c *PluginsAPIController) DeletePgMgrInstallMonitor(w http.ResponseWriter, r *http.Request) {
	pluginIdParam := chi.URLParam(r, "plugin_id")
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"plugin_id"}, nil)
		return
	}
	operationIdParam := chi.URLParam(r, "operation_id")
	if operationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"operation_id"}, nil)
		return
	}
	result, err := c.service.DeletePgMgrInstallMonitor(r.Context(), pluginIdParam, operationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeletePgMgrMonitor - Delete the Operation In Progress
func (c *PluginsAPIController) DeletePgMgrMonitor(w http.ResponseWriter, r *http.Request) {
	operationIdParam := chi.URLParam(r, "operation_id")
	if operationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"operation_id"}, nil)
		return
	}
	result, err := c.service.DeletePgMgrMonitor(r.Context(), operationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeletePgMgrPluginUpgradeMonitor - Delete the Operation In Progress
func (c *PluginsAPIController) DeletePgMgrPluginUpgradeMonitor(w http.ResponseWriter, r *http.Request) {
	pluginIdParam := chi.URLParam(r, "plugin_id")
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"plugin_id"}, nil)
		return
	}
	operationIdParam := chi.URLParam(r, "operation_id")
	if operationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"operation_id"}, nil)
		return
	}
	result, err := c.service.DeletePgMgrPluginUpgradeMonitor(r.Context(), pluginIdParam, operationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeletePgMgrUpgradeMonitor - Delete the Operation In Progress
func (c *PluginsAPIController) DeletePgMgrUpgradeMonitor(w http.ResponseWriter, r *http.Request) {
	operationIdParam := chi.URLParam(r, "operation_id")
	if operationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"operation_id"}, nil)
		return
	}
	result, err := c.service.DeletePgMgrUpgradeMonitor(r.Context(), operationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgr - Get the Plugin Manager resource
func (c *PluginsAPIController) GetPgMgr(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPgMgr(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgrInstall - Get the installation service resources
func (c *PluginsAPIController) GetPgMgrInstall(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPgMgrInstall(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgrInstallStatus - Get the status of a plugin installation Operation In Progress
func (c *PluginsAPIController) GetPgMgrInstallStatus(w http.ResponseWriter, r *http.Request) {
	operationIdParam := chi.URLParam(r, "operation_id")
	if operationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"operation_id"}, nil)
		return
	}
	result, err := c.service.GetPgMgrInstallStatus(r.Context(), operationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgrInstallable - Get the installable plugins list
func (c *PluginsAPIController) GetPgMgrInstallable(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPgMgrInstallable(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgrInstallableList - Get the installable packages list
func (c *PluginsAPIController) GetPgMgrInstallableList(w http.ResponseWriter, r *http.Request) {
	pluginIdParam := chi.URLParam(r, "plugin_id")
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"plugin_id"}, nil)
		return
	}
	result, err := c.service.GetPgMgrInstallableList(r.Context(), pluginIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgrInstalled - Get the installed plugins list
func (c *PluginsAPIController) GetPgMgrInstalled(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPgMgrInstalled(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgrInstalledList - Get the installed packages list
func (c *PluginsAPIController) GetPgMgrInstalledList(w http.ResponseWriter, r *http.Request) {
	pluginIdParam := chi.URLParam(r, "plugin_id")
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"plugin_id"}, nil)
		return
	}
	result, err := c.service.GetPgMgrInstalledList(r.Context(), pluginIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgrPlugin - Get the resources of a specific plugin
func (c *PluginsAPIController) GetPgMgrPlugin(w http.ResponseWriter, r *http.Request) {
	pluginIdParam := chi.URLParam(r, "plugin_id")
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"plugin_id"}, nil)
		return
	}
	result, err := c.service.GetPgMgrPlugin(r.Context(), pluginIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgrPluginInfo - Get the information of a plugin
func (c *PluginsAPIController) GetPgMgrPluginInfo(w http.ResponseWriter, r *http.Request) {
	pluginIdParam := chi.URLParam(r, "plugin_id")
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"plugin_id"}, nil)
		return
	}
	result, err := c.service.GetPgMgrPluginInfo(r.Context(), pluginIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgrPluginInstall - Get the package installation service resources
func (c *PluginsAPIController) GetPgMgrPluginInstall(w http.ResponseWriter, r *http.Request) {
	pluginIdParam := chi.URLParam(r, "plugin_id")
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"plugin_id"}, nil)
		return
	}
	result, err := c.service.GetPgMgrPluginInstall(r.Context(), pluginIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgrPluginInstallStatus - Get the status of a package installation Operation In Progress
func (c *PluginsAPIController) GetPgMgrPluginInstallStatus(w http.ResponseWriter, r *http.Request) {
	pluginIdParam := chi.URLParam(r, "plugin_id")
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"plugin_id"}, nil)
		return
	}
	operationIdParam := chi.URLParam(r, "operation_id")
	if operationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"operation_id"}, nil)
		return
	}
	result, err := c.service.GetPgMgrPluginInstallStatus(r.Context(), pluginIdParam, operationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgrPluginUpgradeStatus - Get the status of a package upgrade Operation In Progress
func (c *PluginsAPIController) GetPgMgrPluginUpgradeStatus(w http.ResponseWriter, r *http.Request) {
	pluginIdParam := chi.URLParam(r, "plugin_id")
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"plugin_id"}, nil)
		return
	}
	operationIdParam := chi.URLParam(r, "operation_id")
	if operationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"operation_id"}, nil)
		return
	}
	result, err := c.service.GetPgMgrPluginUpgradeStatus(r.Context(), pluginIdParam, operationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgrPlugins - List the installed plugins
func (c *PluginsAPIController) GetPgMgrPlugins(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPgMgrPlugins(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgrUpdateStatus - Get the status of a plugin database update Operation In Progress
func (c *PluginsAPIController) GetPgMgrUpdateStatus(w http.ResponseWriter, r *http.Request) {
	operationIdParam := chi.URLParam(r, "operation_id")
	if operationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"operation_id"}, nil)
		return
	}
	result, err := c.service.GetPgMgrUpdateStatus(r.Context(), operationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetPgMgrUpgradeStatus - Get the status of a plugin upgrade Operation In Progress
func (c *PluginsAPIController) GetPgMgrUpgradeStatus(w http.ResponseWriter, r *http.Request) {
	operationIdParam := chi.URLParam(r, "operation_id")
	if operationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"operation_id"}, nil)
		return
	}
	result, err := c.service.GetPgMgrUpgradeStatus(r.Context(), operationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PostPgMgrInstallPlugin - Install a plugin
func (c *PluginsAPIController) PostPgMgrInstallPlugin(w http.ResponseWriter, r *http.Request) {
	bodyParam := IdObject{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIdObjectRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIdObjectConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostPgMgrInstallPlugin(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PostPgMgrPluginInstallPlugin - Install a package
func (c *PluginsAPIController) PostPgMgrPluginInstallPlugin(w http.ResponseWriter, r *http.Request) {
	pluginIdParam := chi.URLParam(r, "plugin_id")
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"plugin_id"}, nil)
		return
	}
	bodyParam := IdObject{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIdObjectRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIdObjectConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostPgMgrPluginInstallPlugin(r.Context(), pluginIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PostPgMgrPluginUninstallPlugin - Uninstall a package
func (c *PluginsAPIController) PostPgMgrPluginUninstallPlugin(w http.ResponseWriter, r *http.Request) {
	pluginIdParam := chi.URLParam(r, "plugin_id")
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"plugin_id"}, nil)
		return
	}
	bodyParam := IdObject{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIdObjectRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIdObjectConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostPgMgrPluginUninstallPlugin(r.Context(), pluginIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PostPgMgrReload - Reload a plugin
func (c *PluginsAPIController) PostPgMgrReload(w http.ResponseWriter, r *http.Request) {
	bodyParam := IdObject{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIdObjectRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIdObjectConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostPgMgrReload(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PostPgMgrUninstallPlugin - Uninstall a plugin
func (c *PluginsAPIController) PostPgMgrUninstallPlugin(w http.ResponseWriter, r *http.Request) {
	bodyParam := IdObject{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIdObjectRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIdObjectConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostPgMgrUninstallPlugin(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PostPgMgrUpdateList - Update the List of installable plugins
func (c *PluginsAPIController) PostPgMgrUpdateList(w http.ResponseWriter, r *http.Request) {
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.PostPgMgrUpdateList(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PostPgMgrUpgradePlugin - Upgrade a plugin
func (c *PluginsAPIController) PostPgMgrUpgradePlugin(w http.ResponseWriter, r *http.Request) {
	bodyParam := IdObject{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIdObjectRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIdObjectConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostPgMgrUpgradePlugin(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
