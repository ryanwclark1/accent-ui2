/*
 * accent-provd
 *
 * Provisioning application REST API
 *
 * API version: 0.2
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package provdserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// ProvdAPIController binds http requests to an api service and writes the service results to the http response
type ProvdAPIController struct {
	service      ProvdAPIServicer
	errorHandler ErrorHandler
}

// ProvdAPIOption for how the controller is set up.
type ProvdAPIOption func(*ProvdAPIController)

// WithProvdAPIErrorHandler inject ErrorHandler into controller
func WithProvdAPIErrorHandler(h ErrorHandler) ProvdAPIOption {
	return func(c *ProvdAPIController) {
		c.errorHandler = h
	}
}

// NewProvdAPIController creates a default api controller
func NewProvdAPIController(s ProvdAPIServicer, opts ...ProvdAPIOption) Router {
	controller := &ProvdAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProvdAPIController
func (c *ProvdAPIController) Routes() Routes {
	return Routes{
		"GetConfigure": Route{
			strings.ToUpper("Get"),
			"/0.2/configure",
			c.GetConfigure,
		},
		"GetConfigureParamId": Route{
			strings.ToUpper("Get"),
			"/0.2/configure/{param_id}",
			c.GetConfigureParamId,
		},
		"GetProvd": Route{
			strings.ToUpper("Get"),
			"/0.2/",
			c.GetProvd,
		},
		"PutConfigureFtpProxy": Route{
			strings.ToUpper("Put"),
			"/0.2/configure/ftp_proxy",
			c.PutConfigureFtpProxy,
		},
		"PutConfigureHttpProxy": Route{
			strings.ToUpper("Put"),
			"/0.2/configure/http_proxy",
			c.PutConfigureHttpProxy,
		},
		"PutConfigureHttpsProxy": Route{
			strings.ToUpper("Put"),
			"/0.2/configure/https_proxy",
			c.PutConfigureHttpsProxy,
		},
		"PutConfigureLocale": Route{
			strings.ToUpper("Put"),
			"/0.2/configure/locale",
			c.PutConfigureLocale,
		},
		"PutConfigureNAT": Route{
			strings.ToUpper("Put"),
			"/0.2/configure/NAT",
			c.PutConfigureNAT,
		},
		"PutConfigureParamId": Route{
			strings.ToUpper("Put"),
			"/0.2/configure/{param_id}",
			c.PutConfigureParamId,
		},
		"PutConfigurePluginServer": Route{
			strings.ToUpper("Put"),
			"/0.2/configure/plugin_server",
			c.PutConfigurePluginServer,
		},
		"PutConfigureProvisioningKey": Route{
			strings.ToUpper("Put"),
			"/0.2/configure/provisioning_key",
			c.PutConfigureProvisioningKey,
		},
	}
}

// GetConfigure - Get the general provd configuration
func (c *ProvdAPIController) GetConfigure(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetConfigure(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetConfigureParamId - Get the configuration parameter value
func (c *ProvdAPIController) GetConfigureParamId(w http.ResponseWriter, r *http.Request) {
	paramIdParam := chi.URLParam(r, "param_id")
	if paramIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"param_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetConfigureParamId(r.Context(), paramIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetProvd - Get the Provd Manager resource
func (c *ProvdAPIController) GetProvd(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetProvd(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PutConfigureFtpProxy - Update the configuration's ftp_proxy
func (c *ProvdAPIController) PutConfigureFtpProxy(w http.ResponseWriter, r *http.Request) {
	bodyParam := FtpProxy{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFtpProxyRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFtpProxyConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutConfigureFtpProxy(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PutConfigureHttpProxy - Update the configuration's http_proxy
func (c *ProvdAPIController) PutConfigureHttpProxy(w http.ResponseWriter, r *http.Request) {
	bodyParam := HttpProxy{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertHttpProxyRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertHttpProxyConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutConfigureHttpProxy(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PutConfigureHttpsProxy - Update the configuration's https_proxy
func (c *ProvdAPIController) PutConfigureHttpsProxy(w http.ResponseWriter, r *http.Request) {
	bodyParam := HttpsProxy{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertHttpsProxyRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertHttpsProxyConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutConfigureHttpsProxy(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PutConfigureLocale - Update the configuration's locale
func (c *ProvdAPIController) PutConfigureLocale(w http.ResponseWriter, r *http.Request) {
	bodyParam := Locale{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLocaleRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLocaleConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutConfigureLocale(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PutConfigureNAT - Update the configuration's NAT
func (c *ProvdAPIController) PutConfigureNAT(w http.ResponseWriter, r *http.Request) {
	bodyParam := Nat{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNatRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNatConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutConfigureNAT(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PutConfigureParamId - Set the value of a parameter
func (c *ProvdAPIController) PutConfigureParamId(w http.ResponseWriter, r *http.Request) {
	paramIdParam := chi.URLParam(r, "param_id")
	if paramIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"param_id"}, nil)
		return
	}
	bodyParam := Param{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertParamRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertParamConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutConfigureParamId(r.Context(), paramIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PutConfigurePluginServer - Update the configuration's plugin_server
func (c *ProvdAPIController) PutConfigurePluginServer(w http.ResponseWriter, r *http.Request) {
	bodyParam := PluginServer{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPluginServerRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPluginServerConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutConfigurePluginServer(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PutConfigureProvisioningKey - Update the tenant provisioning key
func (c *ProvdAPIController) PutConfigureProvisioningKey(w http.ResponseWriter, r *http.Request) {
	accentTenantParam := r.Header.Get("Accent-Tenant")
	bodyParam := ProvisioningKey{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProvisioningKeyRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProvisioningKeyConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutConfigureProvisioningKey(r.Context(), accentTenantParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
