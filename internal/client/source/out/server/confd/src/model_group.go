/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

type Group struct {

	// The id of the group
	Id int32 `json:"id,omitempty"`

	// The name of the group
	Name string `json:"name,omitempty"`

	// Group UUID. This ID is globally unique across multiple Accent instances
	Uuid string `json:"uuid,omitempty"`

	Extensions []ExtensionRelationBase `json:"extensions,omitempty"`

	Fallbacks GroupFallbacks `json:"fallbacks,omitempty"`

	Incalls []GroupRelationIncall `json:"incalls,omitempty"`

	Members GroupRelationMemberUsers `json:"members,omitempty"`

	Schedules []ScheduleRelationBase `json:"schedules,omitempty"`

	CallPermissions []CallPermissionRelationBase `json:"call_permissions,omitempty"`

	// How the caller_id_name will be treated
	CallerIdMode string `json:"caller_id_mode,omitempty"`

	// Name to display
	CallerIdName string `json:"caller_id_name,omitempty"`

	// Enable/Disable the group
	Enabled bool `json:"enabled,omitempty"`

	// Mark all calls as \"answered elsewhere\" when cancelled
	MarkAnsweredElsewhere bool `json:"mark_answered_elsewhere,omitempty"`

	// Name of the MOH category to use for music on hold
	MusicOnHold string `json:"music_on_hold,omitempty"`

	PreprocessSubroutine string `json:"preprocess_subroutine,omitempty"`

	// Number of seconds before the member of group will ring again
	RetryDelay int32 `json:"retry_delay,omitempty"`

	// Notify the member even if it already in communication
	RingInUse bool `json:"ring_in_use,omitempty"`

	RingStrategy string `json:"ring_strategy,omitempty"`

	// The UUID of the tenant
	TenantUuid string `json:"tenant_uuid,omitempty"`

	// Number of seconds the group will ring before falling back
	Timeout int32 `json:"timeout,omitempty"`

	// Number of seconds the member of group will ring
	UserTimeout int32 `json:"user_timeout,omitempty"`
}

// AssertGroupRequired checks if the required fields are not zero-ed
func AssertGroupRequired(obj Group) error {
	for _, el := range obj.Extensions {
		if err := AssertExtensionRelationBaseRequired(el); err != nil {
			return err
		}
	}
	if err := AssertGroupFallbacksRequired(obj.Fallbacks); err != nil {
		return err
	}
	for _, el := range obj.Incalls {
		if err := AssertGroupRelationIncallRequired(el); err != nil {
			return err
		}
	}
	if err := AssertGroupRelationMemberUsersRequired(obj.Members); err != nil {
		return err
	}
	for _, el := range obj.Schedules {
		if err := AssertScheduleRelationBaseRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CallPermissions {
		if err := AssertCallPermissionRelationBaseRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertGroupConstraints checks if the values respects the defined constraints
func AssertGroupConstraints(obj Group) error {
	return nil
}
