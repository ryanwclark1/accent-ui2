/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

type Voicemail struct {

	// Ask for password when accessing the voicemail menu
	AskPassword bool `json:"ask_password,omitempty"`

	// Attach an audio file of the recorded message when sending an email
	AttachAudio bool `json:"attach_audio,omitempty"`

	// Voicemail context
	Context string `json:"context"`

	// Delete messages after reception.  This can only be set along with 'email' and 'attach_audio' configured.
	DeleteMessages bool `json:"delete_messages,omitempty"`

	// Email address. Notifications and audio attachments will be sent to this address
	Email string `json:"email,omitempty"`

	// Voicemail can be used when it is enabled
	Enabled bool `json:"enabled,omitempty"`

	// Language used for the voicemail menu prompt
	Language string `json:"language,omitempty"`

	// Maximum number of messages to store
	MaxMessages int32 `json:"max_messages,omitempty"`

	// Mailbox number, for example `0001`
	Number string `json:"number"`

	// Advanced configuration options. Options are appended at the end of a  voicemail line in the file 'voicemail.conf' used by asterisk. Please consult the asterisk documentation for further details on available parameters. Options must have the following the form:  ``` {   \"options\": [     [\"name1\", \"value1\"],     [\"name2\", \"value2\"]   ] } ```  The resulting configuration in voicemail.conf will have the following form:  ``` 1000 => ,Firstname Lastname,,,name1=value1|name2=value2 ```
	Options [][]string `json:"options,omitempty"`

	// Email address. Summarized notifications will be sent to this address
	Pager string `json:"pager,omitempty"`

	// Numeric password used to access the voicemail
	Password string `json:"password,omitempty"`

	// The UUID of the tenant
	TenantUuid string `json:"tenant_uuid,omitempty"`

	// Timezone used for announcing at what time a message was recorded
	Timezone string `json:"timezone,omitempty"`

	// Voicemail ID
	Id int32 `json:"id,omitempty"`

	// Voicemail name
	Name string `json:"name,omitempty"`

	Users []UserRelationBase `json:"users,omitempty"`
}

// AssertVoicemailRequired checks if the required fields are not zero-ed
func AssertVoicemailRequired(obj Voicemail) error {
	elements := map[string]interface{}{
		"context": obj.Context,
		"number":  obj.Number,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Users {
		if err := AssertUserRelationBaseRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertVoicemailConstraints checks if the values respects the defined constraints
func AssertVoicemailConstraints(obj Voicemail) error {
	return nil
}
