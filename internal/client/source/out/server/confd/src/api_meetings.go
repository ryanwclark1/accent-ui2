/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// MeetingsAPIController binds http requests to an api service and writes the service results to the http response
type MeetingsAPIController struct {
	service      MeetingsAPIServicer
	errorHandler ErrorHandler
}

// MeetingsAPIOption for how the controller is set up.
type MeetingsAPIOption func(*MeetingsAPIController)

// WithMeetingsAPIErrorHandler inject ErrorHandler into controller
func WithMeetingsAPIErrorHandler(h ErrorHandler) MeetingsAPIOption {
	return func(c *MeetingsAPIController) {
		c.errorHandler = h
	}
}

// NewMeetingsAPIController creates a default api controller
func NewMeetingsAPIController(s MeetingsAPIServicer, opts ...MeetingsAPIOption) Router {
	controller := &MeetingsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MeetingsAPIController
func (c *MeetingsAPIController) Routes() Routes {
	return Routes{
		"CreateGuestMeetingAuthorization": Route{
			strings.ToUpper("Post"),
			"/1.1/guests/{guest_uuid}/meetings/{meeting_uuid}/authorizations",
			c.CreateGuestMeetingAuthorization,
		},
		"CreateMeeting": Route{
			strings.ToUpper("Post"),
			"/1.1/meetings",
			c.CreateMeeting,
		},
		"CreateUserMeeting": Route{
			strings.ToUpper("Post"),
			"/1.1/users/me/meetings",
			c.CreateUserMeeting,
		},
		"DeleteMeeting": Route{
			strings.ToUpper("Delete"),
			"/1.1/meetings/{meeting_uuid}",
			c.DeleteMeeting,
		},
		"DeleteUserMeeting": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/me/meetings/{meeting_uuid}",
			c.DeleteUserMeeting,
		},
		"DeleteUserMeetingAuthorization": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/me/meetings/{meeting_uuid}/authorizations/{authorization_uuid}",
			c.DeleteUserMeetingAuthorization,
		},
		"GetGuestMeeting": Route{
			strings.ToUpper("Get"),
			"/1.1/guests/me/meetings/{meeting_uuid}",
			c.GetGuestMeeting,
		},
		"GetGuestMeetingAuthorization": Route{
			strings.ToUpper("Get"),
			"/1.1/guests/{guest_uuid}/meetings/{meeting_uuid}/authorizations/{authorization_uuid}",
			c.GetGuestMeetingAuthorization,
		},
		"GetMeeting": Route{
			strings.ToUpper("Get"),
			"/1.1/meetings/{meeting_uuid}",
			c.GetMeeting,
		},
		"GetUserMeeting": Route{
			strings.ToUpper("Get"),
			"/1.1/users/me/meetings/{meeting_uuid}",
			c.GetUserMeeting,
		},
		"GetUserMeetingAuthorization": Route{
			strings.ToUpper("Get"),
			"/1.1/users/me/meetings/{meeting_uuid}/authorizations/{authorization_uuid}",
			c.GetUserMeetingAuthorization,
		},
		"ListMeetings": Route{
			strings.ToUpper("Get"),
			"/1.1/meetings",
			c.ListMeetings,
		},
		"ListUserMeetingAuthorizations": Route{
			strings.ToUpper("Get"),
			"/1.1/user/me/meetings/{meeting_uuid}/authorizations",
			c.ListUserMeetingAuthorizations,
		},
		"ListUserMeetings": Route{
			strings.ToUpper("Get"),
			"/1.1/users/me/meetings",
			c.ListUserMeetings,
		},
		"PutUserMeetingAuthorizationAccept": Route{
			strings.ToUpper("Put"),
			"/1.1/user/me/meetings/{meeting_uuid}/authorizations/{authorization_uuid}/accept",
			c.PutUserMeetingAuthorizationAccept,
		},
		"PutUserMeetingAuthorizationReject": Route{
			strings.ToUpper("Put"),
			"/1.1/user/me/meetings/{meeting_uuid}/authorizations/{authorization_uuid}/reject",
			c.PutUserMeetingAuthorizationReject,
		},
		"UpdateMeeting": Route{
			strings.ToUpper("Put"),
			"/1.1/meetings/{meeting_uuid}",
			c.UpdateMeeting,
		},
		"UpdateUserMeeting": Route{
			strings.ToUpper("Put"),
			"/1.1/users/me/meetings/{meeting_uuid}",
			c.UpdateUserMeeting,
		},
	}
}

// CreateGuestMeetingAuthorization - Request guest authorization to enter a meeting
func (c *MeetingsAPIController) CreateGuestMeetingAuthorization(w http.ResponseWriter, r *http.Request) {
	guestUuidParam := chi.URLParam(r, "guest_uuid")
	if guestUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"guest_uuid"}, nil)
		return
	}
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	bodyParam := MeetingAuthorizationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMeetingAuthorizationRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMeetingAuthorizationRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateGuestMeetingAuthorization(r.Context(), guestUuidParam, meetingUuidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateMeeting - Create meeting
func (c *MeetingsAPIController) CreateMeeting(w http.ResponseWriter, r *http.Request) {
	bodyParam := MeetingRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMeetingRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMeetingRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.CreateMeeting(r.Context(), bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateUserMeeting - Create user meeting
func (c *MeetingsAPIController) CreateUserMeeting(w http.ResponseWriter, r *http.Request) {
	bodyParam := MeetingUserRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMeetingUserRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMeetingUserRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.CreateUserMeeting(r.Context(), bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteMeeting - Delete meeting
func (c *MeetingsAPIController) DeleteMeeting(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteMeeting(r.Context(), meetingUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteUserMeeting - Delete one of the meetings of the current user
func (c *MeetingsAPIController) DeleteUserMeeting(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteUserMeeting(r.Context(), meetingUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteUserMeetingAuthorization - Delete the guest authorization to enter a meeting
func (c *MeetingsAPIController) DeleteUserMeetingAuthorization(w http.ResponseWriter, r *http.Request) {
	guestUuidParam := chi.URLParam(r, "guest_uuid")
	if guestUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"guest_uuid"}, nil)
		return
	}
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	authorizationUuidParam := chi.URLParam(r, "authorization_uuid")
	if authorizationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"authorization_uuid"}, nil)
		return
	}
	result, err := c.service.DeleteUserMeetingAuthorization(r.Context(), guestUuidParam, meetingUuidParam, authorizationUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetGuestMeeting - Get one guest meeting
func (c *MeetingsAPIController) GetGuestMeeting(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	result, err := c.service.GetGuestMeeting(r.Context(), meetingUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetGuestMeetingAuthorization - Read the guest authorization to enter a meeting
func (c *MeetingsAPIController) GetGuestMeetingAuthorization(w http.ResponseWriter, r *http.Request) {
	guestUuidParam := chi.URLParam(r, "guest_uuid")
	if guestUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"guest_uuid"}, nil)
		return
	}
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	authorizationUuidParam := chi.URLParam(r, "authorization_uuid")
	if authorizationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"authorization_uuid"}, nil)
		return
	}
	result, err := c.service.GetGuestMeetingAuthorization(r.Context(), guestUuidParam, meetingUuidParam, authorizationUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetMeeting - Get meeting
func (c *MeetingsAPIController) GetMeeting(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetMeeting(r.Context(), meetingUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserMeeting - Get one of the meetings of the current user
func (c *MeetingsAPIController) GetUserMeeting(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetUserMeeting(r.Context(), meetingUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserMeetingAuthorization - Read the guest authorization to enter a meeting
func (c *MeetingsAPIController) GetUserMeetingAuthorization(w http.ResponseWriter, r *http.Request) {
	guestUuidParam := chi.URLParam(r, "guest_uuid")
	if guestUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"guest_uuid"}, nil)
		return
	}
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	authorizationUuidParam := chi.URLParam(r, "authorization_uuid")
	if authorizationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"authorization_uuid"}, nil)
		return
	}
	result, err := c.service.GetUserMeetingAuthorization(r.Context(), guestUuidParam, meetingUuidParam, authorizationUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListMeetings - List meetings
func (c *MeetingsAPIController) ListMeetings(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var recurseParam bool
	if query.Has("recurse") {
		param, err := parseBoolParameter(
			query.Get("recurse"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recurseParam = param
	} else {
		var param bool = false
		recurseParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.ListMeetings(r.Context(), accentTenantParam, recurseParam, orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserMeetingAuthorizations - List all guest authorization requests of a meeting
func (c *MeetingsAPIController) ListUserMeetingAuthorizations(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	result, err := c.service.ListUserMeetingAuthorizations(r.Context(), meetingUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserMeetings - List user meetings
func (c *MeetingsAPIController) ListUserMeetings(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var recurseParam bool
	if query.Has("recurse") {
		param, err := parseBoolParameter(
			query.Get("recurse"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recurseParam = param
	} else {
		var param bool = false
		recurseParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.ListUserMeetings(r.Context(), accentTenantParam, recurseParam, orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PutUserMeetingAuthorizationAccept - Accept a guest authorization request
func (c *MeetingsAPIController) PutUserMeetingAuthorizationAccept(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	authorizationUuidParam := chi.URLParam(r, "authorization_uuid")
	if authorizationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"authorization_uuid"}, nil)
		return
	}
	result, err := c.service.PutUserMeetingAuthorizationAccept(r.Context(), meetingUuidParam, authorizationUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PutUserMeetingAuthorizationReject - Reject a guest authorization request
func (c *MeetingsAPIController) PutUserMeetingAuthorizationReject(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	authorizationUuidParam := chi.URLParam(r, "authorization_uuid")
	if authorizationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"authorization_uuid"}, nil)
		return
	}
	result, err := c.service.PutUserMeetingAuthorizationReject(r.Context(), meetingUuidParam, authorizationUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateMeeting - Update meeting
func (c *MeetingsAPIController) UpdateMeeting(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	bodyParam := MeetingRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMeetingRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMeetingRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateMeeting(r.Context(), meetingUuidParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUserMeeting - Update one of the meetings of the current user
func (c *MeetingsAPIController) UpdateUserMeeting(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	bodyParam := MeetingRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMeetingRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMeetingRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateUserMeeting(r.Context(), meetingUuidParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
