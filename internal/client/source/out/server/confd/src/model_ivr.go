/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

type Ivr struct {
	Incalls []IvrRelationIncall `json:"incalls,omitempty"`

	AbortDestination DestinationType `json:"abort_destination,omitempty"`

	// The sound played when the caller reach the maximum number of tries. Not used if an abort destination is set
	AbortSound string `json:"abort_sound,omitempty"`

	// The menu's choices
	Choices []IvrChoice `json:"choices,omitempty"`

	// Additional information about the IVR
	Description string `json:"description,omitempty"`

	// The sound played to greet the caller
	GreetingSound string `json:"greeting_sound,omitempty"`

	// The id of the IVR
	Id int32 `json:"id,omitempty"`

	InvalidDestination DestinationType `json:"invalid_destination,omitempty"`

	// The sound played when the caller choose an invalid option. Not used if an invalid destination is set
	InvalidSound string `json:"invalid_sound,omitempty"`

	// The maximum number of tries before aborting the call. Both a timeout and an invalid choice counts toward the number of tries
	MaxTries int32 `json:"max_tries,omitempty"`

	// The sound played to prompt the caller for input
	MenuSound string `json:"menu_sound,omitempty"`

	// The name of the IVR
	Name string `json:"name,omitempty"`

	// The UUID of the tenant
	TenantUuid string `json:"tenant_uuid,omitempty"`

	// Number of seconds to wait after the menu sound is played before either replaying the menu, redirecting the call to the timeout destination (if set) or aborting the call (if the maximum number of tries has been reached)
	Timeout int32 `json:"timeout,omitempty"`

	TimeoutDestination DestinationType `json:"timeout_destination,omitempty"`
}

// AssertIvrRequired checks if the required fields are not zero-ed
func AssertIvrRequired(obj Ivr) error {
	for _, el := range obj.Incalls {
		if err := AssertIvrRelationIncallRequired(el); err != nil {
			return err
		}
	}
	if err := AssertDestinationTypeRequired(obj.AbortDestination); err != nil {
		return err
	}
	for _, el := range obj.Choices {
		if err := AssertIvrChoiceRequired(el); err != nil {
			return err
		}
	}
	if err := AssertDestinationTypeRequired(obj.InvalidDestination); err != nil {
		return err
	}
	if err := AssertDestinationTypeRequired(obj.TimeoutDestination); err != nil {
		return err
	}
	return nil
}

// AssertIvrConstraints checks if the values respects the defined constraints
func AssertIvrConstraints(obj Ivr) error {
	return nil
}
