/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

type Registrar struct {

	// Backup registrar host
	BackupHost string `json:"backup_host,omitempty"`

	// Backup registrar port
	BackupPort int32 `json:"backup_port,omitempty"`

	// Define if the registrar can be deleted
	Deletable bool `json:"deletable,omitempty"`

	// Registrar identifier
	Id string `json:"id,omitempty"`

	// Registrar host
	MainHost string `json:"main_host"`

	// Registrar port
	MainPort int32 `json:"main_port,omitempty"`

	// Display name of the registrar
	Name string `json:"name,omitempty"`

	// Outbound proxy host
	OutboundProxyHost string `json:"outbound_proxy_host,omitempty"`

	// Outbound proxy port
	OutboundProxyPort int32 `json:"outbound_proxy_port,omitempty"`

	// Backup proxy host
	ProxyBackupHost string `json:"proxy_backup_host,omitempty"`

	// Backup proxy port
	ProxyBackupPort int32 `json:"proxy_backup_port,omitempty"`

	// Proxy host. Using IPv4 is recommended to have a better integration with some provisioning plugins. (ex: Yealink DND integration)
	ProxyMainHost string `json:"proxy_main_host"`

	// Proxy port
	ProxyMainPort int32 `json:"proxy_main_port,omitempty"`
}

// AssertRegistrarRequired checks if the required fields are not zero-ed
func AssertRegistrarRequired(obj Registrar) error {
	elements := map[string]interface{}{
		"main_host":       obj.MainHost,
		"proxy_main_host": obj.ProxyMainHost,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRegistrarConstraints checks if the values respects the defined constraints
func AssertRegistrarConstraints(obj Registrar) error {
	return nil
}
