/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

type Conference struct {
	Id int32 `json:"id,omitempty"`

	// name to identify the conference
	Name string `json:"name,omitempty"`

	Extensions []ExtensionRelationBase `json:"extensions,omitempty"`

	Incalls []ConferenceRelationIncall `json:"incalls,omitempty"`

	// Administrator pin to enter in the conference
	AdminPin string `json:"admin_pin,omitempty"`

	// Record name and announce join/leave
	AnnounceJoinLeave bool `json:"announce_join_leave,omitempty"`

	// Announce when a participant is alone in conference
	AnnounceOnlyUser bool `json:"announce_only_user,omitempty"`

	// Announce the number of participants
	AnnounceUserCount bool `json:"announce_user_count,omitempty"`

	// Maximum users allowed in the conference. This exclude admin.
	MaxUsers int32 `json:"max_users,omitempty"`

	// Name of the MOH category to use for music on hold
	MusicOnHold string `json:"music_on_hold,omitempty"`

	// Pin to enter in the conference
	Pin string `json:"pin,omitempty"`

	// Name of the subroutine to execute in asterisk before entering the conference
	PreprocessSubroutine string `json:"preprocess_subroutine,omitempty"`

	// Play 'beep' notification when join/leave a conference
	QuietJoinLeave bool `json:"quiet_join_leave,omitempty"`

	// Record the conference
	Record bool `json:"record,omitempty"`

	// The UUID of the tenant
	TenantUuid string `json:"tenant_uuid,omitempty"`
}

// AssertConferenceRequired checks if the required fields are not zero-ed
func AssertConferenceRequired(obj Conference) error {
	for _, el := range obj.Extensions {
		if err := AssertExtensionRelationBaseRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Incalls {
		if err := AssertConferenceRelationIncallRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertConferenceConstraints checks if the values respects the defined constraints
func AssertConferenceConstraints(obj Conference) error {
	return nil
}
