/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// LinesAPIController binds http requests to an api service and writes the service results to the http response
type LinesAPIController struct {
	service      LinesAPIServicer
	errorHandler ErrorHandler
}

// LinesAPIOption for how the controller is set up.
type LinesAPIOption func(*LinesAPIController)

// WithLinesAPIErrorHandler inject ErrorHandler into controller
func WithLinesAPIErrorHandler(h ErrorHandler) LinesAPIOption {
	return func(c *LinesAPIController) {
		c.errorHandler = h
	}
}

// NewLinesAPIController creates a default api controller
func NewLinesAPIController(s LinesAPIServicer, opts ...LinesAPIOption) Router {
	controller := &LinesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LinesAPIController
func (c *LinesAPIController) Routes() Routes {
	return Routes{
		"AssociateLineApplication": Route{
			strings.ToUpper("Put"),
			"/1.1/lines/{line_id}/applications/{application_uuid}",
			c.AssociateLineApplication,
		},
		"AssociateLineDevice": Route{
			strings.ToUpper("Put"),
			"/1.1/lines/{line_id}/devices/{device_id}",
			c.AssociateLineDevice,
		},
		"AssociateLineEndpointCustom": Route{
			strings.ToUpper("Put"),
			"/1.1/lines/{line_id}/endpoints/custom/{custom_id}",
			c.AssociateLineEndpointCustom,
		},
		"AssociateLineEndpointSccp": Route{
			strings.ToUpper("Put"),
			"/1.1/lines/{line_id}/endpoints/sccp/{sccp_id}",
			c.AssociateLineEndpointSccp,
		},
		"AssociateLineEndpointSip": Route{
			strings.ToUpper("Put"),
			"/1.1/lines/{line_id}/endpoints/sip/{sip_uuid}",
			c.AssociateLineEndpointSip,
		},
		"AssociateLineExtension": Route{
			strings.ToUpper("Put"),
			"/1.1/lines/{line_id}/extensions/{extension_id}",
			c.AssociateLineExtension,
		},
		"AssociateUserLine": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/lines/{line_id}",
			c.AssociateUserLine,
		},
		"AssociateUserLines": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/lines",
			c.AssociateUserLines,
		},
		"CreateLine": Route{
			strings.ToUpper("Post"),
			"/1.1/lines",
			c.CreateLine,
		},
		"CreateLineExtension": Route{
			strings.ToUpper("Post"),
			"/1.1/lines/{line_id}/extensions",
			c.CreateLineExtension,
		},
		"DeleteLine": Route{
			strings.ToUpper("Delete"),
			"/1.1/lines/{line_id}",
			c.DeleteLine,
		},
		"DissociateLineApplication": Route{
			strings.ToUpper("Delete"),
			"/1.1/lines/{line_id}/applications/{application_uuid}",
			c.DissociateLineApplication,
		},
		"DissociateLineDevice": Route{
			strings.ToUpper("Delete"),
			"/1.1/lines/{line_id}/devices/{device_id}",
			c.DissociateLineDevice,
		},
		"DissociateLineEndpointCustom": Route{
			strings.ToUpper("Delete"),
			"/1.1/lines/{line_id}/endpoints/custom/{custom_id}",
			c.DissociateLineEndpointCustom,
		},
		"DissociateLineEndpointSccp": Route{
			strings.ToUpper("Delete"),
			"/1.1/lines/{line_id}/endpoints/sccp/{sccp_id}",
			c.DissociateLineEndpointSccp,
		},
		"DissociateLineEndpointSip": Route{
			strings.ToUpper("Delete"),
			"/1.1/lines/{line_id}/endpoints/sip/{sip_uuid}",
			c.DissociateLineEndpointSip,
		},
		"DissociateLineExtension": Route{
			strings.ToUpper("Delete"),
			"/1.1/lines/{line_id}/extensions/{extension_id}",
			c.DissociateLineExtension,
		},
		"DissociateUserLine": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/{user_id}/lines/{line_id}",
			c.DissociateUserLine,
		},
		"GetDeviceLineAssociation": Route{
			strings.ToUpper("Get"),
			"/1.1/devices/{device_id}/lines",
			c.GetDeviceLineAssociation,
		},
		"GetLine": Route{
			strings.ToUpper("Get"),
			"/1.1/lines/{line_id}",
			c.GetLine,
		},
		"GetLineDevice": Route{
			strings.ToUpper("Get"),
			"/1.1/lines/{line_id}/devices",
			c.GetLineDevice,
		},
		"GetUserLineAssociatedEndpointsSip": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_uuid}/lines/{line_id}/associated/endpoints/sip",
			c.GetUserLineAssociatedEndpointsSip,
		},
		"GetUserLineMainAssociatedEndpointsSip": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_uuid}/lines/main/associated/endpoints/sip",
			c.GetUserLineMainAssociatedEndpointsSip,
		},
		"ListLines": Route{
			strings.ToUpper("Get"),
			"/1.1/lines",
			c.ListLines,
		},
		"UpdateLine": Route{
			strings.ToUpper("Put"),
			"/1.1/lines/{line_id}",
			c.UpdateLine,
		},
	}
}

// AssociateLineApplication - Associate line and application
func (c *LinesAPIController) AssociateLineApplication(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	applicationUuidParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "application_uuid"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.AssociateLineApplication(r.Context(), lineIdParam, applicationUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AssociateLineDevice - Associate line and device
func (c *LinesAPIController) AssociateLineDevice(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	deviceIdParam := chi.URLParam(r, "device_id")
	if deviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"device_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.AssociateLineDevice(r.Context(), lineIdParam, deviceIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AssociateLineEndpointCustom - Associate line and Custom endpoint
func (c *LinesAPIController) AssociateLineEndpointCustom(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	customIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "custom_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AssociateLineEndpointCustom(r.Context(), lineIdParam, customIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AssociateLineEndpointSccp - Associate line and SCCP endpoint
func (c *LinesAPIController) AssociateLineEndpointSccp(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	sccpIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "sccp_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AssociateLineEndpointSccp(r.Context(), lineIdParam, sccpIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AssociateLineEndpointSip - Associate line and SIP endpoint
func (c *LinesAPIController) AssociateLineEndpointSip(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	sipUuidParam := chi.URLParam(r, "sip_uuid")
	if sipUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"sip_uuid"}, nil)
		return
	}
	result, err := c.service.AssociateLineEndpointSip(r.Context(), lineIdParam, sipUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AssociateLineExtension - Associate line and extension
func (c *LinesAPIController) AssociateLineExtension(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	extensionIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "extension_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AssociateLineExtension(r.Context(), lineIdParam, extensionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AssociateUserLine - Associate user and line
func (c *LinesAPIController) AssociateUserLine(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AssociateUserLine(r.Context(), userIdParam, lineIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AssociateUserLines - Associate user and lines
func (c *LinesAPIController) AssociateUserLines(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	bodyParam := LinesId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLinesIdRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLinesIdConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AssociateUserLines(r.Context(), userIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateLine - Create line
func (c *LinesAPIController) CreateLine(w http.ResponseWriter, r *http.Request) {
	bodyParam := LineCreate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLineCreateRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLineCreateConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.CreateLine(r.Context(), bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateLineExtension - Create extension
func (c *LinesAPIController) CreateLineExtension(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := Extension{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertExtensionRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertExtensionConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.CreateLineExtension(r.Context(), lineIdParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteLine - Delete line
func (c *LinesAPIController) DeleteLine(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteLine(r.Context(), lineIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateLineApplication - Dissociate line and application
func (c *LinesAPIController) DissociateLineApplication(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	applicationUuidParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "application_uuid"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DissociateLineApplication(r.Context(), lineIdParam, applicationUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateLineDevice - Dissociate line and device
func (c *LinesAPIController) DissociateLineDevice(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	deviceIdParam := chi.URLParam(r, "device_id")
	if deviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"device_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DissociateLineDevice(r.Context(), lineIdParam, deviceIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateLineEndpointCustom - Dissociate line and Custom endpoint
func (c *LinesAPIController) DissociateLineEndpointCustom(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	customIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "custom_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DissociateLineEndpointCustom(r.Context(), lineIdParam, customIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateLineEndpointSccp - Dissociate line and SCCP endpoint
func (c *LinesAPIController) DissociateLineEndpointSccp(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	sccpIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "sccp_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DissociateLineEndpointSccp(r.Context(), lineIdParam, sccpIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateLineEndpointSip - Dissociate line and SIP endpoint
func (c *LinesAPIController) DissociateLineEndpointSip(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	sipUuidParam := chi.URLParam(r, "sip_uuid")
	if sipUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"sip_uuid"}, nil)
		return
	}
	result, err := c.service.DissociateLineEndpointSip(r.Context(), lineIdParam, sipUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateLineExtension - Dissociate line and extension
func (c *LinesAPIController) DissociateLineExtension(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	extensionIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "extension_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DissociateLineExtension(r.Context(), lineIdParam, extensionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateUserLine - Dissociate user and line
func (c *LinesAPIController) DissociateUserLine(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DissociateUserLine(r.Context(), userIdParam, lineIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetDeviceLineAssociation - List lines associated to device
func (c *LinesAPIController) GetDeviceLineAssociation(w http.ResponseWriter, r *http.Request) {
	deviceIdParam := chi.URLParam(r, "device_id")
	if deviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"device_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetDeviceLineAssociation(r.Context(), deviceIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetLine - Get line
func (c *LinesAPIController) GetLine(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetLine(r.Context(), lineIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetLineDevice - Get Device associated to Line
func (c *LinesAPIController) GetLineDevice(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetLineDevice(r.Context(), lineIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserLineAssociatedEndpointsSip - Get SIP endpoint of a line for a user
func (c *LinesAPIController) GetUserLineAssociatedEndpointsSip(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var viewParam string
	if query.Has("view") {
		param := query.Get("view")

		viewParam = param
	} else {
	}
	result, err := c.service.GetUserLineAssociatedEndpointsSip(r.Context(), userUuidParam, lineIdParam, viewParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserLineMainAssociatedEndpointsSip - Get SIP endpoint of main line for a user
func (c *LinesAPIController) GetUserLineMainAssociatedEndpointsSip(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	var viewParam string
	if query.Has("view") {
		param := query.Get("view")

		viewParam = param
	} else {
	}
	result, err := c.service.GetUserLineMainAssociatedEndpointsSip(r.Context(), userUuidParam, viewParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListLines - List lines
func (c *LinesAPIController) ListLines(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var recurseParam bool
	if query.Has("recurse") {
		param, err := parseBoolParameter(
			query.Get("recurse"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recurseParam = param
	} else {
		var param bool = false
		recurseParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.ListLines(r.Context(), accentTenantParam, recurseParam, orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateLine - Update line
func (c *LinesAPIController) UpdateLine(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := Line{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLineRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLineConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateLine(r.Context(), lineIdParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
