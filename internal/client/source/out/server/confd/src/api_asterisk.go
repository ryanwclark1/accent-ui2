/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// AsteriskAPIController binds http requests to an api service and writes the service results to the http response
type AsteriskAPIController struct {
	service      AsteriskAPIServicer
	errorHandler ErrorHandler
}

// AsteriskAPIOption for how the controller is set up.
type AsteriskAPIOption func(*AsteriskAPIController)

// WithAsteriskAPIErrorHandler inject ErrorHandler into controller
func WithAsteriskAPIErrorHandler(h ErrorHandler) AsteriskAPIOption {
	return func(c *AsteriskAPIController) {
		c.errorHandler = h
	}
}

// NewAsteriskAPIController creates a default api controller
func NewAsteriskAPIController(s AsteriskAPIServicer, opts ...AsteriskAPIOption) Router {
	controller := &AsteriskAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AsteriskAPIController
func (c *AsteriskAPIController) Routes() Routes {
	return Routes{
		"ListAsteriskConfbridgeAccentDefaultBridge": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/confbridge/accent_default_bridge",
			c.ListAsteriskConfbridgeAccentDefaultBridge,
		},
		"ListAsteriskConfbridgeAccentDefaultUser": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/confbridge/accent_default_user",
			c.ListAsteriskConfbridgeAccentDefaultUser,
		},
		"ListAsteriskFeaturesApplicationmap": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/features/applicationmap",
			c.ListAsteriskFeaturesApplicationmap,
		},
		"ListAsteriskFeaturesFeaturemap": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/features/featuremap",
			c.ListAsteriskFeaturesFeaturemap,
		},
		"ListAsteriskFeaturesGeneral": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/features/general",
			c.ListAsteriskFeaturesGeneral,
		},
		"ListAsteriskHepGeneral": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/hep/general",
			c.ListAsteriskHepGeneral,
		},
		"ListAsteriskIaxCallnumberlimits": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/iax/callnumberlimits",
			c.ListAsteriskIaxCallnumberlimits,
		},
		"ListAsteriskIaxGeneral": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/iax/general",
			c.ListAsteriskIaxGeneral,
		},
		"ListAsteriskPjsipGlobal": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/pjsip/global",
			c.ListAsteriskPjsipGlobal,
		},
		"ListAsteriskPjsipSystem": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/pjsip/system",
			c.ListAsteriskPjsipSystem,
		},
		"ListAsteriskQueueGeneral": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/queues/general",
			c.ListAsteriskQueueGeneral,
		},
		"ListAsteriskRtpGeneral": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/rtp/general",
			c.ListAsteriskRtpGeneral,
		},
		"ListAsteriskRtpIceHostCandidates": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/rtp/ice_host_candidates",
			c.ListAsteriskRtpIceHostCandidates,
		},
		"ListAsteriskSccpGeneral": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/sccp/general",
			c.ListAsteriskSccpGeneral,
		},
		"ListAsteriskVoicemailGeneral": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/voicemail/general",
			c.ListAsteriskVoicemailGeneral,
		},
		"ListAsteriskVoicemailZonemessages": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/voicemail/zonemessages",
			c.ListAsteriskVoicemailZonemessages,
		},
		"ShowPjsipDoc": Route{
			strings.ToUpper("Get"),
			"/1.1/asterisk/pjsip/doc",
			c.ShowPjsipDoc,
		},
		"UpdateAsteriskConfbridgeAccentDefaultBridge": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/confbridge/accent_default_bridge",
			c.UpdateAsteriskConfbridgeAccentDefaultBridge,
		},
		"UpdateAsteriskConfbridgeAccentDefaultUser": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/confbridge/accent_default_user",
			c.UpdateAsteriskConfbridgeAccentDefaultUser,
		},
		"UpdateAsteriskFeaturesApplicationmap": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/features/applicationmap",
			c.UpdateAsteriskFeaturesApplicationmap,
		},
		"UpdateAsteriskFeaturesFeaturemap": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/features/featuremap",
			c.UpdateAsteriskFeaturesFeaturemap,
		},
		"UpdateAsteriskFeaturesGeneral": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/features/general",
			c.UpdateAsteriskFeaturesGeneral,
		},
		"UpdateAsteriskHepGeneral": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/hep/general",
			c.UpdateAsteriskHepGeneral,
		},
		"UpdateAsteriskIaxCallnumberlimits": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/iax/callnumberlimits",
			c.UpdateAsteriskIaxCallnumberlimits,
		},
		"UpdateAsteriskIaxGeneral": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/iax/general",
			c.UpdateAsteriskIaxGeneral,
		},
		"UpdateAsteriskPjsipGlobal": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/pjsip/global",
			c.UpdateAsteriskPjsipGlobal,
		},
		"UpdateAsteriskPjsipSystem": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/pjsip/system",
			c.UpdateAsteriskPjsipSystem,
		},
		"UpdateAsteriskQueueGeneral": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/queues/general",
			c.UpdateAsteriskQueueGeneral,
		},
		"UpdateAsteriskRtpGeneral": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/rtp/general",
			c.UpdateAsteriskRtpGeneral,
		},
		"UpdateAsteriskRtpIceHostCandidates": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/rtp/ice_host_candidates",
			c.UpdateAsteriskRtpIceHostCandidates,
		},
		"UpdateAsteriskSccpGeneral": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/sccp/general",
			c.UpdateAsteriskSccpGeneral,
		},
		"UpdateAsteriskVoicemailGeneral": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/voicemail/general",
			c.UpdateAsteriskVoicemailGeneral,
		},
		"UpdateAsteriskVoicemailZonemessages": Route{
			strings.ToUpper("Put"),
			"/1.1/asterisk/voicemail/zonemessages",
			c.UpdateAsteriskVoicemailZonemessages,
		},
	}
}

// ListAsteriskConfbridgeAccentDefaultBridge - List ConfBridge accent_default_bridge options
func (c *AsteriskAPIController) ListAsteriskConfbridgeAccentDefaultBridge(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskConfbridgeAccentDefaultBridge(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskConfbridgeAccentDefaultUser - List ConfBridge accent_default_user options
func (c *AsteriskAPIController) ListAsteriskConfbridgeAccentDefaultUser(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskConfbridgeAccentDefaultUser(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskFeaturesApplicationmap - List Features applicationmap options
func (c *AsteriskAPIController) ListAsteriskFeaturesApplicationmap(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskFeaturesApplicationmap(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskFeaturesFeaturemap - List Features featuremap options
func (c *AsteriskAPIController) ListAsteriskFeaturesFeaturemap(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskFeaturesFeaturemap(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskFeaturesGeneral - List Features general options
func (c *AsteriskAPIController) ListAsteriskFeaturesGeneral(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskFeaturesGeneral(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskHepGeneral - List HEP general options
func (c *AsteriskAPIController) ListAsteriskHepGeneral(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskHepGeneral(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskIaxCallnumberlimits - List IAX callnumberlimits options
func (c *AsteriskAPIController) ListAsteriskIaxCallnumberlimits(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskIaxCallnumberlimits(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskIaxGeneral - List IAX general options
func (c *AsteriskAPIController) ListAsteriskIaxGeneral(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskIaxGeneral(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskPjsipGlobal - List of PJSIP options for the `global` section
func (c *AsteriskAPIController) ListAsteriskPjsipGlobal(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskPjsipGlobal(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskPjsipSystem - List of PJSIP options for the `system` section
func (c *AsteriskAPIController) ListAsteriskPjsipSystem(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskPjsipSystem(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskQueueGeneral - List Queue general options
func (c *AsteriskAPIController) ListAsteriskQueueGeneral(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskQueueGeneral(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskRtpGeneral - List RTP general options
func (c *AsteriskAPIController) ListAsteriskRtpGeneral(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskRtpGeneral(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskRtpIceHostCandidates - List RTP ice_host_candidates options
func (c *AsteriskAPIController) ListAsteriskRtpIceHostCandidates(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskRtpIceHostCandidates(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskSccpGeneral - List SCCP general options
func (c *AsteriskAPIController) ListAsteriskSccpGeneral(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskSccpGeneral(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskVoicemailGeneral - List Voicemail general options
func (c *AsteriskAPIController) ListAsteriskVoicemailGeneral(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskVoicemailGeneral(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListAsteriskVoicemailZonemessages - List Voicemail zonemessages options
func (c *AsteriskAPIController) ListAsteriskVoicemailZonemessages(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAsteriskVoicemailZonemessages(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ShowPjsipDoc - List all PJSIP configuration options
func (c *AsteriskAPIController) ShowPjsipDoc(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ShowPjsipDoc(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskConfbridgeAccentDefaultBridge - Update ConfBridge accent_default_bridge option
func (c *AsteriskAPIController) UpdateAsteriskConfbridgeAccentDefaultBridge(w http.ResponseWriter, r *http.Request) {
	bodyParam := ConfBridgeConfiguration{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfBridgeConfigurationRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConfBridgeConfigurationConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskConfbridgeAccentDefaultBridge(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskConfbridgeAccentDefaultUser - Update ConfBridge accent_default_user option
func (c *AsteriskAPIController) UpdateAsteriskConfbridgeAccentDefaultUser(w http.ResponseWriter, r *http.Request) {
	bodyParam := ConfBridgeConfiguration{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfBridgeConfigurationRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConfBridgeConfigurationConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskConfbridgeAccentDefaultUser(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskFeaturesApplicationmap - Update Features applicationmap option
func (c *AsteriskAPIController) UpdateAsteriskFeaturesApplicationmap(w http.ResponseWriter, r *http.Request) {
	bodyParam := FeaturesConfiguration{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFeaturesConfigurationRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFeaturesConfigurationConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskFeaturesApplicationmap(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskFeaturesFeaturemap - Update Features featuremap option
func (c *AsteriskAPIController) UpdateAsteriskFeaturesFeaturemap(w http.ResponseWriter, r *http.Request) {
	bodyParam := FeaturesConfiguration{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFeaturesConfigurationRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFeaturesConfigurationConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskFeaturesFeaturemap(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskFeaturesGeneral - Update Features general option
func (c *AsteriskAPIController) UpdateAsteriskFeaturesGeneral(w http.ResponseWriter, r *http.Request) {
	bodyParam := FeaturesConfiguration{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFeaturesConfigurationRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFeaturesConfigurationConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskFeaturesGeneral(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskHepGeneral - Update HEP general option
func (c *AsteriskAPIController) UpdateAsteriskHepGeneral(w http.ResponseWriter, r *http.Request) {
	bodyParam := HepConfiguration{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertHepConfigurationRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertHepConfigurationConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskHepGeneral(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskIaxCallnumberlimits - Update IAX callnumberlimits option
func (c *AsteriskAPIController) UpdateAsteriskIaxCallnumberlimits(w http.ResponseWriter, r *http.Request) {
	bodyParam := IaxCallNumberLimitss{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIaxCallNumberLimitssRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIaxCallNumberLimitssConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskIaxCallnumberlimits(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskIaxGeneral - Update IAX general option
func (c *AsteriskAPIController) UpdateAsteriskIaxGeneral(w http.ResponseWriter, r *http.Request) {
	bodyParam := IaxGeneral{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIaxGeneralRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIaxGeneralConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskIaxGeneral(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskPjsipGlobal - Update PJSIP section options
func (c *AsteriskAPIController) UpdateAsteriskPjsipGlobal(w http.ResponseWriter, r *http.Request) {
	bodyParam := PjsipGlobal{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPjsipGlobalRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPjsipGlobalConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskPjsipGlobal(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskPjsipSystem - Update PJSIP section options
func (c *AsteriskAPIController) UpdateAsteriskPjsipSystem(w http.ResponseWriter, r *http.Request) {
	bodyParam := PjsipSystem{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPjsipSystemRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPjsipSystemConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskPjsipSystem(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskQueueGeneral - Update Queue general option
func (c *AsteriskAPIController) UpdateAsteriskQueueGeneral(w http.ResponseWriter, r *http.Request) {
	bodyParam := QueueGeneral{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertQueueGeneralRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertQueueGeneralConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskQueueGeneral(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskRtpGeneral - Update RTP general option
func (c *AsteriskAPIController) UpdateAsteriskRtpGeneral(w http.ResponseWriter, r *http.Request) {
	bodyParam := RtpConfiguration{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRtpConfigurationRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRtpConfigurationConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskRtpGeneral(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskRtpIceHostCandidates - Update RTP ice_host_candidates option
func (c *AsteriskAPIController) UpdateAsteriskRtpIceHostCandidates(w http.ResponseWriter, r *http.Request) {
	bodyParam := RtpConfiguration{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRtpConfigurationRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRtpConfigurationConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskRtpIceHostCandidates(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskSccpGeneral - Update SCCP general option
func (c *AsteriskAPIController) UpdateAsteriskSccpGeneral(w http.ResponseWriter, r *http.Request) {
	bodyParam := SccpGeneral{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSccpGeneralRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSccpGeneralConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskSccpGeneral(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskVoicemailGeneral - Update Voicemail general option
func (c *AsteriskAPIController) UpdateAsteriskVoicemailGeneral(w http.ResponseWriter, r *http.Request) {
	bodyParam := VoicemailGeneral{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVoicemailGeneralRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVoicemailGeneralConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskVoicemailGeneral(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateAsteriskVoicemailZonemessages - Update Voicemail zonemessages option
func (c *AsteriskAPIController) UpdateAsteriskVoicemailZonemessages(w http.ResponseWriter, r *http.Request) {
	bodyParam := VoicemailZoneMessages{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVoicemailZoneMessagesRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVoicemailZoneMessagesConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAsteriskVoicemailZonemessages(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
