/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// CallfiltersAPIController binds http requests to an api service and writes the service results to the http response
type CallfiltersAPIController struct {
	service      CallfiltersAPIServicer
	errorHandler ErrorHandler
}

// CallfiltersAPIOption for how the controller is set up.
type CallfiltersAPIOption func(*CallfiltersAPIController)

// WithCallfiltersAPIErrorHandler inject ErrorHandler into controller
func WithCallfiltersAPIErrorHandler(h ErrorHandler) CallfiltersAPIOption {
	return func(c *CallfiltersAPIController) {
		c.errorHandler = h
	}
}

// NewCallfiltersAPIController creates a default api controller
func NewCallfiltersAPIController(s CallfiltersAPIServicer, opts ...CallfiltersAPIOption) Router {
	controller := &CallfiltersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CallfiltersAPIController
func (c *CallfiltersAPIController) Routes() Routes {
	return Routes{
		"CreateCallfilter": Route{
			strings.ToUpper("Post"),
			"/1.1/callfilters",
			c.CreateCallfilter,
		},
		"DeleteCallfilter": Route{
			strings.ToUpper("Delete"),
			"/1.1/callfilters/{callfilter_id}",
			c.DeleteCallfilter,
		},
		"GetCallFilterFallback": Route{
			strings.ToUpper("Get"),
			"/1.1/callfilters/{callfilter_id}/fallbacks",
			c.GetCallFilterFallback,
		},
		"GetCallfilter": Route{
			strings.ToUpper("Get"),
			"/1.1/callfilters/{callfilter_id}",
			c.GetCallfilter,
		},
		"ListCallFilters": Route{
			strings.ToUpper("Get"),
			"/1.1/callfilters",
			c.ListCallFilters,
		},
		"UpdateCallFilterCallerUsers": Route{
			strings.ToUpper("Put"),
			"/1.1/callfilters/{callfilter_id}/recipients/users",
			c.UpdateCallFilterCallerUsers,
		},
		"UpdateCallFilterFallback": Route{
			strings.ToUpper("Put"),
			"/1.1/callfilters/{callfilter_id}/fallbacks",
			c.UpdateCallFilterFallback,
		},
		"UpdateCallFilterMemberUsers": Route{
			strings.ToUpper("Put"),
			"/1.1/callfilters/{callfilter_id}/surrogates/users",
			c.UpdateCallFilterMemberUsers,
		},
		"UpdateCallfilter": Route{
			strings.ToUpper("Put"),
			"/1.1/callfilters/{callfilter_id}",
			c.UpdateCallfilter,
		},
	}
}

// CreateCallfilter - Create call filter
func (c *CallfiltersAPIController) CreateCallfilter(w http.ResponseWriter, r *http.Request) {
	bodyParam := CallFilter{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCallFilterRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCallFilterConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.CreateCallfilter(r.Context(), bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteCallfilter - Delete call filter
func (c *CallfiltersAPIController) DeleteCallfilter(w http.ResponseWriter, r *http.Request) {
	callfilterIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callfilter_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteCallfilter(r.Context(), callfilterIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCallFilterFallback - List all fallbacks for call filter
func (c *CallfiltersAPIController) GetCallFilterFallback(w http.ResponseWriter, r *http.Request) {
	callfilterIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callfilter_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetCallFilterFallback(r.Context(), callfilterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCallfilter - Get call filter
func (c *CallfiltersAPIController) GetCallfilter(w http.ResponseWriter, r *http.Request) {
	callfilterIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callfilter_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetCallfilter(r.Context(), callfilterIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListCallFilters - List call filters
func (c *CallfiltersAPIController) ListCallFilters(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var recurseParam bool
	if query.Has("recurse") {
		param, err := parseBoolParameter(
			query.Get("recurse"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recurseParam = param
	} else {
		var param bool = false
		recurseParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.ListCallFilters(r.Context(), accentTenantParam, recurseParam, orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCallFilterCallerUsers - Update call filter and recipients
func (c *CallfiltersAPIController) UpdateCallFilterCallerUsers(w http.ResponseWriter, r *http.Request) {
	callfilterIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callfilter_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := CallFilterRecipientUsersUuid{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCallFilterRecipientUsersUuidRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCallFilterRecipientUsersUuidConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCallFilterCallerUsers(r.Context(), callfilterIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCallFilterFallback - Update call filter's fallbacks
func (c *CallfiltersAPIController) UpdateCallFilterFallback(w http.ResponseWriter, r *http.Request) {
	callfilterIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callfilter_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := CallFilterFallbacks{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCallFilterFallbacksRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCallFilterFallbacksConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCallFilterFallback(r.Context(), callfilterIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCallFilterMemberUsers - Update call filter and surrogates
func (c *CallfiltersAPIController) UpdateCallFilterMemberUsers(w http.ResponseWriter, r *http.Request) {
	callfilterIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callfilter_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := UsersUuid{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUsersUuidRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUsersUuidConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCallFilterMemberUsers(r.Context(), callfilterIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCallfilter - Update call filter
func (c *CallfiltersAPIController) UpdateCallfilter(w http.ResponseWriter, r *http.Request) {
	callfilterIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callfilter_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := CallFilter{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCallFilterRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCallFilterConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateCallfilter(r.Context(), callfilterIdParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
