/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

type LineView struct {

	// Line ID
	Id int32 `json:"id,omitempty"`

	// The name of the line
	Name string `json:"name,omitempty"`

	Application ApplicationRelationBase `json:"application,omitempty"`

	EndpointCustom EndpointCustomRelationBase `json:"endpoint_custom,omitempty"`

	EndpointSccp EndpointSccpRelationBase `json:"endpoint_sccp,omitempty"`

	EndpointSip EndpointSipRelationBase `json:"endpoint_sip,omitempty"`

	Extensions []ExtensionRelationBase `json:"extensions,omitempty"`

	Users []UserRelationBase `json:"users,omitempty"`

	// Name to display when calling
	CallerIdName string `json:"caller_id_name,omitempty"`

	// Number to display when calling
	CallerIdNum string `json:"caller_id_num,omitempty"`

	// The name of an internal context
	Context string `json:"context"`

	// ID of the device associated to the line
	DeviceId string `json:"device_id,omitempty"`

	// *Deprecated* Please use `position`
	DeviceSlot int32 `json:"device_slot,omitempty"`

	// Line's position on the device
	Position int32 `json:"position,omitempty"`

	// Line's protocol
	Protocol string `json:"protocol,omitempty"`

	// Code used to provision a device
	ProvisioningCode string `json:"provisioning_code,omitempty"`

	// *Deprecated* Please use `provisioning_code`
	ProvisioningExtension string `json:"provisioning_extension,omitempty"`

	// Name of the template line used by the device
	Registrar string `json:"registrar,omitempty"`

	// The UUID of the tenant
	TenantUuid string `json:"tenant_uuid,omitempty"`
}

// AssertLineViewRequired checks if the required fields are not zero-ed
func AssertLineViewRequired(obj LineView) error {
	elements := map[string]interface{}{
		"context": obj.Context,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertApplicationRelationBaseRequired(obj.Application); err != nil {
		return err
	}
	if err := AssertEndpointCustomRelationBaseRequired(obj.EndpointCustom); err != nil {
		return err
	}
	if err := AssertEndpointSccpRelationBaseRequired(obj.EndpointSccp); err != nil {
		return err
	}
	if err := AssertEndpointSipRelationBaseRequired(obj.EndpointSip); err != nil {
		return err
	}
	for _, el := range obj.Extensions {
		if err := AssertExtensionRelationBaseRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Users {
		if err := AssertUserRelationBaseRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertLineViewConstraints checks if the values respects the defined constraints
func AssertLineViewConstraints(obj LineView) error {
	return nil
}
