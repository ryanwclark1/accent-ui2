/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// UsersAPIController binds http requests to an api service and writes the service results to the http response
type UsersAPIController struct {
	service      UsersAPIServicer
	errorHandler ErrorHandler
}

// UsersAPIOption for how the controller is set up.
type UsersAPIOption func(*UsersAPIController)

// WithUsersAPIErrorHandler inject ErrorHandler into controller
func WithUsersAPIErrorHandler(h ErrorHandler) UsersAPIOption {
	return func(c *UsersAPIController) {
		c.errorHandler = h
	}
}

// NewUsersAPIController creates a default api controller
func NewUsersAPIController(s UsersAPIServicer, opts ...UsersAPIOption) Router {
	controller := &UsersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UsersAPIController
func (c *UsersAPIController) Routes() Routes {
	return Routes{
		"AssociateUserAgent": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/agents/{agent_id}",
			c.AssociateUserAgent,
		},
		"AssociateUserCallpermission": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/callpermissions/{callpermission_id}",
			c.AssociateUserCallpermission,
		},
		"AssociateUserFuncKeyTemplate": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/funckeys/templates/{template_id}",
			c.AssociateUserFuncKeyTemplate,
		},
		"AssociateUserLine": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/lines/{line_id}",
			c.AssociateUserLine,
		},
		"AssociateUserLines": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/lines",
			c.AssociateUserLines,
		},
		"AssociateUserSchedule": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/schedules/{schedule_id}",
			c.AssociateUserSchedule,
		},
		"AssociateUserVoicemail": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/voicemails/{voicemail_id}",
			c.AssociateUserVoicemail,
		},
		"CreateUser": Route{
			strings.ToUpper("Post"),
			"/1.1/users",
			c.CreateUser,
		},
		"CreateUserExternalApp": Route{
			strings.ToUpper("Post"),
			"/1.1/users/{user_uuid}/external/apps/{app_name}",
			c.CreateUserExternalApp,
		},
		"CreateUserMeeting": Route{
			strings.ToUpper("Post"),
			"/1.1/users/me/meetings",
			c.CreateUserMeeting,
		},
		"CreateUserVoicemail": Route{
			strings.ToUpper("Post"),
			"/1.1/users/{user_id}/voicemails",
			c.CreateUserVoicemail,
		},
		"DeleteUser": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/{user_id}",
			c.DeleteUser,
		},
		"DeleteUserExternalApp": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/{user_uuid}/external/apps/{app_name}",
			c.DeleteUserExternalApp,
		},
		"DeleteUserFuncKey": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/{user_id}/funckeys/{position}",
			c.DeleteUserFuncKey,
		},
		"DeleteUserMeeting": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/me/meetings/{meeting_uuid}",
			c.DeleteUserMeeting,
		},
		"DissociateUserAgent": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/{user_id}/agents",
			c.DissociateUserAgent,
		},
		"DissociateUserCallpermission": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/{user_id}/callpermissions/{callpermission_id}",
			c.DissociateUserCallpermission,
		},
		"DissociateUserFuncKeyTemplate": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/{user_id}/funckeys/templates/{template_id}",
			c.DissociateUserFuncKeyTemplate,
		},
		"DissociateUserLine": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/{user_id}/lines/{line_id}",
			c.DissociateUserLine,
		},
		"DissociateUserQueue": Route{
			strings.ToUpper("Delete"),
			"/1.1/queues/{queue_id}/members/users/{user_id}",
			c.DissociateUserQueue,
		},
		"DissociateUserSchedule": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/{user_id}/schedules/{schedule_id}",
			c.DissociateUserSchedule,
		},
		"DissociateUserVoicemail": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/{user_id}/voicemails",
			c.DissociateUserVoicemail,
		},
		"ExportUsersCsv": Route{
			strings.ToUpper("Get"),
			"/1.1/users/export",
			c.ExportUsersCsv,
		},
		"GetUser": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_id}",
			c.GetUser,
		},
		"GetUserExternalApp": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_uuid}/external/apps/{app_name}",
			c.GetUserExternalApp,
		},
		"GetUserFallback": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_id}/fallbacks",
			c.GetUserFallback,
		},
		"GetUserForward": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_id}/forwards/{forward_name}",
			c.GetUserForward,
		},
		"GetUserFuncKey": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_id}/funckeys/{position}",
			c.GetUserFuncKey,
		},
		"GetUserLineAssociatedEndpointsSip": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_uuid}/lines/{line_id}/associated/endpoints/sip",
			c.GetUserLineAssociatedEndpointsSip,
		},
		"GetUserLineMainAssociatedEndpointsSip": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_uuid}/lines/main/associated/endpoints/sip",
			c.GetUserLineMainAssociatedEndpointsSip,
		},
		"GetUserMeeting": Route{
			strings.ToUpper("Get"),
			"/1.1/users/me/meetings/{meeting_uuid}",
			c.GetUserMeeting,
		},
		"GetUserService": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_id}/services/{service_name}",
			c.GetUserService,
		},
		"GetUserServices": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_id}/services",
			c.GetUserServices,
		},
		"GetUserVoicemail": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_id}/voicemails",
			c.GetUserVoicemail,
		},
		"GetUsersSubscriptions": Route{
			strings.ToUpper("Get"),
			"/1.1/users/subscriptions",
			c.GetUsersSubscriptions,
		},
		"HeadUser": Route{
			strings.ToUpper("Head"),
			"/1.1/users/{user_id}",
			c.HeadUser,
		},
		"ImportUsersCsv": Route{
			strings.ToUpper("Post"),
			"/1.1/users/import",
			c.ImportUsersCsv,
		},
		"ListFuncKeyTemplateUserAssociations": Route{
			strings.ToUpper("Get"),
			"/1.1/funckeys/templates/{template_id}/users",
			c.ListFuncKeyTemplateUserAssociations,
		},
		"ListUser": Route{
			strings.ToUpper("Get"),
			"/1.1/users",
			c.ListUser,
		},
		"ListUserExternalApps": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_uuid}/external/apps",
			c.ListUserExternalApps,
		},
		"ListUserForwards": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_id}/forwards",
			c.ListUserForwards,
		},
		"ListUserFuncKeyTemplateAssociations": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_id}/funckeys/templates",
			c.ListUserFuncKeyTemplateAssociations,
		},
		"ListUserFuncKeys": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_id}/funckeys",
			c.ListUserFuncKeys,
		},
		"ListUserMeetingAuthorizations": Route{
			strings.ToUpper("Get"),
			"/1.1/user/me/meetings/{meeting_uuid}/authorizations",
			c.ListUserMeetingAuthorizations,
		},
		"ListUserMeetings": Route{
			strings.ToUpper("Get"),
			"/1.1/users/me/meetings",
			c.ListUserMeetings,
		},
		"PutUserMeetingAuthorizationAccept": Route{
			strings.ToUpper("Put"),
			"/1.1/user/me/meetings/{meeting_uuid}/authorizations/{authorization_uuid}/accept",
			c.PutUserMeetingAuthorizationAccept,
		},
		"PutUserMeetingAuthorizationReject": Route{
			strings.ToUpper("Put"),
			"/1.1/user/me/meetings/{meeting_uuid}/authorizations/{authorization_uuid}/reject",
			c.PutUserMeetingAuthorizationReject,
		},
		"UpdateCallFilterCallerUsers": Route{
			strings.ToUpper("Put"),
			"/1.1/callfilters/{callfilter_id}/recipients/users",
			c.UpdateCallFilterCallerUsers,
		},
		"UpdateCallFilterMemberUsers": Route{
			strings.ToUpper("Put"),
			"/1.1/callfilters/{callfilter_id}/surrogates/users",
			c.UpdateCallFilterMemberUsers,
		},
		"UpdateCallPickupInterceptorUsers": Route{
			strings.ToUpper("Put"),
			"/1.1/callpickups/{callpickup_id}/interceptors/users",
			c.UpdateCallPickupInterceptorUsers,
		},
		"UpdateCallPickupTargetUsers": Route{
			strings.ToUpper("Put"),
			"/1.1/callpickups/{callpickup_id}/targets/users",
			c.UpdateCallPickupTargetUsers,
		},
		"UpdateGroupMemberUsers": Route{
			strings.ToUpper("Put"),
			"/1.1/groups/{group_uuid}/members/users",
			c.UpdateGroupMemberUsers,
		},
		"UpdatePagingCallerUsers": Route{
			strings.ToUpper("Put"),
			"/1.1/pagings/{paging_id}/callers/users",
			c.UpdatePagingCallerUsers,
		},
		"UpdatePagingMemberUsers": Route{
			strings.ToUpper("Put"),
			"/1.1/pagings/{paging_id}/members/users",
			c.UpdatePagingMemberUsers,
		},
		"UpdateSwitchboardMemberUsers": Route{
			strings.ToUpper("Put"),
			"/1.1/switchboards/{switchboard_uuid}/members/users",
			c.UpdateSwitchboardMemberUsers,
		},
		"UpdateUser": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}",
			c.UpdateUser,
		},
		"UpdateUserExternalApp": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_uuid}/external/apps/{app_name}",
			c.UpdateUserExternalApp,
		},
		"UpdateUserFallback": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/fallbacks",
			c.UpdateUserFallback,
		},
		"UpdateUserForward": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/forwards/{forward_name}",
			c.UpdateUserForward,
		},
		"UpdateUserForwards": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/forwards",
			c.UpdateUserForwards,
		},
		"UpdateUserFuncKey": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/funckeys/{position}",
			c.UpdateUserFuncKey,
		},
		"UpdateUserFuncKeys": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/funckeys",
			c.UpdateUserFuncKeys,
		},
		"UpdateUserGroups": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/groups",
			c.UpdateUserGroups,
		},
		"UpdateUserMeeting": Route{
			strings.ToUpper("Put"),
			"/1.1/users/me/meetings/{meeting_uuid}",
			c.UpdateUserMeeting,
		},
		"UpdateUserQueueAssociation": Route{
			strings.ToUpper("Put"),
			"/1.1/queues/{queue_id}/members/users/{user_id}",
			c.UpdateUserQueueAssociation,
		},
		"UpdateUserService": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/services/{service_name}",
			c.UpdateUserService,
		},
		"UpdateUserServices": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/services",
			c.UpdateUserServices,
		},
		"UpdateUsersCsv": Route{
			strings.ToUpper("Put"),
			"/1.1/users/import",
			c.UpdateUsersCsv,
		},
	}
}

// AssociateUserAgent - Associate user and agent
func (c *UsersAPIController) AssociateUserAgent(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	agentIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "agent_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.AssociateUserAgent(r.Context(), userIdParam, agentIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AssociateUserCallpermission - Associate user and call permission
func (c *UsersAPIController) AssociateUserCallpermission(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	callpermissionIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callpermission_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.AssociateUserCallpermission(r.Context(), userIdParam, callpermissionIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AssociateUserFuncKeyTemplate - Associate a func key template to a user
func (c *UsersAPIController) AssociateUserFuncKeyTemplate(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	templateIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "template_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.AssociateUserFuncKeyTemplate(r.Context(), userIdParam, templateIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AssociateUserLine - Associate user and line
func (c *UsersAPIController) AssociateUserLine(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AssociateUserLine(r.Context(), userIdParam, lineIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AssociateUserLines - Associate user and lines
func (c *UsersAPIController) AssociateUserLines(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	bodyParam := LinesId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLinesIdRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLinesIdConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AssociateUserLines(r.Context(), userIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AssociateUserSchedule - Associate user and schedule
func (c *UsersAPIController) AssociateUserSchedule(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	scheduleIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "schedule_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.AssociateUserSchedule(r.Context(), userIdParam, scheduleIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AssociateUserVoicemail - Associate user and voicemail
func (c *UsersAPIController) AssociateUserVoicemail(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	voicemailIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "voicemail_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AssociateUserVoicemail(r.Context(), userIdParam, voicemailIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateUser - Create user
func (c *UsersAPIController) CreateUser(w http.ResponseWriter, r *http.Request) {
	bodyParam := UserPost{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserPostRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserPostConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.CreateUser(r.Context(), bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateUserExternalApp - Create user external app
func (c *UsersAPIController) CreateUserExternalApp(w http.ResponseWriter, r *http.Request) {
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	appNameParam := chi.URLParam(r, "app_name")
	if appNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"app_name"}, nil)
		return
	}
	bodyParam := UserExternalApp{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserExternalAppRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserExternalAppConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.CreateUserExternalApp(r.Context(), userUuidParam, appNameParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateUserMeeting - Create user meeting
func (c *UsersAPIController) CreateUserMeeting(w http.ResponseWriter, r *http.Request) {
	bodyParam := MeetingUserRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMeetingUserRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMeetingUserRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.CreateUserMeeting(r.Context(), bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateUserVoicemail - Create user voicemail
func (c *UsersAPIController) CreateUserVoicemail(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	bodyParam := Voicemail{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVoicemailRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVoicemailConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.CreateUserVoicemail(r.Context(), userIdParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteUser - Delete user
func (c *UsersAPIController) DeleteUser(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var recursiveParam bool
	if query.Has("recursive") {
		param, err := parseBoolParameter(
			query.Get("recursive"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recursiveParam = param
	} else {
	}
	result, err := c.service.DeleteUser(r.Context(), userIdParam, accentTenantParam, recursiveParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteUserExternalApp - Delete user external app
func (c *UsersAPIController) DeleteUserExternalApp(w http.ResponseWriter, r *http.Request) {
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	appNameParam := chi.URLParam(r, "app_name")
	if appNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"app_name"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteUserExternalApp(r.Context(), userUuidParam, appNameParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteUserFuncKey - Remove func key for user
func (c *UsersAPIController) DeleteUserFuncKey(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	positionParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "position"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteUserFuncKey(r.Context(), userIdParam, positionParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteUserMeeting - Delete one of the meetings of the current user
func (c *UsersAPIController) DeleteUserMeeting(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteUserMeeting(r.Context(), meetingUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateUserAgent - Dissociate user and agent
func (c *UsersAPIController) DissociateUserAgent(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DissociateUserAgent(r.Context(), userIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateUserCallpermission - Dissociate user and call permission
func (c *UsersAPIController) DissociateUserCallpermission(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	callpermissionIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callpermission_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DissociateUserCallpermission(r.Context(), userIdParam, callpermissionIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateUserFuncKeyTemplate - Dissociate a func key template to a user
func (c *UsersAPIController) DissociateUserFuncKeyTemplate(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	templateIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "template_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DissociateUserFuncKeyTemplate(r.Context(), userIdParam, templateIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateUserLine - Dissociate user and line
func (c *UsersAPIController) DissociateUserLine(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DissociateUserLine(r.Context(), userIdParam, lineIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateUserQueue - Dissociate user and queue
func (c *UsersAPIController) DissociateUserQueue(w http.ResponseWriter, r *http.Request) {
	queueIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "queue_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DissociateUserQueue(r.Context(), queueIdParam, userIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateUserSchedule - Dissociate user and schedule
func (c *UsersAPIController) DissociateUserSchedule(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	scheduleIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "schedule_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DissociateUserSchedule(r.Context(), userIdParam, scheduleIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateUserVoicemail - Dissociate user and voicemail
func (c *UsersAPIController) DissociateUserVoicemail(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	result, err := c.service.DissociateUserVoicemail(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ExportUsersCsv - Mass export users and associated resources
func (c *UsersAPIController) ExportUsersCsv(w http.ResponseWriter, r *http.Request) {
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.ExportUsersCsv(r.Context(), accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUser - Get user
func (c *UsersAPIController) GetUser(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetUser(r.Context(), userIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserExternalApp - Get user external app
func (c *UsersAPIController) GetUserExternalApp(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	appNameParam := chi.URLParam(r, "app_name")
	if appNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"app_name"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var viewParam string
	if query.Has("view") {
		param := query.Get("view")

		viewParam = param
	} else {
	}
	result, err := c.service.GetUserExternalApp(r.Context(), userUuidParam, appNameParam, accentTenantParam, viewParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserFallback - List all fallbacks for user
func (c *UsersAPIController) GetUserFallback(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	result, err := c.service.GetUserFallback(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserForward - Get forward for a user
func (c *UsersAPIController) GetUserForward(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	forwardNameParam := chi.URLParam(r, "forward_name")
	if forwardNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"forward_name"}, nil)
		return
	}
	result, err := c.service.GetUserForward(r.Context(), userIdParam, forwardNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserFuncKey - Get a func key for a user
func (c *UsersAPIController) GetUserFuncKey(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	positionParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "position"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetUserFuncKey(r.Context(), userIdParam, positionParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserLineAssociatedEndpointsSip - Get SIP endpoint of a line for a user
func (c *UsersAPIController) GetUserLineAssociatedEndpointsSip(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var viewParam string
	if query.Has("view") {
		param := query.Get("view")

		viewParam = param
	} else {
	}
	result, err := c.service.GetUserLineAssociatedEndpointsSip(r.Context(), userUuidParam, lineIdParam, viewParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserLineMainAssociatedEndpointsSip - Get SIP endpoint of main line for a user
func (c *UsersAPIController) GetUserLineMainAssociatedEndpointsSip(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	var viewParam string
	if query.Has("view") {
		param := query.Get("view")

		viewParam = param
	} else {
	}
	result, err := c.service.GetUserLineMainAssociatedEndpointsSip(r.Context(), userUuidParam, viewParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserMeeting - Get one of the meetings of the current user
func (c *UsersAPIController) GetUserMeeting(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetUserMeeting(r.Context(), meetingUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserService - Get status of service
func (c *UsersAPIController) GetUserService(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	serviceNameParam := chi.URLParam(r, "service_name")
	if serviceNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"service_name"}, nil)
		return
	}
	result, err := c.service.GetUserService(r.Context(), userIdParam, serviceNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserServices - Get status of all user's services
func (c *UsersAPIController) GetUserServices(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	result, err := c.service.GetUserServices(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserVoicemail - Get user voicemails
func (c *UsersAPIController) GetUserVoicemail(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetUserVoicemail(r.Context(), userIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUsersSubscriptions - Get user subscription
func (c *UsersAPIController) GetUsersSubscriptions(w http.ResponseWriter, r *http.Request) {
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetUsersSubscriptions(r.Context(), accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// HeadUser - Check if user exists
func (c *UsersAPIController) HeadUser(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.HeadUser(r.Context(), userIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ImportUsersCsv - Mass import users and associated resources
func (c *UsersAPIController) ImportUsersCsv(w http.ResponseWriter, r *http.Request) {
	bodyParam := string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.ImportUsersCsv(r.Context(), bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListFuncKeyTemplateUserAssociations - List users associated to template
func (c *UsersAPIController) ListFuncKeyTemplateUserAssociations(w http.ResponseWriter, r *http.Request) {
	templateIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "template_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.ListFuncKeyTemplateUserAssociations(r.Context(), templateIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUser - List users
func (c *UsersAPIController) ListUser(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var recurseParam bool
	if query.Has("recurse") {
		param, err := parseBoolParameter(
			query.Get("recurse"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recurseParam = param
	} else {
		var param bool = false
		recurseParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	var viewParam string
	if query.Has("view") {
		param := query.Get("view")

		viewParam = param
	} else {
	}
	result, err := c.service.ListUser(r.Context(), accentTenantParam, recurseParam, orderParam, directionParam, limitParam, offsetParam, searchParam, viewParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserExternalApps - List user external apps
func (c *UsersAPIController) ListUserExternalApps(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	var viewParam string
	if query.Has("view") {
		param := query.Get("view")

		viewParam = param
	} else {
	}
	result, err := c.service.ListUserExternalApps(r.Context(), userUuidParam, accentTenantParam, orderParam, directionParam, limitParam, offsetParam, searchParam, viewParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserForwards - List forwards for a user
func (c *UsersAPIController) ListUserForwards(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	result, err := c.service.ListUserForwards(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserFuncKeyTemplateAssociations - List funckey templates associated to user
func (c *UsersAPIController) ListUserFuncKeyTemplateAssociations(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.ListUserFuncKeyTemplateAssociations(r.Context(), userIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserFuncKeys - List func keys for a user
func (c *UsersAPIController) ListUserFuncKeys(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.ListUserFuncKeys(r.Context(), userIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserMeetingAuthorizations - List all guest authorization requests of a meeting
func (c *UsersAPIController) ListUserMeetingAuthorizations(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	result, err := c.service.ListUserMeetingAuthorizations(r.Context(), meetingUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserMeetings - List user meetings
func (c *UsersAPIController) ListUserMeetings(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var recurseParam bool
	if query.Has("recurse") {
		param, err := parseBoolParameter(
			query.Get("recurse"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recurseParam = param
	} else {
		var param bool = false
		recurseParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.ListUserMeetings(r.Context(), accentTenantParam, recurseParam, orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PutUserMeetingAuthorizationAccept - Accept a guest authorization request
func (c *UsersAPIController) PutUserMeetingAuthorizationAccept(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	authorizationUuidParam := chi.URLParam(r, "authorization_uuid")
	if authorizationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"authorization_uuid"}, nil)
		return
	}
	result, err := c.service.PutUserMeetingAuthorizationAccept(r.Context(), meetingUuidParam, authorizationUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PutUserMeetingAuthorizationReject - Reject a guest authorization request
func (c *UsersAPIController) PutUserMeetingAuthorizationReject(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	authorizationUuidParam := chi.URLParam(r, "authorization_uuid")
	if authorizationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"authorization_uuid"}, nil)
		return
	}
	result, err := c.service.PutUserMeetingAuthorizationReject(r.Context(), meetingUuidParam, authorizationUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateCallFilterCallerUsers - Update call filter and recipients
func (c *UsersAPIController) UpdateCallFilterCallerUsers(w http.ResponseWriter, r *http.Request) {
	callfilterIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callfilter_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := CallFilterRecipientUsersUuid{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCallFilterRecipientUsersUuidRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCallFilterRecipientUsersUuidConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCallFilterCallerUsers(r.Context(), callfilterIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateCallFilterMemberUsers - Update call filter and surrogates
func (c *UsersAPIController) UpdateCallFilterMemberUsers(w http.ResponseWriter, r *http.Request) {
	callfilterIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callfilter_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := UsersUuid{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUsersUuidRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUsersUuidConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCallFilterMemberUsers(r.Context(), callfilterIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateCallPickupInterceptorUsers - Update call pickup and interceptors
func (c *UsersAPIController) UpdateCallPickupInterceptorUsers(w http.ResponseWriter, r *http.Request) {
	callpickupIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callpickup_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := UsersUuid{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUsersUuidRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUsersUuidConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateCallPickupInterceptorUsers(r.Context(), callpickupIdParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateCallPickupTargetUsers - Update call pickup and targets
func (c *UsersAPIController) UpdateCallPickupTargetUsers(w http.ResponseWriter, r *http.Request) {
	callpickupIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callpickup_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := UsersUuid{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUsersUuidRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUsersUuidConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateCallPickupTargetUsers(r.Context(), callpickupIdParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateGroupMemberUsers - Update group and users
func (c *UsersAPIController) UpdateGroupMemberUsers(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	bodyParam := GroupMemberUsers{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGroupMemberUsersRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGroupMemberUsersConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateGroupMemberUsers(r.Context(), groupUuidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdatePagingCallerUsers - Update paging and callers
func (c *UsersAPIController) UpdatePagingCallerUsers(w http.ResponseWriter, r *http.Request) {
	pagingIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "paging_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := UsersUuid{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUsersUuidRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUsersUuidConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePagingCallerUsers(r.Context(), pagingIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdatePagingMemberUsers - Update paging and members
func (c *UsersAPIController) UpdatePagingMemberUsers(w http.ResponseWriter, r *http.Request) {
	pagingIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "paging_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := UsersUuid{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUsersUuidRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUsersUuidConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePagingMemberUsers(r.Context(), pagingIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateSwitchboardMemberUsers - Update switchboard and members
func (c *UsersAPIController) UpdateSwitchboardMemberUsers(w http.ResponseWriter, r *http.Request) {
	switchboardUuidParam := chi.URLParam(r, "switchboard_uuid")
	if switchboardUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"switchboard_uuid"}, nil)
		return
	}
	bodyParam := UsersUuid{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUsersUuidRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUsersUuidConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSwitchboardMemberUsers(r.Context(), switchboardUuidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUser - Update user
func (c *UsersAPIController) UpdateUser(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	bodyParam := User{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateUser(r.Context(), userIdParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUserExternalApp - Update user external app
func (c *UsersAPIController) UpdateUserExternalApp(w http.ResponseWriter, r *http.Request) {
	userUuidParam := chi.URLParam(r, "user_uuid")
	if userUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_uuid"}, nil)
		return
	}
	appNameParam := chi.URLParam(r, "app_name")
	if appNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"app_name"}, nil)
		return
	}
	bodyParam := UserExternalApp{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserExternalAppRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserExternalAppConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateUserExternalApp(r.Context(), userUuidParam, appNameParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUserFallback - Update user's fallbacks
func (c *UsersAPIController) UpdateUserFallback(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	bodyParam := UserFallbacks{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserFallbacksRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserFallbacksConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUserFallback(r.Context(), userIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUserForward - Update a forward for a user
func (c *UsersAPIController) UpdateUserForward(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	forwardNameParam := chi.URLParam(r, "forward_name")
	if forwardNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"forward_name"}, nil)
		return
	}
	bodyParam := UserForward{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserForwardRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserForwardConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUserForward(r.Context(), userIdParam, forwardNameParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUserForwards - Update all forwards for a user
func (c *UsersAPIController) UpdateUserForwards(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	bodyParam := UserForwards{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserForwardsRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserForwardsConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUserForwards(r.Context(), userIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUserFuncKey - Add/Replace a func key for a user
func (c *UsersAPIController) UpdateUserFuncKey(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	positionParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "position"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := FuncKey{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFuncKeyRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFuncKeyConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateUserFuncKey(r.Context(), userIdParam, positionParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUserFuncKeys - Update func keys for a user
func (c *UsersAPIController) UpdateUserFuncKeys(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	bodyParam := FuncKeyTemplate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFuncKeyTemplateRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFuncKeyTemplateConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateUserFuncKeys(r.Context(), userIdParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUserGroups - Update user and groups
func (c *UsersAPIController) UpdateUserGroups(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	bodyParam := UserGroupsId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserGroupsIdRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserGroupsIdConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUserGroups(r.Context(), userIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUserMeeting - Update one of the meetings of the current user
func (c *UsersAPIController) UpdateUserMeeting(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	bodyParam := MeetingRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMeetingRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMeetingRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateUserMeeting(r.Context(), meetingUuidParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUserQueueAssociation - Update User-Queue association
func (c *UsersAPIController) UpdateUserQueueAssociation(w http.ResponseWriter, r *http.Request) {
	queueIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "queue_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	bodyParam := QueueMemberUser{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertQueueMemberUserRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertQueueMemberUserConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUserQueueAssociation(r.Context(), queueIdParam, userIdParam, accentTenantParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUserService - Enable/Disable service for a user
func (c *UsersAPIController) UpdateUserService(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	serviceNameParam := chi.URLParam(r, "service_name")
	if serviceNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"service_name"}, nil)
		return
	}
	bodyParam := UserService{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserServiceRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserServiceConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUserService(r.Context(), userIdParam, serviceNameParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUserServices - Update all services for a user
func (c *UsersAPIController) UpdateUserServices(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	bodyParam := UserServices{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserServicesRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserServicesConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUserServices(r.Context(), userIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUsersCsv - **Disabled!** Mass import users and associated resources
func (c *UsersAPIController) UpdateUsersCsv(w http.ResponseWriter, r *http.Request) {
	bodyParam := string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateUsersCsv(r.Context(), bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
