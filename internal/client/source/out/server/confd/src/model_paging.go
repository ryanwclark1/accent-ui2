/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

type Paging struct {
	Callers PagingRelationMemberUsers `json:"callers,omitempty"`

	Members PagingRelationMemberUsers `json:"members,omitempty"`

	// Play the announce sound to the caller
	AnnounceCaller bool `json:"announce_caller,omitempty"`

	// The sound played to everyone
	AnnounceSound string `json:"announce_sound,omitempty"`

	// Play a notification to caller
	CallerNotification bool `json:"caller_notification,omitempty"`

	// Duplex audio
	Duplex bool `json:"duplex,omitempty"`

	Enabled bool `json:"enabled,omitempty"`

	Id int32 `json:"id,omitempty"`

	// Ignore attemps to forward the call
	IgnoreForward bool `json:"ignore_forward,omitempty"`

	// The name to identify the paging
	Name string `json:"name,omitempty"`

	// The number of the paging
	Number string `json:"number"`

	// Record the paging
	Record bool `json:"record,omitempty"`

	// The UUID of the tenant
	TenantUuid string `json:"tenant_uuid,omitempty"`
}

// AssertPagingRequired checks if the required fields are not zero-ed
func AssertPagingRequired(obj Paging) error {
	elements := map[string]interface{}{
		"number": obj.Number,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPagingRelationMemberUsersRequired(obj.Callers); err != nil {
		return err
	}
	if err := AssertPagingRelationMemberUsersRequired(obj.Members); err != nil {
		return err
	}
	return nil
}

// AssertPagingConstraints checks if the values respects the defined constraints
func AssertPagingConstraints(obj Paging) error {
	return nil
}
