/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

import (
	"fmt"
)

type StatusValue string

// List of StatusValue
const (
	STATUSVALUE_FAIL StatusValue = "fail"
	STATUSVALUE_OK   StatusValue = "ok"
)

// AllowedStatusValueEnumValues is all the allowed values of StatusValue enum
var AllowedStatusValueEnumValues = []StatusValue{
	"fail",
	"ok",
}

// validStatusValueEnumValue provides a map of StatusValues for fast verification of use input
var validStatusValueEnumValues = map[StatusValue]struct{}{
	"fail": {},
	"ok":   {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusValue) IsValid() bool {
	_, ok := validStatusValueEnumValues[v]
	return ok
}

// NewStatusValueFromValue returns a pointer to a valid StatusValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusValueFromValue(v string) (StatusValue, error) {
	ev := StatusValue(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for StatusValue: valid values are %v", v, AllowedStatusValueEnumValues)
	}
}

// AssertStatusValueRequired checks if the required fields are not zero-ed
func AssertStatusValueRequired(obj StatusValue) error {
	return nil
}

// AssertStatusValueConstraints checks if the values respects the defined constraints
func AssertStatusValueConstraints(obj StatusValue) error {
	return nil
}
