/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

type Queue struct {

	// The id of the queue
	Id int32 `json:"id,omitempty"`

	// The label of the queue
	Label string `json:"label,omitempty"`

	// The name of the queue. Cannot be modified
	Name string `json:"name,omitempty"`

	Schedules []ScheduleRelationBase `json:"schedules,omitempty"`

	Members QueueRelationMemberAgents `json:"members,omitempty"`

	// Announce hold time on entry
	AnnounceHoldTimeOnEntry bool `json:"announce_hold_time_on_entry,omitempty"`

	// How the caller_id_name will be treated
	CallerIdMode string `json:"caller_id_mode,omitempty"`

	// Name to display
	CallerIdName string `json:"caller_id_name,omitempty"`

	// Asterisk definition: data-quality (modem) call (minimum delay)
	DataQuality bool `json:"data_quality,omitempty"`

	// Enable DTMF hangup by callee
	DtmfHangupCalleeEnabled bool `json:"dtmf_hangup_callee_enabled,omitempty"`

	// Enable DTMF hangup by caller
	DtmfHangupCallerEnabled bool `json:"dtmf_hangup_caller_enabled,omitempty"`

	// Enable DTMF records by callee
	DtmfRecordCalleeEnabled bool `json:"dtmf_record_callee_enabled,omitempty"`

	// Enable DTMF records by caller
	DtmfRecordCallerEnabled bool `json:"dtmf_record_caller_enabled,omitempty"`

	// Enable DTMF transfers by callee
	DtmfTransferCalleeEnabled bool `json:"dtmf_transfer_callee_enabled,omitempty"`

	// Enable DTMF transfers by caller
	DtmfTransferCallerEnabled bool `json:"dtmf_transfer_caller_enabled,omitempty"`

	// Enable/Disable the queue
	Enabled bool `json:"enabled,omitempty"`

	// Ignore call forward requests from members
	IgnoreForward bool `json:"ignore_forward,omitempty"`

	// Mark all calls as \"answered elsewhere\" when cancelled
	MarkAnsweredElsewhere bool `json:"mark_answered_elsewhere,omitempty"`

	// Name of the MOH category to use for music on hold
	MusicOnHold string `json:"music_on_hold,omitempty"`

	// Advanced configuration options. Options are appended at the end of a queue account in the file 'queues.conf' used by asterisk. Please consult the asterisk documentation for further details on available parameters. Because of database limitations, only the following options can be configured:  * announce * context * timeout * monitor-type * monitor-format * queue-youarenext * queue-thereare * queue-callswaiting * queue-holdtime * queue-minutes * queue-seconds * queue-thankyou * queue-reporthold * periodic-announce * announce-frequency * periodic-announce-frequency * announce-round-seconds * announce-holdtime * retry * wrapuptime * maxlen * servicelevel * strategy * joinempty * leavewhenempty * ringinuse * reportholdtime * memberdelay * weight * timeoutrestart * timeoutpriority * autofill * autopause * setinterfacevar * setqueueentryvar * setqueuevar * membermacro * min-announce-frequency * random-periodic-announce * announce-position * announce-position-limit * defaultrule  Options must have the following form: ``` {   \"options\": [      [\"name1\", \"value1\"],      [\"name2\", \"value2\"]   ] } ```  The resulting configuration in queues.conf will have the following form: ``` [queuename] name1=value1 name2=value2 ```
	Options [][]string `json:"options,omitempty"`

	PreprocessSubroutine string `json:"preprocess_subroutine,omitempty"`

	// Retry when time has elapsed
	RetryOnTimeout bool `json:"retry_on_timeout,omitempty"`

	// Ring instead of On-Hold Music
	RingOnHold bool `json:"ring_on_hold,omitempty"`

	// The UUID of the tenant
	TenantUuid string `json:"tenant_uuid,omitempty"`

	// Number of seconds the queue will ring before falling back
	Timeout int32 `json:"timeout,omitempty"`

	WaitRatioDestination DestinationType `json:"wait_ratio_destination,omitempty"`

	// Wait ratio (waiting calls per logged-in agent) threshold before fallback on 'wait_ratio_destination'. Set to 'null' to disable it.
	WaitRatioThreshold int32 `json:"wait_ratio_threshold,omitempty"`

	WaitTimeDestination DestinationType `json:"wait_time_destination,omitempty"`

	// Wait time threshold before fallback on 'wait_time_destination'. Set to 'null' to disable it.
	WaitTimeThreshold int32 `json:"wait_time_threshold,omitempty"`
}

// AssertQueueRequired checks if the required fields are not zero-ed
func AssertQueueRequired(obj Queue) error {
	for _, el := range obj.Schedules {
		if err := AssertScheduleRelationBaseRequired(el); err != nil {
			return err
		}
	}
	if err := AssertQueueRelationMemberAgentsRequired(obj.Members); err != nil {
		return err
	}
	if err := AssertDestinationTypeRequired(obj.WaitRatioDestination); err != nil {
		return err
	}
	if err := AssertDestinationTypeRequired(obj.WaitTimeDestination); err != nil {
		return err
	}
	return nil
}

// AssertQueueConstraints checks if the values respects the defined constraints
func AssertQueueConstraints(obj Queue) error {
	return nil
}
