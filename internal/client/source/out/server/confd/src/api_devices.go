/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// DevicesAPIController binds http requests to an api service and writes the service results to the http response
type DevicesAPIController struct {
	service      DevicesAPIServicer
	errorHandler ErrorHandler
}

// DevicesAPIOption for how the controller is set up.
type DevicesAPIOption func(*DevicesAPIController)

// WithDevicesAPIErrorHandler inject ErrorHandler into controller
func WithDevicesAPIErrorHandler(h ErrorHandler) DevicesAPIOption {
	return func(c *DevicesAPIController) {
		c.errorHandler = h
	}
}

// NewDevicesAPIController creates a default api controller
func NewDevicesAPIController(s DevicesAPIServicer, opts ...DevicesAPIOption) Router {
	controller := &DevicesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DevicesAPIController
func (c *DevicesAPIController) Routes() Routes {
	return Routes{
		"AssignUnallocatedDeviceTenant": Route{
			strings.ToUpper("Put"),
			"/1.1/devices/unallocated/{device_id}",
			c.AssignUnallocatedDeviceTenant,
		},
		"AssociateLineDevice": Route{
			strings.ToUpper("Put"),
			"/1.1/lines/{line_id}/devices/{device_id}",
			c.AssociateLineDevice,
		},
		"CreateDevice": Route{
			strings.ToUpper("Post"),
			"/1.1/devices",
			c.CreateDevice,
		},
		"DeleteDevice": Route{
			strings.ToUpper("Delete"),
			"/1.1/devices/{device_id}",
			c.DeleteDevice,
		},
		"DissociateLineDevice": Route{
			strings.ToUpper("Delete"),
			"/1.1/lines/{line_id}/devices/{device_id}",
			c.DissociateLineDevice,
		},
		"GetDevice": Route{
			strings.ToUpper("Get"),
			"/1.1/devices/{device_id}",
			c.GetDevice,
		},
		"GetDeviceLineAssociation": Route{
			strings.ToUpper("Get"),
			"/1.1/devices/{device_id}/lines",
			c.GetDeviceLineAssociation,
		},
		"GetLineDevice": Route{
			strings.ToUpper("Get"),
			"/1.1/lines/{line_id}/devices",
			c.GetLineDevice,
		},
		"ListDevices": Route{
			strings.ToUpper("Get"),
			"/1.1/devices",
			c.ListDevices,
		},
		"ListUnallocatedDevices": Route{
			strings.ToUpper("Get"),
			"/1.1/devices/unallocated",
			c.ListUnallocatedDevices,
		},
		"ResetDeviceAutoprov": Route{
			strings.ToUpper("Get"),
			"/1.1/devices/{device_id}/autoprov",
			c.ResetDeviceAutoprov,
		},
		"SynchronizeDevice": Route{
			strings.ToUpper("Get"),
			"/1.1/devices/{device_id}/synchronize",
			c.SynchronizeDevice,
		},
		"UpdateDevice": Route{
			strings.ToUpper("Put"),
			"/1.1/devices/{device_id}",
			c.UpdateDevice,
		},
	}
}

// AssignUnallocatedDeviceTenant - Assign unallocated device tenant
func (c *DevicesAPIController) AssignUnallocatedDeviceTenant(w http.ResponseWriter, r *http.Request) {
	deviceIdParam := chi.URLParam(r, "device_id")
	if deviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"device_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.AssignUnallocatedDeviceTenant(r.Context(), deviceIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AssociateLineDevice - Associate line and device
func (c *DevicesAPIController) AssociateLineDevice(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	deviceIdParam := chi.URLParam(r, "device_id")
	if deviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"device_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.AssociateLineDevice(r.Context(), lineIdParam, deviceIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateDevice - Create device
func (c *DevicesAPIController) CreateDevice(w http.ResponseWriter, r *http.Request) {
	accentTenantParam := r.Header.Get("Accent-Tenant")
	bodyParam := Device{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeviceRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeviceConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateDevice(r.Context(), accentTenantParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteDevice - Delete device
func (c *DevicesAPIController) DeleteDevice(w http.ResponseWriter, r *http.Request) {
	deviceIdParam := chi.URLParam(r, "device_id")
	if deviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"device_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteDevice(r.Context(), deviceIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DissociateLineDevice - Dissociate line and device
func (c *DevicesAPIController) DissociateLineDevice(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	deviceIdParam := chi.URLParam(r, "device_id")
	if deviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"device_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DissociateLineDevice(r.Context(), lineIdParam, deviceIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetDevice - Get device
func (c *DevicesAPIController) GetDevice(w http.ResponseWriter, r *http.Request) {
	deviceIdParam := chi.URLParam(r, "device_id")
	if deviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"device_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetDevice(r.Context(), deviceIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetDeviceLineAssociation - List lines associated to device
func (c *DevicesAPIController) GetDeviceLineAssociation(w http.ResponseWriter, r *http.Request) {
	deviceIdParam := chi.URLParam(r, "device_id")
	if deviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"device_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetDeviceLineAssociation(r.Context(), deviceIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetLineDevice - Get Device associated to Line
func (c *DevicesAPIController) GetLineDevice(w http.ResponseWriter, r *http.Request) {
	lineIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "line_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetLineDevice(r.Context(), lineIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListDevices - List devices
func (c *DevicesAPIController) ListDevices(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var recurseParam bool
	if query.Has("recurse") {
		param, err := parseBoolParameter(
			query.Get("recurse"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recurseParam = param
	} else {
		var param bool = false
		recurseParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.ListDevices(r.Context(), accentTenantParam, recurseParam, orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUnallocatedDevices - List unallocated devices
func (c *DevicesAPIController) ListUnallocatedDevices(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.ListUnallocatedDevices(r.Context(), orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ResetDeviceAutoprov - Reset device to autoprov
func (c *DevicesAPIController) ResetDeviceAutoprov(w http.ResponseWriter, r *http.Request) {
	deviceIdParam := chi.URLParam(r, "device_id")
	if deviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"device_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.ResetDeviceAutoprov(r.Context(), deviceIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SynchronizeDevice - Synchronize device
func (c *DevicesAPIController) SynchronizeDevice(w http.ResponseWriter, r *http.Request) {
	deviceIdParam := chi.URLParam(r, "device_id")
	if deviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"device_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.SynchronizeDevice(r.Context(), deviceIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateDevice - Update device
func (c *DevicesAPIController) UpdateDevice(w http.ResponseWriter, r *http.Request) {
	deviceIdParam := chi.URLParam(r, "device_id")
	if deviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"device_id"}, nil)
		return
	}
	bodyParam := Device{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeviceRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeviceConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateDevice(r.Context(), deviceIdParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
