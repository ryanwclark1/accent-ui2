/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// AccessFeaturesAPIController binds http requests to an api service and writes the service results to the http response
type AccessFeaturesAPIController struct {
	service      AccessFeaturesAPIServicer
	errorHandler ErrorHandler
}

// AccessFeaturesAPIOption for how the controller is set up.
type AccessFeaturesAPIOption func(*AccessFeaturesAPIController)

// WithAccessFeaturesAPIErrorHandler inject ErrorHandler into controller
func WithAccessFeaturesAPIErrorHandler(h ErrorHandler) AccessFeaturesAPIOption {
	return func(c *AccessFeaturesAPIController) {
		c.errorHandler = h
	}
}

// NewAccessFeaturesAPIController creates a default api controller
func NewAccessFeaturesAPIController(s AccessFeaturesAPIServicer, opts ...AccessFeaturesAPIOption) Router {
	controller := &AccessFeaturesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AccessFeaturesAPIController
func (c *AccessFeaturesAPIController) Routes() Routes {
	return Routes{
		"CreateAccessFeature": Route{
			strings.ToUpper("Post"),
			"/1.1/access_features",
			c.CreateAccessFeature,
		},
		"DeleteAccessFeature": Route{
			strings.ToUpper("Delete"),
			"/1.1/access_features/{access_feature_id}",
			c.DeleteAccessFeature,
		},
		"GetAccessFeature": Route{
			strings.ToUpper("Get"),
			"/1.1/access_features/{access_feature_id}",
			c.GetAccessFeature,
		},
		"ListAccessFeatures": Route{
			strings.ToUpper("Get"),
			"/1.1/access_features",
			c.ListAccessFeatures,
		},
		"UpdateAccessFeature": Route{
			strings.ToUpper("Put"),
			"/1.1/access_features/{access_feature_id}",
			c.UpdateAccessFeature,
		},
	}
}

// CreateAccessFeature - Create access_feature
func (c *AccessFeaturesAPIController) CreateAccessFeature(w http.ResponseWriter, r *http.Request) {
	bodyParam := AccessFeature{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAccessFeatureRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAccessFeatureConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateAccessFeature(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteAccessFeature - Delete access feature
func (c *AccessFeaturesAPIController) DeleteAccessFeature(w http.ResponseWriter, r *http.Request) {
	accessFeatureIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "access_feature_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteAccessFeature(r.Context(), accessFeatureIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAccessFeature - Get access_feature
func (c *AccessFeaturesAPIController) GetAccessFeature(w http.ResponseWriter, r *http.Request) {
	accessFeatureIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "access_feature_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetAccessFeature(r.Context(), accessFeatureIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListAccessFeatures - List access features
func (c *AccessFeaturesAPIController) ListAccessFeatures(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.ListAccessFeatures(r.Context(), orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateAccessFeature - Update access_feature
func (c *AccessFeaturesAPIController) UpdateAccessFeature(w http.ResponseWriter, r *http.Request) {
	accessFeatureIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "access_feature_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := AccessFeature{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAccessFeatureRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAccessFeatureConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAccessFeature(r.Context(), accessFeatureIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
