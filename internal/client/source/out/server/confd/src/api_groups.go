/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// GroupsAPIController binds http requests to an api service and writes the service results to the http response
type GroupsAPIController struct {
	service      GroupsAPIServicer
	errorHandler ErrorHandler
}

// GroupsAPIOption for how the controller is set up.
type GroupsAPIOption func(*GroupsAPIController)

// WithGroupsAPIErrorHandler inject ErrorHandler into controller
func WithGroupsAPIErrorHandler(h ErrorHandler) GroupsAPIOption {
	return func(c *GroupsAPIController) {
		c.errorHandler = h
	}
}

// NewGroupsAPIController creates a default api controller
func NewGroupsAPIController(s GroupsAPIServicer, opts ...GroupsAPIOption) Router {
	controller := &GroupsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GroupsAPIController
func (c *GroupsAPIController) Routes() Routes {
	return Routes{
		"AssociateGroupCallpermission": Route{
			strings.ToUpper("Put"),
			"/1.1/groups/{group_uuid}/callpermissions/{callpermission_id}",
			c.AssociateGroupCallpermission,
		},
		"AssociateGroupExtension": Route{
			strings.ToUpper("Put"),
			"/1.1/groups/{group_uuid}/extensions/{extension_id}",
			c.AssociateGroupExtension,
		},
		"AssociateGroupSchedule": Route{
			strings.ToUpper("Put"),
			"/1.1/groups/{group_uuid}/schedules/{schedule_id}",
			c.AssociateGroupSchedule,
		},
		"CreateGroup": Route{
			strings.ToUpper("Post"),
			"/1.1/groups",
			c.CreateGroup,
		},
		"DeleteGroup": Route{
			strings.ToUpper("Delete"),
			"/1.1/groups/{group_uuid}",
			c.DeleteGroup,
		},
		"DissociateGroupCallpermission": Route{
			strings.ToUpper("Delete"),
			"/1.1/groups/{group_uuid}/callpermissions/{callpermission_id}",
			c.DissociateGroupCallpermission,
		},
		"DissociateGroupExtension": Route{
			strings.ToUpper("Delete"),
			"/1.1/groups/{group_uuid}/extensions/{extension_id}",
			c.DissociateGroupExtension,
		},
		"DissociateGroupSchedule": Route{
			strings.ToUpper("Delete"),
			"/1.1/groups/{group_uuid}/schedules/{schedule_id}",
			c.DissociateGroupSchedule,
		},
		"GetGroup": Route{
			strings.ToUpper("Get"),
			"/1.1/groups/{group_uuid}",
			c.GetGroup,
		},
		"GetGroupFallback": Route{
			strings.ToUpper("Get"),
			"/1.1/groups/{group_uuid}/fallbacks",
			c.GetGroupFallback,
		},
		"ListGroups": Route{
			strings.ToUpper("Get"),
			"/1.1/groups",
			c.ListGroups,
		},
		"UpdateCallPickupInterceptorGroups": Route{
			strings.ToUpper("Put"),
			"/1.1/callpickups/{callpickup_id}/interceptors/groups",
			c.UpdateCallPickupInterceptorGroups,
		},
		"UpdateCallPickupTargetGroups": Route{
			strings.ToUpper("Put"),
			"/1.1/callpickups/{callpickup_id}/targets/groups",
			c.UpdateCallPickupTargetGroups,
		},
		"UpdateGroup": Route{
			strings.ToUpper("Put"),
			"/1.1/groups/{group_uuid}",
			c.UpdateGroup,
		},
		"UpdateGroupFallback": Route{
			strings.ToUpper("Put"),
			"/1.1/groups/{group_uuid}/fallbacks",
			c.UpdateGroupFallback,
		},
		"UpdateGroupMemberExtensions": Route{
			strings.ToUpper("Put"),
			"/1.1/groups/{group_uuid}/members/extensions",
			c.UpdateGroupMemberExtensions,
		},
		"UpdateGroupMemberUsers": Route{
			strings.ToUpper("Put"),
			"/1.1/groups/{group_uuid}/members/users",
			c.UpdateGroupMemberUsers,
		},
		"UpdateUserGroups": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/groups",
			c.UpdateUserGroups,
		},
	}
}

// AssociateGroupCallpermission - Associate group and call permission
func (c *GroupsAPIController) AssociateGroupCallpermission(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	callpermissionIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callpermission_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.AssociateGroupCallpermission(r.Context(), groupUuidParam, callpermissionIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AssociateGroupExtension - Associate group and extension
func (c *GroupsAPIController) AssociateGroupExtension(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	extensionIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "extension_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AssociateGroupExtension(r.Context(), groupUuidParam, extensionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AssociateGroupSchedule - Associate group and schedule
func (c *GroupsAPIController) AssociateGroupSchedule(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	scheduleIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "schedule_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.AssociateGroupSchedule(r.Context(), groupUuidParam, scheduleIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateGroup - Create group
func (c *GroupsAPIController) CreateGroup(w http.ResponseWriter, r *http.Request) {
	bodyParam := Group{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGroupRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGroupConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.CreateGroup(r.Context(), bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteGroup - Delete group
func (c *GroupsAPIController) DeleteGroup(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteGroup(r.Context(), groupUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DissociateGroupCallpermission - Dissociate group and call permission
func (c *GroupsAPIController) DissociateGroupCallpermission(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	callpermissionIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callpermission_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DissociateGroupCallpermission(r.Context(), groupUuidParam, callpermissionIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DissociateGroupExtension - Dissociate group and extension
func (c *GroupsAPIController) DissociateGroupExtension(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	extensionIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "extension_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DissociateGroupExtension(r.Context(), groupUuidParam, extensionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DissociateGroupSchedule - Dissociate group and schedule
func (c *GroupsAPIController) DissociateGroupSchedule(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	scheduleIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "schedule_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DissociateGroupSchedule(r.Context(), groupUuidParam, scheduleIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGroup - Get group
func (c *GroupsAPIController) GetGroup(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetGroup(r.Context(), groupUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGroupFallback - List all fallbacks for group
func (c *GroupsAPIController) GetGroupFallback(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	result, err := c.service.GetGroupFallback(r.Context(), groupUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListGroups - List groups
func (c *GroupsAPIController) ListGroups(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var recurseParam bool
	if query.Has("recurse") {
		param, err := parseBoolParameter(
			query.Get("recurse"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recurseParam = param
	} else {
		var param bool = false
		recurseParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var searchParam string
	if query.Has("search") {
		param := query.Get("search")

		searchParam = param
	} else {
	}
	result, err := c.service.ListGroups(r.Context(), accentTenantParam, recurseParam, orderParam, directionParam, limitParam, offsetParam, searchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCallPickupInterceptorGroups - Update call pickup and interceptors
func (c *GroupsAPIController) UpdateCallPickupInterceptorGroups(w http.ResponseWriter, r *http.Request) {
	callpickupIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callpickup_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := GroupsId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGroupsIdRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGroupsIdConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateCallPickupInterceptorGroups(r.Context(), callpickupIdParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCallPickupTargetGroups - Update call pickup and targets
func (c *GroupsAPIController) UpdateCallPickupTargetGroups(w http.ResponseWriter, r *http.Request) {
	callpickupIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "callpickup_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := GroupsId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGroupsIdRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGroupsIdConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateCallPickupTargetGroups(r.Context(), callpickupIdParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateGroup - Update group
func (c *GroupsAPIController) UpdateGroup(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	bodyParam := Group{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGroupRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGroupConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateGroup(r.Context(), groupUuidParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateGroupFallback - Update group's fallbacks
func (c *GroupsAPIController) UpdateGroupFallback(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	bodyParam := GroupFallbacks{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGroupFallbacksRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGroupFallbacksConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateGroupFallback(r.Context(), groupUuidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateGroupMemberExtensions - Update group and extensions
func (c *GroupsAPIController) UpdateGroupMemberExtensions(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	bodyParam := GroupMemberExtensions{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGroupMemberExtensionsRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGroupMemberExtensionsConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateGroupMemberExtensions(r.Context(), groupUuidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateGroupMemberUsers - Update group and users
func (c *GroupsAPIController) UpdateGroupMemberUsers(w http.ResponseWriter, r *http.Request) {
	groupUuidParam := chi.URLParam(r, "group_uuid")
	if groupUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_uuid"}, nil)
		return
	}
	bodyParam := GroupMemberUsers{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGroupMemberUsersRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGroupMemberUsersConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateGroupMemberUsers(r.Context(), groupUuidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateUserGroups - Update user and groups
func (c *GroupsAPIController) UpdateUserGroups(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	bodyParam := UserGroupsId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserGroupsIdRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserGroupsIdConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUserGroups(r.Context(), userIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
