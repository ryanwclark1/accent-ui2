/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

type Wizard struct {

	// Accent administrator ``root`` password
	AdminPassword string `json:"admin_password"`

	// The language in which the Accent will play sounds
	Language string `json:"language,omitempty"`

	// Accept/decline the GPLv3: http://www.gnu.org/licenses/gpl-3.0.en.html
	License bool `json:"license"`

	Network WizardNetwork `json:"network"`

	Steps WizardSteps `json:"steps,omitempty"`

	// System timezone. Example: America/Montreal. For the complete list of supported timezones, see ``/usr/share/zoneinfo/``
	Timezone string `json:"timezone"`
}

// AssertWizardRequired checks if the required fields are not zero-ed
func AssertWizardRequired(obj Wizard) error {
	elements := map[string]interface{}{
		"admin_password": obj.AdminPassword,
		"license":        obj.License,
		"network":        obj.Network,
		"timezone":       obj.Timezone,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertWizardNetworkRequired(obj.Network); err != nil {
		return err
	}
	if err := AssertWizardStepsRequired(obj.Steps); err != nil {
		return err
	}
	return nil
}

// AssertWizardConstraints checks if the values respects the defined constraints
func AssertWizardConstraints(obj Wizard) error {
	return nil
}
