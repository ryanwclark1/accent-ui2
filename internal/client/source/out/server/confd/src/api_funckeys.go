/*
 * accent-confd
 *
 * Confd exposes an API for managing core resources on a Accent server such as users, extensions, devices, voicemails, queues, etc. Resources can be associated together to provide additional functionality. For example: By associating a voicemail with a user, calls will automatically fallback on to the voicemail when the user cannot answer.  Implementation notes ====================  Errors ------  Responses containing errors will have a status code in the 400 or 500 class. A list of error messages will be returned in the body of the response as a JSON-encoded array:  ~~~ [     \"Input error - User not found\",     \"Resource error - User not associated to a line\" ] ~~~   Updating resources via PUT --------------------------  When updating a resource, all fields become optional. In other words, only values that have been changed need to be sent to the server. Please note that this behavior may change in future versions of the API.
 *
 * API version: 1.1
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package confdserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// FunckeysAPIController binds http requests to an api service and writes the service results to the http response
type FunckeysAPIController struct {
	service      FunckeysAPIServicer
	errorHandler ErrorHandler
}

// FunckeysAPIOption for how the controller is set up.
type FunckeysAPIOption func(*FunckeysAPIController)

// WithFunckeysAPIErrorHandler inject ErrorHandler into controller
func WithFunckeysAPIErrorHandler(h ErrorHandler) FunckeysAPIOption {
	return func(c *FunckeysAPIController) {
		c.errorHandler = h
	}
}

// NewFunckeysAPIController creates a default api controller
func NewFunckeysAPIController(s FunckeysAPIServicer, opts ...FunckeysAPIOption) Router {
	controller := &FunckeysAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the FunckeysAPIController
func (c *FunckeysAPIController) Routes() Routes {
	return Routes{
		"AssociateUserFuncKeyTemplate": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/funckeys/templates/{template_id}",
			c.AssociateUserFuncKeyTemplate,
		},
		"CreateFuncKeyTemplate": Route{
			strings.ToUpper("Post"),
			"/1.1/funckeys/templates",
			c.CreateFuncKeyTemplate,
		},
		"DeleteFuncKey": Route{
			strings.ToUpper("Delete"),
			"/1.1/funckeys/templates/{template_id}/{position}",
			c.DeleteFuncKey,
		},
		"DeleteFuncKeyTemplate": Route{
			strings.ToUpper("Delete"),
			"/1.1/funckeys/templates/{template_id}",
			c.DeleteFuncKeyTemplate,
		},
		"DeleteUserFuncKey": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/{user_id}/funckeys/{position}",
			c.DeleteUserFuncKey,
		},
		"DissociateUserFuncKeyTemplate": Route{
			strings.ToUpper("Delete"),
			"/1.1/users/{user_id}/funckeys/templates/{template_id}",
			c.DissociateUserFuncKeyTemplate,
		},
		"GetFuncKey": Route{
			strings.ToUpper("Get"),
			"/1.1/funckeys/templates/{template_id}/{position}",
			c.GetFuncKey,
		},
		"GetFuncKeyTemplate": Route{
			strings.ToUpper("Get"),
			"/1.1/funckeys/templates/{template_id}",
			c.GetFuncKeyTemplate,
		},
		"GetUserFuncKey": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_id}/funckeys/{position}",
			c.GetUserFuncKey,
		},
		"ListFuncKeyDestinations": Route{
			strings.ToUpper("Get"),
			"/1.1/funckeys/destinations",
			c.ListFuncKeyDestinations,
		},
		"ListFuncKeyTemplate": Route{
			strings.ToUpper("Get"),
			"/1.1/funckeys/templates",
			c.ListFuncKeyTemplate,
		},
		"ListFuncKeyTemplateUserAssociations": Route{
			strings.ToUpper("Get"),
			"/1.1/funckeys/templates/{template_id}/users",
			c.ListFuncKeyTemplateUserAssociations,
		},
		"ListUserFuncKeyTemplateAssociations": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_id}/funckeys/templates",
			c.ListUserFuncKeyTemplateAssociations,
		},
		"ListUserFuncKeys": Route{
			strings.ToUpper("Get"),
			"/1.1/users/{user_id}/funckeys",
			c.ListUserFuncKeys,
		},
		"UpdateFuncKey": Route{
			strings.ToUpper("Put"),
			"/1.1/funckeys/templates/{template_id}/{position}",
			c.UpdateFuncKey,
		},
		"UpdateFuncKeyTemplate": Route{
			strings.ToUpper("Put"),
			"/1.1/funckeys/templates/{template_id}",
			c.UpdateFuncKeyTemplate,
		},
		"UpdateUserFuncKey": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/funckeys/{position}",
			c.UpdateUserFuncKey,
		},
		"UpdateUserFuncKeys": Route{
			strings.ToUpper("Put"),
			"/1.1/users/{user_id}/funckeys",
			c.UpdateUserFuncKeys,
		},
	}
}

// AssociateUserFuncKeyTemplate - Associate a func key template to a user
func (c *FunckeysAPIController) AssociateUserFuncKeyTemplate(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	templateIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "template_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.AssociateUserFuncKeyTemplate(r.Context(), userIdParam, templateIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateFuncKeyTemplate - Create a template of func keys
func (c *FunckeysAPIController) CreateFuncKeyTemplate(w http.ResponseWriter, r *http.Request) {
	accentTenantParam := r.Header.Get("Accent-Tenant")
	bodyParam := FuncKeyTemplate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFuncKeyTemplateRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFuncKeyTemplateConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateFuncKeyTemplate(r.Context(), accentTenantParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteFuncKey - Remove func key from template
func (c *FunckeysAPIController) DeleteFuncKey(w http.ResponseWriter, r *http.Request) {
	templateIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "template_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	positionParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "position"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteFuncKey(r.Context(), templateIdParam, positionParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteFuncKeyTemplate - Delete func key template
func (c *FunckeysAPIController) DeleteFuncKeyTemplate(w http.ResponseWriter, r *http.Request) {
	templateIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "template_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteFuncKeyTemplate(r.Context(), templateIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteUserFuncKey - Remove func key for user
func (c *FunckeysAPIController) DeleteUserFuncKey(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	positionParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "position"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DeleteUserFuncKey(r.Context(), userIdParam, positionParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DissociateUserFuncKeyTemplate - Dissociate a func key template to a user
func (c *FunckeysAPIController) DissociateUserFuncKeyTemplate(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	templateIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "template_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.DissociateUserFuncKeyTemplate(r.Context(), userIdParam, templateIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFuncKey - Get a func key inside template
func (c *FunckeysAPIController) GetFuncKey(w http.ResponseWriter, r *http.Request) {
	templateIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "template_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	positionParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "position"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetFuncKey(r.Context(), templateIdParam, positionParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFuncKeyTemplate - Get a func key template
func (c *FunckeysAPIController) GetFuncKeyTemplate(w http.ResponseWriter, r *http.Request) {
	templateIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "template_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetFuncKeyTemplate(r.Context(), templateIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserFuncKey - Get a func key for a user
func (c *FunckeysAPIController) GetUserFuncKey(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	positionParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "position"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetUserFuncKey(r.Context(), userIdParam, positionParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListFuncKeyDestinations - List of possible func key destinations and their parameters
func (c *FunckeysAPIController) ListFuncKeyDestinations(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListFuncKeyDestinations(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListFuncKeyTemplate - List a func key template
func (c *FunckeysAPIController) ListFuncKeyTemplate(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var recurseParam bool
	if query.Has("recurse") {
		param, err := parseBoolParameter(
			query.Get("recurse"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recurseParam = param
	} else {
		var param bool = false
		recurseParam = param
	}
	result, err := c.service.ListFuncKeyTemplate(r.Context(), accentTenantParam, recurseParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListFuncKeyTemplateUserAssociations - List users associated to template
func (c *FunckeysAPIController) ListFuncKeyTemplateUserAssociations(w http.ResponseWriter, r *http.Request) {
	templateIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "template_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.ListFuncKeyTemplateUserAssociations(r.Context(), templateIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListUserFuncKeyTemplateAssociations - List funckey templates associated to user
func (c *FunckeysAPIController) ListUserFuncKeyTemplateAssociations(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.ListUserFuncKeyTemplateAssociations(r.Context(), userIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListUserFuncKeys - List func keys for a user
func (c *FunckeysAPIController) ListUserFuncKeys(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.ListUserFuncKeys(r.Context(), userIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateFuncKey - Add/Replace a func key in a template
func (c *FunckeysAPIController) UpdateFuncKey(w http.ResponseWriter, r *http.Request) {
	templateIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "template_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	positionParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "position"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := FuncKey{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFuncKeyRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFuncKeyConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateFuncKey(r.Context(), templateIdParam, positionParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateFuncKeyTemplate - Update a func key template
func (c *FunckeysAPIController) UpdateFuncKeyTemplate(w http.ResponseWriter, r *http.Request) {
	templateIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "template_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := FuncKeyTemplate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFuncKeyTemplateRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFuncKeyTemplateConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateFuncKeyTemplate(r.Context(), templateIdParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateUserFuncKey - Add/Replace a func key for a user
func (c *FunckeysAPIController) UpdateUserFuncKey(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	positionParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "position"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := FuncKey{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFuncKeyRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFuncKeyConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateUserFuncKey(r.Context(), userIdParam, positionParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateUserFuncKeys - Update func keys for a user
func (c *FunckeysAPIController) UpdateUserFuncKeys(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "user_id")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	bodyParam := FuncKeyTemplate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFuncKeyTemplateRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFuncKeyTemplateConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateUserFuncKeys(r.Context(), userIdParam, bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
