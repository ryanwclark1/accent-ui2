/*
 * accent-calld
 *
 * Control your calls from a REST API
 *
 * API version: 1.0.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package calldserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// RelocatesAPIController binds http requests to an api service and writes the service results to the http response
type RelocatesAPIController struct {
	service      RelocatesAPIServicer
	errorHandler ErrorHandler
}

// RelocatesAPIOption for how the controller is set up.
type RelocatesAPIOption func(*RelocatesAPIController)

// WithRelocatesAPIErrorHandler inject ErrorHandler into controller
func WithRelocatesAPIErrorHandler(h ErrorHandler) RelocatesAPIOption {
	return func(c *RelocatesAPIController) {
		c.errorHandler = h
	}
}

// NewRelocatesAPIController creates a default api controller
func NewRelocatesAPIController(s RelocatesAPIServicer, opts ...RelocatesAPIOption) Router {
	controller := &RelocatesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RelocatesAPIController
func (c *RelocatesAPIController) Routes() Routes {
	return Routes{
		"CancelRelocate": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/relocates/{relocate_uuid}/cancel",
			c.CancelRelocate,
		},
		"CompleteRelocate": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/relocates/{relocate_uuid}/complete",
			c.CompleteRelocate,
		},
		"GetUserRelocate": Route{
			strings.ToUpper("Get"),
			"/1.0/users/me/relocates/{relocate_uuid}",
			c.GetUserRelocate,
		},
		"InitiateRelocate": Route{
			strings.ToUpper("Post"),
			"/1.0/users/me/relocates",
			c.InitiateRelocate,
		},
		"ListUserRelocates": Route{
			strings.ToUpper("Get"),
			"/1.0/users/me/relocates",
			c.ListUserRelocates,
		},
	}
}

// CancelRelocate - Cancel a relocate
func (c *RelocatesAPIController) CancelRelocate(w http.ResponseWriter, r *http.Request) {
	relocateUuidParam := chi.URLParam(r, "relocate_uuid")
	if relocateUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"relocate_uuid"}, nil)
		return
	}
	result, err := c.service.CancelRelocate(r.Context(), relocateUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CompleteRelocate - Complete a relocate
func (c *RelocatesAPIController) CompleteRelocate(w http.ResponseWriter, r *http.Request) {
	relocateUuidParam := chi.URLParam(r, "relocate_uuid")
	if relocateUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"relocate_uuid"}, nil)
		return
	}
	result, err := c.service.CompleteRelocate(r.Context(), relocateUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserRelocate - Get details of a relocate
func (c *RelocatesAPIController) GetUserRelocate(w http.ResponseWriter, r *http.Request) {
	relocateUuidParam := chi.URLParam(r, "relocate_uuid")
	if relocateUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"relocate_uuid"}, nil)
		return
	}
	result, err := c.service.GetUserRelocate(r.Context(), relocateUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// InitiateRelocate - Initiate a relocate from the authenticated user
func (c *RelocatesAPIController) InitiateRelocate(w http.ResponseWriter, r *http.Request) {
	bodyParam := UserRelocateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserRelocateRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserRelocateRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiateRelocate(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserRelocates - Get the relocates of the authenticated user
func (c *RelocatesAPIController) ListUserRelocates(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListUserRelocates(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
