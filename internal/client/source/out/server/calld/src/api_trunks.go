/*
 * accent-calld
 *
 * Control your calls from a REST API
 *
 * API version: 1.0.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package calldserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// TrunksAPIController binds http requests to an api service and writes the service results to the http response
type TrunksAPIController struct {
	service      TrunksAPIServicer
	errorHandler ErrorHandler
}

// TrunksAPIOption for how the controller is set up.
type TrunksAPIOption func(*TrunksAPIController)

// WithTrunksAPIErrorHandler inject ErrorHandler into controller
func WithTrunksAPIErrorHandler(h ErrorHandler) TrunksAPIOption {
	return func(c *TrunksAPIController) {
		c.errorHandler = h
	}
}

// NewTrunksAPIController creates a default api controller
func NewTrunksAPIController(s TrunksAPIServicer, opts ...TrunksAPIOption) Router {
	controller := &TrunksAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TrunksAPIController
func (c *TrunksAPIController) Routes() Routes {
	return Routes{
		"ListTrunks": Route{
			strings.ToUpper("Get"),
			"/1.0/trunks",
			c.ListTrunks,
		},
	}
}

// ListTrunks - List trunk endpoint statuses
func (c *TrunksAPIController) ListTrunks(w http.ResponseWriter, r *http.Request) {
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.ListTrunks(r.Context(), accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
