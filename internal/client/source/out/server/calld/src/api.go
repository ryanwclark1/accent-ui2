/*
 * accent-calld
 *
 * Control your calls from a REST API
 *
 * API version: 1.0.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package calldserver

import (
	"context"
	"net/http"
	"os"
)



// AdhocConferencesAPIRouter defines the required methods for binding the api requests to a responses for the AdhocConferencesAPI
// The AdhocConferencesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AdhocConferencesAPIServicer to perform the required actions, then write the service results to the http response.
type AdhocConferencesAPIRouter interface { 
	AddParticipantToAdhocConference(http.ResponseWriter, *http.Request)
	CreateAdhocConference(http.ResponseWriter, *http.Request)
	DeleteAdhocConference(http.ResponseWriter, *http.Request)
	RemoveParticipantFromAdhocConference(http.ResponseWriter, *http.Request)
}
// ApplicationsAPIRouter defines the required methods for binding the api requests to a responses for the ApplicationsAPI
// The ApplicationsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ApplicationsAPIServicer to perform the required actions, then write the service results to the http response.
type ApplicationsAPIRouter interface { 
	AnswerApplicationCall(http.ResponseWriter, *http.Request)
	CreateApplicationCallToNode(http.ResponseWriter, *http.Request)
	CreateApplicationCallToUser(http.ResponseWriter, *http.Request)
	CreateApplicationCalls(http.ResponseWriter, *http.Request)
	CreateApplicationNode(http.ResponseWriter, *http.Request)
	DeleteApplicationCall(http.ResponseWriter, *http.Request)
	DeleteApplicationCallFromNode(http.ResponseWriter, *http.Request)
	DeleteApplicationNode(http.ResponseWriter, *http.Request)
	DeletePlayback(http.ResponseWriter, *http.Request)
	GetApplication(http.ResponseWriter, *http.Request)
	GetApplicationCalls(http.ResponseWriter, *http.Request)
	GetApplicationNodes(http.ResponseWriter, *http.Request)
	GetNode(http.ResponseWriter, *http.Request)
	GetSnoop(http.ResponseWriter, *http.Request)
	HoldApplicationCall(http.ResponseWriter, *http.Request)
	InsertApplicationCallToNode(http.ResponseWriter, *http.Request)
	ListApplicationSnoops(http.ResponseWriter, *http.Request)
	MuteApplicationCall(http.ResponseWriter, *http.Request)
	PlayApplicationCall(http.ResponseWriter, *http.Request)
	ResumeApplicationCall(http.ResponseWriter, *http.Request)
	SendApplicationCallDTMF(http.ResponseWriter, *http.Request)
	SnoopApplicationCall(http.ResponseWriter, *http.Request)
	StartApplicationCallMOH(http.ResponseWriter, *http.Request)
	StartApplicationCallProgress(http.ResponseWriter, *http.Request)
	StopApplicationCallMOH(http.ResponseWriter, *http.Request)
	StopApplicationCallProgress(http.ResponseWriter, *http.Request)
	StopSnoop(http.ResponseWriter, *http.Request)
	UnmuteApplicationCall(http.ResponseWriter, *http.Request)
	UpdateSnoop(http.ResponseWriter, *http.Request)
}
// CallsAPIRouter defines the required methods for binding the api requests to a responses for the CallsAPI
// The CallsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a CallsAPIServicer to perform the required actions, then write the service results to the http response.
type CallsAPIRouter interface { 
	AnswerCall(http.ResponseWriter, *http.Request)
	AnswerUserCall(http.ResponseWriter, *http.Request)
	ConnectCallToUser(http.ResponseWriter, *http.Request)
	CreateCall(http.ResponseWriter, *http.Request)
	CreateUserCall(http.ResponseWriter, *http.Request)
	DeleteCall(http.ResponseWriter, *http.Request)
	GetCall(http.ResponseWriter, *http.Request)
	HangupUserCall(http.ResponseWriter, *http.Request)
	HoldCall(http.ResponseWriter, *http.Request)
	HoldUserCall(http.ResponseWriter, *http.Request)
	ListCalls(http.ResponseWriter, *http.Request)
	ListUserCalls(http.ResponseWriter, *http.Request)
	MuteCall(http.ResponseWriter, *http.Request)
	MuteUserCall(http.ResponseWriter, *http.Request)
	SendCallDTMF(http.ResponseWriter, *http.Request)
	SendUserDTMF(http.ResponseWriter, *http.Request)
	StartCurrentUserRecording(http.ResponseWriter, *http.Request)
	StartRecording(http.ResponseWriter, *http.Request)
	StopCurrentUserRecording(http.ResponseWriter, *http.Request)
	StopRecording(http.ResponseWriter, *http.Request)
	UnholdCall(http.ResponseWriter, *http.Request)
	UnholdUserCall(http.ResponseWriter, *http.Request)
	UnmuteCall(http.ResponseWriter, *http.Request)
	UnmuteUserCall(http.ResponseWriter, *http.Request)
}
// ConferencesAPIRouter defines the required methods for binding the api requests to a responses for the ConferencesAPI
// The ConferencesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ConferencesAPIServicer to perform the required actions, then write the service results to the http response.
type ConferencesAPIRouter interface { 
	KickParticipant(http.ResponseWriter, *http.Request)
	ListConferenceParticipants(http.ResponseWriter, *http.Request)
	ListUserConferenceParticipants(http.ResponseWriter, *http.Request)
	MuteParticipant(http.ResponseWriter, *http.Request)
	StartConferenceRecording(http.ResponseWriter, *http.Request)
	StopConferenceRecording(http.ResponseWriter, *http.Request)
	UnmuteParticipant(http.ResponseWriter, *http.Request)
}
// ConfigAPIRouter defines the required methods for binding the api requests to a responses for the ConfigAPI
// The ConfigAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ConfigAPIServicer to perform the required actions, then write the service results to the http response.
type ConfigAPIRouter interface { 
	GetConfig(http.ResponseWriter, *http.Request)
	PatchConfig(http.ResponseWriter, *http.Request)
}
// FaxesAPIRouter defines the required methods for binding the api requests to a responses for the FaxesAPI
// The FaxesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a FaxesAPIServicer to perform the required actions, then write the service results to the http response.
type FaxesAPIRouter interface { 
	SendFax(http.ResponseWriter, *http.Request)
	SendUserFax(http.ResponseWriter, *http.Request)
}
// LinesAPIRouter defines the required methods for binding the api requests to a responses for the LinesAPI
// The LinesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a LinesAPIServicer to perform the required actions, then write the service results to the http response.
type LinesAPIRouter interface { 
	ListLines(http.ResponseWriter, *http.Request)
}
// MeetingsAPIRouter defines the required methods for binding the api requests to a responses for the MeetingsAPI
// The MeetingsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MeetingsAPIServicer to perform the required actions, then write the service results to the http response.
type MeetingsAPIRouter interface { 
	GetGuestMeetingStatus(http.ResponseWriter, *http.Request)
	KickMeetingParticipant(http.ResponseWriter, *http.Request)
	KickUserMeetingParticipant(http.ResponseWriter, *http.Request)
	ListMeetingParticipants(http.ResponseWriter, *http.Request)
	ListUserMeetingParticipants(http.ResponseWriter, *http.Request)
}
// RelocatesAPIRouter defines the required methods for binding the api requests to a responses for the RelocatesAPI
// The RelocatesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a RelocatesAPIServicer to perform the required actions, then write the service results to the http response.
type RelocatesAPIRouter interface { 
	CancelRelocate(http.ResponseWriter, *http.Request)
	CompleteRelocate(http.ResponseWriter, *http.Request)
	GetUserRelocate(http.ResponseWriter, *http.Request)
	InitiateRelocate(http.ResponseWriter, *http.Request)
	ListUserRelocates(http.ResponseWriter, *http.Request)
}
// StatusAPIRouter defines the required methods for binding the api requests to a responses for the StatusAPI
// The StatusAPIRouter implementation should parse necessary information from the http request,
// pass the data to a StatusAPIServicer to perform the required actions, then write the service results to the http response.
type StatusAPIRouter interface { 
	GetStatus(http.ResponseWriter, *http.Request)
}
// SwitchboardsAPIRouter defines the required methods for binding the api requests to a responses for the SwitchboardsAPI
// The SwitchboardsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SwitchboardsAPIServicer to perform the required actions, then write the service results to the http response.
type SwitchboardsAPIRouter interface { 
	AnswerHeldCall(http.ResponseWriter, *http.Request)
	AnswerQueuedCall(http.ResponseWriter, *http.Request)
	HoldSwitchboardCall(http.ResponseWriter, *http.Request)
	ListSwitchboardHeldCalls(http.ResponseWriter, *http.Request)
	ListSwitchboardQueuedCalls(http.ResponseWriter, *http.Request)
}
// TransfersAPIRouter defines the required methods for binding the api requests to a responses for the TransfersAPI
// The TransfersAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TransfersAPIServicer to perform the required actions, then write the service results to the http response.
type TransfersAPIRouter interface { 
	CancelTransfer(http.ResponseWriter, *http.Request)
	CancelUserTransfer(http.ResponseWriter, *http.Request)
	CompleteTransfer(http.ResponseWriter, *http.Request)
	CompleteUserTransfer(http.ResponseWriter, *http.Request)
	GetTransfer(http.ResponseWriter, *http.Request)
	InitiateTransfer(http.ResponseWriter, *http.Request)
	InitiateUserTransfer(http.ResponseWriter, *http.Request)
	ListUserTransfers(http.ResponseWriter, *http.Request)
}
// TrunksAPIRouter defines the required methods for binding the api requests to a responses for the TrunksAPI
// The TrunksAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TrunksAPIServicer to perform the required actions, then write the service results to the http response.
type TrunksAPIRouter interface { 
	ListTrunks(http.ResponseWriter, *http.Request)
}
// UsersAPIRouter defines the required methods for binding the api requests to a responses for the UsersAPI
// The UsersAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UsersAPIServicer to perform the required actions, then write the service results to the http response.
type UsersAPIRouter interface { 
	AnswerUserCall(http.ResponseWriter, *http.Request)
	CancelRelocate(http.ResponseWriter, *http.Request)
	CancelUserTransfer(http.ResponseWriter, *http.Request)
	CheckUserVoicemailGreeting(http.ResponseWriter, *http.Request)
	CompleteRelocate(http.ResponseWriter, *http.Request)
	CompleteUserTransfer(http.ResponseWriter, *http.Request)
	CopyUserVoicemailGreeting(http.ResponseWriter, *http.Request)
	CreateUserCall(http.ResponseWriter, *http.Request)
	CreateUserVoicemailGreeting(http.ResponseWriter, *http.Request)
	DeleteUserVoicemailGreeting(http.ResponseWriter, *http.Request)
	DeleteUserVoicemailMessage(http.ResponseWriter, *http.Request)
	GetUserVoicemailFolder(http.ResponseWriter, *http.Request)
	GetUserVoicemailGreeting(http.ResponseWriter, *http.Request)
	GetUserVoicemailMessage(http.ResponseWriter, *http.Request)
	GetUserVoicemailMessageRecording(http.ResponseWriter, *http.Request)
	HangupUserCall(http.ResponseWriter, *http.Request)
	HoldUserCall(http.ResponseWriter, *http.Request)
	InitiateRelocate(http.ResponseWriter, *http.Request)
	InitiateUserTransfer(http.ResponseWriter, *http.Request)
	KickUserMeetingParticipant(http.ResponseWriter, *http.Request)
	ListUserCalls(http.ResponseWriter, *http.Request)
	ListUserConferenceParticipants(http.ResponseWriter, *http.Request)
	ListUserMeetingParticipants(http.ResponseWriter, *http.Request)
	ListUserRelocates(http.ResponseWriter, *http.Request)
	ListUserTransfers(http.ResponseWriter, *http.Request)
	ListUserVoicemails(http.ResponseWriter, *http.Request)
	MuteUserCall(http.ResponseWriter, *http.Request)
	SendUserDTMF(http.ResponseWriter, *http.Request)
	StartCurrentUserRecording(http.ResponseWriter, *http.Request)
	StopCurrentUserRecording(http.ResponseWriter, *http.Request)
	UnholdUserCall(http.ResponseWriter, *http.Request)
	UnmuteUserCall(http.ResponseWriter, *http.Request)
	UpdateUserVoicemailGreeting(http.ResponseWriter, *http.Request)
	UpdateUserVoicemailMessage(http.ResponseWriter, *http.Request)
}
// VoicemailsAPIRouter defines the required methods for binding the api requests to a responses for the VoicemailsAPI
// The VoicemailsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a VoicemailsAPIServicer to perform the required actions, then write the service results to the http response.
type VoicemailsAPIRouter interface { 
	CheckUserVoicemailGreeting(http.ResponseWriter, *http.Request)
	CheckVoicemailGreeting(http.ResponseWriter, *http.Request)
	CopyUserVoicemailGreeting(http.ResponseWriter, *http.Request)
	CopyVoicemailGreeting(http.ResponseWriter, *http.Request)
	CreateUserVoicemailGreeting(http.ResponseWriter, *http.Request)
	CreateVoicemailGreeting(http.ResponseWriter, *http.Request)
	DeleteUserVoicemailGreeting(http.ResponseWriter, *http.Request)
	DeleteUserVoicemailMessage(http.ResponseWriter, *http.Request)
	DeleteVoicemailGreeting(http.ResponseWriter, *http.Request)
	DeleteVoicemailMessage(http.ResponseWriter, *http.Request)
	GetUserVoicemailFolder(http.ResponseWriter, *http.Request)
	GetUserVoicemailGreeting(http.ResponseWriter, *http.Request)
	GetUserVoicemailMessage(http.ResponseWriter, *http.Request)
	GetUserVoicemailMessageRecording(http.ResponseWriter, *http.Request)
	GetVoicemail(http.ResponseWriter, *http.Request)
	GetVoicemailFolder(http.ResponseWriter, *http.Request)
	GetVoicemailGreeting(http.ResponseWriter, *http.Request)
	GetVoicemailMessage(http.ResponseWriter, *http.Request)
	GetVoicemailMessageRecording(http.ResponseWriter, *http.Request)
	ListUserVoicemails(http.ResponseWriter, *http.Request)
	UpdateUserVoicemailGreeting(http.ResponseWriter, *http.Request)
	UpdateUserVoicemailMessage(http.ResponseWriter, *http.Request)
	UpdateVoicemailGreeting(http.ResponseWriter, *http.Request)
	UpdateVoicemailMessage(http.ResponseWriter, *http.Request)
}


// AdhocConferencesAPIServicer defines the api actions for the AdhocConferencesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AdhocConferencesAPIServicer interface { 
	AddParticipantToAdhocConference(context.Context, string, string) (ImplResponse, error)
	CreateAdhocConference(context.Context, AdhocConferenceCreation) (ImplResponse, error)
	DeleteAdhocConference(context.Context, string) (ImplResponse, error)
	RemoveParticipantFromAdhocConference(context.Context, string, string) (ImplResponse, error)
}


// ApplicationsAPIServicer defines the api actions for the ApplicationsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ApplicationsAPIServicer interface { 
	AnswerApplicationCall(context.Context, string, string) (ImplResponse, error)
	CreateApplicationCallToNode(context.Context, string, string, ApplicationCallRequestToExten) (ImplResponse, error)
	CreateApplicationCallToUser(context.Context, string, string, ApplicationCallRequestToUser) (ImplResponse, error)
	CreateApplicationCalls(context.Context, string, ApplicationCallRequestToExten) (ImplResponse, error)
	CreateApplicationNode(context.Context, string, ApplicationNodeRequest) (ImplResponse, error)
	DeleteApplicationCall(context.Context, string, string) (ImplResponse, error)
	DeleteApplicationCallFromNode(context.Context, string, string, string) (ImplResponse, error)
	DeleteApplicationNode(context.Context, string, string) (ImplResponse, error)
	DeletePlayback(context.Context, string, string) (ImplResponse, error)
	GetApplication(context.Context, string) (ImplResponse, error)
	GetApplicationCalls(context.Context, string) (ImplResponse, error)
	GetApplicationNodes(context.Context, string) (ImplResponse, error)
	GetNode(context.Context, string, string) (ImplResponse, error)
	GetSnoop(context.Context, string, string) (ImplResponse, error)
	HoldApplicationCall(context.Context, string, string) (ImplResponse, error)
	InsertApplicationCallToNode(context.Context, string, string, string) (ImplResponse, error)
	ListApplicationSnoops(context.Context, string) (ImplResponse, error)
	MuteApplicationCall(context.Context, string, string) (ImplResponse, error)
	PlayApplicationCall(context.Context, string, string, ApplicationPlayback) (ImplResponse, error)
	ResumeApplicationCall(context.Context, string, string) (ImplResponse, error)
	SendApplicationCallDTMF(context.Context, string, string, string) (ImplResponse, error)
	SnoopApplicationCall(context.Context, string, string, ApplicationSnoop) (ImplResponse, error)
	StartApplicationCallMOH(context.Context, string, string, string) (ImplResponse, error)
	StartApplicationCallProgress(context.Context, string, string) (ImplResponse, error)
	StopApplicationCallMOH(context.Context, string, string) (ImplResponse, error)
	StopApplicationCallProgress(context.Context, string, string) (ImplResponse, error)
	StopSnoop(context.Context, string, string) (ImplResponse, error)
	UnmuteApplicationCall(context.Context, string, string) (ImplResponse, error)
	UpdateSnoop(context.Context, string, string, ApplicationSnoopPut) (ImplResponse, error)
}


// CallsAPIServicer defines the api actions for the CallsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CallsAPIServicer interface { 
	AnswerCall(context.Context, string) (ImplResponse, error)
	AnswerUserCall(context.Context, string) (ImplResponse, error)
	ConnectCallToUser(context.Context, string, string, ConnectCallToUserRequest) (ImplResponse, error)
	CreateCall(context.Context, CallRequest) (ImplResponse, error)
	CreateUserCall(context.Context, UserCallRequest) (ImplResponse, error)
	DeleteCall(context.Context, string) (ImplResponse, error)
	GetCall(context.Context, string) (ImplResponse, error)
	HangupUserCall(context.Context, string) (ImplResponse, error)
	HoldCall(context.Context, string) (ImplResponse, error)
	HoldUserCall(context.Context, string) (ImplResponse, error)
	ListCalls(context.Context, string, string) (ImplResponse, error)
	ListUserCalls(context.Context, string, string) (ImplResponse, error)
	MuteCall(context.Context, string) (ImplResponse, error)
	MuteUserCall(context.Context, string) (ImplResponse, error)
	SendCallDTMF(context.Context, string, string) (ImplResponse, error)
	SendUserDTMF(context.Context, string, string) (ImplResponse, error)
	StartCurrentUserRecording(context.Context, string) (ImplResponse, error)
	StartRecording(context.Context, string) (ImplResponse, error)
	StopCurrentUserRecording(context.Context, string) (ImplResponse, error)
	StopRecording(context.Context, string) (ImplResponse, error)
	UnholdCall(context.Context, string) (ImplResponse, error)
	UnholdUserCall(context.Context, string) (ImplResponse, error)
	UnmuteCall(context.Context, string) (ImplResponse, error)
	UnmuteUserCall(context.Context, string) (ImplResponse, error)
}


// ConferencesAPIServicer defines the api actions for the ConferencesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ConferencesAPIServicer interface { 
	KickParticipant(context.Context, string, string) (ImplResponse, error)
	ListConferenceParticipants(context.Context, string) (ImplResponse, error)
	ListUserConferenceParticipants(context.Context, string) (ImplResponse, error)
	MuteParticipant(context.Context, string, string) (ImplResponse, error)
	StartConferenceRecording(context.Context, string) (ImplResponse, error)
	StopConferenceRecording(context.Context, string) (ImplResponse, error)
	UnmuteParticipant(context.Context, string, string) (ImplResponse, error)
}


// ConfigAPIServicer defines the api actions for the ConfigAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ConfigAPIServicer interface { 
	GetConfig(context.Context) (ImplResponse, error)
	PatchConfig(context.Context, []ConfigPatchItem) (ImplResponse, error)
}


// FaxesAPIServicer defines the api actions for the FaxesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type FaxesAPIServicer interface { 
	SendFax(context.Context, string, string, *os.File, string, string, int32) (ImplResponse, error)
	SendUserFax(context.Context, string, *os.File, string, string, int32) (ImplResponse, error)
}


// LinesAPIServicer defines the api actions for the LinesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LinesAPIServicer interface { 
	ListLines(context.Context, string) (ImplResponse, error)
}


// MeetingsAPIServicer defines the api actions for the MeetingsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MeetingsAPIServicer interface { 
	GetGuestMeetingStatus(context.Context, string) (ImplResponse, error)
	KickMeetingParticipant(context.Context, string, string) (ImplResponse, error)
	KickUserMeetingParticipant(context.Context, string, string) (ImplResponse, error)
	ListMeetingParticipants(context.Context, string) (ImplResponse, error)
	ListUserMeetingParticipants(context.Context, string) (ImplResponse, error)
}


// RelocatesAPIServicer defines the api actions for the RelocatesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RelocatesAPIServicer interface { 
	CancelRelocate(context.Context, string) (ImplResponse, error)
	CompleteRelocate(context.Context, string) (ImplResponse, error)
	GetUserRelocate(context.Context, string) (ImplResponse, error)
	InitiateRelocate(context.Context, UserRelocateRequest) (ImplResponse, error)
	ListUserRelocates(context.Context) (ImplResponse, error)
}


// StatusAPIServicer defines the api actions for the StatusAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StatusAPIServicer interface { 
	GetStatus(context.Context) (ImplResponse, error)
}


// SwitchboardsAPIServicer defines the api actions for the SwitchboardsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SwitchboardsAPIServicer interface { 
	AnswerHeldCall(context.Context, string, string, string, int32) (ImplResponse, error)
	AnswerQueuedCall(context.Context, string, string, string, int32) (ImplResponse, error)
	HoldSwitchboardCall(context.Context, string, string, string) (ImplResponse, error)
	ListSwitchboardHeldCalls(context.Context, string, string) (ImplResponse, error)
	ListSwitchboardQueuedCalls(context.Context, string, string) (ImplResponse, error)
}


// TransfersAPIServicer defines the api actions for the TransfersAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TransfersAPIServicer interface { 
	CancelTransfer(context.Context, string) (ImplResponse, error)
	CancelUserTransfer(context.Context, string) (ImplResponse, error)
	CompleteTransfer(context.Context, string) (ImplResponse, error)
	CompleteUserTransfer(context.Context, string) (ImplResponse, error)
	GetTransfer(context.Context, string) (ImplResponse, error)
	InitiateTransfer(context.Context, TransferRequest) (ImplResponse, error)
	InitiateUserTransfer(context.Context, UserTransferRequest) (ImplResponse, error)
	ListUserTransfers(context.Context) (ImplResponse, error)
}


// TrunksAPIServicer defines the api actions for the TrunksAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TrunksAPIServicer interface { 
	ListTrunks(context.Context, string) (ImplResponse, error)
}


// UsersAPIServicer defines the api actions for the UsersAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UsersAPIServicer interface { 
	AnswerUserCall(context.Context, string) (ImplResponse, error)
	CancelRelocate(context.Context, string) (ImplResponse, error)
	CancelUserTransfer(context.Context, string) (ImplResponse, error)
	CheckUserVoicemailGreeting(context.Context, string) (ImplResponse, error)
	CompleteRelocate(context.Context, string) (ImplResponse, error)
	CompleteUserTransfer(context.Context, string) (ImplResponse, error)
	CopyUserVoicemailGreeting(context.Context, string, GreetingCopy) (ImplResponse, error)
	CreateUserCall(context.Context, UserCallRequest) (ImplResponse, error)
	CreateUserVoicemailGreeting(context.Context, string, map[string]interface{}) (ImplResponse, error)
	DeleteUserVoicemailGreeting(context.Context, string) (ImplResponse, error)
	DeleteUserVoicemailMessage(context.Context, string) (ImplResponse, error)
	GetUserVoicemailFolder(context.Context, int32) (ImplResponse, error)
	GetUserVoicemailGreeting(context.Context, string) (ImplResponse, error)
	GetUserVoicemailMessage(context.Context, string) (ImplResponse, error)
	GetUserVoicemailMessageRecording(context.Context, string, string, string) (ImplResponse, error)
	HangupUserCall(context.Context, string) (ImplResponse, error)
	HoldUserCall(context.Context, string) (ImplResponse, error)
	InitiateRelocate(context.Context, UserRelocateRequest) (ImplResponse, error)
	InitiateUserTransfer(context.Context, UserTransferRequest) (ImplResponse, error)
	KickUserMeetingParticipant(context.Context, string, string) (ImplResponse, error)
	ListUserCalls(context.Context, string, string) (ImplResponse, error)
	ListUserConferenceParticipants(context.Context, string) (ImplResponse, error)
	ListUserMeetingParticipants(context.Context, string) (ImplResponse, error)
	ListUserRelocates(context.Context) (ImplResponse, error)
	ListUserTransfers(context.Context) (ImplResponse, error)
	ListUserVoicemails(context.Context) (ImplResponse, error)
	MuteUserCall(context.Context, string) (ImplResponse, error)
	SendUserDTMF(context.Context, string, string) (ImplResponse, error)
	StartCurrentUserRecording(context.Context, string) (ImplResponse, error)
	StopCurrentUserRecording(context.Context, string) (ImplResponse, error)
	UnholdUserCall(context.Context, string) (ImplResponse, error)
	UnmuteUserCall(context.Context, string) (ImplResponse, error)
	UpdateUserVoicemailGreeting(context.Context, string, map[string]interface{}) (ImplResponse, error)
	UpdateUserVoicemailMessage(context.Context, string, VoicemailMessageUpdate) (ImplResponse, error)
}


// VoicemailsAPIServicer defines the api actions for the VoicemailsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type VoicemailsAPIServicer interface { 
	CheckUserVoicemailGreeting(context.Context, string) (ImplResponse, error)
	CheckVoicemailGreeting(context.Context, int32, string) (ImplResponse, error)
	CopyUserVoicemailGreeting(context.Context, string, GreetingCopy) (ImplResponse, error)
	CopyVoicemailGreeting(context.Context, int32, string, GreetingCopy) (ImplResponse, error)
	CreateUserVoicemailGreeting(context.Context, string, map[string]interface{}) (ImplResponse, error)
	CreateVoicemailGreeting(context.Context, int32, string, map[string]interface{}) (ImplResponse, error)
	DeleteUserVoicemailGreeting(context.Context, string) (ImplResponse, error)
	DeleteUserVoicemailMessage(context.Context, string) (ImplResponse, error)
	DeleteVoicemailGreeting(context.Context, int32, string) (ImplResponse, error)
	DeleteVoicemailMessage(context.Context, int32, string) (ImplResponse, error)
	GetUserVoicemailFolder(context.Context, int32) (ImplResponse, error)
	GetUserVoicemailGreeting(context.Context, string) (ImplResponse, error)
	GetUserVoicemailMessage(context.Context, string) (ImplResponse, error)
	GetUserVoicemailMessageRecording(context.Context, string, string, string) (ImplResponse, error)
	GetVoicemail(context.Context, int32) (ImplResponse, error)
	GetVoicemailFolder(context.Context, int32, int32) (ImplResponse, error)
	GetVoicemailGreeting(context.Context, int32, string) (ImplResponse, error)
	GetVoicemailMessage(context.Context, int32, string) (ImplResponse, error)
	GetVoicemailMessageRecording(context.Context, int32, string, string, string) (ImplResponse, error)
	ListUserVoicemails(context.Context) (ImplResponse, error)
	UpdateUserVoicemailGreeting(context.Context, string, map[string]interface{}) (ImplResponse, error)
	UpdateUserVoicemailMessage(context.Context, string, VoicemailMessageUpdate) (ImplResponse, error)
	UpdateVoicemailGreeting(context.Context, int32, string, map[string]interface{}) (ImplResponse, error)
	UpdateVoicemailMessage(context.Context, int32, string, VoicemailMessageUpdate) (ImplResponse, error)
}
