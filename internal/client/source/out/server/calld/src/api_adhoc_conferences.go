/*
 * accent-calld
 *
 * Control your calls from a REST API
 *
 * API version: 1.0.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package calldserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// AdhocConferencesAPIController binds http requests to an api service and writes the service results to the http response
type AdhocConferencesAPIController struct {
	service      AdhocConferencesAPIServicer
	errorHandler ErrorHandler
}

// AdhocConferencesAPIOption for how the controller is set up.
type AdhocConferencesAPIOption func(*AdhocConferencesAPIController)

// WithAdhocConferencesAPIErrorHandler inject ErrorHandler into controller
func WithAdhocConferencesAPIErrorHandler(h ErrorHandler) AdhocConferencesAPIOption {
	return func(c *AdhocConferencesAPIController) {
		c.errorHandler = h
	}
}

// NewAdhocConferencesAPIController creates a default api controller
func NewAdhocConferencesAPIController(s AdhocConferencesAPIServicer, opts ...AdhocConferencesAPIOption) Router {
	controller := &AdhocConferencesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AdhocConferencesAPIController
func (c *AdhocConferencesAPIController) Routes() Routes {
	return Routes{
		"AddParticipantToAdhocConference": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/conferences/adhoc/{conference_id}/participants/{call_id}",
			c.AddParticipantToAdhocConference,
		},
		"CreateAdhocConference": Route{
			strings.ToUpper("Post"),
			"/1.0/users/me/conferences/adhoc",
			c.CreateAdhocConference,
		},
		"DeleteAdhocConference": Route{
			strings.ToUpper("Delete"),
			"/1.0/users/me/conferences/adhoc/{conference_id}",
			c.DeleteAdhocConference,
		},
		"RemoveParticipantFromAdhocConference": Route{
			strings.ToUpper("Delete"),
			"/1.0/users/me/conferences/adhoc/{conference_id}/participants/{call_id}",
			c.RemoveParticipantFromAdhocConference,
		},
	}
}

// AddParticipantToAdhocConference - Add a participant into an adhoc conference
func (c *AdhocConferencesAPIController) AddParticipantToAdhocConference(w http.ResponseWriter, r *http.Request) {
	conferenceIdParam := chi.URLParam(r, "conference_id")
	if conferenceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"conference_id"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.AddParticipantToAdhocConference(r.Context(), conferenceIdParam, callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateAdhocConference - Create an adhoc conference
func (c *AdhocConferencesAPIController) CreateAdhocConference(w http.ResponseWriter, r *http.Request) {
	bodyParam := AdhocConferenceCreation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdhocConferenceCreationRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdhocConferenceCreationConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateAdhocConference(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteAdhocConference - Delete an adhoc conference
func (c *AdhocConferencesAPIController) DeleteAdhocConference(w http.ResponseWriter, r *http.Request) {
	conferenceIdParam := chi.URLParam(r, "conference_id")
	if conferenceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"conference_id"}, nil)
		return
	}
	result, err := c.service.DeleteAdhocConference(r.Context(), conferenceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveParticipantFromAdhocConference - Remove a participant from an adhoc conference
func (c *AdhocConferencesAPIController) RemoveParticipantFromAdhocConference(w http.ResponseWriter, r *http.Request) {
	conferenceIdParam := chi.URLParam(r, "conference_id")
	if conferenceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"conference_id"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.RemoveParticipantFromAdhocConference(r.Context(), conferenceIdParam, callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
