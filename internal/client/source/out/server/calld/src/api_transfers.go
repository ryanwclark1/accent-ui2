/*
 * accent-calld
 *
 * Control your calls from a REST API
 *
 * API version: 1.0.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package calldserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// TransfersAPIController binds http requests to an api service and writes the service results to the http response
type TransfersAPIController struct {
	service      TransfersAPIServicer
	errorHandler ErrorHandler
}

// TransfersAPIOption for how the controller is set up.
type TransfersAPIOption func(*TransfersAPIController)

// WithTransfersAPIErrorHandler inject ErrorHandler into controller
func WithTransfersAPIErrorHandler(h ErrorHandler) TransfersAPIOption {
	return func(c *TransfersAPIController) {
		c.errorHandler = h
	}
}

// NewTransfersAPIController creates a default api controller
func NewTransfersAPIController(s TransfersAPIServicer, opts ...TransfersAPIOption) Router {
	controller := &TransfersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TransfersAPIController
func (c *TransfersAPIController) Routes() Routes {
	return Routes{
		"CancelTransfer": Route{
			strings.ToUpper("Delete"),
			"/1.0/transfers/{transfer_id}",
			c.CancelTransfer,
		},
		"CancelUserTransfer": Route{
			strings.ToUpper("Delete"),
			"/1.0/users/me/transfers/{transfer_id}",
			c.CancelUserTransfer,
		},
		"CompleteTransfer": Route{
			strings.ToUpper("Put"),
			"/1.0/transfers/{transfer_id}/complete",
			c.CompleteTransfer,
		},
		"CompleteUserTransfer": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/transfers/{transfer_id}/complete",
			c.CompleteUserTransfer,
		},
		"GetTransfer": Route{
			strings.ToUpper("Get"),
			"/1.0/transfers/{transfer_id}",
			c.GetTransfer,
		},
		"InitiateTransfer": Route{
			strings.ToUpper("Post"),
			"/1.0/transfers",
			c.InitiateTransfer,
		},
		"InitiateUserTransfer": Route{
			strings.ToUpper("Post"),
			"/1.0/users/me/transfers",
			c.InitiateUserTransfer,
		},
		"ListUserTransfers": Route{
			strings.ToUpper("Get"),
			"/1.0/users/me/transfers",
			c.ListUserTransfers,
		},
	}
}

// CancelTransfer - Cancel a transfer
func (c *TransfersAPIController) CancelTransfer(w http.ResponseWriter, r *http.Request) {
	transferIdParam := chi.URLParam(r, "transfer_id")
	if transferIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"transfer_id"}, nil)
		return
	}
	result, err := c.service.CancelTransfer(r.Context(), transferIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CancelUserTransfer - Cancel a transfer
func (c *TransfersAPIController) CancelUserTransfer(w http.ResponseWriter, r *http.Request) {
	transferIdParam := chi.URLParam(r, "transfer_id")
	if transferIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"transfer_id"}, nil)
		return
	}
	result, err := c.service.CancelUserTransfer(r.Context(), transferIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CompleteTransfer - Complete a transfer
func (c *TransfersAPIController) CompleteTransfer(w http.ResponseWriter, r *http.Request) {
	transferIdParam := chi.URLParam(r, "transfer_id")
	if transferIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"transfer_id"}, nil)
		return
	}
	result, err := c.service.CompleteTransfer(r.Context(), transferIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CompleteUserTransfer - Complete a transfer
func (c *TransfersAPIController) CompleteUserTransfer(w http.ResponseWriter, r *http.Request) {
	transferIdParam := chi.URLParam(r, "transfer_id")
	if transferIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"transfer_id"}, nil)
		return
	}
	result, err := c.service.CompleteUserTransfer(r.Context(), transferIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTransfer - Get details of a transfer
func (c *TransfersAPIController) GetTransfer(w http.ResponseWriter, r *http.Request) {
	transferIdParam := chi.URLParam(r, "transfer_id")
	if transferIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"transfer_id"}, nil)
		return
	}
	result, err := c.service.GetTransfer(r.Context(), transferIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// InitiateTransfer - Initiate a transfer
func (c *TransfersAPIController) InitiateTransfer(w http.ResponseWriter, r *http.Request) {
	bodyParam := TransferRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTransferRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTransferRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiateTransfer(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// InitiateUserTransfer - Initiate a transfer from the authenticated user
func (c *TransfersAPIController) InitiateUserTransfer(w http.ResponseWriter, r *http.Request) {
	bodyParam := UserTransferRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserTransferRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserTransferRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiateUserTransfer(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListUserTransfers - Get the transfers of the authenticated user
func (c *TransfersAPIController) ListUserTransfers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListUserTransfers(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
