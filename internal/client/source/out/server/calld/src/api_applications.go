/*
 * accent-calld
 *
 * Control your calls from a REST API
 *
 * API version: 1.0.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package calldserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// ApplicationsAPIController binds http requests to an api service and writes the service results to the http response
type ApplicationsAPIController struct {
	service      ApplicationsAPIServicer
	errorHandler ErrorHandler
}

// ApplicationsAPIOption for how the controller is set up.
type ApplicationsAPIOption func(*ApplicationsAPIController)

// WithApplicationsAPIErrorHandler inject ErrorHandler into controller
func WithApplicationsAPIErrorHandler(h ErrorHandler) ApplicationsAPIOption {
	return func(c *ApplicationsAPIController) {
		c.errorHandler = h
	}
}

// NewApplicationsAPIController creates a default api controller
func NewApplicationsAPIController(s ApplicationsAPIServicer, opts ...ApplicationsAPIOption) Router {
	controller := &ApplicationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ApplicationsAPIController
func (c *ApplicationsAPIController) Routes() Routes {
	return Routes{
		"AnswerApplicationCall": Route{
			strings.ToUpper("Put"),
			"/1.0/applications/{application_uuid}/calls/{call_id}/answer",
			c.AnswerApplicationCall,
		},
		"CreateApplicationCallToNode": Route{
			strings.ToUpper("Post"),
			"/1.0/applications/{application_uuid}/nodes/{node_uuid}/calls",
			c.CreateApplicationCallToNode,
		},
		"CreateApplicationCallToUser": Route{
			strings.ToUpper("Post"),
			"/1.0/applications/{application_uuid}/nodes/{node_uuid}/calls/user",
			c.CreateApplicationCallToUser,
		},
		"CreateApplicationCalls": Route{
			strings.ToUpper("Post"),
			"/1.0/applications/{application_uuid}/calls",
			c.CreateApplicationCalls,
		},
		"CreateApplicationNode": Route{
			strings.ToUpper("Post"),
			"/1.0/applications/{application_uuid}/nodes",
			c.CreateApplicationNode,
		},
		"DeleteApplicationCall": Route{
			strings.ToUpper("Delete"),
			"/1.0/applications/{application_uuid}/calls/{call_id}",
			c.DeleteApplicationCall,
		},
		"DeleteApplicationCallFromNode": Route{
			strings.ToUpper("Delete"),
			"/1.0/applications/{application_uuid}/nodes/{node_uuid}/calls/{call_id}",
			c.DeleteApplicationCallFromNode,
		},
		"DeleteApplicationNode": Route{
			strings.ToUpper("Delete"),
			"/1.0/applications/{application_uuid}/nodes/{node_uuid}",
			c.DeleteApplicationNode,
		},
		"DeletePlayback": Route{
			strings.ToUpper("Delete"),
			"/1.0/applications/{application_uuid}/playbacks/{playback_uuid}",
			c.DeletePlayback,
		},
		"GetApplication": Route{
			strings.ToUpper("Get"),
			"/1.0/applications/{application_uuid}",
			c.GetApplication,
		},
		"GetApplicationCalls": Route{
			strings.ToUpper("Get"),
			"/1.0/applications/{application_uuid}/calls",
			c.GetApplicationCalls,
		},
		"GetApplicationNodes": Route{
			strings.ToUpper("Get"),
			"/1.0/applications/{application_uuid}/nodes",
			c.GetApplicationNodes,
		},
		"GetNode": Route{
			strings.ToUpper("Get"),
			"/1.0/applications/{application_uuid}/nodes/{node_uuid}",
			c.GetNode,
		},
		"GetSnoop": Route{
			strings.ToUpper("Get"),
			"/1.0/applications/{application_uuid}/snoops/{snoop_uuid}",
			c.GetSnoop,
		},
		"HoldApplicationCall": Route{
			strings.ToUpper("Put"),
			"/1.0/applications/{application_uuid}/calls/{call_id}/hold/start",
			c.HoldApplicationCall,
		},
		"InsertApplicationCallToNode": Route{
			strings.ToUpper("Put"),
			"/1.0/applications/{application_uuid}/nodes/{node_uuid}/calls/{call_id}",
			c.InsertApplicationCallToNode,
		},
		"ListApplicationSnoops": Route{
			strings.ToUpper("Get"),
			"/1.0/applications/{application_uuid}/snoops",
			c.ListApplicationSnoops,
		},
		"MuteApplicationCall": Route{
			strings.ToUpper("Put"),
			"/1.0/applications/{application_uuid}/calls/{call_id}/mute/start",
			c.MuteApplicationCall,
		},
		"PlayApplicationCall": Route{
			strings.ToUpper("Post"),
			"/1.0/applications/{application_uuid}/calls/{call_id}/playbacks",
			c.PlayApplicationCall,
		},
		"ResumeApplicationCall": Route{
			strings.ToUpper("Put"),
			"/1.0/applications/{application_uuid}/calls/{call_id}/hold/stop",
			c.ResumeApplicationCall,
		},
		"SendApplicationCallDTMF": Route{
			strings.ToUpper("Put"),
			"/1.0/applications/{application_uuid}/calls/{call_id}/dtmf",
			c.SendApplicationCallDTMF,
		},
		"SnoopApplicationCall": Route{
			strings.ToUpper("Post"),
			"/1.0/applications/{application_uuid}/calls/{call_id}/snoops",
			c.SnoopApplicationCall,
		},
		"StartApplicationCallMOH": Route{
			strings.ToUpper("Put"),
			"/1.0/applications/{application_uuid}/calls/{call_id}/moh/{moh_uuid}/start",
			c.StartApplicationCallMOH,
		},
		"StartApplicationCallProgress": Route{
			strings.ToUpper("Put"),
			"/1.0/applications/{application_uuid}/calls/{call_id}/progress/start",
			c.StartApplicationCallProgress,
		},
		"StopApplicationCallMOH": Route{
			strings.ToUpper("Put"),
			"/1.0/applications/{application_uuid}/calls/{call_id}/moh/stop",
			c.StopApplicationCallMOH,
		},
		"StopApplicationCallProgress": Route{
			strings.ToUpper("Put"),
			"/1.0/applications/{application_uuid}/calls/{call_id}/progress/stop",
			c.StopApplicationCallProgress,
		},
		"StopSnoop": Route{
			strings.ToUpper("Delete"),
			"/1.0/applications/{application_uuid}/snoops/{snoop_uuid}",
			c.StopSnoop,
		},
		"UnmuteApplicationCall": Route{
			strings.ToUpper("Put"),
			"/1.0/applications/{application_uuid}/calls/{call_id}/mute/stop",
			c.UnmuteApplicationCall,
		},
		"UpdateSnoop": Route{
			strings.ToUpper("Put"),
			"/1.0/applications/{application_uuid}/snoops/{snoop_uuid}",
			c.UpdateSnoop,
		},
	}
}

// AnswerApplicationCall - Answer a call
func (c *ApplicationsAPIController) AnswerApplicationCall(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.AnswerApplicationCall(r.Context(), applicationUuidParam, callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateApplicationCallToNode - Make a new call to the node
func (c *ApplicationsAPIController) CreateApplicationCallToNode(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	nodeUuidParam := chi.URLParam(r, "node_uuid")
	if nodeUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"node_uuid"}, nil)
		return
	}
	bodyParam := ApplicationCallRequestToExten{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApplicationCallRequestToExtenRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApplicationCallRequestToExtenConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateApplicationCallToNode(r.Context(), applicationUuidParam, nodeUuidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateApplicationCallToUser - Initiate a call to a user and insert it in the node
func (c *ApplicationsAPIController) CreateApplicationCallToUser(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	nodeUuidParam := chi.URLParam(r, "node_uuid")
	if nodeUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"node_uuid"}, nil)
		return
	}
	bodyParam := ApplicationCallRequestToUser{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApplicationCallRequestToUserRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApplicationCallRequestToUserConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateApplicationCallToUser(r.Context(), applicationUuidParam, nodeUuidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateApplicationCalls - Make a new call to the application
func (c *ApplicationsAPIController) CreateApplicationCalls(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	bodyParam := ApplicationCallRequestToExten{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApplicationCallRequestToExtenRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApplicationCallRequestToExtenConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateApplicationCalls(r.Context(), applicationUuidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateApplicationNode - Make a new node and add calls
func (c *ApplicationsAPIController) CreateApplicationNode(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	bodyParam := ApplicationNodeRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApplicationNodeRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApplicationNodeRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateApplicationNode(r.Context(), applicationUuidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteApplicationCall - Hangup a call from the application
func (c *ApplicationsAPIController) DeleteApplicationCall(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.DeleteApplicationCall(r.Context(), applicationUuidParam, callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteApplicationCallFromNode - Remove call from the node
func (c *ApplicationsAPIController) DeleteApplicationCallFromNode(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	nodeUuidParam := chi.URLParam(r, "node_uuid")
	if nodeUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"node_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.DeleteApplicationCallFromNode(r.Context(), applicationUuidParam, nodeUuidParam, callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteApplicationNode - Delete node and hangup all calls
func (c *ApplicationsAPIController) DeleteApplicationNode(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	nodeUuidParam := chi.URLParam(r, "node_uuid")
	if nodeUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"node_uuid"}, nil)
		return
	}
	result, err := c.service.DeleteApplicationNode(r.Context(), applicationUuidParam, nodeUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeletePlayback - Stop and remove playback
func (c *ApplicationsAPIController) DeletePlayback(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	playbackUuidParam := chi.URLParam(r, "playback_uuid")
	if playbackUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"playback_uuid"}, nil)
		return
	}
	result, err := c.service.DeletePlayback(r.Context(), applicationUuidParam, playbackUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetApplication - Show an application
func (c *ApplicationsAPIController) GetApplication(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	result, err := c.service.GetApplication(r.Context(), applicationUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetApplicationCalls - List calls from the application
func (c *ApplicationsAPIController) GetApplicationCalls(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	result, err := c.service.GetApplicationCalls(r.Context(), applicationUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetApplicationNodes - List nodes from the application
func (c *ApplicationsAPIController) GetApplicationNodes(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	result, err := c.service.GetApplicationNodes(r.Context(), applicationUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetNode - Show a node
func (c *ApplicationsAPIController) GetNode(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	nodeUuidParam := chi.URLParam(r, "node_uuid")
	if nodeUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"node_uuid"}, nil)
		return
	}
	result, err := c.service.GetNode(r.Context(), applicationUuidParam, nodeUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetSnoop - View snooping parameters
func (c *ApplicationsAPIController) GetSnoop(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	snoopUuidParam := chi.URLParam(r, "snoop_uuid")
	if snoopUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"snoop_uuid"}, nil)
		return
	}
	result, err := c.service.GetSnoop(r.Context(), applicationUuidParam, snoopUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// HoldApplicationCall - Place a call on hold
func (c *ApplicationsAPIController) HoldApplicationCall(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.HoldApplicationCall(r.Context(), applicationUuidParam, callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// InsertApplicationCallToNode - Insert call to the node
func (c *ApplicationsAPIController) InsertApplicationCallToNode(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	nodeUuidParam := chi.URLParam(r, "node_uuid")
	if nodeUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"node_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.InsertApplicationCallToNode(r.Context(), applicationUuidParam, nodeUuidParam, callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListApplicationSnoops - List active snoops
func (c *ApplicationsAPIController) ListApplicationSnoops(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	result, err := c.service.ListApplicationSnoops(r.Context(), applicationUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// MuteApplicationCall - Mute a call
func (c *ApplicationsAPIController) MuteApplicationCall(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.MuteApplicationCall(r.Context(), applicationUuidParam, callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// PlayApplicationCall - Play file to the call
func (c *ApplicationsAPIController) PlayApplicationCall(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	bodyParam := ApplicationPlayback{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApplicationPlaybackRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApplicationPlaybackConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PlayApplicationCall(r.Context(), applicationUuidParam, callIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ResumeApplicationCall - Resume a call that has been placed on hold
func (c *ApplicationsAPIController) ResumeApplicationCall(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.ResumeApplicationCall(r.Context(), applicationUuidParam, callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SendApplicationCallDTMF - Simulate a user pressing DTMF keys
func (c *ApplicationsAPIController) SendApplicationCallDTMF(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	var digitsParam string
	if query.Has("digits") {
		param := query.Get("digits")

		digitsParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "digits"}, nil)
		return
	}
	result, err := c.service.SendApplicationCallDTMF(r.Context(), applicationUuidParam, callIdParam, digitsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SnoopApplicationCall - Start snooping on a call
func (c *ApplicationsAPIController) SnoopApplicationCall(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	bodyParam := ApplicationSnoop{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApplicationSnoopRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApplicationSnoopConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SnoopApplicationCall(r.Context(), applicationUuidParam, callIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// StartApplicationCallMOH - Starts playing a music on hold
func (c *ApplicationsAPIController) StartApplicationCallMOH(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	mohUuidParam := chi.URLParam(r, "moh_uuid")
	if mohUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"moh_uuid"}, nil)
		return
	}
	result, err := c.service.StartApplicationCallMOH(r.Context(), applicationUuidParam, callIdParam, mohUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// StartApplicationCallProgress - Play the progress ringing tone
func (c *ApplicationsAPIController) StartApplicationCallProgress(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.StartApplicationCallProgress(r.Context(), applicationUuidParam, callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// StopApplicationCallMOH - Stops playing a music on hold
func (c *ApplicationsAPIController) StopApplicationCallMOH(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.StopApplicationCallMOH(r.Context(), applicationUuidParam, callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// StopApplicationCallProgress - Stop playing the progress ringing tone.
func (c *ApplicationsAPIController) StopApplicationCallProgress(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.StopApplicationCallProgress(r.Context(), applicationUuidParam, callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// StopSnoop - Stop snooping
func (c *ApplicationsAPIController) StopSnoop(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	snoopUuidParam := chi.URLParam(r, "snoop_uuid")
	if snoopUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"snoop_uuid"}, nil)
		return
	}
	result, err := c.service.StopSnoop(r.Context(), applicationUuidParam, snoopUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UnmuteApplicationCall - Unmute a call
func (c *ApplicationsAPIController) UnmuteApplicationCall(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.UnmuteApplicationCall(r.Context(), applicationUuidParam, callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateSnoop - Change snooping parameters
func (c *ApplicationsAPIController) UpdateSnoop(w http.ResponseWriter, r *http.Request) {
	applicationUuidParam := chi.URLParam(r, "application_uuid")
	if applicationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"application_uuid"}, nil)
		return
	}
	snoopUuidParam := chi.URLParam(r, "snoop_uuid")
	if snoopUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"snoop_uuid"}, nil)
		return
	}
	bodyParam := ApplicationSnoopPut{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApplicationSnoopPutRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApplicationSnoopPutConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSnoop(r.Context(), applicationUuidParam, snoopUuidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
