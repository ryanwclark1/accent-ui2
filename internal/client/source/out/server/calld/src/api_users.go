/*
 * accent-calld
 *
 * Control your calls from a REST API
 *
 * API version: 1.0.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package calldserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// UsersAPIController binds http requests to an api service and writes the service results to the http response
type UsersAPIController struct {
	service      UsersAPIServicer
	errorHandler ErrorHandler
}

// UsersAPIOption for how the controller is set up.
type UsersAPIOption func(*UsersAPIController)

// WithUsersAPIErrorHandler inject ErrorHandler into controller
func WithUsersAPIErrorHandler(h ErrorHandler) UsersAPIOption {
	return func(c *UsersAPIController) {
		c.errorHandler = h
	}
}

// NewUsersAPIController creates a default api controller
func NewUsersAPIController(s UsersAPIServicer, opts ...UsersAPIOption) Router {
	controller := &UsersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UsersAPIController
func (c *UsersAPIController) Routes() Routes {
	return Routes{
		"AnswerUserCall": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/calls/{call_id}/answer",
			c.AnswerUserCall,
		},
		"CancelRelocate": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/relocates/{relocate_uuid}/cancel",
			c.CancelRelocate,
		},
		"CancelUserTransfer": Route{
			strings.ToUpper("Delete"),
			"/1.0/users/me/transfers/{transfer_id}",
			c.CancelUserTransfer,
		},
		"CheckUserVoicemailGreeting": Route{
			strings.ToUpper("Head"),
			"/1.0/users/me/voicemails/greetings/{greeting}",
			c.CheckUserVoicemailGreeting,
		},
		"CompleteRelocate": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/relocates/{relocate_uuid}/complete",
			c.CompleteRelocate,
		},
		"CompleteUserTransfer": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/transfers/{transfer_id}/complete",
			c.CompleteUserTransfer,
		},
		"CopyUserVoicemailGreeting": Route{
			strings.ToUpper("Post"),
			"/1.0/users/me/voicemails/greetings/{greeting}/copy",
			c.CopyUserVoicemailGreeting,
		},
		"CreateUserCall": Route{
			strings.ToUpper("Post"),
			"/1.0/users/me/calls",
			c.CreateUserCall,
		},
		"CreateUserVoicemailGreeting": Route{
			strings.ToUpper("Post"),
			"/1.0/users/me/voicemails/greetings/{greeting}",
			c.CreateUserVoicemailGreeting,
		},
		"DeleteUserVoicemailGreeting": Route{
			strings.ToUpper("Delete"),
			"/1.0/users/me/voicemails/greetings/{greeting}",
			c.DeleteUserVoicemailGreeting,
		},
		"DeleteUserVoicemailMessage": Route{
			strings.ToUpper("Delete"),
			"/1.0/users/me/voicemails/messages/{message_id}",
			c.DeleteUserVoicemailMessage,
		},
		"GetUserVoicemailFolder": Route{
			strings.ToUpper("Get"),
			"/1.0/users/me/voicemails/folders/{folder_id}",
			c.GetUserVoicemailFolder,
		},
		"GetUserVoicemailGreeting": Route{
			strings.ToUpper("Get"),
			"/1.0/users/me/voicemails/greetings/{greeting}",
			c.GetUserVoicemailGreeting,
		},
		"GetUserVoicemailMessage": Route{
			strings.ToUpper("Get"),
			"/1.0/users/me/voicemails/messages/{message_id}",
			c.GetUserVoicemailMessage,
		},
		"GetUserVoicemailMessageRecording": Route{
			strings.ToUpper("Get"),
			"/1.0/users/me/voicemails/messages/{message_id}/recording",
			c.GetUserVoicemailMessageRecording,
		},
		"HangupUserCall": Route{
			strings.ToUpper("Delete"),
			"/1.0/users/me/calls/{call_id}",
			c.HangupUserCall,
		},
		"HoldUserCall": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/calls/{call_id}/hold/start",
			c.HoldUserCall,
		},
		"InitiateRelocate": Route{
			strings.ToUpper("Post"),
			"/1.0/users/me/relocates",
			c.InitiateRelocate,
		},
		"InitiateUserTransfer": Route{
			strings.ToUpper("Post"),
			"/1.0/users/me/transfers",
			c.InitiateUserTransfer,
		},
		"KickUserMeetingParticipant": Route{
			strings.ToUpper("Delete"),
			"/1.0/users/me/meetings/{meeting_uuid}/participants/{participant_id}",
			c.KickUserMeetingParticipant,
		},
		"ListUserCalls": Route{
			strings.ToUpper("Get"),
			"/1.0/users/me/calls",
			c.ListUserCalls,
		},
		"ListUserConferenceParticipants": Route{
			strings.ToUpper("Get"),
			"/1.0/users/me/conferences/{conference_id}/participants",
			c.ListUserConferenceParticipants,
		},
		"ListUserMeetingParticipants": Route{
			strings.ToUpper("Get"),
			"/1.0/users/me/meetings/{meeting_uuid}/participants",
			c.ListUserMeetingParticipants,
		},
		"ListUserRelocates": Route{
			strings.ToUpper("Get"),
			"/1.0/users/me/relocates",
			c.ListUserRelocates,
		},
		"ListUserTransfers": Route{
			strings.ToUpper("Get"),
			"/1.0/users/me/transfers",
			c.ListUserTransfers,
		},
		"ListUserVoicemails": Route{
			strings.ToUpper("Get"),
			"/1.0/users/me/voicemails",
			c.ListUserVoicemails,
		},
		"MuteUserCall": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/calls/{call_id}/mute/start",
			c.MuteUserCall,
		},
		"SendUserDTMF": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/calls/{call_id}/dtmf",
			c.SendUserDTMF,
		},
		"StartCurrentUserRecording": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/calls/{call_id}/record/start",
			c.StartCurrentUserRecording,
		},
		"StopCurrentUserRecording": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/calls/{call_id}/record/stop",
			c.StopCurrentUserRecording,
		},
		"UnholdUserCall": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/calls/{call_id}/hold/stop",
			c.UnholdUserCall,
		},
		"UnmuteUserCall": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/calls/{call_id}/mute/stop",
			c.UnmuteUserCall,
		},
		"UpdateUserVoicemailGreeting": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/voicemails/greetings/{greeting}",
			c.UpdateUserVoicemailGreeting,
		},
		"UpdateUserVoicemailMessage": Route{
			strings.ToUpper("Put"),
			"/1.0/users/me/voicemails/messages/{message_id}",
			c.UpdateUserVoicemailMessage,
		},
	}
}

// AnswerUserCall - Answer a call from user
func (c *UsersAPIController) AnswerUserCall(w http.ResponseWriter, r *http.Request) {
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.AnswerUserCall(r.Context(), callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CancelRelocate - Cancel a relocate
func (c *UsersAPIController) CancelRelocate(w http.ResponseWriter, r *http.Request) {
	relocateUuidParam := chi.URLParam(r, "relocate_uuid")
	if relocateUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"relocate_uuid"}, nil)
		return
	}
	result, err := c.service.CancelRelocate(r.Context(), relocateUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CancelUserTransfer - Cancel a transfer
func (c *UsersAPIController) CancelUserTransfer(w http.ResponseWriter, r *http.Request) {
	transferIdParam := chi.URLParam(r, "transfer_id")
	if transferIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"transfer_id"}, nil)
		return
	}
	result, err := c.service.CancelUserTransfer(r.Context(), transferIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CheckUserVoicemailGreeting - Check if greeting exists
func (c *UsersAPIController) CheckUserVoicemailGreeting(w http.ResponseWriter, r *http.Request) {
	greetingParam := chi.URLParam(r, "greeting")
	if greetingParam == "" {
		c.errorHandler(w, r, &RequiredError{"greeting"}, nil)
		return
	}
	result, err := c.service.CheckUserVoicemailGreeting(r.Context(), greetingParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CompleteRelocate - Complete a relocate
func (c *UsersAPIController) CompleteRelocate(w http.ResponseWriter, r *http.Request) {
	relocateUuidParam := chi.URLParam(r, "relocate_uuid")
	if relocateUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"relocate_uuid"}, nil)
		return
	}
	result, err := c.service.CompleteRelocate(r.Context(), relocateUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CompleteUserTransfer - Complete a transfer
func (c *UsersAPIController) CompleteUserTransfer(w http.ResponseWriter, r *http.Request) {
	transferIdParam := chi.URLParam(r, "transfer_id")
	if transferIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"transfer_id"}, nil)
		return
	}
	result, err := c.service.CompleteUserTransfer(r.Context(), transferIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CopyUserVoicemailGreeting - Copy a custom greeting
func (c *UsersAPIController) CopyUserVoicemailGreeting(w http.ResponseWriter, r *http.Request) {
	greetingParam := chi.URLParam(r, "greeting")
	if greetingParam == "" {
		c.errorHandler(w, r, &RequiredError{"greeting"}, nil)
		return
	}
	bodyParam := GreetingCopy{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGreetingCopyRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGreetingCopyConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CopyUserVoicemailGreeting(r.Context(), greetingParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateUserCall - Make a new call from a user
func (c *UsersAPIController) CreateUserCall(w http.ResponseWriter, r *http.Request) {
	bodyParam := UserCallRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserCallRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserCallRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateUserCall(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateUserVoicemailGreeting - Create a custom greeting
func (c *UsersAPIController) CreateUserVoicemailGreeting(w http.ResponseWriter, r *http.Request) {
	greetingParam := chi.URLParam(r, "greeting")
	if greetingParam == "" {
		c.errorHandler(w, r, &RequiredError{"greeting"}, nil)
		return
	}
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.CreateUserVoicemailGreeting(r.Context(), greetingParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteUserVoicemailGreeting - Delete a custom greeting
func (c *UsersAPIController) DeleteUserVoicemailGreeting(w http.ResponseWriter, r *http.Request) {
	greetingParam := chi.URLParam(r, "greeting")
	if greetingParam == "" {
		c.errorHandler(w, r, &RequiredError{"greeting"}, nil)
		return
	}
	result, err := c.service.DeleteUserVoicemailGreeting(r.Context(), greetingParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteUserVoicemailMessage - Delete a mesage
func (c *UsersAPIController) DeleteUserVoicemailMessage(w http.ResponseWriter, r *http.Request) {
	messageIdParam := chi.URLParam(r, "message_id")
	if messageIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"message_id"}, nil)
		return
	}
	result, err := c.service.DeleteUserVoicemailMessage(r.Context(), messageIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserVoicemailFolder - Get details of a folder
func (c *UsersAPIController) GetUserVoicemailFolder(w http.ResponseWriter, r *http.Request) {
	folderIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "folder_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetUserVoicemailFolder(r.Context(), folderIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserVoicemailGreeting - Get a custom greeting
func (c *UsersAPIController) GetUserVoicemailGreeting(w http.ResponseWriter, r *http.Request) {
	greetingParam := chi.URLParam(r, "greeting")
	if greetingParam == "" {
		c.errorHandler(w, r, &RequiredError{"greeting"}, nil)
		return
	}
	result, err := c.service.GetUserVoicemailGreeting(r.Context(), greetingParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserVoicemailMessage - Get a message
func (c *UsersAPIController) GetUserVoicemailMessage(w http.ResponseWriter, r *http.Request) {
	messageIdParam := chi.URLParam(r, "message_id")
	if messageIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"message_id"}, nil)
		return
	}
	result, err := c.service.GetUserVoicemailMessage(r.Context(), messageIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserVoicemailMessageRecording - Get a message's recording
func (c *UsersAPIController) GetUserVoicemailMessageRecording(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	messageIdParam := chi.URLParam(r, "message_id")
	if messageIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"message_id"}, nil)
		return
	}
	var tokenParam string
	if query.Has("token") {
		param := query.Get("token")

		tokenParam = param
	} else {
	}
	var downloadParam string
	if query.Has("download") {
		param := query.Get("download")

		downloadParam = param
	} else {
	}
	result, err := c.service.GetUserVoicemailMessageRecording(r.Context(), messageIdParam, tokenParam, downloadParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// HangupUserCall - Hangup a call from a user
func (c *UsersAPIController) HangupUserCall(w http.ResponseWriter, r *http.Request) {
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.HangupUserCall(r.Context(), callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// HoldUserCall - Hold a call from user
func (c *UsersAPIController) HoldUserCall(w http.ResponseWriter, r *http.Request) {
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.HoldUserCall(r.Context(), callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// InitiateRelocate - Initiate a relocate from the authenticated user
func (c *UsersAPIController) InitiateRelocate(w http.ResponseWriter, r *http.Request) {
	bodyParam := UserRelocateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserRelocateRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserRelocateRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiateRelocate(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// InitiateUserTransfer - Initiate a transfer from the authenticated user
func (c *UsersAPIController) InitiateUserTransfer(w http.ResponseWriter, r *http.Request) {
	bodyParam := UserTransferRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserTransferRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserTransferRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiateUserTransfer(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// KickUserMeetingParticipant - Kick a participant from a meeting as a user
func (c *UsersAPIController) KickUserMeetingParticipant(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	participantIdParam := chi.URLParam(r, "participant_id")
	if participantIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"participant_id"}, nil)
		return
	}
	result, err := c.service.KickUserMeetingParticipant(r.Context(), meetingUuidParam, participantIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserCalls - List calls of a user
func (c *UsersAPIController) ListUserCalls(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var applicationParam string
	if query.Has("application") {
		param := query.Get("application")

		applicationParam = param
	} else {
	}
	var applicationInstanceParam string
	if query.Has("application_instance") {
		param := query.Get("application_instance")

		applicationInstanceParam = param
	} else {
	}
	result, err := c.service.ListUserCalls(r.Context(), applicationParam, applicationInstanceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserConferenceParticipants - List participants of a conference as a user
func (c *UsersAPIController) ListUserConferenceParticipants(w http.ResponseWriter, r *http.Request) {
	conferenceIdParam := chi.URLParam(r, "conference_id")
	if conferenceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"conference_id"}, nil)
		return
	}
	result, err := c.service.ListUserConferenceParticipants(r.Context(), conferenceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserMeetingParticipants - List participants of a meeting as a user
func (c *UsersAPIController) ListUserMeetingParticipants(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	result, err := c.service.ListUserMeetingParticipants(r.Context(), meetingUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserRelocates - Get the relocates of the authenticated user
func (c *UsersAPIController) ListUserRelocates(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListUserRelocates(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserTransfers - Get the transfers of the authenticated user
func (c *UsersAPIController) ListUserTransfers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListUserTransfers(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserVoicemails - Get details of the voicemail of the authenticated user
func (c *UsersAPIController) ListUserVoicemails(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListUserVoicemails(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// MuteUserCall - Mute a call from user
func (c *UsersAPIController) MuteUserCall(w http.ResponseWriter, r *http.Request) {
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.MuteUserCall(r.Context(), callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SendUserDTMF - Simulate a user pressing DTMF keys
func (c *UsersAPIController) SendUserDTMF(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	var digitsParam string
	if query.Has("digits") {
		param := query.Get("digits")

		digitsParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "digits"}, nil)
		return
	}
	result, err := c.service.SendUserDTMF(r.Context(), callIdParam, digitsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// StartCurrentUserRecording - Start recording a call
func (c *UsersAPIController) StartCurrentUserRecording(w http.ResponseWriter, r *http.Request) {
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.StartCurrentUserRecording(r.Context(), callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// StopCurrentUserRecording - Stop recording a call
func (c *UsersAPIController) StopCurrentUserRecording(w http.ResponseWriter, r *http.Request) {
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.StopCurrentUserRecording(r.Context(), callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UnholdUserCall - Unhold a call from user
func (c *UsersAPIController) UnholdUserCall(w http.ResponseWriter, r *http.Request) {
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.UnholdUserCall(r.Context(), callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UnmuteUserCall - Unmute a call from user
func (c *UsersAPIController) UnmuteUserCall(w http.ResponseWriter, r *http.Request) {
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	result, err := c.service.UnmuteUserCall(r.Context(), callIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUserVoicemailGreeting - Update a custom greeting
func (c *UsersAPIController) UpdateUserVoicemailGreeting(w http.ResponseWriter, r *http.Request) {
	greetingParam := chi.URLParam(r, "greeting")
	if greetingParam == "" {
		c.errorHandler(w, r, &RequiredError{"greeting"}, nil)
		return
	}
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.UpdateUserVoicemailGreeting(r.Context(), greetingParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUserVoicemailMessage - Update a message
func (c *UsersAPIController) UpdateUserVoicemailMessage(w http.ResponseWriter, r *http.Request) {
	messageIdParam := chi.URLParam(r, "message_id")
	if messageIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"message_id"}, nil)
		return
	}
	bodyParam := VoicemailMessageUpdate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVoicemailMessageUpdateRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVoicemailMessageUpdateConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUserVoicemailMessage(r.Context(), messageIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
