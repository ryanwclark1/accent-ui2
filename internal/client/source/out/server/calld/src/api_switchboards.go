/*
 * accent-calld
 *
 * Control your calls from a REST API
 *
 * API version: 1.0.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package calldserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// SwitchboardsAPIController binds http requests to an api service and writes the service results to the http response
type SwitchboardsAPIController struct {
	service      SwitchboardsAPIServicer
	errorHandler ErrorHandler
}

// SwitchboardsAPIOption for how the controller is set up.
type SwitchboardsAPIOption func(*SwitchboardsAPIController)

// WithSwitchboardsAPIErrorHandler inject ErrorHandler into controller
func WithSwitchboardsAPIErrorHandler(h ErrorHandler) SwitchboardsAPIOption {
	return func(c *SwitchboardsAPIController) {
		c.errorHandler = h
	}
}

// NewSwitchboardsAPIController creates a default api controller
func NewSwitchboardsAPIController(s SwitchboardsAPIServicer, opts ...SwitchboardsAPIOption) Router {
	controller := &SwitchboardsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SwitchboardsAPIController
func (c *SwitchboardsAPIController) Routes() Routes {
	return Routes{
		"AnswerHeldCall": Route{
			strings.ToUpper("Put"),
			"/1.0/switchboards/{switchboard_uuid}/calls/held/{call_id}/answer",
			c.AnswerHeldCall,
		},
		"AnswerQueuedCall": Route{
			strings.ToUpper("Put"),
			"/1.0/switchboards/{switchboard_uuid}/calls/queued/{call_id}/answer",
			c.AnswerQueuedCall,
		},
		"HoldSwitchboardCall": Route{
			strings.ToUpper("Put"),
			"/1.0/switchboards/{switchboard_uuid}/calls/held/{call_id}",
			c.HoldSwitchboardCall,
		},
		"ListSwitchboardHeldCalls": Route{
			strings.ToUpper("Get"),
			"/1.0/switchboards/{switchboard_uuid}/calls/held",
			c.ListSwitchboardHeldCalls,
		},
		"ListSwitchboardQueuedCalls": Route{
			strings.ToUpper("Get"),
			"/1.0/switchboards/{switchboard_uuid}/calls/queued",
			c.ListSwitchboardQueuedCalls,
		},
	}
}

// AnswerHeldCall - Answer the specified held call
func (c *SwitchboardsAPIController) AnswerHeldCall(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	switchboardUuidParam := chi.URLParam(r, "switchboard_uuid")
	if switchboardUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"switchboard_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var lineIdParam int32
	if query.Has("line_id") {
		param, err := parseNumericParameter[int32](
			query.Get("line_id"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		lineIdParam = param
	} else {
	}
	result, err := c.service.AnswerHeldCall(r.Context(), switchboardUuidParam, callIdParam, accentTenantParam, lineIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// AnswerQueuedCall - Answer the specified queued call
func (c *SwitchboardsAPIController) AnswerQueuedCall(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	switchboardUuidParam := chi.URLParam(r, "switchboard_uuid")
	if switchboardUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"switchboard_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	var lineIdParam int32
	if query.Has("line_id") {
		param, err := parseNumericParameter[int32](
			query.Get("line_id"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		lineIdParam = param
	} else {
	}
	result, err := c.service.AnswerQueuedCall(r.Context(), switchboardUuidParam, callIdParam, accentTenantParam, lineIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// HoldSwitchboardCall - Put the specified call on hold in the switchboard
func (c *SwitchboardsAPIController) HoldSwitchboardCall(w http.ResponseWriter, r *http.Request) {
	switchboardUuidParam := chi.URLParam(r, "switchboard_uuid")
	if switchboardUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"switchboard_uuid"}, nil)
		return
	}
	callIdParam := chi.URLParam(r, "call_id")
	if callIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"call_id"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.HoldSwitchboardCall(r.Context(), switchboardUuidParam, callIdParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListSwitchboardHeldCalls - List calls held in the switchboard
func (c *SwitchboardsAPIController) ListSwitchboardHeldCalls(w http.ResponseWriter, r *http.Request) {
	switchboardUuidParam := chi.URLParam(r, "switchboard_uuid")
	if switchboardUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"switchboard_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.ListSwitchboardHeldCalls(r.Context(), switchboardUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListSwitchboardQueuedCalls - List calls queued in the switchboard
func (c *SwitchboardsAPIController) ListSwitchboardQueuedCalls(w http.ResponseWriter, r *http.Request) {
	switchboardUuidParam := chi.URLParam(r, "switchboard_uuid")
	if switchboardUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"switchboard_uuid"}, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.ListSwitchboardQueuedCalls(r.Context(), switchboardUuidParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
