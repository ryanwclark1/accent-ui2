/*
 * accent-calld
 *
 * Control your calls from a REST API
 *
 * API version: 1.0.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package calldserver

import (
	"encoding/json"
	"net/http"
	"strings"
	"os"

	"github.com/go-chi/chi/v5"
)

// FaxesAPIController binds http requests to an api service and writes the service results to the http response
type FaxesAPIController struct {
	service FaxesAPIServicer
	errorHandler ErrorHandler
}

// FaxesAPIOption for how the controller is set up.
type FaxesAPIOption func(*FaxesAPIController)

// WithFaxesAPIErrorHandler inject ErrorHandler into controller
func WithFaxesAPIErrorHandler(h ErrorHandler) FaxesAPIOption {
	return func(c *FaxesAPIController) {
		c.errorHandler = h
	}
}

// NewFaxesAPIController creates a default api controller
func NewFaxesAPIController(s FaxesAPIServicer, opts ...FaxesAPIOption) Router {
	controller := &FaxesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the FaxesAPIController
func (c *FaxesAPIController) Routes() Routes {
	return Routes{
		"SendFax": Route{
			strings.ToUpper("Post"),
			"/1.0/faxes",
			c.SendFax,
		},
		"SendUserFax": Route{
			strings.ToUpper("Post"),
			"/1.0/users/me/faxes",
			c.SendUserFax,
		},
	}
}

// SendFax - Send a fax
func (c *FaxesAPIController) SendFax(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var contextParam string
	if query.Has("context") {
		param := query.Get("context")

		contextParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "context"}, nil)
		return
	}
	var extensionParam string
	if query.Has("extension") {
		param := query.Get("extension")

		extensionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "extension"}, nil)
		return
	}
	faxContentParam := *os.File{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&faxContentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var callerIdParam string
	if query.Has("caller_id") {
		param := query.Get("caller_id")

		callerIdParam = param
	} else {
		param := Accent Fax
		callerIdParam = param
	}
	var ivrExtensionParam string
	if query.Has("ivr_extension") {
		param := query.Get("ivr_extension")

		ivrExtensionParam = param
	} else {
	}
	var waitTimeParam int32
	if query.Has("wait_time") {
		param, err := parseNumericParameter[int32](
			query.Get("wait_time"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		waitTimeParam = param
	} else {
	}
	result, err := c.service.SendFax(r.Context(), contextParam, extensionParam, faxContentParam, callerIdParam, ivrExtensionParam, waitTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SendUserFax - Send a fax as the user detected from the token
func (c *FaxesAPIController) SendUserFax(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var extensionParam string
	if query.Has("extension") {
		param := query.Get("extension")

		extensionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "extension"}, nil)
		return
	}
	faxContentParam := *os.File{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&faxContentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var callerIdParam string
	if query.Has("caller_id") {
		param := query.Get("caller_id")

		callerIdParam = param
	} else {
		param := Accent Fax
		callerIdParam = param
	}
	var ivrExtensionParam string
	if query.Has("ivr_extension") {
		param := query.Get("ivr_extension")

		ivrExtensionParam = param
	} else {
	}
	var waitTimeParam int32
	if query.Has("wait_time") {
		param, err := parseNumericParameter[int32](
			query.Get("wait_time"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		waitTimeParam = param
	} else {
	}
	result, err := c.service.SendUserFax(r.Context(), extensionParam, faxContentParam, callerIdParam, ivrExtensionParam, waitTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
