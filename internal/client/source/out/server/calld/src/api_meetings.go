/*
 * accent-calld
 *
 * Control your calls from a REST API
 *
 * API version: 1.0.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package calldserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// MeetingsAPIController binds http requests to an api service and writes the service results to the http response
type MeetingsAPIController struct {
	service      MeetingsAPIServicer
	errorHandler ErrorHandler
}

// MeetingsAPIOption for how the controller is set up.
type MeetingsAPIOption func(*MeetingsAPIController)

// WithMeetingsAPIErrorHandler inject ErrorHandler into controller
func WithMeetingsAPIErrorHandler(h ErrorHandler) MeetingsAPIOption {
	return func(c *MeetingsAPIController) {
		c.errorHandler = h
	}
}

// NewMeetingsAPIController creates a default api controller
func NewMeetingsAPIController(s MeetingsAPIServicer, opts ...MeetingsAPIOption) Router {
	controller := &MeetingsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MeetingsAPIController
func (c *MeetingsAPIController) Routes() Routes {
	return Routes{
		"GetGuestMeetingStatus": Route{
			strings.ToUpper("Get"),
			"/1.0/guests/me/meetings/{meeting_uuid}/status",
			c.GetGuestMeetingStatus,
		},
		"KickMeetingParticipant": Route{
			strings.ToUpper("Delete"),
			"/1.0/meetings/{meeting_uuid}/participants/{participant_id}",
			c.KickMeetingParticipant,
		},
		"KickUserMeetingParticipant": Route{
			strings.ToUpper("Delete"),
			"/1.0/users/me/meetings/{meeting_uuid}/participants/{participant_id}",
			c.KickUserMeetingParticipant,
		},
		"ListMeetingParticipants": Route{
			strings.ToUpper("Get"),
			"/1.0/meetings/{meeting_uuid}/participants",
			c.ListMeetingParticipants,
		},
		"ListUserMeetingParticipants": Route{
			strings.ToUpper("Get"),
			"/1.0/users/me/meetings/{meeting_uuid}/participants",
			c.ListUserMeetingParticipants,
		},
	}
}

// GetGuestMeetingStatus - Get the status of a meeting
func (c *MeetingsAPIController) GetGuestMeetingStatus(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	result, err := c.service.GetGuestMeetingStatus(r.Context(), meetingUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// KickMeetingParticipant - Kick a participant from a meeting
func (c *MeetingsAPIController) KickMeetingParticipant(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	participantIdParam := chi.URLParam(r, "participant_id")
	if participantIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"participant_id"}, nil)
		return
	}
	result, err := c.service.KickMeetingParticipant(r.Context(), meetingUuidParam, participantIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// KickUserMeetingParticipant - Kick a participant from a meeting as a user
func (c *MeetingsAPIController) KickUserMeetingParticipant(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	participantIdParam := chi.URLParam(r, "participant_id")
	if participantIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"participant_id"}, nil)
		return
	}
	result, err := c.service.KickUserMeetingParticipant(r.Context(), meetingUuidParam, participantIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListMeetingParticipants - List participants of a meeting
func (c *MeetingsAPIController) ListMeetingParticipants(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	result, err := c.service.ListMeetingParticipants(r.Context(), meetingUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUserMeetingParticipants - List participants of a meeting as a user
func (c *MeetingsAPIController) ListUserMeetingParticipants(w http.ResponseWriter, r *http.Request) {
	meetingUuidParam := chi.URLParam(r, "meeting_uuid")
	if meetingUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"meeting_uuid"}, nil)
		return
	}
	result, err := c.service.ListUserMeetingParticipants(r.Context(), meetingUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
