/*
 * accent-call-logd
 *
 * Consult call logs from a REST API
 *
 * API version: 1.0.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package calllogdserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// RetentionAPIController binds http requests to an api service and writes the service results to the http response
type RetentionAPIController struct {
	service      RetentionAPIServicer
	errorHandler ErrorHandler
}

// RetentionAPIOption for how the controller is set up.
type RetentionAPIOption func(*RetentionAPIController)

// WithRetentionAPIErrorHandler inject ErrorHandler into controller
func WithRetentionAPIErrorHandler(h ErrorHandler) RetentionAPIOption {
	return func(c *RetentionAPIController) {
		c.errorHandler = h
	}
}

// NewRetentionAPIController creates a default api controller
func NewRetentionAPIController(s RetentionAPIServicer, opts ...RetentionAPIOption) Router {
	controller := &RetentionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RetentionAPIController
func (c *RetentionAPIController) Routes() Routes {
	return Routes{
		"GetRetention": Route{
			strings.ToUpper("Get"),
			"/1.0/retention",
			c.GetRetention,
		},
		"UpdateRetention": Route{
			strings.ToUpper("Put"),
			"/1.0/retention",
			c.UpdateRetention,
		},
	}
}

// GetRetention - Retention configuration
func (c *RetentionAPIController) GetRetention(w http.ResponseWriter, r *http.Request) {
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.GetRetention(r.Context(), accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateRetention - Update retention configuration
func (c *RetentionAPIController) UpdateRetention(w http.ResponseWriter, r *http.Request) {
	bodyParam := Retention{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRetentionRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRetentionConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	accentTenantParam := r.Header.Get("Accent-Tenant")
	result, err := c.service.UpdateRetention(r.Context(), bodyParam, accentTenantParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
