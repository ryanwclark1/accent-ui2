/*
 * accent-plugind
 *
 * Accent's plugin management service
 *
 * API version: 0.2
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package plugindserver

import (
	"context"
	"net/http"
)



// ConfigAPIRouter defines the required methods for binding the api requests to a responses for the ConfigAPI
// The ConfigAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ConfigAPIServicer to perform the required actions, then write the service results to the http response.
type ConfigAPIRouter interface { 
	GetConfig(http.ResponseWriter, *http.Request)
}
// MarketAPIRouter defines the required methods for binding the api requests to a responses for the MarketAPI
// The MarketAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MarketAPIServicer to perform the required actions, then write the service results to the http response.
type MarketAPIRouter interface { 
	GetMarket(http.ResponseWriter, *http.Request)
	GetMarketPlugin(http.ResponseWriter, *http.Request)
}
// PluginAPIRouter defines the required methods for binding the api requests to a responses for the PluginAPI
// The PluginAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PluginAPIServicer to perform the required actions, then write the service results to the http response.
type PluginAPIRouter interface { 
	GetMarket(http.ResponseWriter, *http.Request)
	GetMarketPlugin(http.ResponseWriter, *http.Request)
	GetPlugin(http.ResponseWriter, *http.Request)
	GetPlugins(http.ResponseWriter, *http.Request)
	InstallPlugin(http.ResponseWriter, *http.Request)
	UninstallPlugin(http.ResponseWriter, *http.Request)
}
// StatusAPIRouter defines the required methods for binding the api requests to a responses for the StatusAPI
// The StatusAPIRouter implementation should parse necessary information from the http request,
// pass the data to a StatusAPIServicer to perform the required actions, then write the service results to the http response.
type StatusAPIRouter interface { 
	GetStatus(http.ResponseWriter, *http.Request)
}


// ConfigAPIServicer defines the api actions for the ConfigAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ConfigAPIServicer interface { 
	GetConfig(context.Context) (ImplResponse, error)
}


// MarketAPIServicer defines the api actions for the MarketAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MarketAPIServicer interface { 
	GetMarket(context.Context, int32, int32, string, string, string, string, string, bool) (ImplResponse, error)
	GetMarketPlugin(context.Context, string, string) (ImplResponse, error)
}


// PluginAPIServicer defines the api actions for the PluginAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PluginAPIServicer interface { 
	GetMarket(context.Context, int32, int32, string, string, string, string, string, bool) (ImplResponse, error)
	GetMarketPlugin(context.Context, string, string) (ImplResponse, error)
	GetPlugin(context.Context, string, string) (ImplResponse, error)
	GetPlugins(context.Context) (ImplResponse, error)
	InstallPlugin(context.Context, PluginInstallParameters, bool) (ImplResponse, error)
	UninstallPlugin(context.Context, string, string) (ImplResponse, error)
}


// StatusAPIServicer defines the api actions for the StatusAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StatusAPIServicer interface { 
	GetStatus(context.Context) (ImplResponse, error)
}
