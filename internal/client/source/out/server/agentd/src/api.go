/*
 * accent-agentd
 *
 * Agent service
 *
 * API version: 1.0
 * Contact: help@accentvoice.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package agentdserver

import (
	"context"
	"net/http"
)



// AgentAPIRouter defines the required methods for binding the api requests to a responses for the AgentAPI
// The AgentAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AgentAPIServicer to perform the required actions, then write the service results to the http response.
type AgentAPIRouter interface { 
	AddAgentById(http.ResponseWriter, *http.Request)
	GetAgentById(http.ResponseWriter, *http.Request)
	GetAgentByNumber(http.ResponseWriter, *http.Request)
	GetUserAgent(http.ResponseWriter, *http.Request)
	LoginAgentById(http.ResponseWriter, *http.Request)
	LoginAgentByNumber(http.ResponseWriter, *http.Request)
	LoginUserAgent(http.ResponseWriter, *http.Request)
	LogoffAgentById(http.ResponseWriter, *http.Request)
	LogoffAgentByNumber(http.ResponseWriter, *http.Request)
	LogoffUserAgent(http.ResponseWriter, *http.Request)
	PauseAgentByNumber(http.ResponseWriter, *http.Request)
	PauseUserAgent(http.ResponseWriter, *http.Request)
	RemoveAgentById(http.ResponseWriter, *http.Request)
	UnpauseAgentByNumber(http.ResponseWriter, *http.Request)
	UnpauseUserAgent(http.ResponseWriter, *http.Request)
}
// AgentsAPIRouter defines the required methods for binding the api requests to a responses for the AgentsAPI
// The AgentsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AgentsAPIServicer to perform the required actions, then write the service results to the http response.
type AgentsAPIRouter interface { 
	GetAgents(http.ResponseWriter, *http.Request)
	LogoffAgents(http.ResponseWriter, *http.Request)
	RelogAgents(http.ResponseWriter, *http.Request)
}
// StatusAPIRouter defines the required methods for binding the api requests to a responses for the StatusAPI
// The StatusAPIRouter implementation should parse necessary information from the http request,
// pass the data to a StatusAPIServicer to perform the required actions, then write the service results to the http response.
type StatusAPIRouter interface { 
	GetStatus(http.ResponseWriter, *http.Request)
}
// UserAPIRouter defines the required methods for binding the api requests to a responses for the UserAPI
// The UserAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserAPIServicer to perform the required actions, then write the service results to the http response.
type UserAPIRouter interface { 
	GetUserAgent(http.ResponseWriter, *http.Request)
	LoginUserAgent(http.ResponseWriter, *http.Request)
	LogoffUserAgent(http.ResponseWriter, *http.Request)
	PauseUserAgent(http.ResponseWriter, *http.Request)
	UnpauseUserAgent(http.ResponseWriter, *http.Request)
}


// AgentAPIServicer defines the api actions for the AgentAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AgentAPIServicer interface { 
	AddAgentById(context.Context, int32, Queue, string) (ImplResponse, error)
	GetAgentById(context.Context, int32, string) (ImplResponse, error)
	GetAgentByNumber(context.Context, string, string) (ImplResponse, error)
	GetUserAgent(context.Context, string) (ImplResponse, error)
	LoginAgentById(context.Context, int32, LoginInfo, string) (ImplResponse, error)
	LoginAgentByNumber(context.Context, string, LoginInfo, string) (ImplResponse, error)
	LoginUserAgent(context.Context, UserAgentLoginInfo, string) (ImplResponse, error)
	LogoffAgentById(context.Context, int32, string) (ImplResponse, error)
	LogoffAgentByNumber(context.Context, string, string) (ImplResponse, error)
	LogoffUserAgent(context.Context, string) (ImplResponse, error)
	PauseAgentByNumber(context.Context, string, string, AgentPauseReason) (ImplResponse, error)
	PauseUserAgent(context.Context, string, AgentPauseReason) (ImplResponse, error)
	RemoveAgentById(context.Context, int32, Queue, string) (ImplResponse, error)
	UnpauseAgentByNumber(context.Context, string, string) (ImplResponse, error)
	UnpauseUserAgent(context.Context, string) (ImplResponse, error)
}


// AgentsAPIServicer defines the api actions for the AgentsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AgentsAPIServicer interface { 
	GetAgents(context.Context, string, bool) (ImplResponse, error)
	LogoffAgents(context.Context, string) (ImplResponse, error)
	RelogAgents(context.Context, string) (ImplResponse, error)
}


// StatusAPIServicer defines the api actions for the StatusAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StatusAPIServicer interface { 
	GetStatus(context.Context) (ImplResponse, error)
}


// UserAPIServicer defines the api actions for the UserAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserAPIServicer interface { 
	GetUserAgent(context.Context, string) (ImplResponse, error)
	LoginUserAgent(context.Context, UserAgentLoginInfo, string) (ImplResponse, error)
	LogoffUserAgent(context.Context, string) (ImplResponse, error)
	PauseUserAgent(context.Context, string, AgentPauseReason) (ImplResponse, error)
	UnpauseUserAgent(context.Context, string) (ImplResponse, error)
}
